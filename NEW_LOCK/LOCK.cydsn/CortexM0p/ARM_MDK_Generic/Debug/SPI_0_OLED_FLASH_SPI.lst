L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_SPI.c"
N/***************************************************************************//**
N* \file SPI_0_OLED_FLASH_SPI.c
N* \version 4.0
N*
N* \brief
N*  This file provides the source code to the API for the SCB Component in
N*  SPI mode.
N*
N* Note:
N*
N*******************************************************************************
N* \copyright
N* Copyright 2013-2017, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#include "SPI_0_OLED_FLASH_PVT.h"
L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_PVT.h" 1
N/***************************************************************************//**
N* \file .h
N* \version 4.0
N*
N* \brief
N*  This private file provides constants and parameter values for the
N*  SCB Component.
N*  Please do not use this file or its content in your project.
N*
N* Note:
N*
N********************************************************************************
N* \copyright
N* Copyright 2013-2017, Cypress Semiconductor Corporation. All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_SCB_PVT_SPI_0_OLED_FLASH_H)
X#if !0L
N#define CY_SCB_PVT_SPI_0_OLED_FLASH_H
N
N#include "SPI_0_OLED_FLASH.h"
L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH.h" 1
N/***************************************************************************//**
N* \file SPI_0_OLED_FLASH.h
N* \version 4.0
N*
N* \brief
N*  This file provides constants and parameter values for the SCB Component.
N*
N* Note:
N*
N********************************************************************************
N* \copyright
N* Copyright 2013-2017, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_SCB_SPI_0_OLED_FLASH_H)
X#if !0L
N#define CY_SCB_SPI_0_OLED_FLASH_H
N
N#include <cydevice_trm.h>
L 1 "Generated_Source\PSoC4\cydevice_trm.h" 1
N/*******************************************************************************
N* File Name: cydevice_trm.h
N* 
N* PSoC Creator  4.2
N*
N* Description:
N* This file provides all of the address values for the entire PSoC device.
N* This file is automatically generated by PSoC Creator.
N*
N********************************************************************************
N* Copyright (c) 2007-2018 Cypress Semiconductor.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N********************************************************************************/
N
N#if !defined(CYDEVICE_TRM_H)
X#if !0L
N#define CYDEVICE_TRM_H
N#define CYDEV_FLASH_BASE 0x00000000u
N#define CYDEV_FLASH_SIZE 0x00020000u
N#define CYREG_FLASH_DATA_MBASE 0x00000000u
N#define CYREG_FLASH_DATA_MSIZE 0x00020000u
N#define CYDEV_SFLASH_BASE 0x0ffff000u
N#define CYDEV_SFLASH_SIZE 0x00000800u
N#define CYREG_SFLASH_PROT_ROW0 0x0ffff000u
N#define CYFLD_SFLASH_DATA8__OFFSET 0x00000000u
N#define CYFLD_SFLASH_DATA8__SIZE 0x00000008u
N#define CYREG_SFLASH_PROT_ROW1 0x0ffff001u
N#define CYREG_SFLASH_PROT_ROW2 0x0ffff002u
N#define CYREG_SFLASH_PROT_ROW3 0x0ffff003u
N#define CYREG_SFLASH_PROT_ROW4 0x0ffff004u
N#define CYREG_SFLASH_PROT_ROW5 0x0ffff005u
N#define CYREG_SFLASH_PROT_ROW6 0x0ffff006u
N#define CYREG_SFLASH_PROT_ROW7 0x0ffff007u
N#define CYREG_SFLASH_PROT_ROW8 0x0ffff008u
N#define CYREG_SFLASH_PROT_ROW9 0x0ffff009u
N#define CYREG_SFLASH_PROT_ROW10 0x0ffff00au
N#define CYREG_SFLASH_PROT_ROW11 0x0ffff00bu
N#define CYREG_SFLASH_PROT_ROW12 0x0ffff00cu
N#define CYREG_SFLASH_PROT_ROW13 0x0ffff00du
N#define CYREG_SFLASH_PROT_ROW14 0x0ffff00eu
N#define CYREG_SFLASH_PROT_ROW15 0x0ffff00fu
N#define CYREG_SFLASH_PROT_ROW16 0x0ffff010u
N#define CYREG_SFLASH_PROT_ROW17 0x0ffff011u
N#define CYREG_SFLASH_PROT_ROW18 0x0ffff012u
N#define CYREG_SFLASH_PROT_ROW19 0x0ffff013u
N#define CYREG_SFLASH_PROT_ROW20 0x0ffff014u
N#define CYREG_SFLASH_PROT_ROW21 0x0ffff015u
N#define CYREG_SFLASH_PROT_ROW22 0x0ffff016u
N#define CYREG_SFLASH_PROT_ROW23 0x0ffff017u
N#define CYREG_SFLASH_PROT_ROW24 0x0ffff018u
N#define CYREG_SFLASH_PROT_ROW25 0x0ffff019u
N#define CYREG_SFLASH_PROT_ROW26 0x0ffff01au
N#define CYREG_SFLASH_PROT_ROW27 0x0ffff01bu
N#define CYREG_SFLASH_PROT_ROW28 0x0ffff01cu
N#define CYREG_SFLASH_PROT_ROW29 0x0ffff01du
N#define CYREG_SFLASH_PROT_ROW30 0x0ffff01eu
N#define CYREG_SFLASH_PROT_ROW31 0x0ffff01fu
N#define CYREG_SFLASH_PROT_ROW32 0x0ffff020u
N#define CYREG_SFLASH_PROT_ROW33 0x0ffff021u
N#define CYREG_SFLASH_PROT_ROW34 0x0ffff022u
N#define CYREG_SFLASH_PROT_ROW35 0x0ffff023u
N#define CYREG_SFLASH_PROT_ROW36 0x0ffff024u
N#define CYREG_SFLASH_PROT_ROW37 0x0ffff025u
N#define CYREG_SFLASH_PROT_ROW38 0x0ffff026u
N#define CYREG_SFLASH_PROT_ROW39 0x0ffff027u
N#define CYREG_SFLASH_PROT_ROW40 0x0ffff028u
N#define CYREG_SFLASH_PROT_ROW41 0x0ffff029u
N#define CYREG_SFLASH_PROT_ROW42 0x0ffff02au
N#define CYREG_SFLASH_PROT_ROW43 0x0ffff02bu
N#define CYREG_SFLASH_PROT_ROW44 0x0ffff02cu
N#define CYREG_SFLASH_PROT_ROW45 0x0ffff02du
N#define CYREG_SFLASH_PROT_ROW46 0x0ffff02eu
N#define CYREG_SFLASH_PROT_ROW47 0x0ffff02fu
N#define CYREG_SFLASH_PROT_ROW48 0x0ffff030u
N#define CYREG_SFLASH_PROT_ROW49 0x0ffff031u
N#define CYREG_SFLASH_PROT_ROW50 0x0ffff032u
N#define CYREG_SFLASH_PROT_ROW51 0x0ffff033u
N#define CYREG_SFLASH_PROT_ROW52 0x0ffff034u
N#define CYREG_SFLASH_PROT_ROW53 0x0ffff035u
N#define CYREG_SFLASH_PROT_ROW54 0x0ffff036u
N#define CYREG_SFLASH_PROT_ROW55 0x0ffff037u
N#define CYREG_SFLASH_PROT_ROW56 0x0ffff038u
N#define CYREG_SFLASH_PROT_ROW57 0x0ffff039u
N#define CYREG_SFLASH_PROT_ROW58 0x0ffff03au
N#define CYREG_SFLASH_PROT_ROW59 0x0ffff03bu
N#define CYREG_SFLASH_PROT_ROW60 0x0ffff03cu
N#define CYREG_SFLASH_PROT_ROW61 0x0ffff03du
N#define CYREG_SFLASH_PROT_ROW62 0x0ffff03eu
N#define CYREG_SFLASH_PROT_ROW63 0x0ffff03fu
N#define CYREG_SFLASH_PROT_PROTECTION 0x0ffff0ffu
N#define CYFLD_SFLASH_PROT_LEVEL__OFFSET 0x00000000u
N#define CYFLD_SFLASH_PROT_LEVEL__SIZE 0x00000002u
N#define CYVAL_SFLASH_PROT_LEVEL_VIRGIN 0x00000001u
N#define CYVAL_SFLASH_PROT_LEVEL_OPEN 0x00000000u
N#define CYVAL_SFLASH_PROT_LEVEL_PROTECTED 0x00000002u
N#define CYVAL_SFLASH_PROT_LEVEL_KILL 0x00000003u
N#define CYREG_SFLASH_AV_PAIRS_8B0 0x0ffff100u
N#define CYREG_SFLASH_AV_PAIRS_8B1 0x0ffff101u
N#define CYREG_SFLASH_AV_PAIRS_8B2 0x0ffff102u
N#define CYREG_SFLASH_AV_PAIRS_8B3 0x0ffff103u
N#define CYREG_SFLASH_AV_PAIRS_8B4 0x0ffff104u
N#define CYREG_SFLASH_AV_PAIRS_8B5 0x0ffff105u
N#define CYREG_SFLASH_AV_PAIRS_8B6 0x0ffff106u
N#define CYREG_SFLASH_AV_PAIRS_8B7 0x0ffff107u
N#define CYREG_SFLASH_AV_PAIRS_8B8 0x0ffff108u
N#define CYREG_SFLASH_AV_PAIRS_8B9 0x0ffff109u
N#define CYREG_SFLASH_AV_PAIRS_8B10 0x0ffff10au
N#define CYREG_SFLASH_AV_PAIRS_8B11 0x0ffff10bu
N#define CYREG_SFLASH_AV_PAIRS_8B12 0x0ffff10cu
N#define CYREG_SFLASH_AV_PAIRS_8B13 0x0ffff10du
N#define CYREG_SFLASH_AV_PAIRS_8B14 0x0ffff10eu
N#define CYREG_SFLASH_AV_PAIRS_8B15 0x0ffff10fu
N#define CYREG_SFLASH_AV_PAIRS_8B16 0x0ffff110u
N#define CYREG_SFLASH_AV_PAIRS_8B17 0x0ffff111u
N#define CYREG_SFLASH_AV_PAIRS_8B18 0x0ffff112u
N#define CYREG_SFLASH_AV_PAIRS_8B19 0x0ffff113u
N#define CYREG_SFLASH_AV_PAIRS_8B20 0x0ffff114u
N#define CYREG_SFLASH_AV_PAIRS_8B21 0x0ffff115u
N#define CYREG_SFLASH_AV_PAIRS_8B22 0x0ffff116u
N#define CYREG_SFLASH_AV_PAIRS_8B23 0x0ffff117u
N#define CYREG_SFLASH_AV_PAIRS_8B24 0x0ffff118u
N#define CYREG_SFLASH_AV_PAIRS_8B25 0x0ffff119u
N#define CYREG_SFLASH_AV_PAIRS_8B26 0x0ffff11au
N#define CYREG_SFLASH_AV_PAIRS_8B27 0x0ffff11bu
N#define CYREG_SFLASH_AV_PAIRS_8B28 0x0ffff11cu
N#define CYREG_SFLASH_AV_PAIRS_8B29 0x0ffff11du
N#define CYREG_SFLASH_AV_PAIRS_8B30 0x0ffff11eu
N#define CYREG_SFLASH_AV_PAIRS_8B31 0x0ffff11fu
N#define CYREG_SFLASH_AV_PAIRS_8B32 0x0ffff120u
N#define CYREG_SFLASH_AV_PAIRS_8B33 0x0ffff121u
N#define CYREG_SFLASH_AV_PAIRS_8B34 0x0ffff122u
N#define CYREG_SFLASH_AV_PAIRS_8B35 0x0ffff123u
N#define CYREG_SFLASH_AV_PAIRS_8B36 0x0ffff124u
N#define CYREG_SFLASH_AV_PAIRS_8B37 0x0ffff125u
N#define CYREG_SFLASH_AV_PAIRS_8B38 0x0ffff126u
N#define CYREG_SFLASH_AV_PAIRS_8B39 0x0ffff127u
N#define CYREG_SFLASH_AV_PAIRS_8B40 0x0ffff128u
N#define CYREG_SFLASH_AV_PAIRS_8B41 0x0ffff129u
N#define CYREG_SFLASH_AV_PAIRS_8B42 0x0ffff12au
N#define CYREG_SFLASH_AV_PAIRS_8B43 0x0ffff12bu
N#define CYREG_SFLASH_AV_PAIRS_8B44 0x0ffff12cu
N#define CYREG_SFLASH_AV_PAIRS_8B45 0x0ffff12du
N#define CYREG_SFLASH_AV_PAIRS_8B46 0x0ffff12eu
N#define CYREG_SFLASH_AV_PAIRS_8B47 0x0ffff12fu
N#define CYREG_SFLASH_AV_PAIRS_8B48 0x0ffff130u
N#define CYREG_SFLASH_AV_PAIRS_8B49 0x0ffff131u
N#define CYREG_SFLASH_AV_PAIRS_8B50 0x0ffff132u
N#define CYREG_SFLASH_AV_PAIRS_8B51 0x0ffff133u
N#define CYREG_SFLASH_AV_PAIRS_8B52 0x0ffff134u
N#define CYREG_SFLASH_AV_PAIRS_8B53 0x0ffff135u
N#define CYREG_SFLASH_AV_PAIRS_8B54 0x0ffff136u
N#define CYREG_SFLASH_AV_PAIRS_8B55 0x0ffff137u
N#define CYREG_SFLASH_AV_PAIRS_8B56 0x0ffff138u
N#define CYREG_SFLASH_AV_PAIRS_8B57 0x0ffff139u
N#define CYREG_SFLASH_AV_PAIRS_8B58 0x0ffff13au
N#define CYREG_SFLASH_AV_PAIRS_8B59 0x0ffff13bu
N#define CYREG_SFLASH_AV_PAIRS_8B60 0x0ffff13cu
N#define CYREG_SFLASH_AV_PAIRS_8B61 0x0ffff13du
N#define CYREG_SFLASH_AV_PAIRS_8B62 0x0ffff13eu
N#define CYREG_SFLASH_AV_PAIRS_8B63 0x0ffff13fu
N#define CYREG_SFLASH_AV_PAIRS_8B64 0x0ffff140u
N#define CYREG_SFLASH_AV_PAIRS_8B65 0x0ffff141u
N#define CYREG_SFLASH_AV_PAIRS_8B66 0x0ffff142u
N#define CYREG_SFLASH_AV_PAIRS_8B67 0x0ffff143u
N#define CYREG_SFLASH_AV_PAIRS_8B68 0x0ffff144u
N#define CYREG_SFLASH_AV_PAIRS_8B69 0x0ffff145u
N#define CYREG_SFLASH_AV_PAIRS_8B70 0x0ffff146u
N#define CYREG_SFLASH_AV_PAIRS_8B71 0x0ffff147u
N#define CYREG_SFLASH_AV_PAIRS_8B72 0x0ffff148u
N#define CYREG_SFLASH_AV_PAIRS_8B73 0x0ffff149u
N#define CYREG_SFLASH_AV_PAIRS_8B74 0x0ffff14au
N#define CYREG_SFLASH_AV_PAIRS_8B75 0x0ffff14bu
N#define CYREG_SFLASH_AV_PAIRS_8B76 0x0ffff14cu
N#define CYREG_SFLASH_AV_PAIRS_8B77 0x0ffff14du
N#define CYREG_SFLASH_AV_PAIRS_8B78 0x0ffff14eu
N#define CYREG_SFLASH_AV_PAIRS_8B79 0x0ffff14fu
N#define CYREG_SFLASH_AV_PAIRS_8B80 0x0ffff150u
N#define CYREG_SFLASH_AV_PAIRS_8B81 0x0ffff151u
N#define CYREG_SFLASH_AV_PAIRS_8B82 0x0ffff152u
N#define CYREG_SFLASH_AV_PAIRS_8B83 0x0ffff153u
N#define CYREG_SFLASH_AV_PAIRS_8B84 0x0ffff154u
N#define CYREG_SFLASH_AV_PAIRS_8B85 0x0ffff155u
N#define CYREG_SFLASH_AV_PAIRS_8B86 0x0ffff156u
N#define CYREG_SFLASH_AV_PAIRS_8B87 0x0ffff157u
N#define CYREG_SFLASH_AV_PAIRS_8B88 0x0ffff158u
N#define CYREG_SFLASH_AV_PAIRS_8B89 0x0ffff159u
N#define CYREG_SFLASH_AV_PAIRS_8B90 0x0ffff15au
N#define CYREG_SFLASH_AV_PAIRS_8B91 0x0ffff15bu
N#define CYREG_SFLASH_AV_PAIRS_8B92 0x0ffff15cu
N#define CYREG_SFLASH_AV_PAIRS_8B93 0x0ffff15du
N#define CYREG_SFLASH_AV_PAIRS_8B94 0x0ffff15eu
N#define CYREG_SFLASH_AV_PAIRS_8B95 0x0ffff15fu
N#define CYREG_SFLASH_AV_PAIRS_8B96 0x0ffff160u
N#define CYREG_SFLASH_AV_PAIRS_8B97 0x0ffff161u
N#define CYREG_SFLASH_AV_PAIRS_8B98 0x0ffff162u
N#define CYREG_SFLASH_AV_PAIRS_8B99 0x0ffff163u
N#define CYREG_SFLASH_AV_PAIRS_8B100 0x0ffff164u
N#define CYREG_SFLASH_AV_PAIRS_8B101 0x0ffff165u
N#define CYREG_SFLASH_AV_PAIRS_8B102 0x0ffff166u
N#define CYREG_SFLASH_AV_PAIRS_8B103 0x0ffff167u
N#define CYREG_SFLASH_AV_PAIRS_8B104 0x0ffff168u
N#define CYREG_SFLASH_AV_PAIRS_8B105 0x0ffff169u
N#define CYREG_SFLASH_AV_PAIRS_8B106 0x0ffff16au
N#define CYREG_SFLASH_AV_PAIRS_8B107 0x0ffff16bu
N#define CYREG_SFLASH_AV_PAIRS_8B108 0x0ffff16cu
N#define CYREG_SFLASH_AV_PAIRS_8B109 0x0ffff16du
N#define CYREG_SFLASH_AV_PAIRS_8B110 0x0ffff16eu
N#define CYREG_SFLASH_AV_PAIRS_8B111 0x0ffff16fu
N#define CYREG_SFLASH_AV_PAIRS_8B112 0x0ffff170u
N#define CYREG_SFLASH_AV_PAIRS_8B113 0x0ffff171u
N#define CYREG_SFLASH_AV_PAIRS_8B114 0x0ffff172u
N#define CYREG_SFLASH_AV_PAIRS_8B115 0x0ffff173u
N#define CYREG_SFLASH_AV_PAIRS_8B116 0x0ffff174u
N#define CYREG_SFLASH_AV_PAIRS_8B117 0x0ffff175u
N#define CYREG_SFLASH_AV_PAIRS_8B118 0x0ffff176u
N#define CYREG_SFLASH_AV_PAIRS_8B119 0x0ffff177u
N#define CYREG_SFLASH_AV_PAIRS_8B120 0x0ffff178u
N#define CYREG_SFLASH_AV_PAIRS_8B121 0x0ffff179u
N#define CYREG_SFLASH_AV_PAIRS_8B122 0x0ffff17au
N#define CYREG_SFLASH_AV_PAIRS_8B123 0x0ffff17bu
N#define CYREG_SFLASH_AV_PAIRS_8B124 0x0ffff17cu
N#define CYREG_SFLASH_AV_PAIRS_8B125 0x0ffff17du
N#define CYREG_SFLASH_AV_PAIRS_8B126 0x0ffff17eu
N#define CYREG_SFLASH_AV_PAIRS_8B127 0x0ffff17fu
N#define CYREG_SFLASH_AV_PAIRS_32B0 0x0ffff200u
N#define CYFLD_SFLASH_DATA32__OFFSET 0x00000000u
N#define CYFLD_SFLASH_DATA32__SIZE 0x00000020u
N#define CYREG_SFLASH_AV_PAIRS_32B1 0x0ffff204u
N#define CYREG_SFLASH_AV_PAIRS_32B2 0x0ffff208u
N#define CYREG_SFLASH_AV_PAIRS_32B3 0x0ffff20cu
N#define CYREG_SFLASH_AV_PAIRS_32B4 0x0ffff210u
N#define CYREG_SFLASH_AV_PAIRS_32B5 0x0ffff214u
N#define CYREG_SFLASH_AV_PAIRS_32B6 0x0ffff218u
N#define CYREG_SFLASH_AV_PAIRS_32B7 0x0ffff21cu
N#define CYREG_SFLASH_AV_PAIRS_32B8 0x0ffff220u
N#define CYREG_SFLASH_AV_PAIRS_32B9 0x0ffff224u
N#define CYREG_SFLASH_AV_PAIRS_32B10 0x0ffff228u
N#define CYREG_SFLASH_AV_PAIRS_32B11 0x0ffff22cu
N#define CYREG_SFLASH_AV_PAIRS_32B12 0x0ffff230u
N#define CYREG_SFLASH_AV_PAIRS_32B13 0x0ffff234u
N#define CYREG_SFLASH_AV_PAIRS_32B14 0x0ffff238u
N#define CYREG_SFLASH_AV_PAIRS_32B15 0x0ffff23cu
N#define CYREG_SFLASH_SILICON_ID 0x0ffff244u
N#define CYFLD_SFLASH_ID__OFFSET 0x00000000u
N#define CYFLD_SFLASH_ID__SIZE 0x00000010u
N#define CYREG_SFLASH_HIB_KEY_DELAY 0x0ffff250u
N#define CYFLD_SFLASH_WAKEUP_HOLDOFF__OFFSET 0x00000000u
N#define CYFLD_SFLASH_WAKEUP_HOLDOFF__SIZE 0x0000000au
N#define CYREG_SFLASH_DPSLP_KEY_DELAY 0x0ffff252u
N#define CYREG_SFLASH_SWD_CONFIG 0x0ffff254u
N#define CYFLD_SFLASH_SWD_SELECT__OFFSET 0x00000000u
N#define CYFLD_SFLASH_SWD_SELECT__SIZE 0x00000001u
N#define CYREG_SFLASH_SWD_LISTEN 0x0ffff258u
N#define CYFLD_SFLASH_CYCLES__OFFSET 0x00000000u
N#define CYFLD_SFLASH_CYCLES__SIZE 0x00000020u
N#define CYREG_SFLASH_FLASH_START 0x0ffff25cu
N#define CYFLD_SFLASH_ADDRESS__OFFSET 0x00000000u
N#define CYFLD_SFLASH_ADDRESS__SIZE 0x00000020u
N#define CYREG_SFLASH_CSDV2_CSD0_ADC_TRIM1 0x0ffff260u
N#define CYFLD_SFLASH_CSD_ADC_CAL_LSB__OFFSET 0x00000000u
N#define CYFLD_SFLASH_CSD_ADC_CAL_LSB__SIZE 0x00000008u
N#define CYREG_SFLASH_CSDV2_CSD0_ADC_TRIM2 0x0ffff261u
N#define CYFLD_SFLASH_CSD_ADC_CAL_MSB__OFFSET 0x00000000u
N#define CYFLD_SFLASH_CSD_ADC_CAL_MSB__SIZE 0x00000008u
N#define CYREG_SFLASH_SAR_TEMP_MULTIPLIER 0x0ffff264u
N#define CYFLD_SFLASH_TEMP_MULTIPLIER__OFFSET 0x00000000u
N#define CYFLD_SFLASH_TEMP_MULTIPLIER__SIZE 0x00000010u
N#define CYREG_SFLASH_SAR_TEMP_OFFSET 0x0ffff266u
N#define CYFLD_SFLASH_TEMP_OFFSET__OFFSET 0x00000000u
N#define CYFLD_SFLASH_TEMP_OFFSET__SIZE 0x00000010u
N#define CYREG_SFLASH_PROT_VIRGINKEY0 0x0ffff270u
N#define CYFLD_SFLASH_KEY8__OFFSET 0x00000000u
N#define CYFLD_SFLASH_KEY8__SIZE 0x00000008u
N#define CYREG_SFLASH_PROT_VIRGINKEY1 0x0ffff271u
N#define CYREG_SFLASH_PROT_VIRGINKEY2 0x0ffff272u
N#define CYREG_SFLASH_PROT_VIRGINKEY3 0x0ffff273u
N#define CYREG_SFLASH_PROT_VIRGINKEY4 0x0ffff274u
N#define CYREG_SFLASH_PROT_VIRGINKEY5 0x0ffff275u
N#define CYREG_SFLASH_PROT_VIRGINKEY6 0x0ffff276u
N#define CYREG_SFLASH_PROT_VIRGINKEY7 0x0ffff277u
N#define CYREG_SFLASH_DIE_LOT0 0x0ffff278u
N#define CYFLD_SFLASH_LOT__OFFSET 0x00000000u
N#define CYFLD_SFLASH_LOT__SIZE 0x00000008u
N#define CYREG_SFLASH_DIE_LOT1 0x0ffff279u
N#define CYREG_SFLASH_DIE_LOT2 0x0ffff27au
N#define CYREG_SFLASH_DIE_WAFER 0x0ffff27bu
N#define CYFLD_SFLASH_WAFER__OFFSET 0x00000000u
N#define CYFLD_SFLASH_WAFER__SIZE 0x00000008u
N#define CYREG_SFLASH_DIE_X 0x0ffff27cu
N#define CYFLD_SFLASH_X__OFFSET 0x00000000u
N#define CYFLD_SFLASH_X__SIZE 0x00000008u
N#define CYREG_SFLASH_DIE_Y 0x0ffff27du
N#define CYFLD_SFLASH_Y__OFFSET 0x00000000u
N#define CYFLD_SFLASH_Y__SIZE 0x00000008u
N#define CYREG_SFLASH_DIE_SORT 0x0ffff27eu
N#define CYFLD_SFLASH_S1_PASS__OFFSET 0x00000000u
N#define CYFLD_SFLASH_S1_PASS__SIZE 0x00000001u
N#define CYFLD_SFLASH_S2_PASS__OFFSET 0x00000001u
N#define CYFLD_SFLASH_S2_PASS__SIZE 0x00000001u
N#define CYFLD_SFLASH_S3_PASS__OFFSET 0x00000002u
N#define CYFLD_SFLASH_S3_PASS__SIZE 0x00000001u
N#define CYFLD_SFLASH_CRI_PASS__OFFSET 0x00000003u
N#define CYFLD_SFLASH_CRI_PASS__SIZE 0x00000001u
N#define CYFLD_SFLASH_CHI_PASS__OFFSET 0x00000004u
N#define CYFLD_SFLASH_CHI_PASS__SIZE 0x00000001u
N#define CYFLD_SFLASH_ENG_PASS__OFFSET 0x00000005u
N#define CYFLD_SFLASH_ENG_PASS__SIZE 0x00000001u
N#define CYREG_SFLASH_DIE_MINOR 0x0ffff27fu
N#define CYFLD_SFLASH_MINOR__OFFSET 0x00000000u
N#define CYFLD_SFLASH_MINOR__SIZE 0x00000008u
N#define CYREG_SFLASH_IMO_TRIM_USBMODE_24 0x0ffff33eu
N#define CYFLD_SFLASH_TRIM_24__OFFSET 0x00000000u
N#define CYFLD_SFLASH_TRIM_24__SIZE 0x00000008u
N#define CYREG_SFLASH_IMO_TRIM_USBMODE_48 0x0ffff33fu
N#define CYREG_SFLASH_IMO_TCTRIM_LT0 0x0ffff34cu
N#define CYFLD_SFLASH_STEPSIZE__OFFSET 0x00000000u
N#define CYFLD_SFLASH_STEPSIZE__SIZE 0x00000005u
N#define CYFLD_SFLASH_TCTRIM__OFFSET 0x00000005u
N#define CYFLD_SFLASH_TCTRIM__SIZE 0x00000002u
N#define CYREG_SFLASH_IMO_TCTRIM_LT1 0x0ffff34du
N#define CYREG_SFLASH_IMO_TCTRIM_LT2 0x0ffff34eu
N#define CYREG_SFLASH_IMO_TCTRIM_LT3 0x0ffff34fu
N#define CYREG_SFLASH_IMO_TCTRIM_LT4 0x0ffff350u
N#define CYREG_SFLASH_IMO_TCTRIM_LT5 0x0ffff351u
N#define CYREG_SFLASH_IMO_TCTRIM_LT6 0x0ffff352u
N#define CYREG_SFLASH_IMO_TCTRIM_LT7 0x0ffff353u
N#define CYREG_SFLASH_IMO_TCTRIM_LT8 0x0ffff354u
N#define CYREG_SFLASH_IMO_TCTRIM_LT9 0x0ffff355u
N#define CYREG_SFLASH_IMO_TCTRIM_LT10 0x0ffff356u
N#define CYREG_SFLASH_IMO_TCTRIM_LT11 0x0ffff357u
N#define CYREG_SFLASH_IMO_TCTRIM_LT12 0x0ffff358u
N#define CYREG_SFLASH_IMO_TCTRIM_LT13 0x0ffff359u
N#define CYREG_SFLASH_IMO_TCTRIM_LT14 0x0ffff35au
N#define CYREG_SFLASH_IMO_TCTRIM_LT15 0x0ffff35bu
N#define CYREG_SFLASH_IMO_TCTRIM_LT16 0x0ffff35cu
N#define CYREG_SFLASH_IMO_TCTRIM_LT17 0x0ffff35du
N#define CYREG_SFLASH_IMO_TCTRIM_LT18 0x0ffff35eu
N#define CYREG_SFLASH_IMO_TCTRIM_LT19 0x0ffff35fu
N#define CYREG_SFLASH_IMO_TCTRIM_LT20 0x0ffff360u
N#define CYREG_SFLASH_IMO_TCTRIM_LT21 0x0ffff361u
N#define CYREG_SFLASH_IMO_TCTRIM_LT22 0x0ffff362u
N#define CYREG_SFLASH_IMO_TCTRIM_LT23 0x0ffff363u
N#define CYREG_SFLASH_IMO_TCTRIM_LT24 0x0ffff364u
N#define CYREG_SFLASH_IMO_TRIM_LT0 0x0ffff365u
N#define CYFLD_SFLASH_OFFSET__OFFSET 0x00000000u
N#define CYFLD_SFLASH_OFFSET__SIZE 0x00000008u
N#define CYREG_SFLASH_IMO_TRIM_LT1 0x0ffff366u
N#define CYREG_SFLASH_IMO_TRIM_LT2 0x0ffff367u
N#define CYREG_SFLASH_IMO_TRIM_LT3 0x0ffff368u
N#define CYREG_SFLASH_IMO_TRIM_LT4 0x0ffff369u
N#define CYREG_SFLASH_IMO_TRIM_LT5 0x0ffff36au
N#define CYREG_SFLASH_IMO_TRIM_LT6 0x0ffff36bu
N#define CYREG_SFLASH_IMO_TRIM_LT7 0x0ffff36cu
N#define CYREG_SFLASH_IMO_TRIM_LT8 0x0ffff36du
N#define CYREG_SFLASH_IMO_TRIM_LT9 0x0ffff36eu
N#define CYREG_SFLASH_IMO_TRIM_LT10 0x0ffff36fu
N#define CYREG_SFLASH_IMO_TRIM_LT11 0x0ffff370u
N#define CYREG_SFLASH_IMO_TRIM_LT12 0x0ffff371u
N#define CYREG_SFLASH_IMO_TRIM_LT13 0x0ffff372u
N#define CYREG_SFLASH_IMO_TRIM_LT14 0x0ffff373u
N#define CYREG_SFLASH_IMO_TRIM_LT15 0x0ffff374u
N#define CYREG_SFLASH_IMO_TRIM_LT16 0x0ffff375u
N#define CYREG_SFLASH_IMO_TRIM_LT17 0x0ffff376u
N#define CYREG_SFLASH_IMO_TRIM_LT18 0x0ffff377u
N#define CYREG_SFLASH_IMO_TRIM_LT19 0x0ffff378u
N#define CYREG_SFLASH_IMO_TRIM_LT20 0x0ffff379u
N#define CYREG_SFLASH_IMO_TRIM_LT21 0x0ffff37au
N#define CYREG_SFLASH_IMO_TRIM_LT22 0x0ffff37bu
N#define CYREG_SFLASH_IMO_TRIM_LT23 0x0ffff37cu
N#define CYREG_SFLASH_IMO_TRIM_LT24 0x0ffff37du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH0 0x0ffff400u
N#define CYFLD_SFLASH_BYTE_MEM__OFFSET 0x00000000u
N#define CYFLD_SFLASH_BYTE_MEM__SIZE 0x00000008u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1 0x0ffff401u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH2 0x0ffff402u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH3 0x0ffff403u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH4 0x0ffff404u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH5 0x0ffff405u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH6 0x0ffff406u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH7 0x0ffff407u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH8 0x0ffff408u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH9 0x0ffff409u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH10 0x0ffff40au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH11 0x0ffff40bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH12 0x0ffff40cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH13 0x0ffff40du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH14 0x0ffff40eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH15 0x0ffff40fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH16 0x0ffff410u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH17 0x0ffff411u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH18 0x0ffff412u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH19 0x0ffff413u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH20 0x0ffff414u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH21 0x0ffff415u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH22 0x0ffff416u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH23 0x0ffff417u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH24 0x0ffff418u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH25 0x0ffff419u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH26 0x0ffff41au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH27 0x0ffff41bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH28 0x0ffff41cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH29 0x0ffff41du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH30 0x0ffff41eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH31 0x0ffff41fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH32 0x0ffff420u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH33 0x0ffff421u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH34 0x0ffff422u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH35 0x0ffff423u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH36 0x0ffff424u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH37 0x0ffff425u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH38 0x0ffff426u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH39 0x0ffff427u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH40 0x0ffff428u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH41 0x0ffff429u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH42 0x0ffff42au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH43 0x0ffff42bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH44 0x0ffff42cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH45 0x0ffff42du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH46 0x0ffff42eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH47 0x0ffff42fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH48 0x0ffff430u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH49 0x0ffff431u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH50 0x0ffff432u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH51 0x0ffff433u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH52 0x0ffff434u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH53 0x0ffff435u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH54 0x0ffff436u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH55 0x0ffff437u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH56 0x0ffff438u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH57 0x0ffff439u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH58 0x0ffff43au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH59 0x0ffff43bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH60 0x0ffff43cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH61 0x0ffff43du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH62 0x0ffff43eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH63 0x0ffff43fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH64 0x0ffff440u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH65 0x0ffff441u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH66 0x0ffff442u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH67 0x0ffff443u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH68 0x0ffff444u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH69 0x0ffff445u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH70 0x0ffff446u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH71 0x0ffff447u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH72 0x0ffff448u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH73 0x0ffff449u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH74 0x0ffff44au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH75 0x0ffff44bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH76 0x0ffff44cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH77 0x0ffff44du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH78 0x0ffff44eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH79 0x0ffff44fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH80 0x0ffff450u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH81 0x0ffff451u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH82 0x0ffff452u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH83 0x0ffff453u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH84 0x0ffff454u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH85 0x0ffff455u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH86 0x0ffff456u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH87 0x0ffff457u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH88 0x0ffff458u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH89 0x0ffff459u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH90 0x0ffff45au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH91 0x0ffff45bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH92 0x0ffff45cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH93 0x0ffff45du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH94 0x0ffff45eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH95 0x0ffff45fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH96 0x0ffff460u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH97 0x0ffff461u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH98 0x0ffff462u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH99 0x0ffff463u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH100 0x0ffff464u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH101 0x0ffff465u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH102 0x0ffff466u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH103 0x0ffff467u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH104 0x0ffff468u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH105 0x0ffff469u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH106 0x0ffff46au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH107 0x0ffff46bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH108 0x0ffff46cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH109 0x0ffff46du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH110 0x0ffff46eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH111 0x0ffff46fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH112 0x0ffff470u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH113 0x0ffff471u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH114 0x0ffff472u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH115 0x0ffff473u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH116 0x0ffff474u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH117 0x0ffff475u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH118 0x0ffff476u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH119 0x0ffff477u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH120 0x0ffff478u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH121 0x0ffff479u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH122 0x0ffff47au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH123 0x0ffff47bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH124 0x0ffff47cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH125 0x0ffff47du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH126 0x0ffff47eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH127 0x0ffff47fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH128 0x0ffff480u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH129 0x0ffff481u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH130 0x0ffff482u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH131 0x0ffff483u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH132 0x0ffff484u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH133 0x0ffff485u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH134 0x0ffff486u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH135 0x0ffff487u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH136 0x0ffff488u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH137 0x0ffff489u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH138 0x0ffff48au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH139 0x0ffff48bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH140 0x0ffff48cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH141 0x0ffff48du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH142 0x0ffff48eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH143 0x0ffff48fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH144 0x0ffff490u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH145 0x0ffff491u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH146 0x0ffff492u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH147 0x0ffff493u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH148 0x0ffff494u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH149 0x0ffff495u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH150 0x0ffff496u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH151 0x0ffff497u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH152 0x0ffff498u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH153 0x0ffff499u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH154 0x0ffff49au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH155 0x0ffff49bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH156 0x0ffff49cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH157 0x0ffff49du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH158 0x0ffff49eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH159 0x0ffff49fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH160 0x0ffff4a0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH161 0x0ffff4a1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH162 0x0ffff4a2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH163 0x0ffff4a3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH164 0x0ffff4a4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH165 0x0ffff4a5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH166 0x0ffff4a6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH167 0x0ffff4a7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH168 0x0ffff4a8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH169 0x0ffff4a9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH170 0x0ffff4aau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH171 0x0ffff4abu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH172 0x0ffff4acu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH173 0x0ffff4adu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH174 0x0ffff4aeu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH175 0x0ffff4afu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH176 0x0ffff4b0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH177 0x0ffff4b1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH178 0x0ffff4b2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH179 0x0ffff4b3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH180 0x0ffff4b4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH181 0x0ffff4b5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH182 0x0ffff4b6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH183 0x0ffff4b7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH184 0x0ffff4b8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH185 0x0ffff4b9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH186 0x0ffff4bau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH187 0x0ffff4bbu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH188 0x0ffff4bcu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH189 0x0ffff4bdu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH190 0x0ffff4beu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH191 0x0ffff4bfu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH192 0x0ffff4c0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH193 0x0ffff4c1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH194 0x0ffff4c2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH195 0x0ffff4c3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH196 0x0ffff4c4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH197 0x0ffff4c5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH198 0x0ffff4c6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH199 0x0ffff4c7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH200 0x0ffff4c8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH201 0x0ffff4c9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH202 0x0ffff4cau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH203 0x0ffff4cbu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH204 0x0ffff4ccu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH205 0x0ffff4cdu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH206 0x0ffff4ceu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH207 0x0ffff4cfu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH208 0x0ffff4d0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH209 0x0ffff4d1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH210 0x0ffff4d2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH211 0x0ffff4d3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH212 0x0ffff4d4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH213 0x0ffff4d5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH214 0x0ffff4d6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH215 0x0ffff4d7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH216 0x0ffff4d8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH217 0x0ffff4d9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH218 0x0ffff4dau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH219 0x0ffff4dbu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH220 0x0ffff4dcu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH221 0x0ffff4ddu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH222 0x0ffff4deu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH223 0x0ffff4dfu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH224 0x0ffff4e0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH225 0x0ffff4e1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH226 0x0ffff4e2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH227 0x0ffff4e3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH228 0x0ffff4e4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH229 0x0ffff4e5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH230 0x0ffff4e6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH231 0x0ffff4e7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH232 0x0ffff4e8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH233 0x0ffff4e9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH234 0x0ffff4eau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH235 0x0ffff4ebu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH236 0x0ffff4ecu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH237 0x0ffff4edu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH238 0x0ffff4eeu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH239 0x0ffff4efu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH240 0x0ffff4f0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH241 0x0ffff4f1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH242 0x0ffff4f2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH243 0x0ffff4f3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH244 0x0ffff4f4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH245 0x0ffff4f5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH246 0x0ffff4f6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH247 0x0ffff4f7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH248 0x0ffff4f8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH249 0x0ffff4f9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH250 0x0ffff4fau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH251 0x0ffff4fbu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH252 0x0ffff4fcu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH253 0x0ffff4fdu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH254 0x0ffff4feu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH255 0x0ffff4ffu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH256 0x0ffff500u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH257 0x0ffff501u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH258 0x0ffff502u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH259 0x0ffff503u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH260 0x0ffff504u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH261 0x0ffff505u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH262 0x0ffff506u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH263 0x0ffff507u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH264 0x0ffff508u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH265 0x0ffff509u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH266 0x0ffff50au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH267 0x0ffff50bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH268 0x0ffff50cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH269 0x0ffff50du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH270 0x0ffff50eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH271 0x0ffff50fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH272 0x0ffff510u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH273 0x0ffff511u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH274 0x0ffff512u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH275 0x0ffff513u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH276 0x0ffff514u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH277 0x0ffff515u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH278 0x0ffff516u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH279 0x0ffff517u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH280 0x0ffff518u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH281 0x0ffff519u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH282 0x0ffff51au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH283 0x0ffff51bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH284 0x0ffff51cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH285 0x0ffff51du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH286 0x0ffff51eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH287 0x0ffff51fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH288 0x0ffff520u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH289 0x0ffff521u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH290 0x0ffff522u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH291 0x0ffff523u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH292 0x0ffff524u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH293 0x0ffff525u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH294 0x0ffff526u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH295 0x0ffff527u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH296 0x0ffff528u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH297 0x0ffff529u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH298 0x0ffff52au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH299 0x0ffff52bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH300 0x0ffff52cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH301 0x0ffff52du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH302 0x0ffff52eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH303 0x0ffff52fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH304 0x0ffff530u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH305 0x0ffff531u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH306 0x0ffff532u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH307 0x0ffff533u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH308 0x0ffff534u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH309 0x0ffff535u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH310 0x0ffff536u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH311 0x0ffff537u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH312 0x0ffff538u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH313 0x0ffff539u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH314 0x0ffff53au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH315 0x0ffff53bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH316 0x0ffff53cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH317 0x0ffff53du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH318 0x0ffff53eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH319 0x0ffff53fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH320 0x0ffff540u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH321 0x0ffff541u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH322 0x0ffff542u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH323 0x0ffff543u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH324 0x0ffff544u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH325 0x0ffff545u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH326 0x0ffff546u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH327 0x0ffff547u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH328 0x0ffff548u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH329 0x0ffff549u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH330 0x0ffff54au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH331 0x0ffff54bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH332 0x0ffff54cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH333 0x0ffff54du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH334 0x0ffff54eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH335 0x0ffff54fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH336 0x0ffff550u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH337 0x0ffff551u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH338 0x0ffff552u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH339 0x0ffff553u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH340 0x0ffff554u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH341 0x0ffff555u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH342 0x0ffff556u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH343 0x0ffff557u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH344 0x0ffff558u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH345 0x0ffff559u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH346 0x0ffff55au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH347 0x0ffff55bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH348 0x0ffff55cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH349 0x0ffff55du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH350 0x0ffff55eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH351 0x0ffff55fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH352 0x0ffff560u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH353 0x0ffff561u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH354 0x0ffff562u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH355 0x0ffff563u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH356 0x0ffff564u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH357 0x0ffff565u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH358 0x0ffff566u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH359 0x0ffff567u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH360 0x0ffff568u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH361 0x0ffff569u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH362 0x0ffff56au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH363 0x0ffff56bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH364 0x0ffff56cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH365 0x0ffff56du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH366 0x0ffff56eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH367 0x0ffff56fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH368 0x0ffff570u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH369 0x0ffff571u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH370 0x0ffff572u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH371 0x0ffff573u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH372 0x0ffff574u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH373 0x0ffff575u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH374 0x0ffff576u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH375 0x0ffff577u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH376 0x0ffff578u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH377 0x0ffff579u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH378 0x0ffff57au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH379 0x0ffff57bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH380 0x0ffff57cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH381 0x0ffff57du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH382 0x0ffff57eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH383 0x0ffff57fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH384 0x0ffff580u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH385 0x0ffff581u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH386 0x0ffff582u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH387 0x0ffff583u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH388 0x0ffff584u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH389 0x0ffff585u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH390 0x0ffff586u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH391 0x0ffff587u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH392 0x0ffff588u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH393 0x0ffff589u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH394 0x0ffff58au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH395 0x0ffff58bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH396 0x0ffff58cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH397 0x0ffff58du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH398 0x0ffff58eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH399 0x0ffff58fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH400 0x0ffff590u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH401 0x0ffff591u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH402 0x0ffff592u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH403 0x0ffff593u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH404 0x0ffff594u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH405 0x0ffff595u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH406 0x0ffff596u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH407 0x0ffff597u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH408 0x0ffff598u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH409 0x0ffff599u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH410 0x0ffff59au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH411 0x0ffff59bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH412 0x0ffff59cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH413 0x0ffff59du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH414 0x0ffff59eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH415 0x0ffff59fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH416 0x0ffff5a0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH417 0x0ffff5a1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH418 0x0ffff5a2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH419 0x0ffff5a3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH420 0x0ffff5a4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH421 0x0ffff5a5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH422 0x0ffff5a6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH423 0x0ffff5a7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH424 0x0ffff5a8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH425 0x0ffff5a9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH426 0x0ffff5aau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH427 0x0ffff5abu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH428 0x0ffff5acu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH429 0x0ffff5adu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH430 0x0ffff5aeu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH431 0x0ffff5afu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH432 0x0ffff5b0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH433 0x0ffff5b1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH434 0x0ffff5b2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH435 0x0ffff5b3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH436 0x0ffff5b4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH437 0x0ffff5b5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH438 0x0ffff5b6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH439 0x0ffff5b7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH440 0x0ffff5b8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH441 0x0ffff5b9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH442 0x0ffff5bau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH443 0x0ffff5bbu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH444 0x0ffff5bcu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH445 0x0ffff5bdu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH446 0x0ffff5beu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH447 0x0ffff5bfu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH448 0x0ffff5c0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH449 0x0ffff5c1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH450 0x0ffff5c2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH451 0x0ffff5c3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH452 0x0ffff5c4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH453 0x0ffff5c5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH454 0x0ffff5c6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH455 0x0ffff5c7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH456 0x0ffff5c8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH457 0x0ffff5c9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH458 0x0ffff5cau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH459 0x0ffff5cbu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH460 0x0ffff5ccu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH461 0x0ffff5cdu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH462 0x0ffff5ceu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH463 0x0ffff5cfu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH464 0x0ffff5d0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH465 0x0ffff5d1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH466 0x0ffff5d2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH467 0x0ffff5d3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH468 0x0ffff5d4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH469 0x0ffff5d5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH470 0x0ffff5d6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH471 0x0ffff5d7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH472 0x0ffff5d8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH473 0x0ffff5d9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH474 0x0ffff5dau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH475 0x0ffff5dbu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH476 0x0ffff5dcu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH477 0x0ffff5ddu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH478 0x0ffff5deu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH479 0x0ffff5dfu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH480 0x0ffff5e0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH481 0x0ffff5e1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH482 0x0ffff5e2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH483 0x0ffff5e3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH484 0x0ffff5e4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH485 0x0ffff5e5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH486 0x0ffff5e6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH487 0x0ffff5e7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH488 0x0ffff5e8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH489 0x0ffff5e9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH490 0x0ffff5eau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH491 0x0ffff5ebu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH492 0x0ffff5ecu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH493 0x0ffff5edu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH494 0x0ffff5eeu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH495 0x0ffff5efu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH496 0x0ffff5f0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH497 0x0ffff5f1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH498 0x0ffff5f2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH499 0x0ffff5f3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH500 0x0ffff5f4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH501 0x0ffff5f5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH502 0x0ffff5f6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH503 0x0ffff5f7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH504 0x0ffff5f8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH505 0x0ffff5f9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH506 0x0ffff5fau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH507 0x0ffff5fbu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH508 0x0ffff5fcu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH509 0x0ffff5fdu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH510 0x0ffff5feu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH511 0x0ffff5ffu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH512 0x0ffff600u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH513 0x0ffff601u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH514 0x0ffff602u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH515 0x0ffff603u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH516 0x0ffff604u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH517 0x0ffff605u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH518 0x0ffff606u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH519 0x0ffff607u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH520 0x0ffff608u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH521 0x0ffff609u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH522 0x0ffff60au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH523 0x0ffff60bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH524 0x0ffff60cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH525 0x0ffff60du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH526 0x0ffff60eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH527 0x0ffff60fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH528 0x0ffff610u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH529 0x0ffff611u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH530 0x0ffff612u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH531 0x0ffff613u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH532 0x0ffff614u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH533 0x0ffff615u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH534 0x0ffff616u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH535 0x0ffff617u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH536 0x0ffff618u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH537 0x0ffff619u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH538 0x0ffff61au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH539 0x0ffff61bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH540 0x0ffff61cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH541 0x0ffff61du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH542 0x0ffff61eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH543 0x0ffff61fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH544 0x0ffff620u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH545 0x0ffff621u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH546 0x0ffff622u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH547 0x0ffff623u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH548 0x0ffff624u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH549 0x0ffff625u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH550 0x0ffff626u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH551 0x0ffff627u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH552 0x0ffff628u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH553 0x0ffff629u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH554 0x0ffff62au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH555 0x0ffff62bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH556 0x0ffff62cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH557 0x0ffff62du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH558 0x0ffff62eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH559 0x0ffff62fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH560 0x0ffff630u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH561 0x0ffff631u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH562 0x0ffff632u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH563 0x0ffff633u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH564 0x0ffff634u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH565 0x0ffff635u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH566 0x0ffff636u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH567 0x0ffff637u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH568 0x0ffff638u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH569 0x0ffff639u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH570 0x0ffff63au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH571 0x0ffff63bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH572 0x0ffff63cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH573 0x0ffff63du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH574 0x0ffff63eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH575 0x0ffff63fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH576 0x0ffff640u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH577 0x0ffff641u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH578 0x0ffff642u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH579 0x0ffff643u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH580 0x0ffff644u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH581 0x0ffff645u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH582 0x0ffff646u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH583 0x0ffff647u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH584 0x0ffff648u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH585 0x0ffff649u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH586 0x0ffff64au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH587 0x0ffff64bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH588 0x0ffff64cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH589 0x0ffff64du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH590 0x0ffff64eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH591 0x0ffff64fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH592 0x0ffff650u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH593 0x0ffff651u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH594 0x0ffff652u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH595 0x0ffff653u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH596 0x0ffff654u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH597 0x0ffff655u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH598 0x0ffff656u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH599 0x0ffff657u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH600 0x0ffff658u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH601 0x0ffff659u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH602 0x0ffff65au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH603 0x0ffff65bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH604 0x0ffff65cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH605 0x0ffff65du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH606 0x0ffff65eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH607 0x0ffff65fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH608 0x0ffff660u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH609 0x0ffff661u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH610 0x0ffff662u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH611 0x0ffff663u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH612 0x0ffff664u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH613 0x0ffff665u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH614 0x0ffff666u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH615 0x0ffff667u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH616 0x0ffff668u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH617 0x0ffff669u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH618 0x0ffff66au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH619 0x0ffff66bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH620 0x0ffff66cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH621 0x0ffff66du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH622 0x0ffff66eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH623 0x0ffff66fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH624 0x0ffff670u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH625 0x0ffff671u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH626 0x0ffff672u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH627 0x0ffff673u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH628 0x0ffff674u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH629 0x0ffff675u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH630 0x0ffff676u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH631 0x0ffff677u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH632 0x0ffff678u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH633 0x0ffff679u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH634 0x0ffff67au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH635 0x0ffff67bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH636 0x0ffff67cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH637 0x0ffff67du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH638 0x0ffff67eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH639 0x0ffff67fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH640 0x0ffff680u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH641 0x0ffff681u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH642 0x0ffff682u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH643 0x0ffff683u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH644 0x0ffff684u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH645 0x0ffff685u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH646 0x0ffff686u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH647 0x0ffff687u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH648 0x0ffff688u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH649 0x0ffff689u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH650 0x0ffff68au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH651 0x0ffff68bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH652 0x0ffff68cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH653 0x0ffff68du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH654 0x0ffff68eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH655 0x0ffff68fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH656 0x0ffff690u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH657 0x0ffff691u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH658 0x0ffff692u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH659 0x0ffff693u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH660 0x0ffff694u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH661 0x0ffff695u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH662 0x0ffff696u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH663 0x0ffff697u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH664 0x0ffff698u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH665 0x0ffff699u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH666 0x0ffff69au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH667 0x0ffff69bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH668 0x0ffff69cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH669 0x0ffff69du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH670 0x0ffff69eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH671 0x0ffff69fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH672 0x0ffff6a0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH673 0x0ffff6a1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH674 0x0ffff6a2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH675 0x0ffff6a3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH676 0x0ffff6a4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH677 0x0ffff6a5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH678 0x0ffff6a6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH679 0x0ffff6a7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH680 0x0ffff6a8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH681 0x0ffff6a9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH682 0x0ffff6aau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH683 0x0ffff6abu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH684 0x0ffff6acu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH685 0x0ffff6adu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH686 0x0ffff6aeu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH687 0x0ffff6afu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH688 0x0ffff6b0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH689 0x0ffff6b1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH690 0x0ffff6b2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH691 0x0ffff6b3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH692 0x0ffff6b4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH693 0x0ffff6b5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH694 0x0ffff6b6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH695 0x0ffff6b7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH696 0x0ffff6b8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH697 0x0ffff6b9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH698 0x0ffff6bau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH699 0x0ffff6bbu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH700 0x0ffff6bcu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH701 0x0ffff6bdu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH702 0x0ffff6beu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH703 0x0ffff6bfu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH704 0x0ffff6c0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH705 0x0ffff6c1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH706 0x0ffff6c2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH707 0x0ffff6c3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH708 0x0ffff6c4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH709 0x0ffff6c5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH710 0x0ffff6c6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH711 0x0ffff6c7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH712 0x0ffff6c8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH713 0x0ffff6c9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH714 0x0ffff6cau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH715 0x0ffff6cbu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH716 0x0ffff6ccu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH717 0x0ffff6cdu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH718 0x0ffff6ceu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH719 0x0ffff6cfu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH720 0x0ffff6d0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH721 0x0ffff6d1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH722 0x0ffff6d2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH723 0x0ffff6d3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH724 0x0ffff6d4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH725 0x0ffff6d5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH726 0x0ffff6d6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH727 0x0ffff6d7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH728 0x0ffff6d8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH729 0x0ffff6d9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH730 0x0ffff6dau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH731 0x0ffff6dbu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH732 0x0ffff6dcu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH733 0x0ffff6ddu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH734 0x0ffff6deu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH735 0x0ffff6dfu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH736 0x0ffff6e0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH737 0x0ffff6e1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH738 0x0ffff6e2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH739 0x0ffff6e3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH740 0x0ffff6e4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH741 0x0ffff6e5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH742 0x0ffff6e6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH743 0x0ffff6e7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH744 0x0ffff6e8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH745 0x0ffff6e9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH746 0x0ffff6eau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH747 0x0ffff6ebu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH748 0x0ffff6ecu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH749 0x0ffff6edu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH750 0x0ffff6eeu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH751 0x0ffff6efu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH752 0x0ffff6f0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH753 0x0ffff6f1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH754 0x0ffff6f2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH755 0x0ffff6f3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH756 0x0ffff6f4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH757 0x0ffff6f5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH758 0x0ffff6f6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH759 0x0ffff6f7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH760 0x0ffff6f8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH761 0x0ffff6f9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH762 0x0ffff6fau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH763 0x0ffff6fbu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH764 0x0ffff6fcu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH765 0x0ffff6fdu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH766 0x0ffff6feu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH767 0x0ffff6ffu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH768 0x0ffff700u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH769 0x0ffff701u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH770 0x0ffff702u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH771 0x0ffff703u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH772 0x0ffff704u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH773 0x0ffff705u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH774 0x0ffff706u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH775 0x0ffff707u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH776 0x0ffff708u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH777 0x0ffff709u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH778 0x0ffff70au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH779 0x0ffff70bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH780 0x0ffff70cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH781 0x0ffff70du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH782 0x0ffff70eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH783 0x0ffff70fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH784 0x0ffff710u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH785 0x0ffff711u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH786 0x0ffff712u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH787 0x0ffff713u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH788 0x0ffff714u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH789 0x0ffff715u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH790 0x0ffff716u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH791 0x0ffff717u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH792 0x0ffff718u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH793 0x0ffff719u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH794 0x0ffff71au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH795 0x0ffff71bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH796 0x0ffff71cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH797 0x0ffff71du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH798 0x0ffff71eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH799 0x0ffff71fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH800 0x0ffff720u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH801 0x0ffff721u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH802 0x0ffff722u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH803 0x0ffff723u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH804 0x0ffff724u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH805 0x0ffff725u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH806 0x0ffff726u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH807 0x0ffff727u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH808 0x0ffff728u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH809 0x0ffff729u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH810 0x0ffff72au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH811 0x0ffff72bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH812 0x0ffff72cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH813 0x0ffff72du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH814 0x0ffff72eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH815 0x0ffff72fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH816 0x0ffff730u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH817 0x0ffff731u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH818 0x0ffff732u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH819 0x0ffff733u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH820 0x0ffff734u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH821 0x0ffff735u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH822 0x0ffff736u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH823 0x0ffff737u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH824 0x0ffff738u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH825 0x0ffff739u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH826 0x0ffff73au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH827 0x0ffff73bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH828 0x0ffff73cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH829 0x0ffff73du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH830 0x0ffff73eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH831 0x0ffff73fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH832 0x0ffff740u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH833 0x0ffff741u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH834 0x0ffff742u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH835 0x0ffff743u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH836 0x0ffff744u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH837 0x0ffff745u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH838 0x0ffff746u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH839 0x0ffff747u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH840 0x0ffff748u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH841 0x0ffff749u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH842 0x0ffff74au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH843 0x0ffff74bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH844 0x0ffff74cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH845 0x0ffff74du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH846 0x0ffff74eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH847 0x0ffff74fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH848 0x0ffff750u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH849 0x0ffff751u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH850 0x0ffff752u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH851 0x0ffff753u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH852 0x0ffff754u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH853 0x0ffff755u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH854 0x0ffff756u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH855 0x0ffff757u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH856 0x0ffff758u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH857 0x0ffff759u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH858 0x0ffff75au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH859 0x0ffff75bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH860 0x0ffff75cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH861 0x0ffff75du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH862 0x0ffff75eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH863 0x0ffff75fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH864 0x0ffff760u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH865 0x0ffff761u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH866 0x0ffff762u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH867 0x0ffff763u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH868 0x0ffff764u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH869 0x0ffff765u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH870 0x0ffff766u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH871 0x0ffff767u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH872 0x0ffff768u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH873 0x0ffff769u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH874 0x0ffff76au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH875 0x0ffff76bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH876 0x0ffff76cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH877 0x0ffff76du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH878 0x0ffff76eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH879 0x0ffff76fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH880 0x0ffff770u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH881 0x0ffff771u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH882 0x0ffff772u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH883 0x0ffff773u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH884 0x0ffff774u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH885 0x0ffff775u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH886 0x0ffff776u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH887 0x0ffff777u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH888 0x0ffff778u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH889 0x0ffff779u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH890 0x0ffff77au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH891 0x0ffff77bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH892 0x0ffff77cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH893 0x0ffff77du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH894 0x0ffff77eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH895 0x0ffff77fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH896 0x0ffff780u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH897 0x0ffff781u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH898 0x0ffff782u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH899 0x0ffff783u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH900 0x0ffff784u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH901 0x0ffff785u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH902 0x0ffff786u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH903 0x0ffff787u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH904 0x0ffff788u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH905 0x0ffff789u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH906 0x0ffff78au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH907 0x0ffff78bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH908 0x0ffff78cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH909 0x0ffff78du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH910 0x0ffff78eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH911 0x0ffff78fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH912 0x0ffff790u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH913 0x0ffff791u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH914 0x0ffff792u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH915 0x0ffff793u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH916 0x0ffff794u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH917 0x0ffff795u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH918 0x0ffff796u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH919 0x0ffff797u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH920 0x0ffff798u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH921 0x0ffff799u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH922 0x0ffff79au
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH923 0x0ffff79bu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH924 0x0ffff79cu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH925 0x0ffff79du
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH926 0x0ffff79eu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH927 0x0ffff79fu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH928 0x0ffff7a0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH929 0x0ffff7a1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH930 0x0ffff7a2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH931 0x0ffff7a3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH932 0x0ffff7a4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH933 0x0ffff7a5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH934 0x0ffff7a6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH935 0x0ffff7a7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH936 0x0ffff7a8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH937 0x0ffff7a9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH938 0x0ffff7aau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH939 0x0ffff7abu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH940 0x0ffff7acu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH941 0x0ffff7adu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH942 0x0ffff7aeu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH943 0x0ffff7afu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH944 0x0ffff7b0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH945 0x0ffff7b1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH946 0x0ffff7b2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH947 0x0ffff7b3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH948 0x0ffff7b4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH949 0x0ffff7b5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH950 0x0ffff7b6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH951 0x0ffff7b7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH952 0x0ffff7b8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH953 0x0ffff7b9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH954 0x0ffff7bau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH955 0x0ffff7bbu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH956 0x0ffff7bcu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH957 0x0ffff7bdu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH958 0x0ffff7beu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH959 0x0ffff7bfu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH960 0x0ffff7c0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH961 0x0ffff7c1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH962 0x0ffff7c2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH963 0x0ffff7c3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH964 0x0ffff7c4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH965 0x0ffff7c5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH966 0x0ffff7c6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH967 0x0ffff7c7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH968 0x0ffff7c8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH969 0x0ffff7c9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH970 0x0ffff7cau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH971 0x0ffff7cbu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH972 0x0ffff7ccu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH973 0x0ffff7cdu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH974 0x0ffff7ceu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH975 0x0ffff7cfu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH976 0x0ffff7d0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH977 0x0ffff7d1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH978 0x0ffff7d2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH979 0x0ffff7d3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH980 0x0ffff7d4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH981 0x0ffff7d5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH982 0x0ffff7d6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH983 0x0ffff7d7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH984 0x0ffff7d8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH985 0x0ffff7d9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH986 0x0ffff7dau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH987 0x0ffff7dbu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH988 0x0ffff7dcu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH989 0x0ffff7ddu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH990 0x0ffff7deu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH991 0x0ffff7dfu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH992 0x0ffff7e0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH993 0x0ffff7e1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH994 0x0ffff7e2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH995 0x0ffff7e3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH996 0x0ffff7e4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH997 0x0ffff7e5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH998 0x0ffff7e6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH999 0x0ffff7e7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1000 0x0ffff7e8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1001 0x0ffff7e9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1002 0x0ffff7eau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1003 0x0ffff7ebu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1004 0x0ffff7ecu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1005 0x0ffff7edu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1006 0x0ffff7eeu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1007 0x0ffff7efu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1008 0x0ffff7f0u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1009 0x0ffff7f1u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1010 0x0ffff7f2u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1011 0x0ffff7f3u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1012 0x0ffff7f4u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1013 0x0ffff7f5u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1014 0x0ffff7f6u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1015 0x0ffff7f7u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1016 0x0ffff7f8u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1017 0x0ffff7f9u
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1018 0x0ffff7fau
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1019 0x0ffff7fbu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1020 0x0ffff7fcu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1021 0x0ffff7fdu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1022 0x0ffff7feu
N#define CYREG_SFLASH_MACRO_0_FREE_SFLASH1023 0x0ffff7ffu
N#define CYDEV_ROM_BASE 0x10000000u
N#define CYDEV_ROM_SIZE 0x00002000u
N#define CYREG_ROM_DATA_MBASE 0x10000000u
N#define CYREG_ROM_DATA_MSIZE 0x00002000u
N#define CYDEV_SRAM_BASE 0x20000000u
N#define CYDEV_SRAM_SIZE 0x00004000u
N#define CYREG_SRAM_DATA_MBASE 0x20000000u
N#define CYREG_SRAM_DATA_MSIZE 0x00004000u
N#define CYDEV_PERI_BASE 0x40010000u
N#define CYDEV_PERI_SIZE 0x00010000u
N#define CYREG_PERI_DIV_CMD 0x40010000u
N#define CYFLD_PERI_SEL_DIV__OFFSET 0x00000000u
N#define CYFLD_PERI_SEL_DIV__SIZE 0x00000006u
N#define CYFLD_PERI_SEL_TYPE__OFFSET 0x00000006u
N#define CYFLD_PERI_SEL_TYPE__SIZE 0x00000002u
N#define CYFLD_PERI_PA_SEL_DIV__OFFSET 0x00000008u
N#define CYFLD_PERI_PA_SEL_DIV__SIZE 0x00000006u
N#define CYFLD_PERI_PA_SEL_TYPE__OFFSET 0x0000000eu
N#define CYFLD_PERI_PA_SEL_TYPE__SIZE 0x00000002u
N#define CYFLD_PERI_DISABLE__OFFSET 0x0000001eu
N#define CYFLD_PERI_DISABLE__SIZE 0x00000001u
N#define CYFLD_PERI_ENABLE__OFFSET 0x0000001fu
N#define CYFLD_PERI_ENABLE__SIZE 0x00000001u
N#define CYREG_PERI_PCLK_CTL0 0x40010100u
N/* Duplicate field name in PERI: SEL_DIV [3:0] (previous: [5:0]) */
N#define CYREG_PERI_PCLK_CTL1 0x40010104u
N#define CYREG_PERI_PCLK_CTL2 0x40010108u
N#define CYREG_PERI_PCLK_CTL3 0x4001010cu
N#define CYREG_PERI_PCLK_CTL4 0x40010110u
N#define CYREG_PERI_PCLK_CTL5 0x40010114u
N#define CYREG_PERI_PCLK_CTL6 0x40010118u
N#define CYREG_PERI_PCLK_CTL7 0x4001011cu
N#define CYREG_PERI_PCLK_CTL8 0x40010120u
N#define CYREG_PERI_PCLK_CTL9 0x40010124u
N#define CYREG_PERI_PCLK_CTL10 0x40010128u
N#define CYREG_PERI_PCLK_CTL11 0x4001012cu
N#define CYREG_PERI_PCLK_CTL12 0x40010130u
N#define CYREG_PERI_PCLK_CTL13 0x40010134u
N#define CYREG_PERI_PCLK_CTL14 0x40010138u
N#define CYREG_PERI_PCLK_CTL15 0x4001013cu
N#define CYREG_PERI_PCLK_CTL16 0x40010140u
N#define CYREG_PERI_PCLK_CTL17 0x40010144u
N#define CYREG_PERI_PCLK_CTL18 0x40010148u
N#define CYREG_PERI_DIV_16_CTL0 0x40010300u
N#define CYFLD_PERI_EN__OFFSET 0x00000000u
N#define CYFLD_PERI_EN__SIZE 0x00000001u
N#define CYFLD_PERI_INT16_DIV__OFFSET 0x00000008u
N#define CYFLD_PERI_INT16_DIV__SIZE 0x00000010u
N#define CYREG_PERI_DIV_16_CTL1 0x40010304u
N#define CYREG_PERI_DIV_16_CTL2 0x40010308u
N#define CYREG_PERI_DIV_16_CTL3 0x4001030cu
N#define CYREG_PERI_DIV_16_CTL4 0x40010310u
N#define CYREG_PERI_DIV_16_CTL5 0x40010314u
N#define CYREG_PERI_DIV_16_CTL6 0x40010318u
N#define CYREG_PERI_DIV_16_CTL7 0x4001031cu
N#define CYREG_PERI_DIV_16_CTL8 0x40010320u
N#define CYREG_PERI_DIV_16_CTL9 0x40010324u
N#define CYREG_PERI_DIV_16_CTL10 0x40010328u
N#define CYREG_PERI_DIV_16_CTL11 0x4001032cu
N#define CYREG_PERI_DIV_16_5_CTL0 0x40010400u
N#define CYFLD_PERI_FRAC5_DIV__OFFSET 0x00000003u
N#define CYFLD_PERI_FRAC5_DIV__SIZE 0x00000005u
N#define CYREG_PERI_DIV_16_5_CTL1 0x40010404u
N#define CYREG_PERI_DIV_16_5_CTL2 0x40010408u
N#define CYREG_PERI_DIV_16_5_CTL3 0x4001040cu
N#define CYREG_PERI_DIV_16_5_CTL4 0x40010410u
N#define CYREG_PERI_DIV_24_5_CTL 0x40010500u
N#define CYFLD_PERI_INT24_DIV__OFFSET 0x00000008u
N#define CYFLD_PERI_INT24_DIV__SIZE 0x00000018u
N#define CYREG_PERI_TR_CTL 0x40010600u
N#define CYFLD_PERI_TR_SEL__OFFSET 0x00000000u
N#define CYFLD_PERI_TR_SEL__SIZE 0x00000007u
N#define CYFLD_PERI_TR_GROUP__OFFSET 0x00000008u
N#define CYFLD_PERI_TR_GROUP__SIZE 0x00000004u
N#define CYFLD_PERI_TR_COUNT__OFFSET 0x00000010u
N#define CYFLD_PERI_TR_COUNT__SIZE 0x00000008u
N#define CYFLD_PERI_TR_OUT__OFFSET 0x0000001eu
N#define CYFLD_PERI_TR_OUT__SIZE 0x00000001u
N#define CYFLD_PERI_TR_ACT__OFFSET 0x0000001fu
N#define CYFLD_PERI_TR_ACT__SIZE 0x00000001u
N#define CYDEV_PERI_TR_GROUP0_BASE 0x40012000u
N#define CYDEV_PERI_TR_GROUP0_SIZE 0x00000200u
N#define CYREG_PERI_TR_GROUP0_TR_OUT_CTL0 0x40012000u
N#define CYFLD_PERI_TR_GROUP_SEL__OFFSET 0x00000000u
N#define CYFLD_PERI_TR_GROUP_SEL__SIZE 0x00000006u
N#define CYREG_PERI_TR_GROUP0_TR_OUT_CTL1 0x40012004u
N#define CYREG_PERI_TR_GROUP0_TR_OUT_CTL2 0x40012008u
N#define CYREG_PERI_TR_GROUP0_TR_OUT_CTL3 0x4001200cu
N#define CYREG_PERI_TR_GROUP0_TR_OUT_CTL4 0x40012010u
N#define CYREG_PERI_TR_GROUP0_TR_OUT_CTL5 0x40012014u
N#define CYREG_PERI_TR_GROUP0_TR_OUT_CTL6 0x40012018u
N#define CYREG_PERI_TR_GROUP0_TR_OUT_CTL7 0x4001201cu
N#define CYDEV_PERI_TR_GROUP1_BASE 0x40012200u
N#define CYDEV_PERI_TR_GROUP1_SIZE 0x00000200u
N#define CYREG_PERI_TR_GROUP1_TR_OUT_CTL0 0x40012200u
N/* Duplicate field name in PERI_TR_GROUP: SEL [4:0] (previous: [5:0]) */
N#define CYREG_PERI_TR_GROUP1_TR_OUT_CTL1 0x40012204u
N#define CYREG_PERI_TR_GROUP1_TR_OUT_CTL2 0x40012208u
N#define CYREG_PERI_TR_GROUP1_TR_OUT_CTL3 0x4001220cu
N#define CYREG_PERI_TR_GROUP1_TR_OUT_CTL4 0x40012210u
N#define CYREG_PERI_TR_GROUP1_TR_OUT_CTL5 0x40012214u
N#define CYREG_PERI_TR_GROUP1_TR_OUT_CTL6 0x40012218u
N#define CYDEV_PERI_TR_GROUP2_BASE 0x40012400u
N#define CYDEV_PERI_TR_GROUP2_SIZE 0x00000200u
N#define CYREG_PERI_TR_GROUP2_TR_OUT_CTL 0x40012400u
N/* Duplicate field name in PERI_TR_GROUP: SEL [5:0] (previous: [4:0]) */
N#define CYDEV_PERI_TR_GROUP3_BASE 0x40012600u
N#define CYDEV_PERI_TR_GROUP3_SIZE 0x00000200u
N#define CYREG_PERI_TR_GROUP3_TR_OUT_CTL 0x40012600u
N/* Duplicate field name in PERI_TR_GROUP: SEL [3:0] (previous: [5:0]) */
N#define CYDEV_HSIOM_BASE 0x40020000u
N#define CYDEV_HSIOM_SIZE 0x00004000u
N#define CYREG_HSIOM_PORT_SEL0 0x40020000u
N#define CYFLD_HSIOM_IO0_SEL__OFFSET 0x00000000u
N#define CYFLD_HSIOM_IO0_SEL__SIZE 0x00000004u
N#define CYVAL_HSIOM_IO0_SEL_GPIO 0x00000000u
N#define CYVAL_HSIOM_IO0_SEL_GPIO_DSI 0x00000001u
N#define CYVAL_HSIOM_IO0_SEL_DSI_DSI 0x00000002u
N#define CYVAL_HSIOM_IO0_SEL_DSI_GPIO 0x00000003u
N#define CYVAL_HSIOM_IO0_SEL_CSD_SENSE 0x00000004u
N#define CYVAL_HSIOM_IO0_SEL_CSD_SHIELD 0x00000005u
N#define CYVAL_HSIOM_IO0_SEL_AMUXA 0x00000006u
N#define CYVAL_HSIOM_IO0_SEL_AMUXB 0x00000007u
N#define CYVAL_HSIOM_IO0_SEL_ACT_0 0x00000008u
N#define CYVAL_HSIOM_IO0_SEL_ACT_1 0x00000009u
N#define CYVAL_HSIOM_IO0_SEL_ACT_2 0x0000000au
N#define CYVAL_HSIOM_IO0_SEL_ACT_3 0x0000000bu
N#define CYVAL_HSIOM_IO0_SEL_LCD_COM 0x0000000cu
N#define CYVAL_HSIOM_IO0_SEL_LCD_SEG 0x0000000du
N#define CYVAL_HSIOM_IO0_SEL_DS_0 0x0000000cu
N#define CYVAL_HSIOM_IO0_SEL_DS_1 0x0000000du
N#define CYVAL_HSIOM_IO0_SEL_DS_2 0x0000000eu
N#define CYVAL_HSIOM_IO0_SEL_DS_3 0x0000000fu
N#define CYFLD_HSIOM_IO1_SEL__OFFSET 0x00000004u
N#define CYFLD_HSIOM_IO1_SEL__SIZE 0x00000004u
N#define CYFLD_HSIOM_IO2_SEL__OFFSET 0x00000008u
N#define CYFLD_HSIOM_IO2_SEL__SIZE 0x00000004u
N#define CYFLD_HSIOM_IO3_SEL__OFFSET 0x0000000cu
N#define CYFLD_HSIOM_IO3_SEL__SIZE 0x00000004u
N#define CYFLD_HSIOM_IO4_SEL__OFFSET 0x00000010u
N#define CYFLD_HSIOM_IO4_SEL__SIZE 0x00000004u
N#define CYFLD_HSIOM_IO5_SEL__OFFSET 0x00000014u
N#define CYFLD_HSIOM_IO5_SEL__SIZE 0x00000004u
N#define CYFLD_HSIOM_IO6_SEL__OFFSET 0x00000018u
N#define CYFLD_HSIOM_IO6_SEL__SIZE 0x00000004u
N#define CYFLD_HSIOM_IO7_SEL__OFFSET 0x0000001cu
N#define CYFLD_HSIOM_IO7_SEL__SIZE 0x00000004u
N#define CYREG_HSIOM_PORT_SEL1 0x40020100u
N#define CYREG_HSIOM_PORT_SEL2 0x40020200u
N#define CYREG_HSIOM_PORT_SEL3 0x40020300u
N#define CYREG_HSIOM_PORT_SEL4 0x40020400u
N#define CYREG_HSIOM_PORT_SEL5 0x40020500u
N#define CYREG_HSIOM_PORT_SEL6 0x40020600u
N#define CYREG_HSIOM_PORT_SEL7 0x40020700u
N#define CYREG_HSIOM_AMUX_SPLIT_CTL0 0x40022100u
N#define CYFLD_HSIOM_SWITCH_AA_SL__OFFSET 0x00000000u
N#define CYFLD_HSIOM_SWITCH_AA_SL__SIZE 0x00000001u
N#define CYFLD_HSIOM_SWITCH_AA_SR__OFFSET 0x00000001u
N#define CYFLD_HSIOM_SWITCH_AA_SR__SIZE 0x00000001u
N#define CYFLD_HSIOM_SWITCH_AA_S0__OFFSET 0x00000002u
N#define CYFLD_HSIOM_SWITCH_AA_S0__SIZE 0x00000001u
N#define CYFLD_HSIOM_SWITCH_BB_SL__OFFSET 0x00000004u
N#define CYFLD_HSIOM_SWITCH_BB_SL__SIZE 0x00000001u
N#define CYFLD_HSIOM_SWITCH_BB_SR__OFFSET 0x00000005u
N#define CYFLD_HSIOM_SWITCH_BB_SR__SIZE 0x00000001u
N#define CYFLD_HSIOM_SWITCH_BB_S0__OFFSET 0x00000006u
N#define CYFLD_HSIOM_SWITCH_BB_S0__SIZE 0x00000001u
N#define CYREG_HSIOM_AMUX_SPLIT_CTL1 0x40022104u
N#define CYREG_PWR_CONTROL 0x40030000u
N#define CYFLD__POWER_MODE__OFFSET 0x00000000u
N#define CYFLD__POWER_MODE__SIZE 0x00000004u
N#define CYVAL__POWER_MODE_RESET 0x00000000u
N#define CYVAL__POWER_MODE_ACTIVE 0x00000001u
N#define CYVAL__POWER_MODE_SLEEP 0x00000002u
N#define CYVAL__POWER_MODE_DEEP_SLEEP 0x00000003u
N#define CYFLD__DEBUG_SESSION__OFFSET 0x00000004u
N#define CYFLD__DEBUG_SESSION__SIZE 0x00000001u
N#define CYVAL__DEBUG_SESSION_NO_SESSION 0x00000000u
N#define CYVAL__DEBUG_SESSION_SESSION_ACTIVE 0x00000001u
N#define CYFLD__LPM_READY__OFFSET 0x00000005u
N#define CYFLD__LPM_READY__SIZE 0x00000001u
N#define CYFLD__OVER_TEMP_EN__OFFSET 0x00000010u
N#define CYFLD__OVER_TEMP_EN__SIZE 0x00000001u
N#define CYFLD__OVER_TEMP_THRESH__OFFSET 0x00000011u
N#define CYFLD__OVER_TEMP_THRESH__SIZE 0x00000001u
N#define CYFLD__SPARE__OFFSET 0x00000012u
N#define CYFLD__SPARE__SIZE 0x00000002u
N#define CYFLD__EXT_VCCD__OFFSET 0x00000017u
N#define CYFLD__EXT_VCCD__SIZE 0x00000001u
N#define CYREG_PWR_KEY_DELAY 0x40030004u
N#define CYFLD__WAKEUP_HOLDOFF__OFFSET 0x00000000u
N#define CYFLD__WAKEUP_HOLDOFF__SIZE 0x0000000au
N#define CYREG_PWR_DDFT_SELECT 0x4003000cu
N#define CYFLD__DDFT0_SEL__OFFSET 0x00000000u
N#define CYFLD__DDFT0_SEL__SIZE 0x00000004u
N#define CYVAL__DDFT0_SEL_WAKEUP 0x00000000u
N#define CYVAL__DDFT0_SEL_AWAKE 0x00000001u
N#define CYVAL__DDFT0_SEL_ACT_POWER_EN 0x00000002u
N#define CYVAL__DDFT0_SEL_ACT_POWER_UP 0x00000003u
N#define CYVAL__DDFT0_SEL_ACT_POWER_GOOD 0x00000004u
N#define CYVAL__DDFT0_SEL_ACT_REF_EN 0x00000005u
N#define CYVAL__DDFT0_SEL_ACT_COMP_EN 0x00000006u
N#define CYVAL__DDFT0_SEL_DPSLP_REF_EN 0x00000007u
N#define CYVAL__DDFT0_SEL_DPSLP_REG_EN 0x00000008u
N#define CYVAL__DDFT0_SEL_DPSLP_COMP_EN 0x00000009u
N#define CYVAL__DDFT0_SEL_OVER_TEMP_EN 0x0000000au
N#define CYVAL__DDFT0_SEL_SLEEPHOLDREQ_N 0x0000000bu
N#define CYVAL__DDFT0_SEL_ADFT_BUF_EN 0x0000000cu
N#define CYVAL__DDFT0_SEL_ATPG_OBSERVE 0x0000000du
N#define CYVAL__DDFT0_SEL_GND 0x0000000eu
N#define CYVAL__DDFT0_SEL_PWR 0x0000000fu
N#define CYFLD__DDFT1_SEL__OFFSET 0x00000004u
N#define CYFLD__DDFT1_SEL__SIZE 0x00000004u
N#define CYVAL__DDFT1_SEL_WAKEUP 0x00000000u
N#define CYVAL__DDFT1_SEL_AWAKE 0x00000001u
N#define CYVAL__DDFT1_SEL_ACT_POWER_EN 0x00000002u
N#define CYVAL__DDFT1_SEL_ACT_POWER_UP 0x00000003u
N#define CYVAL__DDFT1_SEL_ACT_POWER_GOOD 0x00000004u
N#define CYVAL__DDFT1_SEL_ACT_REF_VALID 0x00000005u
N#define CYVAL__DDFT1_SEL_ACT_REG_VALID 0x00000006u
N#define CYVAL__DDFT1_SEL_ACT_COMP_OUT 0x00000007u
N#define CYVAL__DDFT1_SEL_ACT_TEMP_HIGH 0x00000008u
N#define CYVAL__DDFT1_SEL_DPSLP_COMP_OUT 0x00000009u
N#define CYVAL__DDFT1_SEL_DPSLP_POWER_UP 0x0000000au
N#define CYVAL__DDFT1_SEL_AWAKE_DELAYED 0x0000000bu
N#define CYVAL__DDFT1_SEL_LPM_READY 0x0000000cu
N#define CYVAL__DDFT1_SEL_SLEEPHOLDACK_N 0x0000000du
N#define CYVAL__DDFT1_SEL_GND 0x0000000eu
N#define CYVAL__DDFT1_SEL_PWR 0x0000000fu
N#define CYREG_TST_MODE 0x40030014u
N#define CYFLD__SWD_CONNECTED__OFFSET 0x00000002u
N#define CYFLD__SWD_CONNECTED__SIZE 0x00000001u
N#define CYFLD__BLOCK_ALT_XRES__OFFSET 0x0000001cu
N#define CYFLD__BLOCK_ALT_XRES__SIZE 0x00000001u
N#define CYFLD__TEST_KEY_DFT_EN__OFFSET 0x0000001eu
N#define CYFLD__TEST_KEY_DFT_EN__SIZE 0x00000001u
N#define CYFLD__TEST_MODE__OFFSET 0x0000001fu
N#define CYFLD__TEST_MODE__SIZE 0x00000001u
N#define CYREG_TST_DDFT_CTRL 0x40030018u
N#define CYFLD__DFT_SEL0__OFFSET 0x00000000u
N#define CYFLD__DFT_SEL0__SIZE 0x00000004u
N#define CYVAL__DFT_SEL0_SRC0 0x00000000u
N#define CYVAL__DFT_SEL0_SRC1 0x00000001u
N#define CYVAL__DFT_SEL0_SRC2 0x00000002u
N#define CYVAL__DFT_SEL0_SRC3 0x00000003u
N#define CYVAL__DFT_SEL0_SRC4 0x00000004u
N#define CYVAL__DFT_SEL0_SRC5 0x00000005u
N#define CYVAL__DFT_SEL0_SRC6 0x00000006u
N#define CYVAL__DFT_SEL0_SRC7 0x00000007u
N#define CYVAL__DFT_SEL0_CLK0 0x00000008u
N#define CYVAL__DFT_SEL0_CLK1 0x00000009u
N#define CYVAL__DFT_SEL0_PWR0 0x0000000au
N#define CYVAL__DFT_SEL0_PWR1 0x0000000bu
N#define CYVAL__DFT_SEL0_RES0 0x0000000cu
N#define CYVAL__DFT_SEL0_RES1 0x0000000du
N#define CYVAL__DFT_SEL0_ADFT_COMP 0x0000000eu
N#define CYVAL__DFT_SEL0_VSS 0x0000000fu
N#define CYFLD__DFT_SEL1__OFFSET 0x00000008u
N#define CYFLD__DFT_SEL1__SIZE 0x00000004u
N#define CYVAL__DFT_SEL1_SRC0 0x00000000u
N#define CYVAL__DFT_SEL1_SRC1 0x00000001u
N#define CYVAL__DFT_SEL1_SRC2 0x00000002u
N#define CYVAL__DFT_SEL1_SRC3 0x00000003u
N#define CYVAL__DFT_SEL1_SRC4 0x00000004u
N#define CYVAL__DFT_SEL1_SRC5 0x00000005u
N#define CYVAL__DFT_SEL1_SRC6 0x00000006u
N#define CYVAL__DFT_SEL1_SRC7 0x00000007u
N#define CYVAL__DFT_SEL1_CLK0 0x00000008u
N#define CYVAL__DFT_SEL1_CLK1 0x00000009u
N#define CYVAL__DFT_SEL1_PWR0 0x0000000au
N#define CYVAL__DFT_SEL1_PWR1 0x0000000bu
N#define CYVAL__DFT_SEL1_RES0 0x0000000cu
N#define CYVAL__DFT_SEL1_RES1 0x0000000du
N#define CYVAL__DFT_SEL1_ADFT_COMP 0x0000000eu
N#define CYVAL__DFT_SEL1_VSS 0x0000000fu
N#define CYFLD__ENABLE__OFFSET 0x0000001fu
N#define CYFLD__ENABLE__SIZE 0x00000001u
N#define CYREG_TST_TRIM_CNTR1 0x4003001cu
N#define CYFLD__COUNTER__OFFSET 0x00000000u
N#define CYFLD__COUNTER__SIZE 0x00000010u
N#define CYFLD__COUNTER_DONE__OFFSET 0x0000001fu
N#define CYFLD__COUNTER_DONE__SIZE 0x00000001u
N#define CYREG_TST_TRIM_CNTR2 0x40030020u
N#define CYREG_TST_ADFT_CTRL 0x40030024u
N#define CYFLD__BUF_AUTO_ZERO__OFFSET 0x00000000u
N#define CYFLD__BUF_AUTO_ZERO__SIZE 0x00000001u
N#define CYFLD__BUF_MODE__OFFSET 0x00000008u
N#define CYFLD__BUF_MODE__SIZE 0x00000002u
N#define CYFLD__BUF_COMP_OUT__OFFSET 0x00000010u
N#define CYFLD__BUF_COMP_OUT__SIZE 0x00000001u
N#define CYFLD__BUF_EN__OFFSET 0x0000001fu
N#define CYFLD__BUF_EN__SIZE 0x00000001u
N#define CYREG_CLK_SELECT 0x40030028u
N#define CYFLD__HFCLK_SEL__OFFSET 0x00000000u
N#define CYFLD__HFCLK_SEL__SIZE 0x00000002u
N#define CYVAL__HFCLK_SEL_IMO 0x00000000u
N#define CYVAL__HFCLK_SEL_EXTCLK 0x00000001u
N#define CYVAL__HFCLK_SEL_ECO 0x00000002u
N#define CYFLD__HFCLK_DIV__OFFSET 0x00000002u
N#define CYFLD__HFCLK_DIV__SIZE 0x00000002u
N#define CYVAL__HFCLK_DIV_NO_DIV 0x00000000u
N#define CYVAL__HFCLK_DIV_DIV_BY_2 0x00000001u
N#define CYVAL__HFCLK_DIV_DIV_BY_4 0x00000002u
N#define CYVAL__HFCLK_DIV_DIV_BY_8 0x00000003u
N#define CYFLD__PUMP_SEL__OFFSET 0x00000004u
N#define CYFLD__PUMP_SEL__SIZE 0x00000002u
N#define CYVAL__PUMP_SEL_GND 0x00000000u
N#define CYVAL__PUMP_SEL_IMO 0x00000001u
N#define CYVAL__PUMP_SEL_HFCLK 0x00000002u
N#define CYFLD__SYSCLK_DIV__OFFSET 0x00000006u
N#define CYFLD__SYSCLK_DIV__SIZE 0x00000002u
N#define CYVAL__SYSCLK_DIV_NO_DIV 0x00000000u
N#define CYVAL__SYSCLK_DIV_DIV_BY_2 0x00000001u
N#define CYVAL__SYSCLK_DIV_DIV_BY_4 0x00000002u
N#define CYVAL__SYSCLK_DIV_DIV_BY_8 0x00000003u
N#define CYREG_CLK_ILO_CONFIG 0x4003002cu
N#define CYREG_CLK_IMO_CONFIG 0x40030030u
N#define CYREG_CLK_DFT_SELECT 0x40030034u
N#define CYFLD__DFT_DIV0__OFFSET 0x00000004u
N#define CYFLD__DFT_DIV0__SIZE 0x00000002u
N#define CYVAL__DFT_DIV0_NO_DIV 0x00000000u
N#define CYVAL__DFT_DIV0_DIV_BY_2 0x00000001u
N#define CYVAL__DFT_DIV0_DIV_BY_4 0x00000002u
N#define CYVAL__DFT_DIV0_DIV_BY_8 0x00000003u
N#define CYFLD__DFT_EDGE0__OFFSET 0x00000006u
N#define CYFLD__DFT_EDGE0__SIZE 0x00000001u
N#define CYVAL__DFT_EDGE0_POSEDGE 0x00000000u
N#define CYVAL__DFT_EDGE0_NEGEDGE 0x00000001u
N#define CYFLD__DFT_DIV1__OFFSET 0x0000000cu
N#define CYFLD__DFT_DIV1__SIZE 0x00000002u
N#define CYVAL__DFT_DIV1_NO_DIV 0x00000000u
N#define CYVAL__DFT_DIV1_DIV_BY_2 0x00000001u
N#define CYVAL__DFT_DIV1_DIV_BY_4 0x00000002u
N#define CYVAL__DFT_DIV1_DIV_BY_8 0x00000003u
N#define CYFLD__DFT_EDGE1__OFFSET 0x0000000eu
N#define CYFLD__DFT_EDGE1__SIZE 0x00000001u
N#define CYVAL__DFT_EDGE1_POSEDGE 0x00000000u
N#define CYVAL__DFT_EDGE1_NEGEDGE 0x00000001u
N#define CYREG_WDT_DISABLE_KEY 0x40030038u
N#define CYFLD__KEY__OFFSET 0x00000000u
N#define CYFLD__KEY__SIZE 0x00000020u
N#define CYREG_WDT_COUNTER 0x4003003cu
N#define CYREG_WDT_MATCH 0x40030040u
N#define CYFLD__MATCH__OFFSET 0x00000000u
N#define CYFLD__MATCH__SIZE 0x00000010u
N#define CYFLD__IGNORE_BITS__OFFSET 0x00000010u
N#define CYFLD__IGNORE_BITS__SIZE 0x00000004u
N#define CYREG_SRSS_INTR 0x40030044u
N#define CYFLD__WDT_MATCH__OFFSET 0x00000000u
N#define CYFLD__WDT_MATCH__SIZE 0x00000001u
N#define CYFLD__TEMP_HIGH__OFFSET 0x00000001u
N#define CYFLD__TEMP_HIGH__SIZE 0x00000001u
N#define CYREG_SRSS_INTR_SET 0x40030048u
N#define CYREG_SRSS_INTR_MASK 0x4003004cu
N#define CYREG_RES_CAUSE 0x40030054u
N#define CYFLD__RESET_WDT__OFFSET 0x00000000u
N#define CYFLD__RESET_WDT__SIZE 0x00000001u
N#define CYFLD__RESET_PROT_FAULT__OFFSET 0x00000003u
N#define CYFLD__RESET_PROT_FAULT__SIZE 0x00000001u
N#define CYFLD__RESET_SOFT__OFFSET 0x00000004u
N#define CYFLD__RESET_SOFT__SIZE 0x00000001u
N#define CYREG_PWR_BG_TRIM1 0x40030f00u
N#define CYFLD__REF_VTRIM__OFFSET 0x00000000u
N#define CYFLD__REF_VTRIM__SIZE 0x00000006u
N#define CYREG_PWR_BG_TRIM2 0x40030f04u
N#define CYFLD__REF_ITRIM__OFFSET 0x00000000u
N#define CYFLD__REF_ITRIM__SIZE 0x00000006u
N#define CYREG_CLK_IMO_SELECT 0x40030f08u
N#define CYFLD__FREQ__OFFSET 0x00000000u
N#define CYFLD__FREQ__SIZE 0x00000003u
N#define CYVAL__FREQ_24_MHZ 0x00000000u
N#define CYVAL__FREQ_28_MHZ 0x00000001u
N#define CYVAL__FREQ_32_MHZ 0x00000002u
N#define CYVAL__FREQ_36_MHZ 0x00000003u
N#define CYVAL__FREQ_40_MHZ 0x00000004u
N#define CYVAL__FREQ_44_MHZ 0x00000005u
N#define CYVAL__FREQ_48_MHZ 0x00000006u
N#define CYREG_CLK_IMO_TRIM1 0x40030f0cu
N#define CYFLD__OFFSET__OFFSET 0x00000000u
N#define CYFLD__OFFSET__SIZE 0x00000008u
N#define CYREG_CLK_IMO_TRIM2 0x40030f10u
N#define CYFLD__FSOFFSET__OFFSET 0x00000000u
N#define CYFLD__FSOFFSET__SIZE 0x00000003u
N#define CYREG_PWR_PWRSYS_TRIM1 0x40030f14u
N#define CYFLD__DPSLP_REF_TRIM__OFFSET 0x00000000u
N#define CYFLD__DPSLP_REF_TRIM__SIZE 0x00000004u
N#define CYFLD__SPARE_TRIM__OFFSET 0x00000004u
N#define CYFLD__SPARE_TRIM__SIZE 0x00000004u
N#define CYREG_CLK_IMO_TRIM3 0x40030f18u
N#define CYFLD__STEPSIZE__OFFSET 0x00000000u
N#define CYFLD__STEPSIZE__SIZE 0x00000005u
N#define CYFLD__TCTRIM__OFFSET 0x00000005u
N#define CYFLD__TCTRIM__SIZE 0x00000002u
N#define CYDEV_GPIO_BASE 0x40040000u
N#define CYDEV_GPIO_SIZE 0x00004000u
N#define CYDEV_GPIO_PRT0_BASE 0x40040000u
N#define CYDEV_GPIO_PRT0_SIZE 0x00000100u
N#define CYREG_GPIO_PRT0_DR 0x40040000u
N#define CYFLD_GPIO_PRT_DATA0__OFFSET 0x00000000u
N#define CYFLD_GPIO_PRT_DATA0__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_DATA1__OFFSET 0x00000001u
N#define CYFLD_GPIO_PRT_DATA1__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_DATA2__OFFSET 0x00000002u
N#define CYFLD_GPIO_PRT_DATA2__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_DATA3__OFFSET 0x00000003u
N#define CYFLD_GPIO_PRT_DATA3__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_DATA4__OFFSET 0x00000004u
N#define CYFLD_GPIO_PRT_DATA4__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_DATA5__OFFSET 0x00000005u
N#define CYFLD_GPIO_PRT_DATA5__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_DATA6__OFFSET 0x00000006u
N#define CYFLD_GPIO_PRT_DATA6__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_DATA7__OFFSET 0x00000007u
N#define CYFLD_GPIO_PRT_DATA7__SIZE 0x00000001u
N#define CYREG_GPIO_PRT0_PS 0x40040004u
N#define CYFLD_GPIO_PRT_FLT_DATA__OFFSET 0x00000008u
N#define CYFLD_GPIO_PRT_FLT_DATA__SIZE 0x00000001u
N#define CYREG_GPIO_PRT0_PC 0x40040008u
N#define CYFLD_GPIO_PRT_DM0__OFFSET 0x00000000u
N#define CYFLD_GPIO_PRT_DM0__SIZE 0x00000003u
N#define CYVAL_GPIO_PRT_DM0_OFF 0x00000000u
N#define CYVAL_GPIO_PRT_DM0_INPUT 0x00000001u
N#define CYVAL_GPIO_PRT_DM0_0_PU 0x00000002u
N#define CYVAL_GPIO_PRT_DM0_PD_1 0x00000003u
N#define CYVAL_GPIO_PRT_DM0_0_Z 0x00000004u
N#define CYVAL_GPIO_PRT_DM0_Z_1 0x00000005u
N#define CYVAL_GPIO_PRT_DM0_0_1 0x00000006u
N#define CYVAL_GPIO_PRT_DM0_PD_PU 0x00000007u
N#define CYFLD_GPIO_PRT_DM1__OFFSET 0x00000003u
N#define CYFLD_GPIO_PRT_DM1__SIZE 0x00000003u
N#define CYFLD_GPIO_PRT_DM2__OFFSET 0x00000006u
N#define CYFLD_GPIO_PRT_DM2__SIZE 0x00000003u
N#define CYFLD_GPIO_PRT_DM3__OFFSET 0x00000009u
N#define CYFLD_GPIO_PRT_DM3__SIZE 0x00000003u
N#define CYFLD_GPIO_PRT_DM4__OFFSET 0x0000000cu
N#define CYFLD_GPIO_PRT_DM4__SIZE 0x00000003u
N#define CYFLD_GPIO_PRT_DM5__OFFSET 0x0000000fu
N#define CYFLD_GPIO_PRT_DM5__SIZE 0x00000003u
N#define CYFLD_GPIO_PRT_DM6__OFFSET 0x00000012u
N#define CYFLD_GPIO_PRT_DM6__SIZE 0x00000003u
N#define CYFLD_GPIO_PRT_DM7__OFFSET 0x00000015u
N#define CYFLD_GPIO_PRT_DM7__SIZE 0x00000003u
N#define CYFLD_GPIO_PRT_PORT_VTRIP_SEL__OFFSET 0x00000018u
N#define CYFLD_GPIO_PRT_PORT_VTRIP_SEL__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_PORT_SLOW__OFFSET 0x00000019u
N#define CYFLD_GPIO_PRT_PORT_SLOW__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_PORT_IB_MODE_SEL__OFFSET 0x0000001eu
N#define CYFLD_GPIO_PRT_PORT_IB_MODE_SEL__SIZE 0x00000002u
N#define CYREG_GPIO_PRT0_INTR_CFG 0x4004000cu
N#define CYFLD_GPIO_PRT_EDGE0_SEL__OFFSET 0x00000000u
N#define CYFLD_GPIO_PRT_EDGE0_SEL__SIZE 0x00000002u
N#define CYVAL_GPIO_PRT_EDGE0_SEL_DISABLE 0x00000000u
N#define CYVAL_GPIO_PRT_EDGE0_SEL_RISING 0x00000001u
N#define CYVAL_GPIO_PRT_EDGE0_SEL_FALLING 0x00000002u
N#define CYVAL_GPIO_PRT_EDGE0_SEL_BOTH 0x00000003u
N#define CYFLD_GPIO_PRT_EDGE1_SEL__OFFSET 0x00000002u
N#define CYFLD_GPIO_PRT_EDGE1_SEL__SIZE 0x00000002u
N#define CYFLD_GPIO_PRT_EDGE2_SEL__OFFSET 0x00000004u
N#define CYFLD_GPIO_PRT_EDGE2_SEL__SIZE 0x00000002u
N#define CYFLD_GPIO_PRT_EDGE3_SEL__OFFSET 0x00000006u
N#define CYFLD_GPIO_PRT_EDGE3_SEL__SIZE 0x00000002u
N#define CYFLD_GPIO_PRT_EDGE4_SEL__OFFSET 0x00000008u
N#define CYFLD_GPIO_PRT_EDGE4_SEL__SIZE 0x00000002u
N#define CYFLD_GPIO_PRT_EDGE5_SEL__OFFSET 0x0000000au
N#define CYFLD_GPIO_PRT_EDGE5_SEL__SIZE 0x00000002u
N#define CYFLD_GPIO_PRT_EDGE6_SEL__OFFSET 0x0000000cu
N#define CYFLD_GPIO_PRT_EDGE6_SEL__SIZE 0x00000002u
N#define CYFLD_GPIO_PRT_EDGE7_SEL__OFFSET 0x0000000eu
N#define CYFLD_GPIO_PRT_EDGE7_SEL__SIZE 0x00000002u
N#define CYFLD_GPIO_PRT_FLT_EDGE_SEL__OFFSET 0x00000010u
N#define CYFLD_GPIO_PRT_FLT_EDGE_SEL__SIZE 0x00000002u
N#define CYVAL_GPIO_PRT_FLT_EDGE_SEL_DISABLE 0x00000000u
N#define CYVAL_GPIO_PRT_FLT_EDGE_SEL_RISING 0x00000001u
N#define CYVAL_GPIO_PRT_FLT_EDGE_SEL_FALLING 0x00000002u
N#define CYVAL_GPIO_PRT_FLT_EDGE_SEL_BOTH 0x00000003u
N#define CYFLD_GPIO_PRT_FLT_SEL__OFFSET 0x00000012u
N#define CYFLD_GPIO_PRT_FLT_SEL__SIZE 0x00000003u
N#define CYREG_GPIO_PRT0_INTR 0x40040010u
N#define CYFLD_GPIO_PRT_PS_DATA0__OFFSET 0x00000010u
N#define CYFLD_GPIO_PRT_PS_DATA0__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_PS_DATA1__OFFSET 0x00000011u
N#define CYFLD_GPIO_PRT_PS_DATA1__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_PS_DATA2__OFFSET 0x00000012u
N#define CYFLD_GPIO_PRT_PS_DATA2__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_PS_DATA3__OFFSET 0x00000013u
N#define CYFLD_GPIO_PRT_PS_DATA3__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_PS_DATA4__OFFSET 0x00000014u
N#define CYFLD_GPIO_PRT_PS_DATA4__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_PS_DATA5__OFFSET 0x00000015u
N#define CYFLD_GPIO_PRT_PS_DATA5__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_PS_DATA6__OFFSET 0x00000016u
N#define CYFLD_GPIO_PRT_PS_DATA6__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_PS_DATA7__OFFSET 0x00000017u
N#define CYFLD_GPIO_PRT_PS_DATA7__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_PS_FLT_DATA__OFFSET 0x00000018u
N#define CYFLD_GPIO_PRT_PS_FLT_DATA__SIZE 0x00000001u
N#define CYREG_GPIO_PRT0_PC2 0x40040018u
N#define CYFLD_GPIO_PRT_INP_DIS0__OFFSET 0x00000000u
N#define CYFLD_GPIO_PRT_INP_DIS0__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_INP_DIS1__OFFSET 0x00000001u
N#define CYFLD_GPIO_PRT_INP_DIS1__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_INP_DIS2__OFFSET 0x00000002u
N#define CYFLD_GPIO_PRT_INP_DIS2__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_INP_DIS3__OFFSET 0x00000003u
N#define CYFLD_GPIO_PRT_INP_DIS3__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_INP_DIS4__OFFSET 0x00000004u
N#define CYFLD_GPIO_PRT_INP_DIS4__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_INP_DIS5__OFFSET 0x00000005u
N#define CYFLD_GPIO_PRT_INP_DIS5__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_INP_DIS6__OFFSET 0x00000006u
N#define CYFLD_GPIO_PRT_INP_DIS6__SIZE 0x00000001u
N#define CYFLD_GPIO_PRT_INP_DIS7__OFFSET 0x00000007u
N#define CYFLD_GPIO_PRT_INP_DIS7__SIZE 0x00000001u
N#define CYREG_GPIO_PRT0_DR_SET 0x40040040u
N#define CYFLD_GPIO_PRT_DATA__OFFSET 0x00000000u
N#define CYFLD_GPIO_PRT_DATA__SIZE 0x00000008u
N#define CYREG_GPIO_PRT0_DR_CLR 0x40040044u
N#define CYREG_GPIO_PRT0_DR_INV 0x40040048u
N#define CYDEV_GPIO_PRT1_BASE 0x40040100u
N#define CYDEV_GPIO_PRT1_SIZE 0x00000100u
N#define CYREG_GPIO_PRT1_DR 0x40040100u
N#define CYREG_GPIO_PRT1_PS 0x40040104u
N#define CYREG_GPIO_PRT1_PC 0x40040108u
N#define CYREG_GPIO_PRT1_INTR_CFG 0x4004010cu
N#define CYREG_GPIO_PRT1_INTR 0x40040110u
N#define CYREG_GPIO_PRT1_PC2 0x40040118u
N#define CYREG_GPIO_PRT1_DR_SET 0x40040140u
N#define CYREG_GPIO_PRT1_DR_CLR 0x40040144u
N#define CYREG_GPIO_PRT1_DR_INV 0x40040148u
N#define CYDEV_GPIO_PRT2_BASE 0x40040200u
N#define CYDEV_GPIO_PRT2_SIZE 0x00000100u
N#define CYREG_GPIO_PRT2_DR 0x40040200u
N#define CYREG_GPIO_PRT2_PS 0x40040204u
N#define CYREG_GPIO_PRT2_PC 0x40040208u
N#define CYREG_GPIO_PRT2_INTR_CFG 0x4004020cu
N#define CYREG_GPIO_PRT2_INTR 0x40040210u
N#define CYREG_GPIO_PRT2_PC2 0x40040218u
N#define CYREG_GPIO_PRT2_DR_SET 0x40040240u
N#define CYREG_GPIO_PRT2_DR_CLR 0x40040244u
N#define CYREG_GPIO_PRT2_DR_INV 0x40040248u
N#define CYDEV_GPIO_PRT3_BASE 0x40040300u
N#define CYDEV_GPIO_PRT3_SIZE 0x00000100u
N#define CYREG_GPIO_PRT3_DR 0x40040300u
N#define CYREG_GPIO_PRT3_PS 0x40040304u
N#define CYREG_GPIO_PRT3_PC 0x40040308u
N#define CYREG_GPIO_PRT3_INTR_CFG 0x4004030cu
N#define CYREG_GPIO_PRT3_INTR 0x40040310u
N#define CYREG_GPIO_PRT3_PC2 0x40040318u
N#define CYREG_GPIO_PRT3_DR_SET 0x40040340u
N#define CYREG_GPIO_PRT3_DR_CLR 0x40040344u
N#define CYREG_GPIO_PRT3_DR_INV 0x40040348u
N#define CYDEV_GPIO_PRT4_BASE 0x40040400u
N#define CYDEV_GPIO_PRT4_SIZE 0x00000100u
N#define CYREG_GPIO_PRT4_DR 0x40040400u
N#define CYREG_GPIO_PRT4_PS 0x40040404u
N#define CYREG_GPIO_PRT4_PC 0x40040408u
N#define CYREG_GPIO_PRT4_INTR_CFG 0x4004040cu
N#define CYREG_GPIO_PRT4_INTR 0x40040410u
N#define CYREG_GPIO_PRT4_PC2 0x40040418u
N#define CYREG_GPIO_PRT4_DR_SET 0x40040440u
N#define CYREG_GPIO_PRT4_DR_CLR 0x40040444u
N#define CYREG_GPIO_PRT4_DR_INV 0x40040448u
N#define CYDEV_GPIO_PRT5_BASE 0x40040500u
N#define CYDEV_GPIO_PRT5_SIZE 0x00000100u
N#define CYREG_GPIO_PRT5_DR 0x40040500u
N#define CYREG_GPIO_PRT5_PS 0x40040504u
N#define CYREG_GPIO_PRT5_PC 0x40040508u
N#define CYREG_GPIO_PRT5_INTR_CFG 0x4004050cu
N#define CYREG_GPIO_PRT5_INTR 0x40040510u
N#define CYREG_GPIO_PRT5_PC2 0x40040518u
N#define CYREG_GPIO_PRT5_DR_SET 0x40040540u
N#define CYREG_GPIO_PRT5_DR_CLR 0x40040544u
N#define CYREG_GPIO_PRT5_DR_INV 0x40040548u
N#define CYDEV_GPIO_PRT6_BASE 0x40040600u
N#define CYDEV_GPIO_PRT6_SIZE 0x00000100u
N#define CYREG_GPIO_PRT6_DR 0x40040600u
N#define CYREG_GPIO_PRT6_PS 0x40040604u
N#define CYREG_GPIO_PRT6_PC 0x40040608u
N#define CYREG_GPIO_PRT6_INTR_CFG 0x4004060cu
N#define CYREG_GPIO_PRT6_INTR 0x40040610u
N#define CYREG_GPIO_PRT6_PC2 0x40040618u
N#define CYREG_GPIO_PRT6_DR_SET 0x40040640u
N#define CYREG_GPIO_PRT6_DR_CLR 0x40040644u
N#define CYREG_GPIO_PRT6_DR_INV 0x40040648u
N#define CYDEV_GPIO_PRT7_BASE 0x40040700u
N#define CYDEV_GPIO_PRT7_SIZE 0x00000100u
N#define CYREG_GPIO_PRT7_DR 0x40040700u
N#define CYREG_GPIO_PRT7_PS 0x40040704u
N#define CYREG_GPIO_PRT7_PC 0x40040708u
N#define CYREG_GPIO_PRT7_INTR_CFG 0x4004070cu
N#define CYREG_GPIO_PRT7_INTR 0x40040710u
N#define CYREG_GPIO_PRT7_PC2 0x40040718u
N#define CYREG_GPIO_PRT7_DR_SET 0x40040740u
N#define CYREG_GPIO_PRT7_DR_CLR 0x40040744u
N#define CYREG_GPIO_PRT7_DR_INV 0x40040748u
N#define CYREG_GPIO_INTR_CAUSE 0x40041000u
N#define CYFLD_GPIO_PORT_INT__OFFSET 0x00000000u
N#define CYFLD_GPIO_PORT_INT__SIZE 0x00000008u
N#define CYDEV_PRGIO_BASE 0x40050000u
N#define CYDEV_PRGIO_SIZE 0x00001000u
N#define CYDEV_PRGIO_PRT0_BASE 0x40050000u
N#define CYDEV_PRGIO_PRT0_SIZE 0x00000100u
N#define CYREG_PRGIO_PRT0_CTL 0x40050000u
N#define CYFLD_PRGIO_PRT_BYPASS__OFFSET 0x00000000u
N#define CYFLD_PRGIO_PRT_BYPASS__SIZE 0x00000008u
N#define CYFLD_PRGIO_PRT_CLOCK_SRC__OFFSET 0x00000008u
N#define CYFLD_PRGIO_PRT_CLOCK_SRC__SIZE 0x00000005u
N#define CYFLD_PRGIO_PRT_HLD_OVR__OFFSET 0x00000018u
N#define CYFLD_PRGIO_PRT_HLD_OVR__SIZE 0x00000001u
N#define CYFLD_PRGIO_PRT_PIPELINE_EN__OFFSET 0x00000019u
N#define CYFLD_PRGIO_PRT_PIPELINE_EN__SIZE 0x00000001u
N#define CYFLD_PRGIO_PRT_ENABLED__OFFSET 0x0000001fu
N#define CYFLD_PRGIO_PRT_ENABLED__SIZE 0x00000001u
N#define CYREG_PRGIO_PRT0_SYNC_CTL 0x40050010u
N#define CYFLD_PRGIO_PRT_IO_SYNC_EN__OFFSET 0x00000000u
N#define CYFLD_PRGIO_PRT_IO_SYNC_EN__SIZE 0x00000008u
N#define CYFLD_PRGIO_PRT_CHIP_SYNC_EN__OFFSET 0x00000008u
N#define CYFLD_PRGIO_PRT_CHIP_SYNC_EN__SIZE 0x00000008u
N#define CYREG_PRGIO_PRT0_LUT_SEL0 0x40050020u
N#define CYFLD_PRGIO_PRT_LUT_TR0_SEL__OFFSET 0x00000000u
N#define CYFLD_PRGIO_PRT_LUT_TR0_SEL__SIZE 0x00000004u
N#define CYFLD_PRGIO_PRT_LUT_TR1_SEL__OFFSET 0x00000008u
N#define CYFLD_PRGIO_PRT_LUT_TR1_SEL__SIZE 0x00000004u
N#define CYFLD_PRGIO_PRT_LUT_TR2_SEL__OFFSET 0x00000010u
N#define CYFLD_PRGIO_PRT_LUT_TR2_SEL__SIZE 0x00000004u
N#define CYREG_PRGIO_PRT0_LUT_SEL1 0x40050024u
N#define CYREG_PRGIO_PRT0_LUT_SEL2 0x40050028u
N#define CYREG_PRGIO_PRT0_LUT_SEL3 0x4005002cu
N#define CYREG_PRGIO_PRT0_LUT_SEL4 0x40050030u
N#define CYREG_PRGIO_PRT0_LUT_SEL5 0x40050034u
N#define CYREG_PRGIO_PRT0_LUT_SEL6 0x40050038u
N#define CYREG_PRGIO_PRT0_LUT_SEL7 0x4005003cu
N#define CYREG_PRGIO_PRT0_LUT_CTL0 0x40050040u
N#define CYFLD_PRGIO_PRT_LUT__OFFSET 0x00000000u
N#define CYFLD_PRGIO_PRT_LUT__SIZE 0x00000008u
N#define CYFLD_PRGIO_PRT_LUT_OPC__OFFSET 0x00000008u
N#define CYFLD_PRGIO_PRT_LUT_OPC__SIZE 0x00000002u
N#define CYREG_PRGIO_PRT0_LUT_CTL1 0x40050044u
N#define CYREG_PRGIO_PRT0_LUT_CTL2 0x40050048u
N#define CYREG_PRGIO_PRT0_LUT_CTL3 0x4005004cu
N#define CYREG_PRGIO_PRT0_LUT_CTL4 0x40050050u
N#define CYREG_PRGIO_PRT0_LUT_CTL5 0x40050054u
N#define CYREG_PRGIO_PRT0_LUT_CTL6 0x40050058u
N#define CYREG_PRGIO_PRT0_LUT_CTL7 0x4005005cu
N#define CYREG_PRGIO_PRT0_DU_SEL 0x400500c0u
N#define CYFLD_PRGIO_PRT_DU_TR0_SEL__OFFSET 0x00000000u
N#define CYFLD_PRGIO_PRT_DU_TR0_SEL__SIZE 0x00000004u
N#define CYFLD_PRGIO_PRT_DU_TR1_SEL__OFFSET 0x00000008u
N#define CYFLD_PRGIO_PRT_DU_TR1_SEL__SIZE 0x00000004u
N#define CYFLD_PRGIO_PRT_DU_TR2_SEL__OFFSET 0x00000010u
N#define CYFLD_PRGIO_PRT_DU_TR2_SEL__SIZE 0x00000004u
N#define CYFLD_PRGIO_PRT_DU_DATA0_SEL__OFFSET 0x00000018u
N#define CYFLD_PRGIO_PRT_DU_DATA0_SEL__SIZE 0x00000002u
N#define CYFLD_PRGIO_PRT_DU_DATA1_SEL__OFFSET 0x0000001cu
N#define CYFLD_PRGIO_PRT_DU_DATA1_SEL__SIZE 0x00000002u
N#define CYREG_PRGIO_PRT0_DU_CTL 0x400500c4u
N#define CYFLD_PRGIO_PRT_DU_SIZE__OFFSET 0x00000000u
N#define CYFLD_PRGIO_PRT_DU_SIZE__SIZE 0x00000003u
N#define CYFLD_PRGIO_PRT_DU_OPC__OFFSET 0x00000008u
N#define CYFLD_PRGIO_PRT_DU_OPC__SIZE 0x00000004u
N#define CYREG_PRGIO_PRT0_DATA 0x400500f0u
N#define CYFLD_PRGIO_PRT_DATA__OFFSET 0x00000000u
N#define CYFLD_PRGIO_PRT_DATA__SIZE 0x00000008u
N#define CYDEV_PRGIO_PRT1_BASE 0x40050100u
N#define CYDEV_PRGIO_PRT1_SIZE 0x00000100u
N#define CYREG_PRGIO_PRT1_CTL 0x40050100u
N#define CYREG_PRGIO_PRT1_SYNC_CTL 0x40050110u
N#define CYREG_PRGIO_PRT1_LUT_SEL0 0x40050120u
N#define CYREG_PRGIO_PRT1_LUT_SEL1 0x40050124u
N#define CYREG_PRGIO_PRT1_LUT_SEL2 0x40050128u
N#define CYREG_PRGIO_PRT1_LUT_SEL3 0x4005012cu
N#define CYREG_PRGIO_PRT1_LUT_SEL4 0x40050130u
N#define CYREG_PRGIO_PRT1_LUT_SEL5 0x40050134u
N#define CYREG_PRGIO_PRT1_LUT_SEL6 0x40050138u
N#define CYREG_PRGIO_PRT1_LUT_SEL7 0x4005013cu
N#define CYREG_PRGIO_PRT1_LUT_CTL0 0x40050140u
N#define CYREG_PRGIO_PRT1_LUT_CTL1 0x40050144u
N#define CYREG_PRGIO_PRT1_LUT_CTL2 0x40050148u
N#define CYREG_PRGIO_PRT1_LUT_CTL3 0x4005014cu
N#define CYREG_PRGIO_PRT1_LUT_CTL4 0x40050150u
N#define CYREG_PRGIO_PRT1_LUT_CTL5 0x40050154u
N#define CYREG_PRGIO_PRT1_LUT_CTL6 0x40050158u
N#define CYREG_PRGIO_PRT1_LUT_CTL7 0x4005015cu
N#define CYREG_PRGIO_PRT1_DU_SEL 0x400501c0u
N#define CYREG_PRGIO_PRT1_DU_CTL 0x400501c4u
N#define CYREG_PRGIO_PRT1_DATA 0x400501f0u
N#define CYDEV_PRGIO_PRT2_BASE 0x40050200u
N#define CYDEV_PRGIO_PRT2_SIZE 0x00000100u
N#define CYREG_PRGIO_PRT2_CTL 0x40050200u
N#define CYREG_PRGIO_PRT2_SYNC_CTL 0x40050210u
N#define CYREG_PRGIO_PRT2_LUT_SEL0 0x40050220u
N#define CYREG_PRGIO_PRT2_LUT_SEL1 0x40050224u
N#define CYREG_PRGIO_PRT2_LUT_SEL2 0x40050228u
N#define CYREG_PRGIO_PRT2_LUT_SEL3 0x4005022cu
N#define CYREG_PRGIO_PRT2_LUT_SEL4 0x40050230u
N#define CYREG_PRGIO_PRT2_LUT_SEL5 0x40050234u
N#define CYREG_PRGIO_PRT2_LUT_SEL6 0x40050238u
N#define CYREG_PRGIO_PRT2_LUT_SEL7 0x4005023cu
N#define CYREG_PRGIO_PRT2_LUT_CTL0 0x40050240u
N#define CYREG_PRGIO_PRT2_LUT_CTL1 0x40050244u
N#define CYREG_PRGIO_PRT2_LUT_CTL2 0x40050248u
N#define CYREG_PRGIO_PRT2_LUT_CTL3 0x4005024cu
N#define CYREG_PRGIO_PRT2_LUT_CTL4 0x40050250u
N#define CYREG_PRGIO_PRT2_LUT_CTL5 0x40050254u
N#define CYREG_PRGIO_PRT2_LUT_CTL6 0x40050258u
N#define CYREG_PRGIO_PRT2_LUT_CTL7 0x4005025cu
N#define CYREG_PRGIO_PRT2_DU_SEL 0x400502c0u
N#define CYREG_PRGIO_PRT2_DU_CTL 0x400502c4u
N#define CYREG_PRGIO_PRT2_DATA 0x400502f0u
N#define CYDEV_CPUSS_BASE 0x40100000u
N#define CYDEV_CPUSS_SIZE 0x00001000u
N#define CYREG_CPUSS_SYSREQ 0x40100004u
N#define CYFLD_CPUSS_SYSCALL_COMMAND__OFFSET 0x00000000u
N#define CYFLD_CPUSS_SYSCALL_COMMAND__SIZE 0x00000010u
N#define CYFLD_CPUSS_DIS_RESET_VECT_REL__OFFSET 0x0000001bu
N#define CYFLD_CPUSS_DIS_RESET_VECT_REL__SIZE 0x00000001u
N#define CYFLD_CPUSS_PRIVILEGED__OFFSET 0x0000001cu
N#define CYFLD_CPUSS_PRIVILEGED__SIZE 0x00000001u
N#define CYFLD_CPUSS_ROM_ACCESS_EN__OFFSET 0x0000001du
N#define CYFLD_CPUSS_ROM_ACCESS_EN__SIZE 0x00000001u
N#define CYFLD_CPUSS_HMASTER_0__OFFSET 0x0000001eu
N#define CYFLD_CPUSS_HMASTER_0__SIZE 0x00000001u
N#define CYFLD_CPUSS_SYSCALL_REQ__OFFSET 0x0000001fu
N#define CYFLD_CPUSS_SYSCALL_REQ__SIZE 0x00000001u
N#define CYREG_CPUSS_SYSARG 0x40100008u
N#define CYFLD_CPUSS_SYSCALL_ARG__OFFSET 0x00000000u
N#define CYFLD_CPUSS_SYSCALL_ARG__SIZE 0x00000020u
N#define CYREG_CPUSS_PROTECTION 0x4010000cu
N#define CYFLD_CPUSS_PROTECTION_MODE__OFFSET 0x00000000u
N#define CYFLD_CPUSS_PROTECTION_MODE__SIZE 0x00000004u
N#define CYFLD_CPUSS_FLASH_LOCK__OFFSET 0x0000001eu
N#define CYFLD_CPUSS_FLASH_LOCK__SIZE 0x00000001u
N#define CYFLD_CPUSS_PROTECTION_LOCK__OFFSET 0x0000001fu
N#define CYFLD_CPUSS_PROTECTION_LOCK__SIZE 0x00000001u
N#define CYREG_CPUSS_PRIV_ROM 0x40100010u
N#define CYFLD_CPUSS_BROM_PROT_LIMIT__OFFSET 0x00000000u
N#define CYFLD_CPUSS_BROM_PROT_LIMIT__SIZE 0x00000008u
N#define CYREG_CPUSS_PRIV_RAM 0x40100014u
N#define CYFLD_CPUSS_RAM_PROT_LIMIT__OFFSET 0x00000000u
N#define CYFLD_CPUSS_RAM_PROT_LIMIT__SIZE 0x00000009u
N#define CYREG_CPUSS_PRIV_FLASH 0x40100018u
N#define CYFLD_CPUSS_FLASH_PROT_LIMIT__OFFSET 0x00000000u
N#define CYFLD_CPUSS_FLASH_PROT_LIMIT__SIZE 0x0000000cu
N#define CYREG_CPUSS_WOUNDING 0x4010001cu
N#define CYFLD_CPUSS_RAM_WOUND__OFFSET 0x00000010u
N#define CYFLD_CPUSS_RAM_WOUND__SIZE 0x00000003u
N#define CYFLD_CPUSS_FLASH_WOUND__OFFSET 0x00000014u
N#define CYFLD_CPUSS_FLASH_WOUND__SIZE 0x00000003u
N#define CYREG_CPUSS_FLASH_CTL 0x40100030u
N#define CYFLD_CPUSS_FLASH_WS__OFFSET 0x00000000u
N#define CYFLD_CPUSS_FLASH_WS__SIZE 0x00000002u
N#define CYFLD_CPUSS_PREF_EN__OFFSET 0x00000004u
N#define CYFLD_CPUSS_PREF_EN__SIZE 0x00000001u
N#define CYFLD_CPUSS_FLASH_INVALIDATE__OFFSET 0x00000008u
N#define CYFLD_CPUSS_FLASH_INVALIDATE__SIZE 0x00000001u
N#define CYFLD_CPUSS_ARB__OFFSET 0x00000010u
N#define CYFLD_CPUSS_ARB__SIZE 0x00000002u
N#define CYREG_CPUSS_ROM_CTL 0x40100034u
N#define CYFLD_CPUSS_ROM_WS__OFFSET 0x00000000u
N#define CYFLD_CPUSS_ROM_WS__SIZE 0x00000001u
N#define CYREG_CPUSS_RAM_CTL 0x40100038u
N#define CYREG_CPUSS_DMAC_CTL 0x4010003cu
N#define CYREG_CPUSS_SL_CTL0 0x40100100u
N#define CYREG_CPUSS_SL_CTL1 0x40100104u
N#define CYREG_CPUSS_SL_CTL2 0x40100108u
N#define CYDEV_DMAC_BASE 0x40101000u
N#define CYDEV_DMAC_SIZE 0x00001000u
N#define CYREG_DMAC_CTL 0x40101000u
N#define CYFLD_DMAC_ENABLED__OFFSET 0x0000001fu
N#define CYFLD_DMAC_ENABLED__SIZE 0x00000001u
N#define CYREG_DMAC_STATUS 0x40101010u
N#define CYFLD_DMAC_DATA_NR__OFFSET 0x00000000u
N#define CYFLD_DMAC_DATA_NR__SIZE 0x00000010u
N#define CYFLD_DMAC_CH_ADDR__OFFSET 0x00000010u
N#define CYFLD_DMAC_CH_ADDR__SIZE 0x00000003u
N#define CYFLD_DMAC_STATE__OFFSET 0x00000018u
N#define CYFLD_DMAC_STATE__SIZE 0x00000003u
N#define CYFLD_DMAC_PRIO__OFFSET 0x0000001cu
N#define CYFLD_DMAC_PRIO__SIZE 0x00000002u
N#define CYFLD_DMAC_PING_PONG__OFFSET 0x0000001eu
N#define CYFLD_DMAC_PING_PONG__SIZE 0x00000001u
N#define CYFLD_DMAC_ACTIVE__OFFSET 0x0000001fu
N#define CYFLD_DMAC_ACTIVE__SIZE 0x00000001u
N#define CYREG_DMAC_STATUS_SRC_ADDR 0x40101014u
N#define CYFLD_DMAC_ADDR__OFFSET 0x00000000u
N#define CYFLD_DMAC_ADDR__SIZE 0x00000020u
N#define CYREG_DMAC_STATUS_DST_ADDR 0x40101018u
N#define CYREG_DMAC_STATUS_CH_ACT 0x4010101cu
N#define CYFLD_DMAC_CH__OFFSET 0x00000000u
N#define CYFLD_DMAC_CH__SIZE 0x00000008u
N#define CYREG_DMAC_CH_CTL0 0x40101080u
N#define CYREG_DMAC_CH_CTL1 0x40101084u
N#define CYREG_DMAC_CH_CTL2 0x40101088u
N#define CYREG_DMAC_CH_CTL3 0x4010108cu
N#define CYREG_DMAC_CH_CTL4 0x40101090u
N#define CYREG_DMAC_CH_CTL5 0x40101094u
N#define CYREG_DMAC_CH_CTL6 0x40101098u
N#define CYREG_DMAC_CH_CTL7 0x4010109cu
N#define CYREG_DMAC_INTR 0x401017f0u
N#define CYREG_DMAC_INTR_SET 0x401017f4u
N#define CYREG_DMAC_INTR_MASK 0x401017f8u
N#define CYREG_DMAC_INTR_MASKED 0x401017fcu
N#define CYDEV_DMAC_DESCR0_BASE 0x40101800u
N#define CYDEV_DMAC_DESCR0_SIZE 0x00000020u
N#define CYREG_DMAC_DESCR0_PING_SRC 0x40101800u
N#define CYFLD_DMAC_DESCR_ADDR__OFFSET 0x00000000u
N#define CYFLD_DMAC_DESCR_ADDR__SIZE 0x00000020u
N#define CYREG_DMAC_DESCR0_PING_DST 0x40101804u
N#define CYREG_DMAC_DESCR0_PING_CTL 0x40101808u
N#define CYFLD_DMAC_DESCR_DATA_NR__OFFSET 0x00000000u
N#define CYFLD_DMAC_DESCR_DATA_NR__SIZE 0x00000010u
N#define CYFLD_DMAC_DESCR_DATA_SIZE__OFFSET 0x00000010u
N#define CYFLD_DMAC_DESCR_DATA_SIZE__SIZE 0x00000002u
N#define CYFLD_DMAC_DESCR_DST_TRANSFER_SIZE__OFFSET 0x00000014u
N#define CYFLD_DMAC_DESCR_DST_TRANSFER_SIZE__SIZE 0x00000001u
N#define CYFLD_DMAC_DESCR_DST_ADDR_INCR__OFFSET 0x00000015u
N#define CYFLD_DMAC_DESCR_DST_ADDR_INCR__SIZE 0x00000001u
N#define CYFLD_DMAC_DESCR_SRC_TRANSFER_SIZE__OFFSET 0x00000016u
N#define CYFLD_DMAC_DESCR_SRC_TRANSFER_SIZE__SIZE 0x00000001u
N#define CYFLD_DMAC_DESCR_SRC_ADDR_INCR__OFFSET 0x00000017u
N#define CYFLD_DMAC_DESCR_SRC_ADDR_INCR__SIZE 0x00000001u
N#define CYFLD_DMAC_DESCR_WAIT_FOR_DEACT__OFFSET 0x00000018u
N#define CYFLD_DMAC_DESCR_WAIT_FOR_DEACT__SIZE 0x00000002u
N#define CYFLD_DMAC_DESCR_INV_DESCR__OFFSET 0x0000001au
N#define CYFLD_DMAC_DESCR_INV_DESCR__SIZE 0x00000001u
N#define CYFLD_DMAC_DESCR_SET_CAUSE__OFFSET 0x0000001bu
N#define CYFLD_DMAC_DESCR_SET_CAUSE__SIZE 0x00000001u
N#define CYFLD_DMAC_DESCR_PREEMPTABLE__OFFSET 0x0000001cu
N#define CYFLD_DMAC_DESCR_PREEMPTABLE__SIZE 0x00000001u
N#define CYFLD_DMAC_DESCR_FLIPPING__OFFSET 0x0000001du
N#define CYFLD_DMAC_DESCR_FLIPPING__SIZE 0x00000001u
N#define CYFLD_DMAC_DESCR_OPCODE__OFFSET 0x0000001eu
N#define CYFLD_DMAC_DESCR_OPCODE__SIZE 0x00000002u
N#define CYREG_DMAC_DESCR0_PING_STATUS 0x4010180cu
N#define CYFLD_DMAC_DESCR_CURR_DATA_NR__OFFSET 0x00000000u
N#define CYFLD_DMAC_DESCR_CURR_DATA_NR__SIZE 0x00000010u
N#define CYFLD_DMAC_DESCR_RESPONSE__OFFSET 0x00000010u
N#define CYFLD_DMAC_DESCR_RESPONSE__SIZE 0x00000003u
N#define CYFLD_DMAC_DESCR_VALID__OFFSET 0x0000001fu
N#define CYFLD_DMAC_DESCR_VALID__SIZE 0x00000001u
N#define CYREG_DMAC_DESCR0_PONG_SRC 0x40101810u
N#define CYREG_DMAC_DESCR0_PONG_DST 0x40101814u
N#define CYREG_DMAC_DESCR0_PONG_CTL 0x40101818u
N#define CYREG_DMAC_DESCR0_PONG_STATUS 0x4010181cu
N#define CYDEV_DMAC_DESCR1_BASE 0x40101820u
N#define CYDEV_DMAC_DESCR1_SIZE 0x00000020u
N#define CYREG_DMAC_DESCR1_PING_SRC 0x40101820u
N#define CYREG_DMAC_DESCR1_PING_DST 0x40101824u
N#define CYREG_DMAC_DESCR1_PING_CTL 0x40101828u
N#define CYREG_DMAC_DESCR1_PING_STATUS 0x4010182cu
N#define CYREG_DMAC_DESCR1_PONG_SRC 0x40101830u
N#define CYREG_DMAC_DESCR1_PONG_DST 0x40101834u
N#define CYREG_DMAC_DESCR1_PONG_CTL 0x40101838u
N#define CYREG_DMAC_DESCR1_PONG_STATUS 0x4010183cu
N#define CYDEV_DMAC_DESCR2_BASE 0x40101840u
N#define CYDEV_DMAC_DESCR2_SIZE 0x00000020u
N#define CYREG_DMAC_DESCR2_PING_SRC 0x40101840u
N#define CYREG_DMAC_DESCR2_PING_DST 0x40101844u
N#define CYREG_DMAC_DESCR2_PING_CTL 0x40101848u
N#define CYREG_DMAC_DESCR2_PING_STATUS 0x4010184cu
N#define CYREG_DMAC_DESCR2_PONG_SRC 0x40101850u
N#define CYREG_DMAC_DESCR2_PONG_DST 0x40101854u
N#define CYREG_DMAC_DESCR2_PONG_CTL 0x40101858u
N#define CYREG_DMAC_DESCR2_PONG_STATUS 0x4010185cu
N#define CYDEV_DMAC_DESCR3_BASE 0x40101860u
N#define CYDEV_DMAC_DESCR3_SIZE 0x00000020u
N#define CYREG_DMAC_DESCR3_PING_SRC 0x40101860u
N#define CYREG_DMAC_DESCR3_PING_DST 0x40101864u
N#define CYREG_DMAC_DESCR3_PING_CTL 0x40101868u
N#define CYREG_DMAC_DESCR3_PING_STATUS 0x4010186cu
N#define CYREG_DMAC_DESCR3_PONG_SRC 0x40101870u
N#define CYREG_DMAC_DESCR3_PONG_DST 0x40101874u
N#define CYREG_DMAC_DESCR3_PONG_CTL 0x40101878u
N#define CYREG_DMAC_DESCR3_PONG_STATUS 0x4010187cu
N#define CYDEV_DMAC_DESCR4_BASE 0x40101880u
N#define CYDEV_DMAC_DESCR4_SIZE 0x00000020u
N#define CYREG_DMAC_DESCR4_PING_SRC 0x40101880u
N#define CYREG_DMAC_DESCR4_PING_DST 0x40101884u
N#define CYREG_DMAC_DESCR4_PING_CTL 0x40101888u
N#define CYREG_DMAC_DESCR4_PING_STATUS 0x4010188cu
N#define CYREG_DMAC_DESCR4_PONG_SRC 0x40101890u
N#define CYREG_DMAC_DESCR4_PONG_DST 0x40101894u
N#define CYREG_DMAC_DESCR4_PONG_CTL 0x40101898u
N#define CYREG_DMAC_DESCR4_PONG_STATUS 0x4010189cu
N#define CYDEV_DMAC_DESCR5_BASE 0x401018a0u
N#define CYDEV_DMAC_DESCR5_SIZE 0x00000020u
N#define CYREG_DMAC_DESCR5_PING_SRC 0x401018a0u
N#define CYREG_DMAC_DESCR5_PING_DST 0x401018a4u
N#define CYREG_DMAC_DESCR5_PING_CTL 0x401018a8u
N#define CYREG_DMAC_DESCR5_PING_STATUS 0x401018acu
N#define CYREG_DMAC_DESCR5_PONG_SRC 0x401018b0u
N#define CYREG_DMAC_DESCR5_PONG_DST 0x401018b4u
N#define CYREG_DMAC_DESCR5_PONG_CTL 0x401018b8u
N#define CYREG_DMAC_DESCR5_PONG_STATUS 0x401018bcu
N#define CYDEV_DMAC_DESCR6_BASE 0x401018c0u
N#define CYDEV_DMAC_DESCR6_SIZE 0x00000020u
N#define CYREG_DMAC_DESCR6_PING_SRC 0x401018c0u
N#define CYREG_DMAC_DESCR6_PING_DST 0x401018c4u
N#define CYREG_DMAC_DESCR6_PING_CTL 0x401018c8u
N#define CYREG_DMAC_DESCR6_PING_STATUS 0x401018ccu
N#define CYREG_DMAC_DESCR6_PONG_SRC 0x401018d0u
N#define CYREG_DMAC_DESCR6_PONG_DST 0x401018d4u
N#define CYREG_DMAC_DESCR6_PONG_CTL 0x401018d8u
N#define CYREG_DMAC_DESCR6_PONG_STATUS 0x401018dcu
N#define CYDEV_DMAC_DESCR7_BASE 0x401018e0u
N#define CYDEV_DMAC_DESCR7_SIZE 0x00000020u
N#define CYREG_DMAC_DESCR7_PING_SRC 0x401018e0u
N#define CYREG_DMAC_DESCR7_PING_DST 0x401018e4u
N#define CYREG_DMAC_DESCR7_PING_CTL 0x401018e8u
N#define CYREG_DMAC_DESCR7_PING_STATUS 0x401018ecu
N#define CYREG_DMAC_DESCR7_PONG_SRC 0x401018f0u
N#define CYREG_DMAC_DESCR7_PONG_DST 0x401018f4u
N#define CYREG_DMAC_DESCR7_PONG_CTL 0x401018f8u
N#define CYREG_DMAC_DESCR7_PONG_STATUS 0x401018fcu
N#define CYDEV_SPCIF_BASE 0x40110000u
N#define CYDEV_SPCIF_SIZE 0x00010000u
N#define CYREG_SPCIF_GEOMETRY 0x40110000u
N#define CYFLD_SPCIF_FLASH__OFFSET 0x00000000u
N#define CYFLD_SPCIF_FLASH__SIZE 0x0000000eu
N#define CYFLD_SPCIF_SFLASH__OFFSET 0x0000000eu
N#define CYFLD_SPCIF_SFLASH__SIZE 0x00000006u
N#define CYFLD_SPCIF_NUM_FLASH__OFFSET 0x00000014u
N#define CYFLD_SPCIF_NUM_FLASH__SIZE 0x00000002u
N#define CYFLD_SPCIF_FLASH_ROW__OFFSET 0x00000016u
N#define CYFLD_SPCIF_FLASH_ROW__SIZE 0x00000002u
N#define CYFLD_SPCIF_DE_CPD_LP__OFFSET 0x0000001fu
N#define CYFLD_SPCIF_DE_CPD_LP__SIZE 0x00000001u
N#define CYREG_SPCIF_INTR 0x401107f0u
N#define CYFLD_SPCIF_TIMER__OFFSET 0x00000000u
N#define CYFLD_SPCIF_TIMER__SIZE 0x00000001u
N#define CYREG_SPCIF_INTR_SET 0x401107f4u
N#define CYREG_SPCIF_INTR_MASK 0x401107f8u
N#define CYREG_SPCIF_INTR_MASKED 0x401107fcu
N#define CYDEV_TCPWM_BASE 0x40200000u
N#define CYDEV_TCPWM_SIZE 0x00010000u
N#define CYREG_TCPWM_CTRL 0x40200000u
N#define CYFLD_TCPWM_COUNTER_ENABLED__OFFSET 0x00000000u
N#define CYFLD_TCPWM_COUNTER_ENABLED__SIZE 0x00000008u
N#define CYREG_TCPWM_CMD 0x40200008u
N#define CYFLD_TCPWM_COUNTER_CAPTURE__OFFSET 0x00000000u
N#define CYFLD_TCPWM_COUNTER_CAPTURE__SIZE 0x00000008u
N#define CYFLD_TCPWM_COUNTER_RELOAD__OFFSET 0x00000008u
N#define CYFLD_TCPWM_COUNTER_RELOAD__SIZE 0x00000008u
N#define CYFLD_TCPWM_COUNTER_STOP__OFFSET 0x00000010u
N#define CYFLD_TCPWM_COUNTER_STOP__SIZE 0x00000008u
N#define CYFLD_TCPWM_COUNTER_START__OFFSET 0x00000018u
N#define CYFLD_TCPWM_COUNTER_START__SIZE 0x00000008u
N#define CYREG_TCPWM_INTR_CAUSE 0x4020000cu
N#define CYFLD_TCPWM_COUNTER_INT__OFFSET 0x00000000u
N#define CYFLD_TCPWM_COUNTER_INT__SIZE 0x00000008u
N#define CYDEV_TCPWM_CNT0_BASE 0x40200100u
N#define CYDEV_TCPWM_CNT0_SIZE 0x00000040u
N#define CYREG_TCPWM_CNT0_CTRL 0x40200100u
N#define CYFLD_TCPWM_CNT_AUTO_RELOAD_CC__OFFSET 0x00000000u
N#define CYFLD_TCPWM_CNT_AUTO_RELOAD_CC__SIZE 0x00000001u
N#define CYFLD_TCPWM_CNT_AUTO_RELOAD_PERIOD__OFFSET 0x00000001u
N#define CYFLD_TCPWM_CNT_AUTO_RELOAD_PERIOD__SIZE 0x00000001u
N#define CYFLD_TCPWM_CNT_PWM_SYNC_KILL__OFFSET 0x00000002u
N#define CYFLD_TCPWM_CNT_PWM_SYNC_KILL__SIZE 0x00000001u
N#define CYFLD_TCPWM_CNT_PWM_STOP_ON_KILL__OFFSET 0x00000003u
N#define CYFLD_TCPWM_CNT_PWM_STOP_ON_KILL__SIZE 0x00000001u
N#define CYFLD_TCPWM_CNT_GENERIC__OFFSET 0x00000008u
N#define CYFLD_TCPWM_CNT_GENERIC__SIZE 0x00000008u
N#define CYVAL_TCPWM_CNT_GENERIC_DIVBY1 0x00000000u
N#define CYVAL_TCPWM_CNT_GENERIC_DIVBY2 0x00000001u
N#define CYVAL_TCPWM_CNT_GENERIC_DIVBY4 0x00000002u
N#define CYVAL_TCPWM_CNT_GENERIC_DIVBY8 0x00000003u
N#define CYVAL_TCPWM_CNT_GENERIC_DIVBY16 0x00000004u
N#define CYVAL_TCPWM_CNT_GENERIC_DIVBY32 0x00000005u
N#define CYVAL_TCPWM_CNT_GENERIC_DIVBY64 0x00000006u
N#define CYVAL_TCPWM_CNT_GENERIC_DIVBY128 0x00000007u
N#define CYFLD_TCPWM_CNT_UP_DOWN_MODE__OFFSET 0x00000010u
N#define CYFLD_TCPWM_CNT_UP_DOWN_MODE__SIZE 0x00000002u
N#define CYVAL_TCPWM_CNT_UP_DOWN_MODE_COUNT_UP 0x00000000u
N#define CYVAL_TCPWM_CNT_UP_DOWN_MODE_COUNT_DOWN 0x00000001u
N#define CYVAL_TCPWM_CNT_UP_DOWN_MODE_COUNT_UPDN1 0x00000002u
N#define CYVAL_TCPWM_CNT_UP_DOWN_MODE_COUNT_UPDN2 0x00000003u
N#define CYFLD_TCPWM_CNT_ONE_SHOT__OFFSET 0x00000012u
N#define CYFLD_TCPWM_CNT_ONE_SHOT__SIZE 0x00000001u
N#define CYFLD_TCPWM_CNT_QUADRATURE_MODE__OFFSET 0x00000014u
N#define CYFLD_TCPWM_CNT_QUADRATURE_MODE__SIZE 0x00000002u
N#define CYVAL_TCPWM_CNT_QUADRATURE_MODE_X1 0x00000000u
N#define CYVAL_TCPWM_CNT_QUADRATURE_MODE_X2 0x00000001u
N#define CYVAL_TCPWM_CNT_QUADRATURE_MODE_X4 0x00000002u
N#define CYVAL_TCPWM_CNT_QUADRATURE_MODE_INV_OUT 0x00000001u
N#define CYVAL_TCPWM_CNT_QUADRATURE_MODE_INV_COMPL_OUT 0x00000002u
N#define CYFLD_TCPWM_CNT_MODE__OFFSET 0x00000018u
N#define CYFLD_TCPWM_CNT_MODE__SIZE 0x00000003u
N#define CYVAL_TCPWM_CNT_MODE_TIMER 0x00000000u
N#define CYVAL_TCPWM_CNT_MODE_CAPTURE 0x00000002u
N#define CYVAL_TCPWM_CNT_MODE_QUAD 0x00000003u
N#define CYVAL_TCPWM_CNT_MODE_PWM 0x00000004u
N#define CYVAL_TCPWM_CNT_MODE_PWM_DT 0x00000005u
N#define CYVAL_TCPWM_CNT_MODE_PWM_PR 0x00000006u
N#define CYREG_TCPWM_CNT0_STATUS 0x40200104u
N#define CYFLD_TCPWM_CNT_DOWN__OFFSET 0x00000000u
N#define CYFLD_TCPWM_CNT_DOWN__SIZE 0x00000001u
N#define CYFLD_TCPWM_CNT_RUNNING__OFFSET 0x0000001fu
N#define CYFLD_TCPWM_CNT_RUNNING__SIZE 0x00000001u
N#define CYREG_TCPWM_CNT0_COUNTER 0x40200108u
N#define CYFLD_TCPWM_CNT_COUNTER__OFFSET 0x00000000u
N#define CYFLD_TCPWM_CNT_COUNTER__SIZE 0x00000010u
N#define CYREG_TCPWM_CNT0_CC 0x4020010cu
N#define CYFLD_TCPWM_CNT_CC__OFFSET 0x00000000u
N#define CYFLD_TCPWM_CNT_CC__SIZE 0x00000010u
N#define CYREG_TCPWM_CNT0_CC_BUFF 0x40200110u
N#define CYREG_TCPWM_CNT0_PERIOD 0x40200114u
N#define CYFLD_TCPWM_CNT_PERIOD__OFFSET 0x00000000u
N#define CYFLD_TCPWM_CNT_PERIOD__SIZE 0x00000010u
N#define CYREG_TCPWM_CNT0_PERIOD_BUFF 0x40200118u
N#define CYREG_TCPWM_CNT0_TR_CTRL0 0x40200120u
N#define CYFLD_TCPWM_CNT_CAPTURE_SEL__OFFSET 0x00000000u
N#define CYFLD_TCPWM_CNT_CAPTURE_SEL__SIZE 0x00000004u
N#define CYFLD_TCPWM_CNT_COUNT_SEL__OFFSET 0x00000004u
N#define CYFLD_TCPWM_CNT_COUNT_SEL__SIZE 0x00000004u
N#define CYFLD_TCPWM_CNT_RELOAD_SEL__OFFSET 0x00000008u
N#define CYFLD_TCPWM_CNT_RELOAD_SEL__SIZE 0x00000004u
N#define CYFLD_TCPWM_CNT_STOP_SEL__OFFSET 0x0000000cu
N#define CYFLD_TCPWM_CNT_STOP_SEL__SIZE 0x00000004u
N#define CYFLD_TCPWM_CNT_START_SEL__OFFSET 0x00000010u
N#define CYFLD_TCPWM_CNT_START_SEL__SIZE 0x00000004u
N#define CYREG_TCPWM_CNT0_TR_CTRL1 0x40200124u
N#define CYFLD_TCPWM_CNT_CAPTURE_EDGE__OFFSET 0x00000000u
N#define CYFLD_TCPWM_CNT_CAPTURE_EDGE__SIZE 0x00000002u
N#define CYVAL_TCPWM_CNT_CAPTURE_EDGE_RISING_EDGE 0x00000000u
N#define CYVAL_TCPWM_CNT_CAPTURE_EDGE_FALLING_EDGE 0x00000001u
N#define CYVAL_TCPWM_CNT_CAPTURE_EDGE_BOTH_EDGES 0x00000002u
N#define CYVAL_TCPWM_CNT_CAPTURE_EDGE_NO_EDGE_DET 0x00000003u
N#define CYFLD_TCPWM_CNT_COUNT_EDGE__OFFSET 0x00000002u
N#define CYFLD_TCPWM_CNT_COUNT_EDGE__SIZE 0x00000002u
N#define CYVAL_TCPWM_CNT_COUNT_EDGE_RISING_EDGE 0x00000000u
N#define CYVAL_TCPWM_CNT_COUNT_EDGE_FALLING_EDGE 0x00000001u
N#define CYVAL_TCPWM_CNT_COUNT_EDGE_BOTH_EDGES 0x00000002u
N#define CYVAL_TCPWM_CNT_COUNT_EDGE_NO_EDGE_DET 0x00000003u
N#define CYFLD_TCPWM_CNT_RELOAD_EDGE__OFFSET 0x00000004u
N#define CYFLD_TCPWM_CNT_RELOAD_EDGE__SIZE 0x00000002u
N#define CYVAL_TCPWM_CNT_RELOAD_EDGE_RISING_EDGE 0x00000000u
N#define CYVAL_TCPWM_CNT_RELOAD_EDGE_FALLING_EDGE 0x00000001u
N#define CYVAL_TCPWM_CNT_RELOAD_EDGE_BOTH_EDGES 0x00000002u
N#define CYVAL_TCPWM_CNT_RELOAD_EDGE_NO_EDGE_DET 0x00000003u
N#define CYFLD_TCPWM_CNT_STOP_EDGE__OFFSET 0x00000006u
N#define CYFLD_TCPWM_CNT_STOP_EDGE__SIZE 0x00000002u
N#define CYVAL_TCPWM_CNT_STOP_EDGE_RISING_EDGE 0x00000000u
N#define CYVAL_TCPWM_CNT_STOP_EDGE_FALLING_EDGE 0x00000001u
N#define CYVAL_TCPWM_CNT_STOP_EDGE_BOTH_EDGES 0x00000002u
N#define CYVAL_TCPWM_CNT_STOP_EDGE_NO_EDGE_DET 0x00000003u
N#define CYFLD_TCPWM_CNT_START_EDGE__OFFSET 0x00000008u
N#define CYFLD_TCPWM_CNT_START_EDGE__SIZE 0x00000002u
N#define CYVAL_TCPWM_CNT_START_EDGE_RISING_EDGE 0x00000000u
N#define CYVAL_TCPWM_CNT_START_EDGE_FALLING_EDGE 0x00000001u
N#define CYVAL_TCPWM_CNT_START_EDGE_BOTH_EDGES 0x00000002u
N#define CYVAL_TCPWM_CNT_START_EDGE_NO_EDGE_DET 0x00000003u
N#define CYREG_TCPWM_CNT0_TR_CTRL2 0x40200128u
N#define CYFLD_TCPWM_CNT_CC_MATCH_MODE__OFFSET 0x00000000u
N#define CYFLD_TCPWM_CNT_CC_MATCH_MODE__SIZE 0x00000002u
N#define CYVAL_TCPWM_CNT_CC_MATCH_MODE_SET 0x00000000u
N#define CYVAL_TCPWM_CNT_CC_MATCH_MODE_CLEAR 0x00000001u
N#define CYVAL_TCPWM_CNT_CC_MATCH_MODE_INVERT 0x00000002u
N#define CYVAL_TCPWM_CNT_CC_MATCH_MODE_NO_CHANGE 0x00000003u
N#define CYFLD_TCPWM_CNT_OVERFLOW_MODE__OFFSET 0x00000002u
N#define CYFLD_TCPWM_CNT_OVERFLOW_MODE__SIZE 0x00000002u
N#define CYVAL_TCPWM_CNT_OVERFLOW_MODE_SET 0x00000000u
N#define CYVAL_TCPWM_CNT_OVERFLOW_MODE_CLEAR 0x00000001u
N#define CYVAL_TCPWM_CNT_OVERFLOW_MODE_INVERT 0x00000002u
N#define CYVAL_TCPWM_CNT_OVERFLOW_MODE_NO_CHANGE 0x00000003u
N#define CYFLD_TCPWM_CNT_UNDERFLOW_MODE__OFFSET 0x00000004u
N#define CYFLD_TCPWM_CNT_UNDERFLOW_MODE__SIZE 0x00000002u
N#define CYVAL_TCPWM_CNT_UNDERFLOW_MODE_SET 0x00000000u
N#define CYVAL_TCPWM_CNT_UNDERFLOW_MODE_CLEAR 0x00000001u
N#define CYVAL_TCPWM_CNT_UNDERFLOW_MODE_INVERT 0x00000002u
N#define CYVAL_TCPWM_CNT_UNDERFLOW_MODE_NO_CHANGE 0x00000003u
N#define CYREG_TCPWM_CNT0_INTR 0x40200130u
N#define CYFLD_TCPWM_CNT_TC__OFFSET 0x00000000u
N#define CYFLD_TCPWM_CNT_TC__SIZE 0x00000001u
N#define CYFLD_TCPWM_CNT_CC_MATCH__OFFSET 0x00000001u
N#define CYFLD_TCPWM_CNT_CC_MATCH__SIZE 0x00000001u
N#define CYREG_TCPWM_CNT0_INTR_SET 0x40200134u
N#define CYREG_TCPWM_CNT0_INTR_MASK 0x40200138u
N#define CYREG_TCPWM_CNT0_INTR_MASKED 0x4020013cu
N#define CYDEV_TCPWM_CNT1_BASE 0x40200140u
N#define CYDEV_TCPWM_CNT1_SIZE 0x00000040u
N#define CYREG_TCPWM_CNT1_CTRL 0x40200140u
N#define CYREG_TCPWM_CNT1_STATUS 0x40200144u
N#define CYREG_TCPWM_CNT1_COUNTER 0x40200148u
N#define CYREG_TCPWM_CNT1_CC 0x4020014cu
N#define CYREG_TCPWM_CNT1_CC_BUFF 0x40200150u
N#define CYREG_TCPWM_CNT1_PERIOD 0x40200154u
N#define CYREG_TCPWM_CNT1_PERIOD_BUFF 0x40200158u
N#define CYREG_TCPWM_CNT1_TR_CTRL0 0x40200160u
N#define CYREG_TCPWM_CNT1_TR_CTRL1 0x40200164u
N#define CYREG_TCPWM_CNT1_TR_CTRL2 0x40200168u
N#define CYREG_TCPWM_CNT1_INTR 0x40200170u
N#define CYREG_TCPWM_CNT1_INTR_SET 0x40200174u
N#define CYREG_TCPWM_CNT1_INTR_MASK 0x40200178u
N#define CYREG_TCPWM_CNT1_INTR_MASKED 0x4020017cu
N#define CYDEV_TCPWM_CNT2_BASE 0x40200180u
N#define CYDEV_TCPWM_CNT2_SIZE 0x00000040u
N#define CYREG_TCPWM_CNT2_CTRL 0x40200180u
N#define CYREG_TCPWM_CNT2_STATUS 0x40200184u
N#define CYREG_TCPWM_CNT2_COUNTER 0x40200188u
N#define CYREG_TCPWM_CNT2_CC 0x4020018cu
N#define CYREG_TCPWM_CNT2_CC_BUFF 0x40200190u
N#define CYREG_TCPWM_CNT2_PERIOD 0x40200194u
N#define CYREG_TCPWM_CNT2_PERIOD_BUFF 0x40200198u
N#define CYREG_TCPWM_CNT2_TR_CTRL0 0x402001a0u
N#define CYREG_TCPWM_CNT2_TR_CTRL1 0x402001a4u
N#define CYREG_TCPWM_CNT2_TR_CTRL2 0x402001a8u
N#define CYREG_TCPWM_CNT2_INTR 0x402001b0u
N#define CYREG_TCPWM_CNT2_INTR_SET 0x402001b4u
N#define CYREG_TCPWM_CNT2_INTR_MASK 0x402001b8u
N#define CYREG_TCPWM_CNT2_INTR_MASKED 0x402001bcu
N#define CYDEV_TCPWM_CNT3_BASE 0x402001c0u
N#define CYDEV_TCPWM_CNT3_SIZE 0x00000040u
N#define CYREG_TCPWM_CNT3_CTRL 0x402001c0u
N#define CYREG_TCPWM_CNT3_STATUS 0x402001c4u
N#define CYREG_TCPWM_CNT3_COUNTER 0x402001c8u
N#define CYREG_TCPWM_CNT3_CC 0x402001ccu
N#define CYREG_TCPWM_CNT3_CC_BUFF 0x402001d0u
N#define CYREG_TCPWM_CNT3_PERIOD 0x402001d4u
N#define CYREG_TCPWM_CNT3_PERIOD_BUFF 0x402001d8u
N#define CYREG_TCPWM_CNT3_TR_CTRL0 0x402001e0u
N#define CYREG_TCPWM_CNT3_TR_CTRL1 0x402001e4u
N#define CYREG_TCPWM_CNT3_TR_CTRL2 0x402001e8u
N#define CYREG_TCPWM_CNT3_INTR 0x402001f0u
N#define CYREG_TCPWM_CNT3_INTR_SET 0x402001f4u
N#define CYREG_TCPWM_CNT3_INTR_MASK 0x402001f8u
N#define CYREG_TCPWM_CNT3_INTR_MASKED 0x402001fcu
N#define CYDEV_TCPWM_CNT4_BASE 0x40200200u
N#define CYDEV_TCPWM_CNT4_SIZE 0x00000040u
N#define CYREG_TCPWM_CNT4_CTRL 0x40200200u
N#define CYREG_TCPWM_CNT4_STATUS 0x40200204u
N#define CYREG_TCPWM_CNT4_COUNTER 0x40200208u
N#define CYREG_TCPWM_CNT4_CC 0x4020020cu
N#define CYREG_TCPWM_CNT4_CC_BUFF 0x40200210u
N#define CYREG_TCPWM_CNT4_PERIOD 0x40200214u
N#define CYREG_TCPWM_CNT4_PERIOD_BUFF 0x40200218u
N#define CYREG_TCPWM_CNT4_TR_CTRL0 0x40200220u
N#define CYREG_TCPWM_CNT4_TR_CTRL1 0x40200224u
N#define CYREG_TCPWM_CNT4_TR_CTRL2 0x40200228u
N#define CYREG_TCPWM_CNT4_INTR 0x40200230u
N#define CYREG_TCPWM_CNT4_INTR_SET 0x40200234u
N#define CYREG_TCPWM_CNT4_INTR_MASK 0x40200238u
N#define CYREG_TCPWM_CNT4_INTR_MASKED 0x4020023cu
N#define CYDEV_TCPWM_CNT5_BASE 0x40200240u
N#define CYDEV_TCPWM_CNT5_SIZE 0x00000040u
N#define CYREG_TCPWM_CNT5_CTRL 0x40200240u
N#define CYREG_TCPWM_CNT5_STATUS 0x40200244u
N#define CYREG_TCPWM_CNT5_COUNTER 0x40200248u
N#define CYREG_TCPWM_CNT5_CC 0x4020024cu
N#define CYREG_TCPWM_CNT5_CC_BUFF 0x40200250u
N#define CYREG_TCPWM_CNT5_PERIOD 0x40200254u
N#define CYREG_TCPWM_CNT5_PERIOD_BUFF 0x40200258u
N#define CYREG_TCPWM_CNT5_TR_CTRL0 0x40200260u
N#define CYREG_TCPWM_CNT5_TR_CTRL1 0x40200264u
N#define CYREG_TCPWM_CNT5_TR_CTRL2 0x40200268u
N#define CYREG_TCPWM_CNT5_INTR 0x40200270u
N#define CYREG_TCPWM_CNT5_INTR_SET 0x40200274u
N#define CYREG_TCPWM_CNT5_INTR_MASK 0x40200278u
N#define CYREG_TCPWM_CNT5_INTR_MASKED 0x4020027cu
N#define CYDEV_TCPWM_CNT6_BASE 0x40200280u
N#define CYDEV_TCPWM_CNT6_SIZE 0x00000040u
N#define CYREG_TCPWM_CNT6_CTRL 0x40200280u
N#define CYREG_TCPWM_CNT6_STATUS 0x40200284u
N#define CYREG_TCPWM_CNT6_COUNTER 0x40200288u
N#define CYREG_TCPWM_CNT6_CC 0x4020028cu
N#define CYREG_TCPWM_CNT6_CC_BUFF 0x40200290u
N#define CYREG_TCPWM_CNT6_PERIOD 0x40200294u
N#define CYREG_TCPWM_CNT6_PERIOD_BUFF 0x40200298u
N#define CYREG_TCPWM_CNT6_TR_CTRL0 0x402002a0u
N#define CYREG_TCPWM_CNT6_TR_CTRL1 0x402002a4u
N#define CYREG_TCPWM_CNT6_TR_CTRL2 0x402002a8u
N#define CYREG_TCPWM_CNT6_INTR 0x402002b0u
N#define CYREG_TCPWM_CNT6_INTR_SET 0x402002b4u
N#define CYREG_TCPWM_CNT6_INTR_MASK 0x402002b8u
N#define CYREG_TCPWM_CNT6_INTR_MASKED 0x402002bcu
N#define CYDEV_TCPWM_CNT7_BASE 0x402002c0u
N#define CYDEV_TCPWM_CNT7_SIZE 0x00000040u
N#define CYREG_TCPWM_CNT7_CTRL 0x402002c0u
N#define CYREG_TCPWM_CNT7_STATUS 0x402002c4u
N#define CYREG_TCPWM_CNT7_COUNTER 0x402002c8u
N#define CYREG_TCPWM_CNT7_CC 0x402002ccu
N#define CYREG_TCPWM_CNT7_CC_BUFF 0x402002d0u
N#define CYREG_TCPWM_CNT7_PERIOD 0x402002d4u
N#define CYREG_TCPWM_CNT7_PERIOD_BUFF 0x402002d8u
N#define CYREG_TCPWM_CNT7_TR_CTRL0 0x402002e0u
N#define CYREG_TCPWM_CNT7_TR_CTRL1 0x402002e4u
N#define CYREG_TCPWM_CNT7_TR_CTRL2 0x402002e8u
N#define CYREG_TCPWM_CNT7_INTR 0x402002f0u
N#define CYREG_TCPWM_CNT7_INTR_SET 0x402002f4u
N#define CYREG_TCPWM_CNT7_INTR_MASK 0x402002f8u
N#define CYREG_TCPWM_CNT7_INTR_MASKED 0x402002fcu
N#define CYDEV_WCO_BASE 0x40220000u
N#define CYDEV_WCO_SIZE 0x00010000u
N#define CYREG_WCO_CONFIG 0x40220000u
N#define CYFLD_WCO_LPM_EN__OFFSET 0x00000000u
N#define CYFLD_WCO_LPM_EN__SIZE 0x00000001u
N#define CYFLD_WCO_LPM_AUTO__OFFSET 0x00000001u
N#define CYFLD_WCO_LPM_AUTO__SIZE 0x00000001u
N#define CYFLD_WCO_EXT_INPUT_EN__OFFSET 0x00000002u
N#define CYFLD_WCO_EXT_INPUT_EN__SIZE 0x00000001u
N#define CYFLD_WCO_ENBUS__OFFSET 0x00000010u
N#define CYFLD_WCO_ENBUS__SIZE 0x00000008u
N#define CYFLD_WCO_DPLL_ENABLE__OFFSET 0x0000001eu
N#define CYFLD_WCO_DPLL_ENABLE__SIZE 0x00000001u
N#define CYFLD_WCO_IP_ENABLE__OFFSET 0x0000001fu
N#define CYFLD_WCO_IP_ENABLE__SIZE 0x00000001u
N#define CYREG_WCO_STATUS 0x40220004u
N#define CYFLD_WCO_OUT_BLNK_A__OFFSET 0x00000000u
N#define CYFLD_WCO_OUT_BLNK_A__SIZE 0x00000001u
N#define CYREG_WCO_DPLL 0x40220008u
N#define CYFLD_WCO_DPLL_MULT__OFFSET 0x00000000u
N#define CYFLD_WCO_DPLL_MULT__SIZE 0x0000000bu
N#define CYFLD_WCO_DPLL_LF_IGAIN__OFFSET 0x00000010u
N#define CYFLD_WCO_DPLL_LF_IGAIN__SIZE 0x00000003u
N#define CYFLD_WCO_DPLL_LF_PGAIN__OFFSET 0x00000013u
N#define CYFLD_WCO_DPLL_LF_PGAIN__SIZE 0x00000003u
N#define CYFLD_WCO_DPLL_LF_LIMIT__OFFSET 0x00000016u
N#define CYFLD_WCO_DPLL_LF_LIMIT__SIZE 0x00000008u
N#define CYREG_WCO_WDT_CTRLOW 0x40220200u
N#define CYFLD_WCO_WDT_CTR0__OFFSET 0x00000000u
N#define CYFLD_WCO_WDT_CTR0__SIZE 0x00000010u
N#define CYFLD_WCO_WDT_CTR1__OFFSET 0x00000010u
N#define CYFLD_WCO_WDT_CTR1__SIZE 0x00000010u
N#define CYREG_WCO_WDT_CTRHIGH 0x40220204u
N#define CYFLD_WCO_WDT_CTR2__OFFSET 0x00000000u
N#define CYFLD_WCO_WDT_CTR2__SIZE 0x00000020u
N#define CYREG_WCO_WDT_MATCH 0x40220208u
N#define CYFLD_WCO_WDT_MATCH0__OFFSET 0x00000000u
N#define CYFLD_WCO_WDT_MATCH0__SIZE 0x00000010u
N#define CYFLD_WCO_WDT_MATCH1__OFFSET 0x00000010u
N#define CYFLD_WCO_WDT_MATCH1__SIZE 0x00000010u
N#define CYREG_WCO_WDT_CONFIG 0x4022020cu
N#define CYFLD_WCO_WDT_MODE0__OFFSET 0x00000000u
N#define CYFLD_WCO_WDT_MODE0__SIZE 0x00000002u
N#define CYVAL_WCO_WDT_MODE0_NOTHING 0x00000000u
N#define CYVAL_WCO_WDT_MODE0_INT 0x00000001u
N#define CYVAL_WCO_WDT_MODE0_RESET 0x00000002u
N#define CYVAL_WCO_WDT_MODE0_INT_THEN_RESET 0x00000003u
N#define CYFLD_WCO_WDT_CLEAR0__OFFSET 0x00000002u
N#define CYFLD_WCO_WDT_CLEAR0__SIZE 0x00000001u
N#define CYFLD_WCO_WDT_CASCADE0_1__OFFSET 0x00000003u
N#define CYFLD_WCO_WDT_CASCADE0_1__SIZE 0x00000001u
N#define CYFLD_WCO_WDT_MODE1__OFFSET 0x00000008u
N#define CYFLD_WCO_WDT_MODE1__SIZE 0x00000002u
N#define CYVAL_WCO_WDT_MODE1_NOTHING 0x00000000u
N#define CYVAL_WCO_WDT_MODE1_INT 0x00000001u
N#define CYVAL_WCO_WDT_MODE1_RESET 0x00000002u
N#define CYVAL_WCO_WDT_MODE1_INT_THEN_RESET 0x00000003u
N#define CYFLD_WCO_WDT_CLEAR1__OFFSET 0x0000000au
N#define CYFLD_WCO_WDT_CLEAR1__SIZE 0x00000001u
N#define CYFLD_WCO_WDT_CASCADE1_2__OFFSET 0x0000000bu
N#define CYFLD_WCO_WDT_CASCADE1_2__SIZE 0x00000001u
N#define CYFLD_WCO_WDT_MODE2__OFFSET 0x00000010u
N#define CYFLD_WCO_WDT_MODE2__SIZE 0x00000001u
N#define CYVAL_WCO_WDT_MODE2_NOTHING 0x00000000u
N#define CYVAL_WCO_WDT_MODE2_INT 0x00000001u
N#define CYFLD_WCO_WDT_BITS2__OFFSET 0x00000018u
N#define CYFLD_WCO_WDT_BITS2__SIZE 0x00000005u
N#define CYFLD_WCO_LFCLK_SEL__OFFSET 0x0000001eu
N#define CYFLD_WCO_LFCLK_SEL__SIZE 0x00000002u
N#define CYREG_WCO_WDT_CONTROL 0x40220210u
N#define CYFLD_WCO_WDT_ENABLE0__OFFSET 0x00000000u
N#define CYFLD_WCO_WDT_ENABLE0__SIZE 0x00000001u
N#define CYFLD_WCO_WDT_ENABLED0__OFFSET 0x00000001u
N#define CYFLD_WCO_WDT_ENABLED0__SIZE 0x00000001u
N#define CYFLD_WCO_WDT_INT0__OFFSET 0x00000002u
N#define CYFLD_WCO_WDT_INT0__SIZE 0x00000001u
N#define CYFLD_WCO_WDT_RESET0__OFFSET 0x00000003u
N#define CYFLD_WCO_WDT_RESET0__SIZE 0x00000001u
N#define CYFLD_WCO_WDT_ENABLE1__OFFSET 0x00000008u
N#define CYFLD_WCO_WDT_ENABLE1__SIZE 0x00000001u
N#define CYFLD_WCO_WDT_ENABLED1__OFFSET 0x00000009u
N#define CYFLD_WCO_WDT_ENABLED1__SIZE 0x00000001u
N#define CYFLD_WCO_WDT_INT1__OFFSET 0x0000000au
N#define CYFLD_WCO_WDT_INT1__SIZE 0x00000001u
N#define CYFLD_WCO_WDT_RESET1__OFFSET 0x0000000bu
N#define CYFLD_WCO_WDT_RESET1__SIZE 0x00000001u
N#define CYFLD_WCO_WDT_ENABLE2__OFFSET 0x00000010u
N#define CYFLD_WCO_WDT_ENABLE2__SIZE 0x00000001u
N#define CYFLD_WCO_WDT_ENABLED2__OFFSET 0x00000011u
N#define CYFLD_WCO_WDT_ENABLED2__SIZE 0x00000001u
N#define CYFLD_WCO_WDT_INT2__OFFSET 0x00000012u
N#define CYFLD_WCO_WDT_INT2__SIZE 0x00000001u
N#define CYFLD_WCO_WDT_RESET2__OFFSET 0x00000013u
N#define CYFLD_WCO_WDT_RESET2__SIZE 0x00000001u
N#define CYREG_WCO_WDT_CLKEN 0x40220214u
N#define CYFLD_WCO_CLK_WCO_EN_FOR_WDT__OFFSET 0x00000000u
N#define CYFLD_WCO_CLK_WCO_EN_FOR_WDT__SIZE 0x00000001u
N#define CYFLD_WCO_CLK_ILO_EN_FOR_WDT__OFFSET 0x00000001u
N#define CYFLD_WCO_CLK_ILO_EN_FOR_WDT__SIZE 0x00000001u
N#define CYREG_WCO_TRIM 0x40220f00u
N#define CYFLD_WCO_XGM__OFFSET 0x00000000u
N#define CYFLD_WCO_XGM__SIZE 0x00000003u
N#define CYFLD_WCO_LPM_GM__OFFSET 0x00000004u
N#define CYFLD_WCO_LPM_GM__SIZE 0x00000002u
N#define CYDEV_SCB0_BASE 0x40240000u
N#define CYDEV_SCB0_SIZE 0x00010000u
N#define CYREG_SCB0_CTRL 0x40240000u
N#define CYFLD_SCB_OVS__OFFSET 0x00000000u
N#define CYFLD_SCB_OVS__SIZE 0x00000004u
N#define CYFLD_SCB_EC_AM_MODE__OFFSET 0x00000008u
N#define CYFLD_SCB_EC_AM_MODE__SIZE 0x00000001u
N#define CYFLD_SCB_EC_OP_MODE__OFFSET 0x00000009u
N#define CYFLD_SCB_EC_OP_MODE__SIZE 0x00000001u
N#define CYFLD_SCB_EZ_MODE__OFFSET 0x0000000au
N#define CYFLD_SCB_EZ_MODE__SIZE 0x00000001u
N#define CYFLD_SCB_BYTE_MODE__OFFSET 0x0000000bu
N#define CYFLD_SCB_BYTE_MODE__SIZE 0x00000001u
N#define CYFLD_SCB_ADDR_ACCEPT__OFFSET 0x00000010u
N#define CYFLD_SCB_ADDR_ACCEPT__SIZE 0x00000001u
N#define CYFLD_SCB_BLOCK__OFFSET 0x00000011u
N#define CYFLD_SCB_BLOCK__SIZE 0x00000001u
N#define CYFLD_SCB_MODE__OFFSET 0x00000018u
N#define CYFLD_SCB_MODE__SIZE 0x00000002u
N#define CYVAL_SCB_MODE_I2C 0x00000000u
N#define CYVAL_SCB_MODE_SPI 0x00000001u
N#define CYVAL_SCB_MODE_UART 0x00000002u
N#define CYFLD_SCB_ENABLED__OFFSET 0x0000001fu
N#define CYFLD_SCB_ENABLED__SIZE 0x00000001u
N#define CYREG_SCB0_STATUS 0x40240004u
N#define CYFLD_SCB_EC_BUSY__OFFSET 0x00000000u
N#define CYFLD_SCB_EC_BUSY__SIZE 0x00000001u
N#define CYREG_SCB0_SPI_CTRL 0x40240020u
N#define CYFLD_SCB_CONTINUOUS__OFFSET 0x00000000u
N#define CYFLD_SCB_CONTINUOUS__SIZE 0x00000001u
N#define CYFLD_SCB_SELECT_PRECEDE__OFFSET 0x00000001u
N#define CYFLD_SCB_SELECT_PRECEDE__SIZE 0x00000001u
N#define CYFLD_SCB_CPHA__OFFSET 0x00000002u
N#define CYFLD_SCB_CPHA__SIZE 0x00000001u
N#define CYFLD_SCB_CPOL__OFFSET 0x00000003u
N#define CYFLD_SCB_CPOL__SIZE 0x00000001u
N#define CYFLD_SCB_LATE_MISO_SAMPLE__OFFSET 0x00000004u
N#define CYFLD_SCB_LATE_MISO_SAMPLE__SIZE 0x00000001u
N#define CYFLD_SCB_SCLK_CONTINUOUS__OFFSET 0x00000005u
N#define CYFLD_SCB_SCLK_CONTINUOUS__SIZE 0x00000001u
N#define CYFLD_SCB_SSEL_POLARITY0__OFFSET 0x00000008u
N#define CYFLD_SCB_SSEL_POLARITY0__SIZE 0x00000001u
N#define CYFLD_SCB_SSEL_POLARITY1__OFFSET 0x00000009u
N#define CYFLD_SCB_SSEL_POLARITY1__SIZE 0x00000001u
N#define CYFLD_SCB_SSEL_POLARITY2__OFFSET 0x0000000au
N#define CYFLD_SCB_SSEL_POLARITY2__SIZE 0x00000001u
N#define CYFLD_SCB_SSEL_POLARITY3__OFFSET 0x0000000bu
N#define CYFLD_SCB_SSEL_POLARITY3__SIZE 0x00000001u
N#define CYFLD_SCB_LOOPBACK__OFFSET 0x00000010u
N#define CYFLD_SCB_LOOPBACK__SIZE 0x00000001u
N#define CYFLD_SCB_SLAVE_SELECT__OFFSET 0x0000001au
N#define CYFLD_SCB_SLAVE_SELECT__SIZE 0x00000002u
N#define CYFLD_SCB_MASTER_MODE__OFFSET 0x0000001fu
N#define CYFLD_SCB_MASTER_MODE__SIZE 0x00000001u
N#define CYREG_SCB0_SPI_STATUS 0x40240024u
N#define CYFLD_SCB_BUS_BUSY__OFFSET 0x00000000u
N#define CYFLD_SCB_BUS_BUSY__SIZE 0x00000001u
N#define CYFLD_SCB_SPI_EC_BUSY__OFFSET 0x00000001u
N#define CYFLD_SCB_SPI_EC_BUSY__SIZE 0x00000001u
N#define CYFLD_SCB_CURR_EZ_ADDR__OFFSET 0x00000008u
N#define CYFLD_SCB_CURR_EZ_ADDR__SIZE 0x00000008u
N#define CYFLD_SCB_BASE_EZ_ADDR__OFFSET 0x00000010u
N#define CYFLD_SCB_BASE_EZ_ADDR__SIZE 0x00000008u
N#define CYREG_SCB0_UART_CTRL 0x40240040u
N#define CYREG_SCB0_UART_TX_CTRL 0x40240044u
N#define CYFLD_SCB_STOP_BITS__OFFSET 0x00000000u
N#define CYFLD_SCB_STOP_BITS__SIZE 0x00000003u
N#define CYFLD_SCB_PARITY__OFFSET 0x00000004u
N#define CYFLD_SCB_PARITY__SIZE 0x00000001u
N#define CYFLD_SCB_PARITY_ENABLED__OFFSET 0x00000005u
N#define CYFLD_SCB_PARITY_ENABLED__SIZE 0x00000001u
N#define CYFLD_SCB_RETRY_ON_NACK__OFFSET 0x00000008u
N#define CYFLD_SCB_RETRY_ON_NACK__SIZE 0x00000001u
N#define CYREG_SCB0_UART_RX_CTRL 0x40240048u
N#define CYFLD_SCB_POLARITY__OFFSET 0x00000006u
N#define CYFLD_SCB_POLARITY__SIZE 0x00000001u
N#define CYFLD_SCB_DROP_ON_PARITY_ERROR__OFFSET 0x00000008u
N#define CYFLD_SCB_DROP_ON_PARITY_ERROR__SIZE 0x00000001u
N#define CYFLD_SCB_DROP_ON_FRAME_ERROR__OFFSET 0x00000009u
N#define CYFLD_SCB_DROP_ON_FRAME_ERROR__SIZE 0x00000001u
N#define CYFLD_SCB_MP_MODE__OFFSET 0x0000000au
N#define CYFLD_SCB_MP_MODE__SIZE 0x00000001u
N#define CYFLD_SCB_LIN_MODE__OFFSET 0x0000000cu
N#define CYFLD_SCB_LIN_MODE__SIZE 0x00000001u
N#define CYFLD_SCB_SKIP_START__OFFSET 0x0000000du
N#define CYFLD_SCB_SKIP_START__SIZE 0x00000001u
N#define CYFLD_SCB_BREAK_WIDTH__OFFSET 0x00000010u
N#define CYFLD_SCB_BREAK_WIDTH__SIZE 0x00000004u
N#define CYREG_SCB0_UART_RX_STATUS 0x4024004cu
N#define CYFLD_SCB_BR_COUNTER__OFFSET 0x00000000u
N#define CYFLD_SCB_BR_COUNTER__SIZE 0x0000000cu
N#define CYREG_SCB0_UART_FLOW_CTRL 0x40240050u
N#define CYFLD_SCB_TRIGGER_LEVEL__OFFSET 0x00000000u
N#define CYFLD_SCB_TRIGGER_LEVEL__SIZE 0x00000004u
N#define CYFLD_SCB_RTS_POLARITY__OFFSET 0x00000010u
N#define CYFLD_SCB_RTS_POLARITY__SIZE 0x00000001u
N#define CYFLD_SCB_CTS_POLARITY__OFFSET 0x00000018u
N#define CYFLD_SCB_CTS_POLARITY__SIZE 0x00000001u
N#define CYFLD_SCB_CTS_ENABLED__OFFSET 0x00000019u
N#define CYFLD_SCB_CTS_ENABLED__SIZE 0x00000001u
N#define CYREG_SCB0_I2C_CTRL 0x40240060u
N#define CYFLD_SCB_HIGH_PHASE_OVS__OFFSET 0x00000000u
N#define CYFLD_SCB_HIGH_PHASE_OVS__SIZE 0x00000004u
N#define CYFLD_SCB_LOW_PHASE_OVS__OFFSET 0x00000004u
N#define CYFLD_SCB_LOW_PHASE_OVS__SIZE 0x00000004u
N#define CYFLD_SCB_M_READY_DATA_ACK__OFFSET 0x00000008u
N#define CYFLD_SCB_M_READY_DATA_ACK__SIZE 0x00000001u
N#define CYFLD_SCB_M_NOT_READY_DATA_NACK__OFFSET 0x00000009u
N#define CYFLD_SCB_M_NOT_READY_DATA_NACK__SIZE 0x00000001u
N#define CYFLD_SCB_S_GENERAL_IGNORE__OFFSET 0x0000000bu
N#define CYFLD_SCB_S_GENERAL_IGNORE__SIZE 0x00000001u
N#define CYFLD_SCB_S_READY_ADDR_ACK__OFFSET 0x0000000cu
N#define CYFLD_SCB_S_READY_ADDR_ACK__SIZE 0x00000001u
N#define CYFLD_SCB_S_READY_DATA_ACK__OFFSET 0x0000000du
N#define CYFLD_SCB_S_READY_DATA_ACK__SIZE 0x00000001u
N#define CYFLD_SCB_S_NOT_READY_ADDR_NACK__OFFSET 0x0000000eu
N#define CYFLD_SCB_S_NOT_READY_ADDR_NACK__SIZE 0x00000001u
N#define CYFLD_SCB_S_NOT_READY_DATA_NACK__OFFSET 0x0000000fu
N#define CYFLD_SCB_S_NOT_READY_DATA_NACK__SIZE 0x00000001u
N#define CYFLD_SCB_SLAVE_MODE__OFFSET 0x0000001eu
N#define CYFLD_SCB_SLAVE_MODE__SIZE 0x00000001u
N#define CYREG_SCB0_I2C_STATUS 0x40240064u
N#define CYFLD_SCB_I2C_EC_BUSY__OFFSET 0x00000001u
N#define CYFLD_SCB_I2C_EC_BUSY__SIZE 0x00000001u
N#define CYFLD_SCB_S_READ__OFFSET 0x00000004u
N#define CYFLD_SCB_S_READ__SIZE 0x00000001u
N#define CYFLD_SCB_M_READ__OFFSET 0x00000005u
N#define CYFLD_SCB_M_READ__SIZE 0x00000001u
N#define CYREG_SCB0_I2C_M_CMD 0x40240068u
N#define CYFLD_SCB_M_START__OFFSET 0x00000000u
N#define CYFLD_SCB_M_START__SIZE 0x00000001u
N#define CYFLD_SCB_M_START_ON_IDLE__OFFSET 0x00000001u
N#define CYFLD_SCB_M_START_ON_IDLE__SIZE 0x00000001u
N#define CYFLD_SCB_M_ACK__OFFSET 0x00000002u
N#define CYFLD_SCB_M_ACK__SIZE 0x00000001u
N#define CYFLD_SCB_M_NACK__OFFSET 0x00000003u
N#define CYFLD_SCB_M_NACK__SIZE 0x00000001u
N#define CYFLD_SCB_M_STOP__OFFSET 0x00000004u
N#define CYFLD_SCB_M_STOP__SIZE 0x00000001u
N#define CYREG_SCB0_I2C_S_CMD 0x4024006cu
N#define CYFLD_SCB_S_ACK__OFFSET 0x00000000u
N#define CYFLD_SCB_S_ACK__SIZE 0x00000001u
N#define CYFLD_SCB_S_NACK__OFFSET 0x00000001u
N#define CYFLD_SCB_S_NACK__SIZE 0x00000001u
N#define CYREG_SCB0_I2C_CFG 0x40240070u
N#define CYFLD_SCB_SDA_IN_FILT_TRIM__OFFSET 0x00000000u
N#define CYFLD_SCB_SDA_IN_FILT_TRIM__SIZE 0x00000002u
N#define CYFLD_SCB_SDA_IN_FILT_SEL__OFFSET 0x00000004u
N#define CYFLD_SCB_SDA_IN_FILT_SEL__SIZE 0x00000001u
N#define CYFLD_SCB_SCL_IN_FILT_TRIM__OFFSET 0x00000008u
N#define CYFLD_SCB_SCL_IN_FILT_TRIM__SIZE 0x00000002u
N#define CYFLD_SCB_SCL_IN_FILT_SEL__OFFSET 0x0000000cu
N#define CYFLD_SCB_SCL_IN_FILT_SEL__SIZE 0x00000001u
N#define CYFLD_SCB_SDA_OUT_FILT0_TRIM__OFFSET 0x00000010u
N#define CYFLD_SCB_SDA_OUT_FILT0_TRIM__SIZE 0x00000002u
N#define CYFLD_SCB_SDA_OUT_FILT1_TRIM__OFFSET 0x00000012u
N#define CYFLD_SCB_SDA_OUT_FILT1_TRIM__SIZE 0x00000002u
N#define CYFLD_SCB_SDA_OUT_FILT2_TRIM__OFFSET 0x00000014u
N#define CYFLD_SCB_SDA_OUT_FILT2_TRIM__SIZE 0x00000002u
N#define CYFLD_SCB_SDA_OUT_FILT_SEL__OFFSET 0x0000001cu
N#define CYFLD_SCB_SDA_OUT_FILT_SEL__SIZE 0x00000002u
N#define CYREG_SCB0_TX_CTRL 0x40240200u
N#define CYFLD_SCB_DATA_WIDTH__OFFSET 0x00000000u
N#define CYFLD_SCB_DATA_WIDTH__SIZE 0x00000004u
N#define CYFLD_SCB_MSB_FIRST__OFFSET 0x00000008u
N#define CYFLD_SCB_MSB_FIRST__SIZE 0x00000001u
N#define CYREG_SCB0_TX_FIFO_CTRL 0x40240204u
N#define CYFLD_SCB_CLEAR__OFFSET 0x00000010u
N#define CYFLD_SCB_CLEAR__SIZE 0x00000001u
N#define CYFLD_SCB_FREEZE__OFFSET 0x00000011u
N#define CYFLD_SCB_FREEZE__SIZE 0x00000001u
N#define CYREG_SCB0_TX_FIFO_STATUS 0x40240208u
N#define CYFLD_SCB_USED__OFFSET 0x00000000u
N#define CYFLD_SCB_USED__SIZE 0x00000005u
N#define CYFLD_SCB_SR_VALID__OFFSET 0x0000000fu
N#define CYFLD_SCB_SR_VALID__SIZE 0x00000001u
N#define CYFLD_SCB_RD_PTR__OFFSET 0x00000010u
N#define CYFLD_SCB_RD_PTR__SIZE 0x00000004u
N#define CYFLD_SCB_WR_PTR__OFFSET 0x00000018u
N#define CYFLD_SCB_WR_PTR__SIZE 0x00000004u
N#define CYREG_SCB0_TX_FIFO_WR 0x40240240u
N#define CYFLD_SCB_DATA__OFFSET 0x00000000u
N#define CYFLD_SCB_DATA__SIZE 0x00000010u
N#define CYREG_SCB0_RX_CTRL 0x40240300u
N#define CYFLD_SCB_MEDIAN__OFFSET 0x00000009u
N#define CYFLD_SCB_MEDIAN__SIZE 0x00000001u
N#define CYREG_SCB0_RX_FIFO_CTRL 0x40240304u
N#define CYREG_SCB0_RX_FIFO_STATUS 0x40240308u
N#define CYREG_SCB0_RX_MATCH 0x40240310u
N#define CYFLD_SCB_ADDR__OFFSET 0x00000000u
N#define CYFLD_SCB_ADDR__SIZE 0x00000008u
N#define CYFLD_SCB_MASK__OFFSET 0x00000010u
N#define CYFLD_SCB_MASK__SIZE 0x00000008u
N#define CYREG_SCB0_RX_FIFO_RD 0x40240340u
N#define CYREG_SCB0_RX_FIFO_RD_SILENT 0x40240344u
N#define CYREG_SCB0_EZ_DATA0 0x40240400u
N#define CYFLD_SCB_EZ_DATA__OFFSET 0x00000000u
N#define CYFLD_SCB_EZ_DATA__SIZE 0x00000008u
N#define CYREG_SCB0_EZ_DATA1 0x40240404u
N#define CYREG_SCB0_EZ_DATA2 0x40240408u
N#define CYREG_SCB0_EZ_DATA3 0x4024040cu
N#define CYREG_SCB0_EZ_DATA4 0x40240410u
N#define CYREG_SCB0_EZ_DATA5 0x40240414u
N#define CYREG_SCB0_EZ_DATA6 0x40240418u
N#define CYREG_SCB0_EZ_DATA7 0x4024041cu
N#define CYREG_SCB0_EZ_DATA8 0x40240420u
N#define CYREG_SCB0_EZ_DATA9 0x40240424u
N#define CYREG_SCB0_EZ_DATA10 0x40240428u
N#define CYREG_SCB0_EZ_DATA11 0x4024042cu
N#define CYREG_SCB0_EZ_DATA12 0x40240430u
N#define CYREG_SCB0_EZ_DATA13 0x40240434u
N#define CYREG_SCB0_EZ_DATA14 0x40240438u
N#define CYREG_SCB0_EZ_DATA15 0x4024043cu
N#define CYREG_SCB0_EZ_DATA16 0x40240440u
N#define CYREG_SCB0_EZ_DATA17 0x40240444u
N#define CYREG_SCB0_EZ_DATA18 0x40240448u
N#define CYREG_SCB0_EZ_DATA19 0x4024044cu
N#define CYREG_SCB0_EZ_DATA20 0x40240450u
N#define CYREG_SCB0_EZ_DATA21 0x40240454u
N#define CYREG_SCB0_EZ_DATA22 0x40240458u
N#define CYREG_SCB0_EZ_DATA23 0x4024045cu
N#define CYREG_SCB0_EZ_DATA24 0x40240460u
N#define CYREG_SCB0_EZ_DATA25 0x40240464u
N#define CYREG_SCB0_EZ_DATA26 0x40240468u
N#define CYREG_SCB0_EZ_DATA27 0x4024046cu
N#define CYREG_SCB0_EZ_DATA28 0x40240470u
N#define CYREG_SCB0_EZ_DATA29 0x40240474u
N#define CYREG_SCB0_EZ_DATA30 0x40240478u
N#define CYREG_SCB0_EZ_DATA31 0x4024047cu
N#define CYREG_SCB0_INTR_CAUSE 0x40240e00u
N#define CYFLD_SCB_M__OFFSET 0x00000000u
N#define CYFLD_SCB_M__SIZE 0x00000001u
N#define CYFLD_SCB_S__OFFSET 0x00000001u
N#define CYFLD_SCB_S__SIZE 0x00000001u
N#define CYFLD_SCB_TX__OFFSET 0x00000002u
N#define CYFLD_SCB_TX__SIZE 0x00000001u
N#define CYFLD_SCB_RX__OFFSET 0x00000003u
N#define CYFLD_SCB_RX__SIZE 0x00000001u
N#define CYFLD_SCB_I2C_EC__OFFSET 0x00000004u
N#define CYFLD_SCB_I2C_EC__SIZE 0x00000001u
N#define CYFLD_SCB_SPI_EC__OFFSET 0x00000005u
N#define CYFLD_SCB_SPI_EC__SIZE 0x00000001u
N#define CYREG_SCB0_INTR_I2C_EC 0x40240e80u
N#define CYFLD_SCB_WAKE_UP__OFFSET 0x00000000u
N#define CYFLD_SCB_WAKE_UP__SIZE 0x00000001u
N#define CYFLD_SCB_EZ_STOP__OFFSET 0x00000001u
N#define CYFLD_SCB_EZ_STOP__SIZE 0x00000001u
N#define CYFLD_SCB_EZ_WRITE_STOP__OFFSET 0x00000002u
N#define CYFLD_SCB_EZ_WRITE_STOP__SIZE 0x00000001u
N#define CYFLD_SCB_EZ_READ_STOP__OFFSET 0x00000003u
N#define CYFLD_SCB_EZ_READ_STOP__SIZE 0x00000001u
N#define CYREG_SCB0_INTR_I2C_EC_MASK 0x40240e88u
N#define CYREG_SCB0_INTR_I2C_EC_MASKED 0x40240e8cu
N#define CYREG_SCB0_INTR_SPI_EC 0x40240ec0u
N#define CYREG_SCB0_INTR_SPI_EC_MASK 0x40240ec8u
N#define CYREG_SCB0_INTR_SPI_EC_MASKED 0x40240eccu
N#define CYREG_SCB0_INTR_M 0x40240f00u
N#define CYFLD_SCB_I2C_ARB_LOST__OFFSET 0x00000000u
N#define CYFLD_SCB_I2C_ARB_LOST__SIZE 0x00000001u
N#define CYFLD_SCB_I2C_NACK__OFFSET 0x00000001u
N#define CYFLD_SCB_I2C_NACK__SIZE 0x00000001u
N#define CYFLD_SCB_I2C_ACK__OFFSET 0x00000002u
N#define CYFLD_SCB_I2C_ACK__SIZE 0x00000001u
N#define CYFLD_SCB_I2C_STOP__OFFSET 0x00000004u
N#define CYFLD_SCB_I2C_STOP__SIZE 0x00000001u
N#define CYFLD_SCB_I2C_BUS_ERROR__OFFSET 0x00000008u
N#define CYFLD_SCB_I2C_BUS_ERROR__SIZE 0x00000001u
N#define CYFLD_SCB_SPI_DONE__OFFSET 0x00000009u
N#define CYFLD_SCB_SPI_DONE__SIZE 0x00000001u
N#define CYREG_SCB0_INTR_M_SET 0x40240f04u
N#define CYREG_SCB0_INTR_M_MASK 0x40240f08u
N#define CYREG_SCB0_INTR_M_MASKED 0x40240f0cu
N#define CYREG_SCB0_INTR_S 0x40240f40u
N#define CYFLD_SCB_I2C_WRITE_STOP__OFFSET 0x00000003u
N#define CYFLD_SCB_I2C_WRITE_STOP__SIZE 0x00000001u
N#define CYFLD_SCB_I2C_START__OFFSET 0x00000005u
N#define CYFLD_SCB_I2C_START__SIZE 0x00000001u
N#define CYFLD_SCB_I2C_ADDR_MATCH__OFFSET 0x00000006u
N#define CYFLD_SCB_I2C_ADDR_MATCH__SIZE 0x00000001u
N#define CYFLD_SCB_I2C_GENERAL__OFFSET 0x00000007u
N#define CYFLD_SCB_I2C_GENERAL__SIZE 0x00000001u
N#define CYFLD_SCB_SPI_EZ_WRITE_STOP__OFFSET 0x00000009u
N#define CYFLD_SCB_SPI_EZ_WRITE_STOP__SIZE 0x00000001u
N#define CYFLD_SCB_SPI_EZ_STOP__OFFSET 0x0000000au
N#define CYFLD_SCB_SPI_EZ_STOP__SIZE 0x00000001u
N#define CYFLD_SCB_SPI_BUS_ERROR__OFFSET 0x0000000bu
N#define CYFLD_SCB_SPI_BUS_ERROR__SIZE 0x00000001u
N#define CYREG_SCB0_INTR_S_SET 0x40240f44u
N#define CYREG_SCB0_INTR_S_MASK 0x40240f48u
N#define CYREG_SCB0_INTR_S_MASKED 0x40240f4cu
N#define CYREG_SCB0_INTR_TX 0x40240f80u
N#define CYFLD_SCB_TRIGGER__OFFSET 0x00000000u
N#define CYFLD_SCB_TRIGGER__SIZE 0x00000001u
N#define CYFLD_SCB_NOT_FULL__OFFSET 0x00000001u
N#define CYFLD_SCB_NOT_FULL__SIZE 0x00000001u
N#define CYFLD_SCB_EMPTY__OFFSET 0x00000004u
N#define CYFLD_SCB_EMPTY__SIZE 0x00000001u
N#define CYFLD_SCB_OVERFLOW__OFFSET 0x00000005u
N#define CYFLD_SCB_OVERFLOW__SIZE 0x00000001u
N#define CYFLD_SCB_UNDERFLOW__OFFSET 0x00000006u
N#define CYFLD_SCB_UNDERFLOW__SIZE 0x00000001u
N#define CYFLD_SCB_BLOCKED__OFFSET 0x00000007u
N#define CYFLD_SCB_BLOCKED__SIZE 0x00000001u
N#define CYFLD_SCB_UART_NACK__OFFSET 0x00000008u
N#define CYFLD_SCB_UART_NACK__SIZE 0x00000001u
N#define CYFLD_SCB_UART_DONE__OFFSET 0x00000009u
N#define CYFLD_SCB_UART_DONE__SIZE 0x00000001u
N#define CYFLD_SCB_UART_ARB_LOST__OFFSET 0x0000000au
N#define CYFLD_SCB_UART_ARB_LOST__SIZE 0x00000001u
N#define CYREG_SCB0_INTR_TX_SET 0x40240f84u
N#define CYREG_SCB0_INTR_TX_MASK 0x40240f88u
N#define CYREG_SCB0_INTR_TX_MASKED 0x40240f8cu
N#define CYREG_SCB0_INTR_RX 0x40240fc0u
N#define CYFLD_SCB_NOT_EMPTY__OFFSET 0x00000002u
N#define CYFLD_SCB_NOT_EMPTY__SIZE 0x00000001u
N#define CYFLD_SCB_FULL__OFFSET 0x00000003u
N#define CYFLD_SCB_FULL__SIZE 0x00000001u
N#define CYFLD_SCB_FRAME_ERROR__OFFSET 0x00000008u
N#define CYFLD_SCB_FRAME_ERROR__SIZE 0x00000001u
N#define CYFLD_SCB_PARITY_ERROR__OFFSET 0x00000009u
N#define CYFLD_SCB_PARITY_ERROR__SIZE 0x00000001u
N#define CYFLD_SCB_BAUD_DETECT__OFFSET 0x0000000au
N#define CYFLD_SCB_BAUD_DETECT__SIZE 0x00000001u
N#define CYFLD_SCB_BREAK_DETECT__OFFSET 0x0000000bu
N#define CYFLD_SCB_BREAK_DETECT__SIZE 0x00000001u
N#define CYREG_SCB0_INTR_RX_SET 0x40240fc4u
N#define CYREG_SCB0_INTR_RX_MASK 0x40240fc8u
N#define CYREG_SCB0_INTR_RX_MASKED 0x40240fccu
N#define CYDEV_SCB1_BASE 0x40250000u
N#define CYDEV_SCB1_SIZE 0x00010000u
N#define CYREG_SCB1_CTRL 0x40250000u
N#define CYREG_SCB1_STATUS 0x40250004u
N#define CYREG_SCB1_SPI_CTRL 0x40250020u
N#define CYREG_SCB1_SPI_STATUS 0x40250024u
N#define CYREG_SCB1_UART_CTRL 0x40250040u
N#define CYREG_SCB1_UART_TX_CTRL 0x40250044u
N#define CYREG_SCB1_UART_RX_CTRL 0x40250048u
N#define CYREG_SCB1_UART_RX_STATUS 0x4025004cu
N#define CYREG_SCB1_UART_FLOW_CTRL 0x40250050u
N#define CYREG_SCB1_I2C_CTRL 0x40250060u
N#define CYREG_SCB1_I2C_STATUS 0x40250064u
N#define CYREG_SCB1_I2C_M_CMD 0x40250068u
N#define CYREG_SCB1_I2C_S_CMD 0x4025006cu
N#define CYREG_SCB1_I2C_CFG 0x40250070u
N#define CYREG_SCB1_TX_CTRL 0x40250200u
N#define CYREG_SCB1_TX_FIFO_CTRL 0x40250204u
N#define CYREG_SCB1_TX_FIFO_STATUS 0x40250208u
N#define CYREG_SCB1_TX_FIFO_WR 0x40250240u
N#define CYREG_SCB1_RX_CTRL 0x40250300u
N#define CYREG_SCB1_RX_FIFO_CTRL 0x40250304u
N#define CYREG_SCB1_RX_FIFO_STATUS 0x40250308u
N#define CYREG_SCB1_RX_MATCH 0x40250310u
N#define CYREG_SCB1_RX_FIFO_RD 0x40250340u
N#define CYREG_SCB1_RX_FIFO_RD_SILENT 0x40250344u
N#define CYREG_SCB1_EZ_DATA0 0x40250400u
N#define CYREG_SCB1_EZ_DATA1 0x40250404u
N#define CYREG_SCB1_EZ_DATA2 0x40250408u
N#define CYREG_SCB1_EZ_DATA3 0x4025040cu
N#define CYREG_SCB1_EZ_DATA4 0x40250410u
N#define CYREG_SCB1_EZ_DATA5 0x40250414u
N#define CYREG_SCB1_EZ_DATA6 0x40250418u
N#define CYREG_SCB1_EZ_DATA7 0x4025041cu
N#define CYREG_SCB1_EZ_DATA8 0x40250420u
N#define CYREG_SCB1_EZ_DATA9 0x40250424u
N#define CYREG_SCB1_EZ_DATA10 0x40250428u
N#define CYREG_SCB1_EZ_DATA11 0x4025042cu
N#define CYREG_SCB1_EZ_DATA12 0x40250430u
N#define CYREG_SCB1_EZ_DATA13 0x40250434u
N#define CYREG_SCB1_EZ_DATA14 0x40250438u
N#define CYREG_SCB1_EZ_DATA15 0x4025043cu
N#define CYREG_SCB1_EZ_DATA16 0x40250440u
N#define CYREG_SCB1_EZ_DATA17 0x40250444u
N#define CYREG_SCB1_EZ_DATA18 0x40250448u
N#define CYREG_SCB1_EZ_DATA19 0x4025044cu
N#define CYREG_SCB1_EZ_DATA20 0x40250450u
N#define CYREG_SCB1_EZ_DATA21 0x40250454u
N#define CYREG_SCB1_EZ_DATA22 0x40250458u
N#define CYREG_SCB1_EZ_DATA23 0x4025045cu
N#define CYREG_SCB1_EZ_DATA24 0x40250460u
N#define CYREG_SCB1_EZ_DATA25 0x40250464u
N#define CYREG_SCB1_EZ_DATA26 0x40250468u
N#define CYREG_SCB1_EZ_DATA27 0x4025046cu
N#define CYREG_SCB1_EZ_DATA28 0x40250470u
N#define CYREG_SCB1_EZ_DATA29 0x40250474u
N#define CYREG_SCB1_EZ_DATA30 0x40250478u
N#define CYREG_SCB1_EZ_DATA31 0x4025047cu
N#define CYREG_SCB1_INTR_CAUSE 0x40250e00u
N#define CYREG_SCB1_INTR_I2C_EC 0x40250e80u
N#define CYREG_SCB1_INTR_I2C_EC_MASK 0x40250e88u
N#define CYREG_SCB1_INTR_I2C_EC_MASKED 0x40250e8cu
N#define CYREG_SCB1_INTR_SPI_EC 0x40250ec0u
N#define CYREG_SCB1_INTR_SPI_EC_MASK 0x40250ec8u
N#define CYREG_SCB1_INTR_SPI_EC_MASKED 0x40250eccu
N#define CYREG_SCB1_INTR_M 0x40250f00u
N#define CYREG_SCB1_INTR_M_SET 0x40250f04u
N#define CYREG_SCB1_INTR_M_MASK 0x40250f08u
N#define CYREG_SCB1_INTR_M_MASKED 0x40250f0cu
N#define CYREG_SCB1_INTR_S 0x40250f40u
N#define CYREG_SCB1_INTR_S_SET 0x40250f44u
N#define CYREG_SCB1_INTR_S_MASK 0x40250f48u
N#define CYREG_SCB1_INTR_S_MASKED 0x40250f4cu
N#define CYREG_SCB1_INTR_TX 0x40250f80u
N#define CYREG_SCB1_INTR_TX_SET 0x40250f84u
N#define CYREG_SCB1_INTR_TX_MASK 0x40250f88u
N#define CYREG_SCB1_INTR_TX_MASKED 0x40250f8cu
N#define CYREG_SCB1_INTR_RX 0x40250fc0u
N#define CYREG_SCB1_INTR_RX_SET 0x40250fc4u
N#define CYREG_SCB1_INTR_RX_MASK 0x40250fc8u
N#define CYREG_SCB1_INTR_RX_MASKED 0x40250fccu
N#define CYDEV_SCB2_BASE 0x40260000u
N#define CYDEV_SCB2_SIZE 0x00010000u
N#define CYREG_SCB2_CTRL 0x40260000u
N#define CYREG_SCB2_STATUS 0x40260004u
N#define CYREG_SCB2_SPI_CTRL 0x40260020u
N#define CYREG_SCB2_SPI_STATUS 0x40260024u
N#define CYREG_SCB2_UART_CTRL 0x40260040u
N#define CYREG_SCB2_UART_TX_CTRL 0x40260044u
N#define CYREG_SCB2_UART_RX_CTRL 0x40260048u
N#define CYREG_SCB2_UART_RX_STATUS 0x4026004cu
N#define CYREG_SCB2_UART_FLOW_CTRL 0x40260050u
N#define CYREG_SCB2_I2C_CTRL 0x40260060u
N#define CYREG_SCB2_I2C_STATUS 0x40260064u
N#define CYREG_SCB2_I2C_M_CMD 0x40260068u
N#define CYREG_SCB2_I2C_S_CMD 0x4026006cu
N#define CYREG_SCB2_I2C_CFG 0x40260070u
N#define CYREG_SCB2_TX_CTRL 0x40260200u
N#define CYREG_SCB2_TX_FIFO_CTRL 0x40260204u
N#define CYREG_SCB2_TX_FIFO_STATUS 0x40260208u
N#define CYREG_SCB2_TX_FIFO_WR 0x40260240u
N#define CYREG_SCB2_RX_CTRL 0x40260300u
N#define CYREG_SCB2_RX_FIFO_CTRL 0x40260304u
N#define CYREG_SCB2_RX_FIFO_STATUS 0x40260308u
N#define CYREG_SCB2_RX_MATCH 0x40260310u
N#define CYREG_SCB2_RX_FIFO_RD 0x40260340u
N#define CYREG_SCB2_RX_FIFO_RD_SILENT 0x40260344u
N#define CYREG_SCB2_EZ_DATA0 0x40260400u
N#define CYREG_SCB2_EZ_DATA1 0x40260404u
N#define CYREG_SCB2_EZ_DATA2 0x40260408u
N#define CYREG_SCB2_EZ_DATA3 0x4026040cu
N#define CYREG_SCB2_EZ_DATA4 0x40260410u
N#define CYREG_SCB2_EZ_DATA5 0x40260414u
N#define CYREG_SCB2_EZ_DATA6 0x40260418u
N#define CYREG_SCB2_EZ_DATA7 0x4026041cu
N#define CYREG_SCB2_EZ_DATA8 0x40260420u
N#define CYREG_SCB2_EZ_DATA9 0x40260424u
N#define CYREG_SCB2_EZ_DATA10 0x40260428u
N#define CYREG_SCB2_EZ_DATA11 0x4026042cu
N#define CYREG_SCB2_EZ_DATA12 0x40260430u
N#define CYREG_SCB2_EZ_DATA13 0x40260434u
N#define CYREG_SCB2_EZ_DATA14 0x40260438u
N#define CYREG_SCB2_EZ_DATA15 0x4026043cu
N#define CYREG_SCB2_EZ_DATA16 0x40260440u
N#define CYREG_SCB2_EZ_DATA17 0x40260444u
N#define CYREG_SCB2_EZ_DATA18 0x40260448u
N#define CYREG_SCB2_EZ_DATA19 0x4026044cu
N#define CYREG_SCB2_EZ_DATA20 0x40260450u
N#define CYREG_SCB2_EZ_DATA21 0x40260454u
N#define CYREG_SCB2_EZ_DATA22 0x40260458u
N#define CYREG_SCB2_EZ_DATA23 0x4026045cu
N#define CYREG_SCB2_EZ_DATA24 0x40260460u
N#define CYREG_SCB2_EZ_DATA25 0x40260464u
N#define CYREG_SCB2_EZ_DATA26 0x40260468u
N#define CYREG_SCB2_EZ_DATA27 0x4026046cu
N#define CYREG_SCB2_EZ_DATA28 0x40260470u
N#define CYREG_SCB2_EZ_DATA29 0x40260474u
N#define CYREG_SCB2_EZ_DATA30 0x40260478u
N#define CYREG_SCB2_EZ_DATA31 0x4026047cu
N#define CYREG_SCB2_INTR_CAUSE 0x40260e00u
N#define CYREG_SCB2_INTR_I2C_EC 0x40260e80u
N#define CYREG_SCB2_INTR_I2C_EC_MASK 0x40260e88u
N#define CYREG_SCB2_INTR_I2C_EC_MASKED 0x40260e8cu
N#define CYREG_SCB2_INTR_SPI_EC 0x40260ec0u
N#define CYREG_SCB2_INTR_SPI_EC_MASK 0x40260ec8u
N#define CYREG_SCB2_INTR_SPI_EC_MASKED 0x40260eccu
N#define CYREG_SCB2_INTR_M 0x40260f00u
N#define CYREG_SCB2_INTR_M_SET 0x40260f04u
N#define CYREG_SCB2_INTR_M_MASK 0x40260f08u
N#define CYREG_SCB2_INTR_M_MASKED 0x40260f0cu
N#define CYREG_SCB2_INTR_S 0x40260f40u
N#define CYREG_SCB2_INTR_S_SET 0x40260f44u
N#define CYREG_SCB2_INTR_S_MASK 0x40260f48u
N#define CYREG_SCB2_INTR_S_MASKED 0x40260f4cu
N#define CYREG_SCB2_INTR_TX 0x40260f80u
N#define CYREG_SCB2_INTR_TX_SET 0x40260f84u
N#define CYREG_SCB2_INTR_TX_MASK 0x40260f88u
N#define CYREG_SCB2_INTR_TX_MASKED 0x40260f8cu
N#define CYREG_SCB2_INTR_RX 0x40260fc0u
N#define CYREG_SCB2_INTR_RX_SET 0x40260fc4u
N#define CYREG_SCB2_INTR_RX_MASK 0x40260fc8u
N#define CYREG_SCB2_INTR_RX_MASKED 0x40260fccu
N#define CYDEV_SCB3_BASE 0x40270000u
N#define CYDEV_SCB3_SIZE 0x00010000u
N#define CYREG_SCB3_CTRL 0x40270000u
N#define CYREG_SCB3_STATUS 0x40270004u
N#define CYREG_SCB3_SPI_CTRL 0x40270020u
N#define CYREG_SCB3_SPI_STATUS 0x40270024u
N#define CYREG_SCB3_UART_CTRL 0x40270040u
N#define CYREG_SCB3_UART_TX_CTRL 0x40270044u
N#define CYREG_SCB3_UART_RX_CTRL 0x40270048u
N#define CYREG_SCB3_UART_RX_STATUS 0x4027004cu
N#define CYREG_SCB3_UART_FLOW_CTRL 0x40270050u
N#define CYREG_SCB3_I2C_CTRL 0x40270060u
N#define CYREG_SCB3_I2C_STATUS 0x40270064u
N#define CYREG_SCB3_I2C_M_CMD 0x40270068u
N#define CYREG_SCB3_I2C_S_CMD 0x4027006cu
N#define CYREG_SCB3_I2C_CFG 0x40270070u
N#define CYREG_SCB3_TX_CTRL 0x40270200u
N#define CYREG_SCB3_TX_FIFO_CTRL 0x40270204u
N#define CYREG_SCB3_TX_FIFO_STATUS 0x40270208u
N#define CYREG_SCB3_TX_FIFO_WR 0x40270240u
N#define CYREG_SCB3_RX_CTRL 0x40270300u
N#define CYREG_SCB3_RX_FIFO_CTRL 0x40270304u
N#define CYREG_SCB3_RX_FIFO_STATUS 0x40270308u
N#define CYREG_SCB3_RX_MATCH 0x40270310u
N#define CYREG_SCB3_RX_FIFO_RD 0x40270340u
N#define CYREG_SCB3_RX_FIFO_RD_SILENT 0x40270344u
N#define CYREG_SCB3_EZ_DATA0 0x40270400u
N#define CYREG_SCB3_EZ_DATA1 0x40270404u
N#define CYREG_SCB3_EZ_DATA2 0x40270408u
N#define CYREG_SCB3_EZ_DATA3 0x4027040cu
N#define CYREG_SCB3_EZ_DATA4 0x40270410u
N#define CYREG_SCB3_EZ_DATA5 0x40270414u
N#define CYREG_SCB3_EZ_DATA6 0x40270418u
N#define CYREG_SCB3_EZ_DATA7 0x4027041cu
N#define CYREG_SCB3_EZ_DATA8 0x40270420u
N#define CYREG_SCB3_EZ_DATA9 0x40270424u
N#define CYREG_SCB3_EZ_DATA10 0x40270428u
N#define CYREG_SCB3_EZ_DATA11 0x4027042cu
N#define CYREG_SCB3_EZ_DATA12 0x40270430u
N#define CYREG_SCB3_EZ_DATA13 0x40270434u
N#define CYREG_SCB3_EZ_DATA14 0x40270438u
N#define CYREG_SCB3_EZ_DATA15 0x4027043cu
N#define CYREG_SCB3_EZ_DATA16 0x40270440u
N#define CYREG_SCB3_EZ_DATA17 0x40270444u
N#define CYREG_SCB3_EZ_DATA18 0x40270448u
N#define CYREG_SCB3_EZ_DATA19 0x4027044cu
N#define CYREG_SCB3_EZ_DATA20 0x40270450u
N#define CYREG_SCB3_EZ_DATA21 0x40270454u
N#define CYREG_SCB3_EZ_DATA22 0x40270458u
N#define CYREG_SCB3_EZ_DATA23 0x4027045cu
N#define CYREG_SCB3_EZ_DATA24 0x40270460u
N#define CYREG_SCB3_EZ_DATA25 0x40270464u
N#define CYREG_SCB3_EZ_DATA26 0x40270468u
N#define CYREG_SCB3_EZ_DATA27 0x4027046cu
N#define CYREG_SCB3_EZ_DATA28 0x40270470u
N#define CYREG_SCB3_EZ_DATA29 0x40270474u
N#define CYREG_SCB3_EZ_DATA30 0x40270478u
N#define CYREG_SCB3_EZ_DATA31 0x4027047cu
N#define CYREG_SCB3_INTR_CAUSE 0x40270e00u
N#define CYREG_SCB3_INTR_I2C_EC 0x40270e80u
N#define CYREG_SCB3_INTR_I2C_EC_MASK 0x40270e88u
N#define CYREG_SCB3_INTR_I2C_EC_MASKED 0x40270e8cu
N#define CYREG_SCB3_INTR_SPI_EC 0x40270ec0u
N#define CYREG_SCB3_INTR_SPI_EC_MASK 0x40270ec8u
N#define CYREG_SCB3_INTR_SPI_EC_MASKED 0x40270eccu
N#define CYREG_SCB3_INTR_M 0x40270f00u
N#define CYREG_SCB3_INTR_M_SET 0x40270f04u
N#define CYREG_SCB3_INTR_M_MASK 0x40270f08u
N#define CYREG_SCB3_INTR_M_MASKED 0x40270f0cu
N#define CYREG_SCB3_INTR_S 0x40270f40u
N#define CYREG_SCB3_INTR_S_SET 0x40270f44u
N#define CYREG_SCB3_INTR_S_MASK 0x40270f48u
N#define CYREG_SCB3_INTR_S_MASKED 0x40270f4cu
N#define CYREG_SCB3_INTR_TX 0x40270f80u
N#define CYREG_SCB3_INTR_TX_SET 0x40270f84u
N#define CYREG_SCB3_INTR_TX_MASK 0x40270f88u
N#define CYREG_SCB3_INTR_TX_MASKED 0x40270f8cu
N#define CYREG_SCB3_INTR_RX 0x40270fc0u
N#define CYREG_SCB3_INTR_RX_SET 0x40270fc4u
N#define CYREG_SCB3_INTR_RX_MASK 0x40270fc8u
N#define CYREG_SCB3_INTR_RX_MASKED 0x40270fccu
N#define CYDEV_SCB4_BASE 0x40280000u
N#define CYDEV_SCB4_SIZE 0x00010000u
N#define CYREG_SCB4_CTRL 0x40280000u
N#define CYREG_SCB4_STATUS 0x40280004u
N#define CYREG_SCB4_SPI_CTRL 0x40280020u
N#define CYREG_SCB4_SPI_STATUS 0x40280024u
N#define CYREG_SCB4_UART_CTRL 0x40280040u
N#define CYREG_SCB4_UART_TX_CTRL 0x40280044u
N#define CYREG_SCB4_UART_RX_CTRL 0x40280048u
N#define CYREG_SCB4_UART_RX_STATUS 0x4028004cu
N#define CYREG_SCB4_UART_FLOW_CTRL 0x40280050u
N#define CYREG_SCB4_I2C_CTRL 0x40280060u
N#define CYREG_SCB4_I2C_STATUS 0x40280064u
N#define CYREG_SCB4_I2C_M_CMD 0x40280068u
N#define CYREG_SCB4_I2C_S_CMD 0x4028006cu
N#define CYREG_SCB4_I2C_CFG 0x40280070u
N#define CYREG_SCB4_TX_CTRL 0x40280200u
N#define CYREG_SCB4_TX_FIFO_CTRL 0x40280204u
N#define CYREG_SCB4_TX_FIFO_STATUS 0x40280208u
N#define CYREG_SCB4_TX_FIFO_WR 0x40280240u
N#define CYREG_SCB4_RX_CTRL 0x40280300u
N#define CYREG_SCB4_RX_FIFO_CTRL 0x40280304u
N#define CYREG_SCB4_RX_FIFO_STATUS 0x40280308u
N#define CYREG_SCB4_RX_MATCH 0x40280310u
N#define CYREG_SCB4_RX_FIFO_RD 0x40280340u
N#define CYREG_SCB4_RX_FIFO_RD_SILENT 0x40280344u
N#define CYREG_SCB4_EZ_DATA0 0x40280400u
N#define CYREG_SCB4_EZ_DATA1 0x40280404u
N#define CYREG_SCB4_EZ_DATA2 0x40280408u
N#define CYREG_SCB4_EZ_DATA3 0x4028040cu
N#define CYREG_SCB4_EZ_DATA4 0x40280410u
N#define CYREG_SCB4_EZ_DATA5 0x40280414u
N#define CYREG_SCB4_EZ_DATA6 0x40280418u
N#define CYREG_SCB4_EZ_DATA7 0x4028041cu
N#define CYREG_SCB4_EZ_DATA8 0x40280420u
N#define CYREG_SCB4_EZ_DATA9 0x40280424u
N#define CYREG_SCB4_EZ_DATA10 0x40280428u
N#define CYREG_SCB4_EZ_DATA11 0x4028042cu
N#define CYREG_SCB4_EZ_DATA12 0x40280430u
N#define CYREG_SCB4_EZ_DATA13 0x40280434u
N#define CYREG_SCB4_EZ_DATA14 0x40280438u
N#define CYREG_SCB4_EZ_DATA15 0x4028043cu
N#define CYREG_SCB4_EZ_DATA16 0x40280440u
N#define CYREG_SCB4_EZ_DATA17 0x40280444u
N#define CYREG_SCB4_EZ_DATA18 0x40280448u
N#define CYREG_SCB4_EZ_DATA19 0x4028044cu
N#define CYREG_SCB4_EZ_DATA20 0x40280450u
N#define CYREG_SCB4_EZ_DATA21 0x40280454u
N#define CYREG_SCB4_EZ_DATA22 0x40280458u
N#define CYREG_SCB4_EZ_DATA23 0x4028045cu
N#define CYREG_SCB4_EZ_DATA24 0x40280460u
N#define CYREG_SCB4_EZ_DATA25 0x40280464u
N#define CYREG_SCB4_EZ_DATA26 0x40280468u
N#define CYREG_SCB4_EZ_DATA27 0x4028046cu
N#define CYREG_SCB4_EZ_DATA28 0x40280470u
N#define CYREG_SCB4_EZ_DATA29 0x40280474u
N#define CYREG_SCB4_EZ_DATA30 0x40280478u
N#define CYREG_SCB4_EZ_DATA31 0x4028047cu
N#define CYREG_SCB4_INTR_CAUSE 0x40280e00u
N#define CYREG_SCB4_INTR_I2C_EC 0x40280e80u
N#define CYREG_SCB4_INTR_I2C_EC_MASK 0x40280e88u
N#define CYREG_SCB4_INTR_I2C_EC_MASKED 0x40280e8cu
N#define CYREG_SCB4_INTR_SPI_EC 0x40280ec0u
N#define CYREG_SCB4_INTR_SPI_EC_MASK 0x40280ec8u
N#define CYREG_SCB4_INTR_SPI_EC_MASKED 0x40280eccu
N#define CYREG_SCB4_INTR_M 0x40280f00u
N#define CYREG_SCB4_INTR_M_SET 0x40280f04u
N#define CYREG_SCB4_INTR_M_MASK 0x40280f08u
N#define CYREG_SCB4_INTR_M_MASKED 0x40280f0cu
N#define CYREG_SCB4_INTR_S 0x40280f40u
N#define CYREG_SCB4_INTR_S_SET 0x40280f44u
N#define CYREG_SCB4_INTR_S_MASK 0x40280f48u
N#define CYREG_SCB4_INTR_S_MASKED 0x40280f4cu
N#define CYREG_SCB4_INTR_TX 0x40280f80u
N#define CYREG_SCB4_INTR_TX_SET 0x40280f84u
N#define CYREG_SCB4_INTR_TX_MASK 0x40280f88u
N#define CYREG_SCB4_INTR_TX_MASKED 0x40280f8cu
N#define CYREG_SCB4_INTR_RX 0x40280fc0u
N#define CYREG_SCB4_INTR_RX_SET 0x40280fc4u
N#define CYREG_SCB4_INTR_RX_MASK 0x40280fc8u
N#define CYREG_SCB4_INTR_RX_MASKED 0x40280fccu
N#define CYDEV_CSD_BASE 0x40290000u
N#define CYDEV_CSD_SIZE 0x00001000u
N#define CYREG_CSD_CONFIG 0x40290000u
N#define CYFLD_CSD_LOW_VDDA__OFFSET 0x00000003u
N#define CYFLD_CSD_LOW_VDDA__SIZE 0x00000001u
N#define CYFLD_CSD_FILTER_DELAY__OFFSET 0x00000004u
N#define CYFLD_CSD_FILTER_DELAY__SIZE 0x00000003u
N#define CYFLD_CSD_SHIELD_DELAY__OFFSET 0x00000008u
N#define CYFLD_CSD_SHIELD_DELAY__SIZE 0x00000002u
N#define CYVAL_CSD_SHIELD_DELAY_OFF 0x00000000u
N#define CYVAL_CSD_SHIELD_DELAY_D5NS 0x00000001u
N#define CYVAL_CSD_SHIELD_DELAY_D10NS 0x00000002u
N#define CYVAL_CSD_SHIELD_DELAY_D20NS 0x00000003u
N#define CYFLD_CSD_SENSE_EN__OFFSET 0x0000000cu
N#define CYFLD_CSD_SENSE_EN__SIZE 0x00000001u
N#define CYFLD_CSD_CHARGE_MODE__OFFSET 0x0000000eu
N#define CYFLD_CSD_CHARGE_MODE__SIZE 0x00000001u
N#define CYVAL_CSD_CHARGE_MODE_CHARGE_OFF 0x00000000u
N#define CYVAL_CSD_CHARGE_MODE_CHARGE_IO 0x00000001u
N#define CYFLD_CSD_FULL_WAVE__OFFSET 0x00000011u
N#define CYFLD_CSD_FULL_WAVE__SIZE 0x00000001u
N#define CYVAL_CSD_FULL_WAVE_HALFWAVE 0x00000000u
N#define CYVAL_CSD_FULL_WAVE_FULLWAVE 0x00000001u
N#define CYFLD_CSD_MUTUAL_CAP__OFFSET 0x00000012u
N#define CYFLD_CSD_MUTUAL_CAP__SIZE 0x00000001u
N#define CYVAL_CSD_MUTUAL_CAP_SELFCAP 0x00000000u
N#define CYVAL_CSD_MUTUAL_CAP_MUTUALCAP 0x00000001u
N#define CYFLD_CSD_CSX_DUAL_CNT__OFFSET 0x00000013u
N#define CYFLD_CSD_CSX_DUAL_CNT__SIZE 0x00000001u
N#define CYVAL_CSD_CSX_DUAL_CNT_ONE 0x00000000u
N#define CYVAL_CSD_CSX_DUAL_CNT_TWO 0x00000001u
N#define CYFLD_CSD_DSI_COUNT_SEL__OFFSET 0x00000018u
N#define CYFLD_CSD_DSI_COUNT_SEL__SIZE 0x00000001u
N#define CYVAL_CSD_DSI_COUNT_SEL_CSD_RESULT 0x00000000u
N#define CYVAL_CSD_DSI_COUNT_SEL_ADC_RESULT 0x00000001u
N#define CYFLD_CSD_DSI_SAMPLE_EN__OFFSET 0x00000019u
N#define CYFLD_CSD_DSI_SAMPLE_EN__SIZE 0x00000001u
N#define CYFLD_CSD_SAMPLE_SYNC__OFFSET 0x0000001au
N#define CYFLD_CSD_SAMPLE_SYNC__SIZE 0x00000001u
N#define CYFLD_CSD_DSI_SENSE_EN__OFFSET 0x0000001bu
N#define CYFLD_CSD_DSI_SENSE_EN__SIZE 0x00000001u
N#define CYFLD_CSD_LP_MODE__OFFSET 0x0000001eu
N#define CYFLD_CSD_LP_MODE__SIZE 0x00000001u
N#define CYFLD_CSD_ENABLE__OFFSET 0x0000001fu
N#define CYFLD_CSD_ENABLE__SIZE 0x00000001u
N#define CYREG_CSD_SPARE 0x40290004u
N#define CYFLD_CSD_SPARE__OFFSET 0x00000000u
N#define CYFLD_CSD_SPARE__SIZE 0x00000004u
N#define CYREG_CSD_STATUS 0x40290080u
N#define CYFLD_CSD_CSD_CHARGE__OFFSET 0x00000000u
N#define CYFLD_CSD_CSD_CHARGE__SIZE 0x00000001u
N#define CYFLD_CSD_CSD_SENSE__OFFSET 0x00000001u
N#define CYFLD_CSD_CSD_SENSE__SIZE 0x00000001u
N#define CYFLD_CSD_HSCMP_OUT__OFFSET 0x00000002u
N#define CYFLD_CSD_HSCMP_OUT__SIZE 0x00000001u
N#define CYVAL_CSD_HSCMP_OUT_C_LT_VREF 0x00000000u
N#define CYVAL_CSD_HSCMP_OUT_C_GT_VREF 0x00000001u
N#define CYFLD_CSD_CSDCMP_OUT__OFFSET 0x00000003u
N#define CYFLD_CSD_CSDCMP_OUT__SIZE 0x00000001u
N#define CYREG_CSD_STAT_SEQ 0x40290084u
N#define CYFLD_CSD_SEQ_STATE__OFFSET 0x00000000u
N#define CYFLD_CSD_SEQ_STATE__SIZE 0x00000003u
N#define CYFLD_CSD_ADC_STATE__OFFSET 0x00000010u
N#define CYFLD_CSD_ADC_STATE__SIZE 0x00000003u
N#define CYREG_CSD_STAT_CNTS 0x40290088u
N#define CYFLD_CSD_NUM_CONV__OFFSET 0x00000000u
N#define CYFLD_CSD_NUM_CONV__SIZE 0x00000010u
N#define CYREG_CSD_STAT_HCNT 0x4029008cu
N#define CYFLD_CSD_CNT__OFFSET 0x00000000u
N#define CYFLD_CSD_CNT__SIZE 0x00000010u
N#define CYREG_CSD_RESULT_VAL1 0x402900d0u
N#define CYFLD_CSD_VALUE__OFFSET 0x00000000u
N#define CYFLD_CSD_VALUE__SIZE 0x00000010u
N#define CYFLD_CSD_BAD_CONVS__OFFSET 0x00000010u
N#define CYFLD_CSD_BAD_CONVS__SIZE 0x00000008u
N#define CYREG_CSD_RESULT_VAL2 0x402900d4u
N#define CYREG_CSD_ADC_RES 0x402900e0u
N#define CYFLD_CSD_VIN_CNT__OFFSET 0x00000000u
N#define CYFLD_CSD_VIN_CNT__SIZE 0x00000010u
N#define CYFLD_CSD_HSCMP_POL__OFFSET 0x00000010u
N#define CYFLD_CSD_HSCMP_POL__SIZE 0x00000001u
N#define CYFLD_CSD_ADC_OVERFLOW__OFFSET 0x0000001eu
N#define CYFLD_CSD_ADC_OVERFLOW__SIZE 0x00000001u
N#define CYFLD_CSD_ADC_ABORT__OFFSET 0x0000001fu
N#define CYFLD_CSD_ADC_ABORT__SIZE 0x00000001u
N#define CYREG_CSD_INTR 0x402900f0u
N#define CYFLD_CSD_SAMPLE__OFFSET 0x00000001u
N#define CYFLD_CSD_SAMPLE__SIZE 0x00000001u
N#define CYFLD_CSD_INIT__OFFSET 0x00000002u
N#define CYFLD_CSD_INIT__SIZE 0x00000001u
N#define CYFLD_CSD_ADC_RES__OFFSET 0x00000008u
N#define CYFLD_CSD_ADC_RES__SIZE 0x00000001u
N#define CYREG_CSD_INTR_SET 0x402900f4u
N#define CYREG_CSD_INTR_MASK 0x402900f8u
N#define CYREG_CSD_INTR_MASKED 0x402900fcu
N#define CYREG_CSD_HSCMP 0x40290180u
N#define CYFLD_CSD_HSCMP_EN__OFFSET 0x00000000u
N#define CYFLD_CSD_HSCMP_EN__SIZE 0x00000001u
N#define CYVAL_CSD_HSCMP_EN_OFF 0x00000000u
N#define CYVAL_CSD_HSCMP_EN_ON 0x00000001u
N#define CYFLD_CSD_HSCMP_INVERT__OFFSET 0x00000004u
N#define CYFLD_CSD_HSCMP_INVERT__SIZE 0x00000001u
N#define CYFLD_CSD_AZ_EN__OFFSET 0x0000001fu
N#define CYFLD_CSD_AZ_EN__SIZE 0x00000001u
N#define CYREG_CSD_AMBUF 0x40290184u
N#define CYFLD_CSD_PWR_MODE__OFFSET 0x00000000u
N#define CYFLD_CSD_PWR_MODE__SIZE 0x00000002u
N#define CYVAL_CSD_PWR_MODE_OFF 0x00000000u
N#define CYVAL_CSD_PWR_MODE_NORM 0x00000001u
N#define CYVAL_CSD_PWR_MODE_HI 0x00000002u
N#define CYREG_CSD_REFGEN 0x40290188u
N#define CYFLD_CSD_REFGEN_EN__OFFSET 0x00000000u
N#define CYFLD_CSD_REFGEN_EN__SIZE 0x00000001u
N#define CYVAL_CSD_REFGEN_EN_OFF 0x00000000u
N#define CYVAL_CSD_REFGEN_EN_ON 0x00000001u
N#define CYFLD_CSD_BYPASS__OFFSET 0x00000004u
N#define CYFLD_CSD_BYPASS__SIZE 0x00000001u
N#define CYFLD_CSD_VDDA_EN__OFFSET 0x00000005u
N#define CYFLD_CSD_VDDA_EN__SIZE 0x00000001u
N#define CYFLD_CSD_RES_EN__OFFSET 0x00000006u
N#define CYFLD_CSD_RES_EN__SIZE 0x00000001u
N#define CYFLD_CSD_GAIN__OFFSET 0x00000008u
N#define CYFLD_CSD_GAIN__SIZE 0x00000005u
N#define CYFLD_CSD_VREFLO_SEL__OFFSET 0x00000010u
N#define CYFLD_CSD_VREFLO_SEL__SIZE 0x00000005u
N#define CYFLD_CSD_VREFLO_INT__OFFSET 0x00000017u
N#define CYFLD_CSD_VREFLO_INT__SIZE 0x00000001u
N#define CYREG_CSD_CSDCMP 0x4029018cu
N#define CYFLD_CSD_CSDCMP_EN__OFFSET 0x00000000u
N#define CYFLD_CSD_CSDCMP_EN__SIZE 0x00000001u
N#define CYVAL_CSD_CSDCMP_EN_OFF 0x00000000u
N#define CYVAL_CSD_CSDCMP_EN_ON 0x00000001u
N#define CYFLD_CSD_POLARITY_SEL__OFFSET 0x00000004u
N#define CYFLD_CSD_POLARITY_SEL__SIZE 0x00000002u
N#define CYVAL_CSD_POLARITY_SEL_IDACA_POL 0x00000000u
N#define CYVAL_CSD_POLARITY_SEL_IDACB_POL 0x00000001u
N#define CYVAL_CSD_POLARITY_SEL_DUAL_POL 0x00000002u
N#define CYFLD_CSD_CMP_PHASE__OFFSET 0x00000008u
N#define CYFLD_CSD_CMP_PHASE__SIZE 0x00000002u
N#define CYVAL_CSD_CMP_PHASE_FULL 0x00000000u
N#define CYVAL_CSD_CMP_PHASE_PHI1 0x00000001u
N#define CYVAL_CSD_CMP_PHASE_PHI2 0x00000002u
N#define CYVAL_CSD_CMP_PHASE_PHI1_2 0x00000003u
N#define CYFLD_CSD_CMP_MODE__OFFSET 0x0000001cu
N#define CYFLD_CSD_CMP_MODE__SIZE 0x00000001u
N#define CYVAL_CSD_CMP_MODE_CSD 0x00000000u
N#define CYVAL_CSD_CMP_MODE_GP 0x00000001u
N#define CYFLD_CSD_FEEDBACK_MODE__OFFSET 0x0000001du
N#define CYFLD_CSD_FEEDBACK_MODE__SIZE 0x00000001u
N#define CYVAL_CSD_FEEDBACK_MODE_FLOP 0x00000000u
N#define CYVAL_CSD_FEEDBACK_MODE_COMP 0x00000001u
N#define CYREG_CSD_IDACA 0x402901c0u
N#define CYFLD_CSD_VAL__OFFSET 0x00000000u
N#define CYFLD_CSD_VAL__SIZE 0x00000007u
N#define CYFLD_CSD_POL_DYN__OFFSET 0x00000007u
N#define CYFLD_CSD_POL_DYN__SIZE 0x00000001u
N#define CYVAL_CSD_POL_DYN_STATIC 0x00000000u
N#define CYVAL_CSD_POL_DYN_DYNAMIC 0x00000001u
N#define CYFLD_CSD_POLARITY__OFFSET 0x00000008u
N#define CYFLD_CSD_POLARITY__SIZE 0x00000002u
N#define CYVAL_CSD_POLARITY_VSSA_SRC 0x00000000u
N#define CYVAL_CSD_POLARITY_VDDA_SNK 0x00000001u
N#define CYVAL_CSD_POLARITY_SENSE 0x00000002u
N#define CYVAL_CSD_POLARITY_SENSE_INV 0x00000003u
N#define CYFLD_CSD_BAL_MODE__OFFSET 0x0000000au
N#define CYFLD_CSD_BAL_MODE__SIZE 0x00000002u
N#define CYVAL_CSD_BAL_MODE_FULL 0x00000000u
N#define CYVAL_CSD_BAL_MODE_PHI1 0x00000001u
N#define CYVAL_CSD_BAL_MODE_PHI2 0x00000002u
N#define CYVAL_CSD_BAL_MODE_PHI1_2 0x00000003u
N#define CYFLD_CSD_LEG1_MODE__OFFSET 0x00000010u
N#define CYFLD_CSD_LEG1_MODE__SIZE 0x00000002u
N#define CYVAL_CSD_LEG1_MODE_GP_STATIC 0x00000000u
N#define CYVAL_CSD_LEG1_MODE_GP 0x00000001u
N#define CYVAL_CSD_LEG1_MODE_CSD_STATIC 0x00000002u
N#define CYVAL_CSD_LEG1_MODE_CSD 0x00000003u
N#define CYFLD_CSD_LEG2_MODE__OFFSET 0x00000012u
N#define CYFLD_CSD_LEG2_MODE__SIZE 0x00000002u
N#define CYVAL_CSD_LEG2_MODE_GP_STATIC 0x00000000u
N#define CYVAL_CSD_LEG2_MODE_GP 0x00000001u
N#define CYVAL_CSD_LEG2_MODE_CSD_STATIC 0x00000002u
N#define CYVAL_CSD_LEG2_MODE_CSD 0x00000003u
N#define CYFLD_CSD_DSI_CTRL_EN__OFFSET 0x00000015u
N#define CYFLD_CSD_DSI_CTRL_EN__SIZE 0x00000001u
N#define CYFLD_CSD_RANGE__OFFSET 0x00000016u
N#define CYFLD_CSD_RANGE__SIZE 0x00000002u
N#define CYVAL_CSD_RANGE_IDAC_LO 0x00000000u
N#define CYVAL_CSD_RANGE_IDAC_MED 0x00000001u
N#define CYVAL_CSD_RANGE_IDAC_HI 0x00000002u
N#define CYVAL_CSD_RANGE_IDAC_MED2 0x00000003u
N#define CYFLD_CSD_LEG1_EN__OFFSET 0x00000018u
N#define CYFLD_CSD_LEG1_EN__SIZE 0x00000001u
N#define CYFLD_CSD_LEG2_EN__OFFSET 0x00000019u
N#define CYFLD_CSD_LEG2_EN__SIZE 0x00000001u
N#define CYREG_CSD_IDACB 0x402901c4u
N#define CYFLD_CSD_LEG3_EN__OFFSET 0x0000001au
N#define CYFLD_CSD_LEG3_EN__SIZE 0x00000001u
N#define CYREG_CSD_SW_RES 0x402901f0u
N#define CYFLD_CSD_RES_HCAV__OFFSET 0x00000000u
N#define CYFLD_CSD_RES_HCAV__SIZE 0x00000002u
N#define CYVAL_CSD_RES_HCAV_LOW 0x00000000u
N#define CYVAL_CSD_RES_HCAV_MED 0x00000001u
N#define CYVAL_CSD_RES_HCAV_HIGH 0x00000002u
N#define CYVAL_CSD_RES_HCAV_LOWEMI 0x00000003u
N#define CYFLD_CSD_RES_HCAG__OFFSET 0x00000002u
N#define CYFLD_CSD_RES_HCAG__SIZE 0x00000002u
N#define CYFLD_CSD_RES_HCBV__OFFSET 0x00000004u
N#define CYFLD_CSD_RES_HCBV__SIZE 0x00000002u
N#define CYFLD_CSD_RES_HCBG__OFFSET 0x00000006u
N#define CYFLD_CSD_RES_HCBG__SIZE 0x00000002u
N#define CYFLD_CSD_RES_F1PM__OFFSET 0x00000010u
N#define CYFLD_CSD_RES_F1PM__SIZE 0x00000002u
N#define CYVAL_CSD_RES_F1PM_LOW 0x00000000u
N#define CYVAL_CSD_RES_F1PM_MED 0x00000001u
N#define CYVAL_CSD_RES_F1PM_HIGH 0x00000002u
N#define CYVAL_CSD_RES_F1PM_RESERVED 0x00000003u
N#define CYFLD_CSD_RES_F2PT__OFFSET 0x00000012u
N#define CYFLD_CSD_RES_F2PT__SIZE 0x00000002u
N#define CYREG_CSD_SENSE_PERIOD 0x40290200u
N#define CYFLD_CSD_SENSE_DIV__OFFSET 0x00000000u
N#define CYFLD_CSD_SENSE_DIV__SIZE 0x0000000cu
N#define CYFLD_CSD_LFSR_SIZE__OFFSET 0x00000010u
N#define CYFLD_CSD_LFSR_SIZE__SIZE 0x00000003u
N#define CYVAL_CSD_LFSR_SIZE_OFF 0x00000000u
N#define CYVAL_CSD_LFSR_SIZE_6B 0x00000001u
N#define CYVAL_CSD_LFSR_SIZE_7B 0x00000002u
N#define CYVAL_CSD_LFSR_SIZE_9B 0x00000003u
N#define CYVAL_CSD_LFSR_SIZE_10B 0x00000004u
N#define CYVAL_CSD_LFSR_SIZE_8B 0x00000005u
N#define CYVAL_CSD_LFSR_SIZE_12B 0x00000006u
N#define CYFLD_CSD_LFSR_SCALE__OFFSET 0x00000014u
N#define CYFLD_CSD_LFSR_SCALE__SIZE 0x00000004u
N#define CYFLD_CSD_LFSR_CLEAR__OFFSET 0x00000018u
N#define CYFLD_CSD_LFSR_CLEAR__SIZE 0x00000001u
N#define CYFLD_CSD_SEL_LFSR_MSB__OFFSET 0x00000019u
N#define CYFLD_CSD_SEL_LFSR_MSB__SIZE 0x00000001u
N#define CYFLD_CSD_LFSR_BITS__OFFSET 0x0000001au
N#define CYFLD_CSD_LFSR_BITS__SIZE 0x00000002u
N#define CYVAL_CSD_LFSR_BITS_2B 0x00000000u
N#define CYVAL_CSD_LFSR_BITS_3B 0x00000001u
N#define CYVAL_CSD_LFSR_BITS_4B 0x00000002u
N#define CYVAL_CSD_LFSR_BITS_5B 0x00000003u
N#define CYREG_CSD_SENSE_DUTY 0x40290204u
N#define CYFLD_CSD_SENSE_WIDTH__OFFSET 0x00000000u
N#define CYFLD_CSD_SENSE_WIDTH__SIZE 0x0000000cu
N#define CYFLD_CSD_SENSE_POL__OFFSET 0x00000010u
N#define CYFLD_CSD_SENSE_POL__SIZE 0x00000001u
N#define CYFLD_CSD_OVERLAP_PHI1__OFFSET 0x00000012u
N#define CYFLD_CSD_OVERLAP_PHI1__SIZE 0x00000001u
N#define CYFLD_CSD_OVERLAP_PHI2__OFFSET 0x00000013u
N#define CYFLD_CSD_OVERLAP_PHI2__SIZE 0x00000001u
N#define CYREG_CSD_SW_HS_P_SEL 0x40290280u
N#define CYFLD_CSD_SW_HMPM__OFFSET 0x00000000u
N#define CYFLD_CSD_SW_HMPM__SIZE 0x00000001u
N#define CYFLD_CSD_SW_HMPT__OFFSET 0x00000004u
N#define CYFLD_CSD_SW_HMPT__SIZE 0x00000001u
N#define CYFLD_CSD_SW_HMPS__OFFSET 0x00000008u
N#define CYFLD_CSD_SW_HMPS__SIZE 0x00000001u
N#define CYFLD_CSD_SW_HMMA__OFFSET 0x0000000cu
N#define CYFLD_CSD_SW_HMMA__SIZE 0x00000001u
N#define CYFLD_CSD_SW_HMMB__OFFSET 0x00000010u
N#define CYFLD_CSD_SW_HMMB__SIZE 0x00000001u
N#define CYFLD_CSD_SW_HMCA__OFFSET 0x00000014u
N#define CYFLD_CSD_SW_HMCA__SIZE 0x00000001u
N#define CYFLD_CSD_SW_HMCB__OFFSET 0x00000018u
N#define CYFLD_CSD_SW_HMCB__SIZE 0x00000001u
N#define CYFLD_CSD_SW_HMRH__OFFSET 0x0000001cu
N#define CYFLD_CSD_SW_HMRH__SIZE 0x00000001u
N#define CYREG_CSD_SW_HS_N_SEL 0x40290284u
N#define CYFLD_CSD_SW_HCCC__OFFSET 0x00000010u
N#define CYFLD_CSD_SW_HCCC__SIZE 0x00000001u
N#define CYFLD_CSD_SW_HCCD__OFFSET 0x00000014u
N#define CYFLD_CSD_SW_HCCD__SIZE 0x00000001u
N#define CYFLD_CSD_SW_HCRH__OFFSET 0x00000018u
N#define CYFLD_CSD_SW_HCRH__SIZE 0x00000003u
N#define CYFLD_CSD_SW_HCRL__OFFSET 0x0000001cu
N#define CYFLD_CSD_SW_HCRL__SIZE 0x00000003u
N#define CYREG_CSD_SW_SHIELD_SEL 0x40290288u
N#define CYFLD_CSD_SW_HCAV__OFFSET 0x00000000u
N#define CYFLD_CSD_SW_HCAV__SIZE 0x00000003u
N#define CYFLD_CSD_SW_HCAG__OFFSET 0x00000004u
N#define CYFLD_CSD_SW_HCAG__SIZE 0x00000003u
N#define CYFLD_CSD_SW_HCBV__OFFSET 0x00000008u
N#define CYFLD_CSD_SW_HCBV__SIZE 0x00000003u
N#define CYFLD_CSD_SW_HCBG__OFFSET 0x0000000cu
N#define CYFLD_CSD_SW_HCBG__SIZE 0x00000003u
N#define CYFLD_CSD_SW_HCCV__OFFSET 0x00000010u
N#define CYFLD_CSD_SW_HCCV__SIZE 0x00000001u
N#define CYFLD_CSD_SW_HCCG__OFFSET 0x00000014u
N#define CYFLD_CSD_SW_HCCG__SIZE 0x00000001u
N#define CYREG_CSD_SW_HS_P_SEL1 0x4029028cu
N#define CYFLD_CSD_SW_HMRE__OFFSET 0x00000000u
N#define CYFLD_CSD_SW_HMRE__SIZE 0x00000001u
N#define CYREG_CSD_SW_AMUXBUF_SEL 0x40290290u
N#define CYFLD_CSD_SW_IRBY__OFFSET 0x00000004u
N#define CYFLD_CSD_SW_IRBY__SIZE 0x00000001u
N#define CYFLD_CSD_SW_IRLB__OFFSET 0x00000008u
N#define CYFLD_CSD_SW_IRLB__SIZE 0x00000001u
N#define CYFLD_CSD_SW_ICA__OFFSET 0x0000000cu
N#define CYFLD_CSD_SW_ICA__SIZE 0x00000001u
N#define CYFLD_CSD_SW_ICB__OFFSET 0x00000010u
N#define CYFLD_CSD_SW_ICB__SIZE 0x00000003u
N#define CYFLD_CSD_SW_IRLI__OFFSET 0x00000014u
N#define CYFLD_CSD_SW_IRLI__SIZE 0x00000001u
N#define CYFLD_CSD_SW_IRH__OFFSET 0x00000018u
N#define CYFLD_CSD_SW_IRH__SIZE 0x00000001u
N#define CYFLD_CSD_SW_IRL__OFFSET 0x0000001cu
N#define CYFLD_CSD_SW_IRL__SIZE 0x00000001u
N#define CYREG_CSD_SW_BYP_SEL 0x40290294u
N#define CYFLD_CSD_SW_BYA__OFFSET 0x0000000cu
N#define CYFLD_CSD_SW_BYA__SIZE 0x00000001u
N#define CYFLD_CSD_SW_BYB__OFFSET 0x00000010u
N#define CYFLD_CSD_SW_BYB__SIZE 0x00000001u
N#define CYFLD_CSD_SW_CBCC__OFFSET 0x00000014u
N#define CYFLD_CSD_SW_CBCC__SIZE 0x00000001u
N#define CYREG_CSD_SW_CMP_P_SEL 0x402902a0u
N#define CYFLD_CSD_SW_SFPM__OFFSET 0x00000000u
N#define CYFLD_CSD_SW_SFPM__SIZE 0x00000003u
N#define CYFLD_CSD_SW_SFPT__OFFSET 0x00000004u
N#define CYFLD_CSD_SW_SFPT__SIZE 0x00000003u
N#define CYFLD_CSD_SW_SFPS__OFFSET 0x00000008u
N#define CYFLD_CSD_SW_SFPS__SIZE 0x00000003u
N#define CYFLD_CSD_SW_SFMA__OFFSET 0x0000000cu
N#define CYFLD_CSD_SW_SFMA__SIZE 0x00000001u
N#define CYFLD_CSD_SW_SFMB__OFFSET 0x00000010u
N#define CYFLD_CSD_SW_SFMB__SIZE 0x00000001u
N#define CYFLD_CSD_SW_SFCA__OFFSET 0x00000014u
N#define CYFLD_CSD_SW_SFCA__SIZE 0x00000001u
N#define CYFLD_CSD_SW_SFCB__OFFSET 0x00000018u
N#define CYFLD_CSD_SW_SFCB__SIZE 0x00000001u
N#define CYREG_CSD_SW_CMP_N_SEL 0x402902a4u
N#define CYFLD_CSD_SW_SCRH__OFFSET 0x00000018u
N#define CYFLD_CSD_SW_SCRH__SIZE 0x00000003u
N#define CYFLD_CSD_SW_SCRL__OFFSET 0x0000001cu
N#define CYFLD_CSD_SW_SCRL__SIZE 0x00000003u
N#define CYREG_CSD_SW_REFGEN_SEL 0x402902a8u
N#define CYFLD_CSD_SW_IAIB__OFFSET 0x00000000u
N#define CYFLD_CSD_SW_IAIB__SIZE 0x00000001u
N#define CYFLD_CSD_SW_IBCB__OFFSET 0x00000004u
N#define CYFLD_CSD_SW_IBCB__SIZE 0x00000001u
N#define CYFLD_CSD_SW_SGMB__OFFSET 0x00000010u
N#define CYFLD_CSD_SW_SGMB__SIZE 0x00000001u
N#define CYFLD_CSD_SW_SGRE__OFFSET 0x00000018u
N#define CYFLD_CSD_SW_SGRE__SIZE 0x00000001u
N#define CYFLD_CSD_SW_SGR__OFFSET 0x0000001cu
N#define CYFLD_CSD_SW_SGR__SIZE 0x00000001u
N#define CYREG_CSD_SW_FW_MOD_SEL 0x402902b0u
N#define CYFLD_CSD_SW_F1PM__OFFSET 0x00000000u
N#define CYFLD_CSD_SW_F1PM__SIZE 0x00000001u
N#define CYFLD_CSD_SW_F1MA__OFFSET 0x00000008u
N#define CYFLD_CSD_SW_F1MA__SIZE 0x00000003u
N#define CYFLD_CSD_SW_F1CA__OFFSET 0x00000010u
N#define CYFLD_CSD_SW_F1CA__SIZE 0x00000003u
N#define CYFLD_CSD_SW_C1CC__OFFSET 0x00000014u
N#define CYFLD_CSD_SW_C1CC__SIZE 0x00000001u
N#define CYFLD_CSD_SW_C1CD__OFFSET 0x00000018u
N#define CYFLD_CSD_SW_C1CD__SIZE 0x00000001u
N#define CYFLD_CSD_SW_C1F1__OFFSET 0x0000001cu
N#define CYFLD_CSD_SW_C1F1__SIZE 0x00000001u
N#define CYREG_CSD_SW_FW_TANK_SEL 0x402902b4u
N#define CYFLD_CSD_SW_F2PT__OFFSET 0x00000004u
N#define CYFLD_CSD_SW_F2PT__SIZE 0x00000001u
N#define CYFLD_CSD_SW_F2MA__OFFSET 0x00000008u
N#define CYFLD_CSD_SW_F2MA__SIZE 0x00000003u
N#define CYFLD_CSD_SW_F2CA__OFFSET 0x0000000cu
N#define CYFLD_CSD_SW_F2CA__SIZE 0x00000003u
N#define CYFLD_CSD_SW_F2CB__OFFSET 0x00000010u
N#define CYFLD_CSD_SW_F2CB__SIZE 0x00000003u
N#define CYFLD_CSD_SW_C2CC__OFFSET 0x00000014u
N#define CYFLD_CSD_SW_C2CC__SIZE 0x00000001u
N#define CYFLD_CSD_SW_C2CD__OFFSET 0x00000018u
N#define CYFLD_CSD_SW_C2CD__SIZE 0x00000001u
N#define CYFLD_CSD_SW_C2F2__OFFSET 0x0000001cu
N#define CYFLD_CSD_SW_C2F2__SIZE 0x00000001u
N#define CYREG_CSD_SW_DSI_SEL 0x402902c0u
N#define CYFLD_CSD_DSI_CSH_TANK__OFFSET 0x00000000u
N#define CYFLD_CSD_DSI_CSH_TANK__SIZE 0x00000003u
N#define CYFLD_CSD_DSI_CMOD__OFFSET 0x00000004u
N#define CYFLD_CSD_DSI_CMOD__SIZE 0x00000003u
N#define CYREG_CSD_SEQ_TIME 0x40290300u
N#define CYFLD_CSD_AZ_TIME__OFFSET 0x00000000u
N#define CYFLD_CSD_AZ_TIME__SIZE 0x00000008u
N#define CYREG_CSD_SEQ_INIT_CNT 0x40290310u
N#define CYFLD_CSD_CONV_CNT__OFFSET 0x00000000u
N#define CYFLD_CSD_CONV_CNT__SIZE 0x00000010u
N#define CYREG_CSD_SEQ_NORM_CNT 0x40290314u
N#define CYREG_CSD_ADC_CTL 0x40290320u
N#define CYFLD_CSD_ADC_TIME__OFFSET 0x00000000u
N#define CYFLD_CSD_ADC_TIME__SIZE 0x00000008u
N#define CYFLD_CSD_ADC_MODE__OFFSET 0x00000010u
N#define CYFLD_CSD_ADC_MODE__SIZE 0x00000002u
N#define CYVAL_CSD_ADC_MODE_OFF 0x00000000u
N#define CYVAL_CSD_ADC_MODE_VREF_CNT 0x00000001u
N#define CYVAL_CSD_ADC_MODE_VREF_BY2_CNT 0x00000002u
N#define CYVAL_CSD_ADC_MODE_VIN_CNT 0x00000003u
N#define CYREG_CSD_SEQ_START 0x40290340u
N#define CYFLD_CSD_START__OFFSET 0x00000000u
N#define CYFLD_CSD_START__SIZE 0x00000001u
N#define CYFLD_CSD_SEQ_MODE__OFFSET 0x00000001u
N#define CYFLD_CSD_SEQ_MODE__SIZE 0x00000001u
N#define CYFLD_CSD_ABORT__OFFSET 0x00000003u
N#define CYFLD_CSD_ABORT__SIZE 0x00000001u
N#define CYFLD_CSD_DSI_START_EN__OFFSET 0x00000004u
N#define CYFLD_CSD_DSI_START_EN__SIZE 0x00000001u
N#define CYFLD_CSD_AZ0_SKIP__OFFSET 0x00000008u
N#define CYFLD_CSD_AZ0_SKIP__SIZE 0x00000001u
N#define CYFLD_CSD_AZ1_SKIP__OFFSET 0x00000009u
N#define CYFLD_CSD_AZ1_SKIP__SIZE 0x00000001u
N#define CYDEV_LCD_BASE 0x402a0000u
N#define CYDEV_LCD_SIZE 0x00010000u
N#define CYREG_LCD_ID 0x402a0000u
N#define CYFLD_LCD_ID__OFFSET 0x00000000u
N#define CYFLD_LCD_ID__SIZE 0x00000010u
N#define CYFLD_LCD_REVISION__OFFSET 0x00000010u
N#define CYFLD_LCD_REVISION__SIZE 0x00000010u
N#define CYREG_LCD_DIVIDER 0x402a0004u
N#define CYFLD_LCD_SUBFR_DIV__OFFSET 0x00000000u
N#define CYFLD_LCD_SUBFR_DIV__SIZE 0x00000010u
N#define CYFLD_LCD_DEAD_DIV__OFFSET 0x00000010u
N#define CYFLD_LCD_DEAD_DIV__SIZE 0x00000010u
N#define CYREG_LCD_CONTROL 0x402a0008u
N#define CYFLD_LCD_LS_EN__OFFSET 0x00000000u
N#define CYFLD_LCD_LS_EN__SIZE 0x00000001u
N#define CYFLD_LCD_HS_EN__OFFSET 0x00000001u
N#define CYFLD_LCD_HS_EN__SIZE 0x00000001u
N#define CYFLD_LCD_LCD_MODE__OFFSET 0x00000002u
N#define CYFLD_LCD_LCD_MODE__SIZE 0x00000001u
N#define CYVAL_LCD_LCD_MODE_LS 0x00000000u
N#define CYVAL_LCD_LCD_MODE_HS 0x00000001u
N#define CYFLD_LCD_TYPE__OFFSET 0x00000003u
N#define CYFLD_LCD_TYPE__SIZE 0x00000001u
N#define CYVAL_LCD_TYPE_TYPE_A 0x00000000u
N#define CYVAL_LCD_TYPE_TYPE_B 0x00000001u
N#define CYFLD_LCD_OP_MODE__OFFSET 0x00000004u
N#define CYFLD_LCD_OP_MODE__SIZE 0x00000001u
N#define CYVAL_LCD_OP_MODE_PWM 0x00000000u
N#define CYVAL_LCD_OP_MODE_CORRELATION 0x00000001u
N#define CYFLD_LCD_BIAS__OFFSET 0x00000005u
N#define CYFLD_LCD_BIAS__SIZE 0x00000002u
N#define CYVAL_LCD_BIAS_HALF 0x00000000u
N#define CYVAL_LCD_BIAS_THIRD 0x00000001u
N#define CYVAL_LCD_BIAS_FOURTH 0x00000002u
N#define CYVAL_LCD_BIAS_FIFTH 0x00000003u
N#define CYFLD_LCD_COM_NUM__OFFSET 0x00000008u
N#define CYFLD_LCD_COM_NUM__SIZE 0x00000004u
N#define CYFLD_LCD_LS_EN_STAT__OFFSET 0x0000001fu
N#define CYFLD_LCD_LS_EN_STAT__SIZE 0x00000001u
N#define CYREG_LCD_DATA00 0x402a0100u
N#define CYFLD_LCD_DATA__OFFSET 0x00000000u
N#define CYFLD_LCD_DATA__SIZE 0x00000020u
N#define CYREG_LCD_DATA01 0x402a0104u
N#define CYREG_LCD_DATA02 0x402a0108u
N#define CYREG_LCD_DATA03 0x402a010cu
N#define CYREG_LCD_DATA04 0x402a0110u
N#define CYREG_LCD_DATA05 0x402a0114u
N#define CYREG_LCD_DATA06 0x402a0118u
N#define CYREG_LCD_DATA07 0x402a011cu
N#define CYREG_LCD_DATA10 0x402a0200u
N#define CYREG_LCD_DATA11 0x402a0204u
N#define CYREG_LCD_DATA12 0x402a0208u
N#define CYREG_LCD_DATA13 0x402a020cu
N#define CYREG_LCD_DATA14 0x402a0210u
N#define CYREG_LCD_DATA15 0x402a0214u
N#define CYREG_LCD_DATA16 0x402a0218u
N#define CYREG_LCD_DATA17 0x402a021cu
N#define CYDEV_LPCOMP_BASE 0x402b0000u
N#define CYDEV_LPCOMP_SIZE 0x00010000u
N#define CYREG_LPCOMP_ID 0x402b0000u
N#define CYFLD_LPCOMP_ID__OFFSET 0x00000000u
N#define CYFLD_LPCOMP_ID__SIZE 0x00000010u
N#define CYFLD_LPCOMP_REVISION__OFFSET 0x00000010u
N#define CYFLD_LPCOMP_REVISION__SIZE 0x00000010u
N#define CYREG_LPCOMP_CONFIG 0x402b0004u
N#define CYFLD_LPCOMP_MODE1__OFFSET 0x00000000u
N#define CYFLD_LPCOMP_MODE1__SIZE 0x00000002u
N#define CYVAL_LPCOMP_MODE1_SLOW 0x00000000u
N#define CYVAL_LPCOMP_MODE1_FAST 0x00000001u
N#define CYVAL_LPCOMP_MODE1_ULP 0x00000002u
N#define CYFLD_LPCOMP_HYST1__OFFSET 0x00000002u
N#define CYFLD_LPCOMP_HYST1__SIZE 0x00000001u
N#define CYFLD_LPCOMP_FILTER1__OFFSET 0x00000003u
N#define CYFLD_LPCOMP_FILTER1__SIZE 0x00000001u
N#define CYFLD_LPCOMP_INTTYPE1__OFFSET 0x00000004u
N#define CYFLD_LPCOMP_INTTYPE1__SIZE 0x00000002u
N#define CYVAL_LPCOMP_INTTYPE1_DISABLE 0x00000000u
N#define CYVAL_LPCOMP_INTTYPE1_RISING 0x00000001u
N#define CYVAL_LPCOMP_INTTYPE1_FALLING 0x00000002u
N#define CYVAL_LPCOMP_INTTYPE1_BOTH 0x00000003u
N#define CYFLD_LPCOMP_OUT1__OFFSET 0x00000006u
N#define CYFLD_LPCOMP_OUT1__SIZE 0x00000001u
N#define CYFLD_LPCOMP_ENABLE1__OFFSET 0x00000007u
N#define CYFLD_LPCOMP_ENABLE1__SIZE 0x00000001u
N#define CYFLD_LPCOMP_MODE2__OFFSET 0x00000008u
N#define CYFLD_LPCOMP_MODE2__SIZE 0x00000002u
N#define CYVAL_LPCOMP_MODE2_SLOW 0x00000000u
N#define CYVAL_LPCOMP_MODE2_FAST 0x00000001u
N#define CYVAL_LPCOMP_MODE2_ULP 0x00000002u
N#define CYFLD_LPCOMP_HYST2__OFFSET 0x0000000au
N#define CYFLD_LPCOMP_HYST2__SIZE 0x00000001u
N#define CYFLD_LPCOMP_FILTER2__OFFSET 0x0000000bu
N#define CYFLD_LPCOMP_FILTER2__SIZE 0x00000001u
N#define CYFLD_LPCOMP_INTTYPE2__OFFSET 0x0000000cu
N#define CYFLD_LPCOMP_INTTYPE2__SIZE 0x00000002u
N#define CYVAL_LPCOMP_INTTYPE2_DISABLE 0x00000000u
N#define CYVAL_LPCOMP_INTTYPE2_RISING 0x00000001u
N#define CYVAL_LPCOMP_INTTYPE2_FALLING 0x00000002u
N#define CYVAL_LPCOMP_INTTYPE2_BOTH 0x00000003u
N#define CYFLD_LPCOMP_OUT2__OFFSET 0x0000000eu
N#define CYFLD_LPCOMP_OUT2__SIZE 0x00000001u
N#define CYFLD_LPCOMP_ENABLE2__OFFSET 0x0000000fu
N#define CYFLD_LPCOMP_ENABLE2__SIZE 0x00000001u
N#define CYFLD_LPCOMP_DSI_BYPASS1__OFFSET 0x00000010u
N#define CYFLD_LPCOMP_DSI_BYPASS1__SIZE 0x00000001u
N#define CYFLD_LPCOMP_DSI_LEVEL1__OFFSET 0x00000011u
N#define CYFLD_LPCOMP_DSI_LEVEL1__SIZE 0x00000001u
N#define CYFLD_LPCOMP_DSI_BYPASS2__OFFSET 0x00000014u
N#define CYFLD_LPCOMP_DSI_BYPASS2__SIZE 0x00000001u
N#define CYFLD_LPCOMP_DSI_LEVEL2__OFFSET 0x00000015u
N#define CYFLD_LPCOMP_DSI_LEVEL2__SIZE 0x00000001u
N#define CYREG_LPCOMP_DFT 0x402b0008u
N#define CYFLD_LPCOMP_CAL_EN__OFFSET 0x00000000u
N#define CYFLD_LPCOMP_CAL_EN__SIZE 0x00000001u
N#define CYFLD_LPCOMP_BYPASS__OFFSET 0x00000001u
N#define CYFLD_LPCOMP_BYPASS__SIZE 0x00000001u
N#define CYREG_LPCOMP_INTR 0x402b0010u
N#define CYFLD_LPCOMP_COMP1__OFFSET 0x00000000u
N#define CYFLD_LPCOMP_COMP1__SIZE 0x00000001u
N#define CYFLD_LPCOMP_COMP2__OFFSET 0x00000001u
N#define CYFLD_LPCOMP_COMP2__SIZE 0x00000001u
N#define CYREG_LPCOMP_INTR_SET 0x402b0014u
N#define CYREG_LPCOMP_INTR_MASK 0x402b0018u
N#define CYFLD_LPCOMP_COMP1_MASK__OFFSET 0x00000000u
N#define CYFLD_LPCOMP_COMP1_MASK__SIZE 0x00000001u
N#define CYFLD_LPCOMP_COMP2_MASK__OFFSET 0x00000001u
N#define CYFLD_LPCOMP_COMP2_MASK__SIZE 0x00000001u
N#define CYREG_LPCOMP_INTR_MASKED 0x402b001cu
N#define CYFLD_LPCOMP_COMP1_MASKED__OFFSET 0x00000000u
N#define CYFLD_LPCOMP_COMP1_MASKED__SIZE 0x00000001u
N#define CYFLD_LPCOMP_COMP2_MASKED__OFFSET 0x00000001u
N#define CYFLD_LPCOMP_COMP2_MASKED__SIZE 0x00000001u
N#define CYREG_LPCOMP_TRIM1 0x402bff00u
N#define CYFLD_LPCOMP_COMP1_TRIMA__OFFSET 0x00000000u
N#define CYFLD_LPCOMP_COMP1_TRIMA__SIZE 0x00000005u
N#define CYREG_LPCOMP_TRIM2 0x402bff04u
N#define CYFLD_LPCOMP_COMP1_TRIMB__OFFSET 0x00000000u
N#define CYFLD_LPCOMP_COMP1_TRIMB__SIZE 0x00000005u
N#define CYREG_LPCOMP_TRIM3 0x402bff08u
N#define CYFLD_LPCOMP_COMP2_TRIMA__OFFSET 0x00000000u
N#define CYFLD_LPCOMP_COMP2_TRIMA__SIZE 0x00000005u
N#define CYREG_LPCOMP_TRIM4 0x402bff0cu
N#define CYFLD_LPCOMP_COMP2_TRIMB__OFFSET 0x00000000u
N#define CYFLD_LPCOMP_COMP2_TRIMB__SIZE 0x00000005u
N#define CYDEV_CRYPTO_BASE 0x402c0000u
N#define CYDEV_CRYPTO_SIZE 0x00010000u
N#define CYREG_CRYPTO_CTL 0x402c0000u
N#define CYFLD_CRYPTO_OPCODE__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_OPCODE__SIZE 0x00000005u
N#define CYVAL_CRYPTO_OPCODE_AES_FORWARD 0x00000000u
N#define CYVAL_CRYPTO_OPCODE_AES_INVERSE 0x00000001u
N#define CYVAL_CRYPTO_OPCODE_SHA 0x00000010u
N#define CYVAL_CRYPTO_OPCODE_CRC 0x00000018u
N#define CYFLD_CRYPTO_ENABLED__OFFSET 0x0000001fu
N#define CYFLD_CRYPTO_ENABLED__SIZE 0x00000001u
N#define CYREG_CRYPTO_STATUS 0x402c0004u
N#define CYFLD_CRYPTO_BUSY__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_BUSY__SIZE 0x00000001u
N#define CYREG_CRYPTO_CMD 0x402c0008u
N#define CYFLD_CRYPTO_START__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_START__SIZE 0x00000001u
N#define CYREG_CRYPTO_TR_CTL0 0x402c0280u
N#define CYFLD_CRYPTO_SAMPLE_CLOCK_DIV__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_SAMPLE_CLOCK_DIV__SIZE 0x00000008u
N#define CYFLD_CRYPTO_RED_CLOCK_DIV__OFFSET 0x00000008u
N#define CYFLD_CRYPTO_RED_CLOCK_DIV__SIZE 0x00000008u
N#define CYFLD_CRYPTO_INIT_DELAY__OFFSET 0x00000010u
N#define CYFLD_CRYPTO_INIT_DELAY__SIZE 0x00000008u
N#define CYFLD_CRYPTO_VON_NEUMANN_CORR__OFFSET 0x00000018u
N#define CYFLD_CRYPTO_VON_NEUMANN_CORR__SIZE 0x00000001u
N#define CYFLD_CRYPTO_STOP_ON_AP_DETECT__OFFSET 0x0000001cu
N#define CYFLD_CRYPTO_STOP_ON_AP_DETECT__SIZE 0x00000001u
N#define CYFLD_CRYPTO_STOP_ON_RC_DETECT__OFFSET 0x0000001du
N#define CYFLD_CRYPTO_STOP_ON_RC_DETECT__SIZE 0x00000001u
N#define CYREG_CRYPTO_TR_CTL1 0x402c0284u
N#define CYFLD_CRYPTO_DATA_BIT_SIZE__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_DATA_BIT_SIZE__SIZE 0x00000006u
N#define CYREG_CRYPTO_TR_RESULT0 0x402c0288u
N#define CYFLD_CRYPTO_DATA32__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_DATA32__SIZE 0x00000020u
N#define CYREG_CRYPTO_TR_RESULT1 0x402c028cu
N#define CYREG_CRYPTO_TR_CMD 0x402c0290u
N#define CYFLD_CRYPTO_START_RO11__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_START_RO11__SIZE 0x00000001u
N#define CYFLD_CRYPTO_START_RO15__OFFSET 0x00000001u
N#define CYFLD_CRYPTO_START_RO15__SIZE 0x00000001u
N#define CYFLD_CRYPTO_START_GARO15__OFFSET 0x00000002u
N#define CYFLD_CRYPTO_START_GARO15__SIZE 0x00000001u
N#define CYFLD_CRYPTO_START_GARO31__OFFSET 0x00000003u
N#define CYFLD_CRYPTO_START_GARO31__SIZE 0x00000001u
N#define CYFLD_CRYPTO_START_FIRO15__OFFSET 0x00000004u
N#define CYFLD_CRYPTO_START_FIRO15__SIZE 0x00000001u
N#define CYFLD_CRYPTO_START_FIRO31__OFFSET 0x00000005u
N#define CYFLD_CRYPTO_START_FIRO31__SIZE 0x00000001u
N#define CYREG_CRYPTO_TR_GARO_CTL 0x402c02a0u
N#define CYFLD_CRYPTO_POLYNOMIAL31__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_POLYNOMIAL31__SIZE 0x0000001fu
N#define CYREG_CRYPTO_TR_FIRO_CTL 0x402c02a4u
N#define CYREG_CRYPTO_TR_MON_CTL 0x402c02c0u
N#define CYFLD_CRYPTO_BITSTREAM_SEL__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_BITSTREAM_SEL__SIZE 0x00000002u
N#define CYREG_CRYPTO_TR_MON_CMD 0x402c02c8u
N#define CYFLD_CRYPTO_START_AP__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_START_AP__SIZE 0x00000001u
N#define CYFLD_CRYPTO_START_RC__OFFSET 0x00000001u
N#define CYFLD_CRYPTO_START_RC__SIZE 0x00000001u
N#define CYREG_CRYPTO_TR_MON_RC_CTL 0x402c02d0u
N#define CYFLD_CRYPTO_CUTOFF_COUNT8__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_CUTOFF_COUNT8__SIZE 0x00000008u
N#define CYREG_CRYPTO_TR_MON_RC_STATUS0 0x402c02d8u
N#define CYFLD_CRYPTO_BIT__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_BIT__SIZE 0x00000001u
N#define CYREG_CRYPTO_TR_MON_RC_STATUS1 0x402c02dcu
N#define CYFLD_CRYPTO_REP_COUNT__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_REP_COUNT__SIZE 0x00000008u
N#define CYREG_CRYPTO_TR_MON_AP_CTL 0x402c02e0u
N#define CYFLD_CRYPTO_CUTOFF_COUNT16__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_CUTOFF_COUNT16__SIZE 0x00000010u
N#define CYFLD_CRYPTO_WINDOW_SIZE__OFFSET 0x00000010u
N#define CYFLD_CRYPTO_WINDOW_SIZE__SIZE 0x00000010u
N#define CYREG_CRYPTO_TR_MON_AP_STATUS0 0x402c02e8u
N#define CYREG_CRYPTO_TR_MON_AP_STATUS1 0x402c02ecu
N#define CYFLD_CRYPTO_OCC_COUNT__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_OCC_COUNT__SIZE 0x00000010u
N#define CYFLD_CRYPTO_WINDOW_INDEX__OFFSET 0x00000010u
N#define CYFLD_CRYPTO_WINDOW_INDEX__SIZE 0x00000010u
N#define CYREG_CRYPTO_INTR 0x402c07c0u
N#define CYFLD_CRYPTO_DONE__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_DONE__SIZE 0x00000001u
N#define CYFLD_CRYPTO_ACCESS_ERROR__OFFSET 0x00000001u
N#define CYFLD_CRYPTO_ACCESS_ERROR__SIZE 0x00000001u
N#define CYFLD_CRYPTO_TR_INITIALIZED__OFFSET 0x00000006u
N#define CYFLD_CRYPTO_TR_INITIALIZED__SIZE 0x00000001u
N#define CYFLD_CRYPTO_TR_DATA_AVAILABLE__OFFSET 0x00000007u
N#define CYFLD_CRYPTO_TR_DATA_AVAILABLE__SIZE 0x00000001u
N#define CYFLD_CRYPTO_TR_AP_DETECT__OFFSET 0x00000008u
N#define CYFLD_CRYPTO_TR_AP_DETECT__SIZE 0x00000001u
N#define CYFLD_CRYPTO_TR_RC_DETECT__OFFSET 0x00000009u
N#define CYFLD_CRYPTO_TR_RC_DETECT__SIZE 0x00000001u
N#define CYREG_CRYPTO_INTR_SET 0x402c07c4u
N#define CYREG_CRYPTO_INTR_MASK 0x402c07c8u
N#define CYREG_CRYPTO_INTR_MASKED 0x402c07ccu
N#define CYREG_CRYPTO_MEM_BUFF0 0x402c0800u
N#define CYREG_CRYPTO_MEM_BUFF1 0x402c0804u
N#define CYREG_CRYPTO_MEM_BUFF2 0x402c0808u
N#define CYREG_CRYPTO_MEM_BUFF3 0x402c080cu
N#define CYREG_CRYPTO_MEM_BUFF4 0x402c0810u
N#define CYREG_CRYPTO_MEM_BUFF5 0x402c0814u
N#define CYREG_CRYPTO_MEM_BUFF6 0x402c0818u
N#define CYREG_CRYPTO_MEM_BUFF7 0x402c081cu
N#define CYREG_CRYPTO_MEM_BUFF8 0x402c0820u
N#define CYREG_CRYPTO_MEM_BUFF9 0x402c0824u
N#define CYREG_CRYPTO_MEM_BUFF10 0x402c0828u
N#define CYREG_CRYPTO_MEM_BUFF11 0x402c082cu
N#define CYREG_CRYPTO_MEM_BUFF12 0x402c0830u
N#define CYREG_CRYPTO_MEM_BUFF13 0x402c0834u
N#define CYREG_CRYPTO_MEM_BUFF14 0x402c0838u
N#define CYREG_CRYPTO_MEM_BUFF15 0x402c083cu
N#define CYREG_CRYPTO_MEM_BUFF16 0x402c0840u
N#define CYREG_CRYPTO_MEM_BUFF17 0x402c0844u
N#define CYREG_CRYPTO_MEM_BUFF18 0x402c0848u
N#define CYREG_CRYPTO_MEM_BUFF19 0x402c084cu
N#define CYREG_CRYPTO_MEM_BUFF20 0x402c0850u
N#define CYREG_CRYPTO_MEM_BUFF21 0x402c0854u
N#define CYREG_CRYPTO_MEM_BUFF22 0x402c0858u
N#define CYREG_CRYPTO_MEM_BUFF23 0x402c085cu
N#define CYREG_CRYPTO_MEM_BUFF24 0x402c0860u
N#define CYREG_CRYPTO_MEM_BUFF25 0x402c0864u
N#define CYREG_CRYPTO_MEM_BUFF26 0x402c0868u
N#define CYREG_CRYPTO_MEM_BUFF27 0x402c086cu
N#define CYREG_CRYPTO_MEM_BUFF28 0x402c0870u
N#define CYREG_CRYPTO_MEM_BUFF29 0x402c0874u
N#define CYREG_CRYPTO_MEM_BUFF30 0x402c0878u
N#define CYREG_CRYPTO_MEM_BUFF31 0x402c087cu
N#define CYREG_CRYPTO_MEM_BUFF32 0x402c0880u
N#define CYREG_CRYPTO_MEM_BUFF33 0x402c0884u
N#define CYREG_CRYPTO_MEM_BUFF34 0x402c0888u
N#define CYREG_CRYPTO_MEM_BUFF35 0x402c088cu
N#define CYREG_CRYPTO_MEM_BUFF36 0x402c0890u
N#define CYREG_CRYPTO_MEM_BUFF37 0x402c0894u
N#define CYREG_CRYPTO_MEM_BUFF38 0x402c0898u
N#define CYREG_CRYPTO_MEM_BUFF39 0x402c089cu
N#define CYREG_CRYPTO_MEM_BUFF40 0x402c08a0u
N#define CYREG_CRYPTO_MEM_BUFF41 0x402c08a4u
N#define CYREG_CRYPTO_MEM_BUFF42 0x402c08a8u
N#define CYREG_CRYPTO_MEM_BUFF43 0x402c08acu
N#define CYREG_CRYPTO_MEM_BUFF44 0x402c08b0u
N#define CYREG_CRYPTO_MEM_BUFF45 0x402c08b4u
N#define CYREG_CRYPTO_MEM_BUFF46 0x402c08b8u
N#define CYREG_CRYPTO_MEM_BUFF47 0x402c08bcu
N#define CYREG_CRYPTO_MEM_BUFF48 0x402c08c0u
N#define CYREG_CRYPTO_MEM_BUFF49 0x402c08c4u
N#define CYREG_CRYPTO_MEM_BUFF50 0x402c08c8u
N#define CYREG_CRYPTO_MEM_BUFF51 0x402c08ccu
N#define CYREG_CRYPTO_MEM_BUFF52 0x402c08d0u
N#define CYREG_CRYPTO_MEM_BUFF53 0x402c08d4u
N#define CYREG_CRYPTO_MEM_BUFF54 0x402c08d8u
N#define CYREG_CRYPTO_MEM_BUFF55 0x402c08dcu
N#define CYREG_CRYPTO_MEM_BUFF56 0x402c08e0u
N#define CYREG_CRYPTO_MEM_BUFF57 0x402c08e4u
N#define CYREG_CRYPTO_MEM_BUFF58 0x402c08e8u
N#define CYREG_CRYPTO_MEM_BUFF59 0x402c08ecu
N#define CYREG_CRYPTO_MEM_BUFF60 0x402c08f0u
N#define CYREG_CRYPTO_MEM_BUFF61 0x402c08f4u
N#define CYREG_CRYPTO_MEM_BUFF62 0x402c08f8u
N#define CYREG_CRYPTO_MEM_BUFF63 0x402c08fcu
N#define CYREG_CRYPTO_PRIV_BUF 0x402cff00u
N#define CYFLD_CRYPTO_BUF_PRIV_LIMIT__OFFSET 0x00000000u
N#define CYFLD_CRYPTO_BUF_PRIV_LIMIT__SIZE 0x00000003u
N#define CYDEV_CAN_BASE 0x402e0000u
N#define CYDEV_CAN_SIZE 0x00010000u
N#define CYREG_CAN_INT_STATUS 0x402e0000u
N#define CYFLD_CAN_ARB_LOSS__OFFSET 0x00000002u
N#define CYFLD_CAN_ARB_LOSS__SIZE 0x00000001u
N#define CYFLD_CAN_OVR_LOAD__OFFSET 0x00000003u
N#define CYFLD_CAN_OVR_LOAD__SIZE 0x00000001u
N#define CYFLD_CAN_BIT_ERR__OFFSET 0x00000004u
N#define CYFLD_CAN_BIT_ERR__SIZE 0x00000001u
N#define CYFLD_CAN_STUFF_ERR__OFFSET 0x00000005u
N#define CYFLD_CAN_STUFF_ERR__SIZE 0x00000001u
N#define CYFLD_CAN_ACK_ERR__OFFSET 0x00000006u
N#define CYFLD_CAN_ACK_ERR__SIZE 0x00000001u
N#define CYFLD_CAN_FORM_ERR__OFFSET 0x00000007u
N#define CYFLD_CAN_FORM_ERR__SIZE 0x00000001u
N#define CYFLD_CAN_CRC_ERR__OFFSET 0x00000008u
N#define CYFLD_CAN_CRC_ERR__SIZE 0x00000001u
N#define CYFLD_CAN_BUS_OFF__OFFSET 0x00000009u
N#define CYFLD_CAN_BUS_OFF__SIZE 0x00000001u
N#define CYFLD_CAN_RX_MSG_LOSS__OFFSET 0x0000000au
N#define CYFLD_CAN_RX_MSG_LOSS__SIZE 0x00000001u
N#define CYFLD_CAN_TX_MSG__OFFSET 0x0000000bu
N#define CYFLD_CAN_TX_MSG__SIZE 0x00000001u
N#define CYFLD_CAN_RX_MSG__OFFSET 0x0000000cu
N#define CYFLD_CAN_RX_MSG__SIZE 0x00000001u
N#define CYFLD_CAN_RTR_MSG__OFFSET 0x0000000du
N#define CYFLD_CAN_RTR_MSG__SIZE 0x00000001u
N#define CYFLD_CAN_STUCK_AT_0__OFFSET 0x0000000eu
N#define CYFLD_CAN_STUCK_AT_0__SIZE 0x00000001u
N#define CYFLD_CAN_SST_FAILURE__OFFSET 0x0000000fu
N#define CYFLD_CAN_SST_FAILURE__SIZE 0x00000001u
N#define CYREG_CAN_INT_EBL 0x402e0004u
N#define CYFLD_CAN_GLOBAL_INT_ENBL__OFFSET 0x00000000u
N#define CYFLD_CAN_GLOBAL_INT_ENBL__SIZE 0x00000001u
N#define CYFLD_CAN_ARB_LOSS_ENBL__OFFSET 0x00000002u
N#define CYFLD_CAN_ARB_LOSS_ENBL__SIZE 0x00000001u
N#define CYFLD_CAN_OVR_LOAD_ENBL__OFFSET 0x00000003u
N#define CYFLD_CAN_OVR_LOAD_ENBL__SIZE 0x00000001u
N#define CYFLD_CAN_BIT_ERR_ENBL__OFFSET 0x00000004u
N#define CYFLD_CAN_BIT_ERR_ENBL__SIZE 0x00000001u
N#define CYFLD_CAN_STUFF_ERR_ENBL__OFFSET 0x00000005u
N#define CYFLD_CAN_STUFF_ERR_ENBL__SIZE 0x00000001u
N#define CYFLD_CAN_ACK_ERR_ENBL__OFFSET 0x00000006u
N#define CYFLD_CAN_ACK_ERR_ENBL__SIZE 0x00000001u
N#define CYFLD_CAN_FORM_ERR_ENBL__OFFSET 0x00000007u
N#define CYFLD_CAN_FORM_ERR_ENBL__SIZE 0x00000001u
N#define CYFLD_CAN_CRC_ERR_ENBL__OFFSET 0x00000008u
N#define CYFLD_CAN_CRC_ERR_ENBL__SIZE 0x00000001u
N#define CYFLD_CAN_BUS_OFF_ENBL__OFFSET 0x00000009u
N#define CYFLD_CAN_BUS_OFF_ENBL__SIZE 0x00000001u
N#define CYFLD_CAN_TX_MSG_ENBL__OFFSET 0x0000000bu
N#define CYFLD_CAN_TX_MSG_ENBL__SIZE 0x00000001u
N#define CYFLD_CAN_RX_MSG_ENBl__OFFSET 0x0000000cu
N#define CYFLD_CAN_RX_MSG_ENBl__SIZE 0x00000001u
N#define CYFLD_CAN_RTR_MSG_ENBL__OFFSET 0x0000000du
N#define CYFLD_CAN_RTR_MSG_ENBL__SIZE 0x00000001u
N#define CYFLD_CAN_STUCK_AT_0_ENBL__OFFSET 0x0000000eu
N#define CYFLD_CAN_STUCK_AT_0_ENBL__SIZE 0x00000001u
N#define CYFLD_CAN_SST_FAILURE_ENBL__OFFSET 0x0000000fu
N#define CYFLD_CAN_SST_FAILURE_ENBL__SIZE 0x00000001u
N#define CYREG_CAN_BUFFER_STATUS 0x402e0008u
N#define CYFLD_CAN_RX0_MSG_AV__OFFSET 0x00000000u
N#define CYFLD_CAN_RX0_MSG_AV__SIZE 0x00000001u
N#define CYFLD_CAN_RX1_MSG_AV__OFFSET 0x00000001u
N#define CYFLD_CAN_RX1_MSG_AV__SIZE 0x00000001u
N#define CYFLD_CAN_RX2_MSG_AV__OFFSET 0x00000002u
N#define CYFLD_CAN_RX2_MSG_AV__SIZE 0x00000001u
N#define CYFLD_CAN_RX3_MSG_AV__OFFSET 0x00000003u
N#define CYFLD_CAN_RX3_MSG_AV__SIZE 0x00000001u
N#define CYFLD_CAN_RX4_MSG_AV__OFFSET 0x00000004u
N#define CYFLD_CAN_RX4_MSG_AV__SIZE 0x00000001u
N#define CYFLD_CAN_RX5_MSG_AV__OFFSET 0x00000005u
N#define CYFLD_CAN_RX5_MSG_AV__SIZE 0x00000001u
N#define CYFLD_CAN_RX6_MSG_AV__OFFSET 0x00000006u
N#define CYFLD_CAN_RX6_MSG_AV__SIZE 0x00000001u
N#define CYFLD_CAN_RX7_MSG_AV__OFFSET 0x00000007u
N#define CYFLD_CAN_RX7_MSG_AV__SIZE 0x00000001u
N#define CYFLD_CAN_RX8_MSG_AV__OFFSET 0x00000008u
N#define CYFLD_CAN_RX8_MSG_AV__SIZE 0x00000001u
N#define CYFLD_CAN_RX9_MSG_AV__OFFSET 0x00000009u
N#define CYFLD_CAN_RX9_MSG_AV__SIZE 0x00000001u
N#define CYFLD_CAN_RX10_MSG_AV__OFFSET 0x0000000au
N#define CYFLD_CAN_RX10_MSG_AV__SIZE 0x00000001u
N#define CYFLD_CAN_RX11_MSG_AV__OFFSET 0x0000000bu
N#define CYFLD_CAN_RX11_MSG_AV__SIZE 0x00000001u
N#define CYFLD_CAN_RX12_MSG_AV__OFFSET 0x0000000cu
N#define CYFLD_CAN_RX12_MSG_AV__SIZE 0x00000001u
N#define CYFLD_CAN_RX13_MSG_AV__OFFSET 0x0000000du
N#define CYFLD_CAN_RX13_MSG_AV__SIZE 0x00000001u
N#define CYFLD_CAN_RX14_MSG_AV__OFFSET 0x0000000eu
N#define CYFLD_CAN_RX14_MSG_AV__SIZE 0x00000001u
N#define CYFLD_CAN_RX15_MSG_AV__OFFSET 0x0000000fu
N#define CYFLD_CAN_RX15_MSG_AV__SIZE 0x00000001u
N#define CYFLD_CAN_TX0_REQ_PEND__OFFSET 0x00000010u
N#define CYFLD_CAN_TX0_REQ_PEND__SIZE 0x00000001u
N#define CYFLD_CAN_TX1_REQ_PEND__OFFSET 0x00000011u
N#define CYFLD_CAN_TX1_REQ_PEND__SIZE 0x00000001u
N#define CYFLD_CAN_TX2_REQ_PEND__OFFSET 0x00000012u
N#define CYFLD_CAN_TX2_REQ_PEND__SIZE 0x00000001u
N#define CYFLD_CAN_TX3_REQ_PEND__OFFSET 0x00000013u
N#define CYFLD_CAN_TX3_REQ_PEND__SIZE 0x00000001u
N#define CYFLD_CAN_TX4_REQ_PEND__OFFSET 0x00000014u
N#define CYFLD_CAN_TX4_REQ_PEND__SIZE 0x00000001u
N#define CYFLD_CAN_TX5_REQ_PEND__OFFSET 0x00000015u
N#define CYFLD_CAN_TX5_REQ_PEND__SIZE 0x00000001u
N#define CYFLD_CAN_TX6_REQ_PEND__OFFSET 0x00000016u
N#define CYFLD_CAN_TX6_REQ_PEND__SIZE 0x00000001u
N#define CYFLD_CAN_TX7_REQ_PEND__OFFSET 0x00000017u
N#define CYFLD_CAN_TX7_REQ_PEND__SIZE 0x00000001u
N#define CYREG_CAN_ERROR_STATUS 0x402e000cu
N#define CYFLD_CAN_TX_ERR_CNT__OFFSET 0x00000000u
N#define CYFLD_CAN_TX_ERR_CNT__SIZE 0x00000008u
N#define CYFLD_CAN_RX_ERR_CNT__OFFSET 0x00000008u
N#define CYFLD_CAN_RX_ERR_CNT__SIZE 0x00000008u
N#define CYFLD_CAN_ERROR_STATE__OFFSET 0x00000010u
N#define CYFLD_CAN_ERROR_STATE__SIZE 0x00000002u
N#define CYFLD_CAN_TXGTE96__OFFSET 0x00000012u
N#define CYFLD_CAN_TXGTE96__SIZE 0x00000001u
N#define CYFLD_CAN_RXGTE96__OFFSET 0x00000013u
N#define CYFLD_CAN_RXGTE96__SIZE 0x00000001u
N#define CYREG_CAN_COMMAND 0x402e0010u
N#define CYFLD_CAN_RUN__OFFSET 0x00000000u
N#define CYFLD_CAN_RUN__SIZE 0x00000001u
N#define CYFLD_CAN_LISTEN__OFFSET 0x00000001u
N#define CYFLD_CAN_LISTEN__SIZE 0x00000001u
N#define CYFLD_CAN_LOOPBACK_TEST__OFFSET 0x00000002u
N#define CYFLD_CAN_LOOPBACK_TEST__SIZE 0x00000001u
N#define CYFLD_CAN_SRAM_TEST__OFFSET 0x00000003u
N#define CYFLD_CAN_SRAM_TEST__SIZE 0x00000001u
N#define CYFLD_CAN_IP_REV_NUMBER__OFFSET 0x00000010u
N#define CYFLD_CAN_IP_REV_NUMBER__SIZE 0x00000008u
N#define CYFLD_CAN_IP_MINOR_VERSION__OFFSET 0x00000018u
N#define CYFLD_CAN_IP_MINOR_VERSION__SIZE 0x00000004u
N#define CYFLD_CAN_IP_MAJOR_VERSION__OFFSET 0x0000001cu
N#define CYFLD_CAN_IP_MAJOR_VERSION__SIZE 0x00000004u
N#define CYREG_CAN_CONFIG 0x402e0014u
N#define CYFLD_CAN_EDGE_MODE__OFFSET 0x00000000u
N#define CYFLD_CAN_EDGE_MODE__SIZE 0x00000001u
N#define CYFLD_CAN_SAMPLING_MODE__OFFSET 0x00000001u
N#define CYFLD_CAN_SAMPLING_MODE__SIZE 0x00000001u
N#define CYFLD_CAN_CFG_SJW__OFFSET 0x00000002u
N#define CYFLD_CAN_CFG_SJW__SIZE 0x00000002u
N#define CYFLD_CAN_AUTO_RESTART__OFFSET 0x00000004u
N#define CYFLD_CAN_AUTO_RESTART__SIZE 0x00000001u
N#define CYFLD_CAN_CFG_TSEG2__OFFSET 0x00000005u
N#define CYFLD_CAN_CFG_TSEG2__SIZE 0x00000003u
N#define CYFLD_CAN_CFG_TSEG1__OFFSET 0x00000008u
N#define CYFLD_CAN_CFG_TSEG1__SIZE 0x00000004u
N#define CYFLD_CAN_CFG_ARBITER__OFFSET 0x0000000cu
N#define CYFLD_CAN_CFG_ARBITER__SIZE 0x00000001u
N#define CYFLD_CAN_SWAP_ENDIAN__OFFSET 0x0000000du
N#define CYFLD_CAN_SWAP_ENDIAN__SIZE 0x00000001u
N#define CYFLD_CAN_ECR_MODE__OFFSET 0x0000000eu
N#define CYFLD_CAN_ECR_MODE__SIZE 0x00000001u
N#define CYFLD_CAN_CFG_BITRATE__OFFSET 0x00000010u
N#define CYFLD_CAN_CFG_BITRATE__SIZE 0x0000000fu
N#define CYREG_CAN_ECR 0x402e0018u
N#define CYFLD_CAN_ECR_STATUS__OFFSET 0x00000000u
N#define CYFLD_CAN_ECR_STATUS__SIZE 0x00000001u
N#define CYFLD_CAN_ERROR_TYPE__OFFSET 0x00000001u
N#define CYFLD_CAN_ERROR_TYPE__SIZE 0x00000003u
N#define CYFLD_CAN_RX_MODE__OFFSET 0x00000004u
N#define CYFLD_CAN_RX_MODE__SIZE 0x00000001u
N#define CYFLD_CAN_TX_MODE__OFFSET 0x00000005u
N#define CYFLD_CAN_TX_MODE__SIZE 0x00000001u
N#define CYFLD_CAN_BIT__OFFSET 0x00000006u
N#define CYFLD_CAN_BIT__SIZE 0x00000006u
N#define CYFLD_CAN_Field__OFFSET 0x0000000cu
N#define CYFLD_CAN_Field__SIZE 0x00000005u
N#define CYDEV_CAN_CAN_TX0_BASE 0x402e0020u
N#define CYDEV_CAN_CAN_TX0_SIZE 0x00000010u
N#define CYREG_CAN_CAN_TX0_CONTROL 0x402e0020u
N#define CYFLD_CAN_CAN_TX_TX_REQ__OFFSET 0x00000000u
N#define CYFLD_CAN_CAN_TX_TX_REQ__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_TX_TX_ABORT__OFFSET 0x00000001u
N#define CYFLD_CAN_CAN_TX_TX_ABORT__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_TX_TX_INT_EBL__OFFSET 0x00000002u
N#define CYFLD_CAN_CAN_TX_TX_INT_EBL__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_TX_WPNL__OFFSET 0x00000003u
N#define CYFLD_CAN_CAN_TX_WPNL__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_TX_DLC__OFFSET 0x00000010u
N#define CYFLD_CAN_CAN_TX_DLC__SIZE 0x00000004u
N#define CYFLD_CAN_CAN_TX_IDE__OFFSET 0x00000014u
N#define CYFLD_CAN_CAN_TX_IDE__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_TX_RTR__OFFSET 0x00000015u
N#define CYFLD_CAN_CAN_TX_RTR__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_TX_WPNH__OFFSET 0x00000017u
N#define CYFLD_CAN_CAN_TX_WPNH__SIZE 0x00000001u
N#define CYREG_CAN_CAN_TX0_ID 0x402e0024u
N#define CYFLD_CAN_CAN_TX_ID__OFFSET 0x00000003u
N#define CYFLD_CAN_CAN_TX_ID__SIZE 0x0000001du
N#define CYREG_CAN_CAN_TX0_DATA_HIGH 0x402e0028u
N#define CYFLD_CAN_CAN_TX_DATA__OFFSET 0x00000000u
N#define CYFLD_CAN_CAN_TX_DATA__SIZE 0x00000020u
N#define CYREG_CAN_CAN_TX0_DATA_LOW 0x402e002cu
N#define CYDEV_CAN_CAN_TX1_BASE 0x402e0030u
N#define CYDEV_CAN_CAN_TX1_SIZE 0x00000010u
N#define CYREG_CAN_CAN_TX1_CONTROL 0x402e0030u
N#define CYREG_CAN_CAN_TX1_ID 0x402e0034u
N#define CYREG_CAN_CAN_TX1_DATA_HIGH 0x402e0038u
N#define CYREG_CAN_CAN_TX1_DATA_LOW 0x402e003cu
N#define CYDEV_CAN_CAN_TX2_BASE 0x402e0040u
N#define CYDEV_CAN_CAN_TX2_SIZE 0x00000010u
N#define CYREG_CAN_CAN_TX2_CONTROL 0x402e0040u
N#define CYREG_CAN_CAN_TX2_ID 0x402e0044u
N#define CYREG_CAN_CAN_TX2_DATA_HIGH 0x402e0048u
N#define CYREG_CAN_CAN_TX2_DATA_LOW 0x402e004cu
N#define CYDEV_CAN_CAN_TX3_BASE 0x402e0050u
N#define CYDEV_CAN_CAN_TX3_SIZE 0x00000010u
N#define CYREG_CAN_CAN_TX3_CONTROL 0x402e0050u
N#define CYREG_CAN_CAN_TX3_ID 0x402e0054u
N#define CYREG_CAN_CAN_TX3_DATA_HIGH 0x402e0058u
N#define CYREG_CAN_CAN_TX3_DATA_LOW 0x402e005cu
N#define CYDEV_CAN_CAN_TX4_BASE 0x402e0060u
N#define CYDEV_CAN_CAN_TX4_SIZE 0x00000010u
N#define CYREG_CAN_CAN_TX4_CONTROL 0x402e0060u
N#define CYREG_CAN_CAN_TX4_ID 0x402e0064u
N#define CYREG_CAN_CAN_TX4_DATA_HIGH 0x402e0068u
N#define CYREG_CAN_CAN_TX4_DATA_LOW 0x402e006cu
N#define CYDEV_CAN_CAN_TX5_BASE 0x402e0070u
N#define CYDEV_CAN_CAN_TX5_SIZE 0x00000010u
N#define CYREG_CAN_CAN_TX5_CONTROL 0x402e0070u
N#define CYREG_CAN_CAN_TX5_ID 0x402e0074u
N#define CYREG_CAN_CAN_TX5_DATA_HIGH 0x402e0078u
N#define CYREG_CAN_CAN_TX5_DATA_LOW 0x402e007cu
N#define CYDEV_CAN_CAN_TX6_BASE 0x402e0080u
N#define CYDEV_CAN_CAN_TX6_SIZE 0x00000010u
N#define CYREG_CAN_CAN_TX6_CONTROL 0x402e0080u
N#define CYREG_CAN_CAN_TX6_ID 0x402e0084u
N#define CYREG_CAN_CAN_TX6_DATA_HIGH 0x402e0088u
N#define CYREG_CAN_CAN_TX6_DATA_LOW 0x402e008cu
N#define CYDEV_CAN_CAN_TX7_BASE 0x402e0090u
N#define CYDEV_CAN_CAN_TX7_SIZE 0x00000010u
N#define CYREG_CAN_CAN_TX7_CONTROL 0x402e0090u
N#define CYREG_CAN_CAN_TX7_ID 0x402e0094u
N#define CYREG_CAN_CAN_TX7_DATA_HIGH 0x402e0098u
N#define CYREG_CAN_CAN_TX7_DATA_LOW 0x402e009cu
N#define CYDEV_CAN_CAN_RX0_BASE 0x402e00a0u
N#define CYDEV_CAN_CAN_RX0_SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX0_CONTROL 0x402e00a0u
N#define CYFLD_CAN_CAN_RX_MSG_AV_RTRSENT__OFFSET 0x00000000u
N#define CYFLD_CAN_CAN_RX_MSG_AV_RTRSENT__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_RX_RTR_REPLY_PEND__OFFSET 0x00000001u
N#define CYFLD_CAN_CAN_RX_RTR_REPLY_PEND__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_RX_RTR_ABORT__OFFSET 0x00000002u
N#define CYFLD_CAN_CAN_RX_RTR_ABORT__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_RX_BUFFER_EN__OFFSET 0x00000003u
N#define CYFLD_CAN_CAN_RX_BUFFER_EN__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_RX_RTR_REPLY__OFFSET 0x00000004u
N#define CYFLD_CAN_CAN_RX_RTR_REPLY__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_RX_RX_INT_EBL__OFFSET 0x00000005u
N#define CYFLD_CAN_CAN_RX_RX_INT_EBL__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_RX_LINK_FLAG__OFFSET 0x00000006u
N#define CYFLD_CAN_CAN_RX_LINK_FLAG__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_RX_WPNL__OFFSET 0x00000007u
N#define CYFLD_CAN_CAN_RX_WPNL__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_RX_DLC__OFFSET 0x00000010u
N#define CYFLD_CAN_CAN_RX_DLC__SIZE 0x00000004u
N#define CYFLD_CAN_CAN_RX_IDE_FMT__OFFSET 0x00000014u
N#define CYFLD_CAN_CAN_RX_IDE_FMT__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_RX_RTR_MSG__OFFSET 0x00000015u
N#define CYFLD_CAN_CAN_RX_RTR_MSG__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_RX_WPNH__OFFSET 0x00000017u
N#define CYFLD_CAN_CAN_RX_WPNH__SIZE 0x00000001u
N#define CYREG_CAN_CAN_RX0_ID 0x402e00a4u
N#define CYFLD_CAN_CAN_RX_ID__OFFSET 0x00000003u
N#define CYFLD_CAN_CAN_RX_ID__SIZE 0x0000001du
N#define CYREG_CAN_CAN_RX0_DATA_HIGH 0x402e00a8u
N#define CYFLD_CAN_CAN_RX_DATA__OFFSET 0x00000000u
N#define CYFLD_CAN_CAN_RX_DATA__SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX0_DATA_LOW 0x402e00acu
N#define CYREG_CAN_CAN_RX0_AMR 0x402e00b0u
N#define CYFLD_CAN_CAN_RX_RTR__OFFSET 0x00000001u
N#define CYFLD_CAN_CAN_RX_RTR__SIZE 0x00000001u
N#define CYFLD_CAN_CAN_RX_IDE__OFFSET 0x00000002u
N#define CYFLD_CAN_CAN_RX_IDE__SIZE 0x00000001u
N#define CYREG_CAN_CAN_RX0_ACR 0x402e00b4u
N#define CYREG_CAN_CAN_RX0_AMR_DATA 0x402e00b8u
N#define CYFLD_CAN_CAN_RX_DATAL__OFFSET 0x00000000u
N#define CYFLD_CAN_CAN_RX_DATAL__SIZE 0x00000010u
N#define CYREG_CAN_CAN_RX0_ACR_DATA 0x402e00bcu
N#define CYDEV_CAN_CAN_RX1_BASE 0x402e00c0u
N#define CYDEV_CAN_CAN_RX1_SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX1_CONTROL 0x402e00c0u
N#define CYREG_CAN_CAN_RX1_ID 0x402e00c4u
N#define CYREG_CAN_CAN_RX1_DATA_HIGH 0x402e00c8u
N#define CYREG_CAN_CAN_RX1_DATA_LOW 0x402e00ccu
N#define CYREG_CAN_CAN_RX1_AMR 0x402e00d0u
N#define CYREG_CAN_CAN_RX1_ACR 0x402e00d4u
N#define CYREG_CAN_CAN_RX1_AMR_DATA 0x402e00d8u
N#define CYREG_CAN_CAN_RX1_ACR_DATA 0x402e00dcu
N#define CYDEV_CAN_CAN_RX2_BASE 0x402e00e0u
N#define CYDEV_CAN_CAN_RX2_SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX2_CONTROL 0x402e00e0u
N#define CYREG_CAN_CAN_RX2_ID 0x402e00e4u
N#define CYREG_CAN_CAN_RX2_DATA_HIGH 0x402e00e8u
N#define CYREG_CAN_CAN_RX2_DATA_LOW 0x402e00ecu
N#define CYREG_CAN_CAN_RX2_AMR 0x402e00f0u
N#define CYREG_CAN_CAN_RX2_ACR 0x402e00f4u
N#define CYREG_CAN_CAN_RX2_AMR_DATA 0x402e00f8u
N#define CYREG_CAN_CAN_RX2_ACR_DATA 0x402e00fcu
N#define CYDEV_CAN_CAN_RX3_BASE 0x402e0100u
N#define CYDEV_CAN_CAN_RX3_SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX3_CONTROL 0x402e0100u
N#define CYREG_CAN_CAN_RX3_ID 0x402e0104u
N#define CYREG_CAN_CAN_RX3_DATA_HIGH 0x402e0108u
N#define CYREG_CAN_CAN_RX3_DATA_LOW 0x402e010cu
N#define CYREG_CAN_CAN_RX3_AMR 0x402e0110u
N#define CYREG_CAN_CAN_RX3_ACR 0x402e0114u
N#define CYREG_CAN_CAN_RX3_AMR_DATA 0x402e0118u
N#define CYREG_CAN_CAN_RX3_ACR_DATA 0x402e011cu
N#define CYDEV_CAN_CAN_RX4_BASE 0x402e0120u
N#define CYDEV_CAN_CAN_RX4_SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX4_CONTROL 0x402e0120u
N#define CYREG_CAN_CAN_RX4_ID 0x402e0124u
N#define CYREG_CAN_CAN_RX4_DATA_HIGH 0x402e0128u
N#define CYREG_CAN_CAN_RX4_DATA_LOW 0x402e012cu
N#define CYREG_CAN_CAN_RX4_AMR 0x402e0130u
N#define CYREG_CAN_CAN_RX4_ACR 0x402e0134u
N#define CYREG_CAN_CAN_RX4_AMR_DATA 0x402e0138u
N#define CYREG_CAN_CAN_RX4_ACR_DATA 0x402e013cu
N#define CYDEV_CAN_CAN_RX5_BASE 0x402e0140u
N#define CYDEV_CAN_CAN_RX5_SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX5_CONTROL 0x402e0140u
N#define CYREG_CAN_CAN_RX5_ID 0x402e0144u
N#define CYREG_CAN_CAN_RX5_DATA_HIGH 0x402e0148u
N#define CYREG_CAN_CAN_RX5_DATA_LOW 0x402e014cu
N#define CYREG_CAN_CAN_RX5_AMR 0x402e0150u
N#define CYREG_CAN_CAN_RX5_ACR 0x402e0154u
N#define CYREG_CAN_CAN_RX5_AMR_DATA 0x402e0158u
N#define CYREG_CAN_CAN_RX5_ACR_DATA 0x402e015cu
N#define CYDEV_CAN_CAN_RX6_BASE 0x402e0160u
N#define CYDEV_CAN_CAN_RX6_SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX6_CONTROL 0x402e0160u
N#define CYREG_CAN_CAN_RX6_ID 0x402e0164u
N#define CYREG_CAN_CAN_RX6_DATA_HIGH 0x402e0168u
N#define CYREG_CAN_CAN_RX6_DATA_LOW 0x402e016cu
N#define CYREG_CAN_CAN_RX6_AMR 0x402e0170u
N#define CYREG_CAN_CAN_RX6_ACR 0x402e0174u
N#define CYREG_CAN_CAN_RX6_AMR_DATA 0x402e0178u
N#define CYREG_CAN_CAN_RX6_ACR_DATA 0x402e017cu
N#define CYDEV_CAN_CAN_RX7_BASE 0x402e0180u
N#define CYDEV_CAN_CAN_RX7_SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX7_CONTROL 0x402e0180u
N#define CYREG_CAN_CAN_RX7_ID 0x402e0184u
N#define CYREG_CAN_CAN_RX7_DATA_HIGH 0x402e0188u
N#define CYREG_CAN_CAN_RX7_DATA_LOW 0x402e018cu
N#define CYREG_CAN_CAN_RX7_AMR 0x402e0190u
N#define CYREG_CAN_CAN_RX7_ACR 0x402e0194u
N#define CYREG_CAN_CAN_RX7_AMR_DATA 0x402e0198u
N#define CYREG_CAN_CAN_RX7_ACR_DATA 0x402e019cu
N#define CYDEV_CAN_CAN_RX8_BASE 0x402e01a0u
N#define CYDEV_CAN_CAN_RX8_SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX8_CONTROL 0x402e01a0u
N#define CYREG_CAN_CAN_RX8_ID 0x402e01a4u
N#define CYREG_CAN_CAN_RX8_DATA_HIGH 0x402e01a8u
N#define CYREG_CAN_CAN_RX8_DATA_LOW 0x402e01acu
N#define CYREG_CAN_CAN_RX8_AMR 0x402e01b0u
N#define CYREG_CAN_CAN_RX8_ACR 0x402e01b4u
N#define CYREG_CAN_CAN_RX8_AMR_DATA 0x402e01b8u
N#define CYREG_CAN_CAN_RX8_ACR_DATA 0x402e01bcu
N#define CYDEV_CAN_CAN_RX9_BASE 0x402e01c0u
N#define CYDEV_CAN_CAN_RX9_SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX9_CONTROL 0x402e01c0u
N#define CYREG_CAN_CAN_RX9_ID 0x402e01c4u
N#define CYREG_CAN_CAN_RX9_DATA_HIGH 0x402e01c8u
N#define CYREG_CAN_CAN_RX9_DATA_LOW 0x402e01ccu
N#define CYREG_CAN_CAN_RX9_AMR 0x402e01d0u
N#define CYREG_CAN_CAN_RX9_ACR 0x402e01d4u
N#define CYREG_CAN_CAN_RX9_AMR_DATA 0x402e01d8u
N#define CYREG_CAN_CAN_RX9_ACR_DATA 0x402e01dcu
N#define CYDEV_CAN_CAN_RX10_BASE 0x402e01e0u
N#define CYDEV_CAN_CAN_RX10_SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX10_CONTROL 0x402e01e0u
N#define CYREG_CAN_CAN_RX10_ID 0x402e01e4u
N#define CYREG_CAN_CAN_RX10_DATA_HIGH 0x402e01e8u
N#define CYREG_CAN_CAN_RX10_DATA_LOW 0x402e01ecu
N#define CYREG_CAN_CAN_RX10_AMR 0x402e01f0u
N#define CYREG_CAN_CAN_RX10_ACR 0x402e01f4u
N#define CYREG_CAN_CAN_RX10_AMR_DATA 0x402e01f8u
N#define CYREG_CAN_CAN_RX10_ACR_DATA 0x402e01fcu
N#define CYDEV_CAN_CAN_RX11_BASE 0x402e0200u
N#define CYDEV_CAN_CAN_RX11_SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX11_CONTROL 0x402e0200u
N#define CYREG_CAN_CAN_RX11_ID 0x402e0204u
N#define CYREG_CAN_CAN_RX11_DATA_HIGH 0x402e0208u
N#define CYREG_CAN_CAN_RX11_DATA_LOW 0x402e020cu
N#define CYREG_CAN_CAN_RX11_AMR 0x402e0210u
N#define CYREG_CAN_CAN_RX11_ACR 0x402e0214u
N#define CYREG_CAN_CAN_RX11_AMR_DATA 0x402e0218u
N#define CYREG_CAN_CAN_RX11_ACR_DATA 0x402e021cu
N#define CYDEV_CAN_CAN_RX12_BASE 0x402e0220u
N#define CYDEV_CAN_CAN_RX12_SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX12_CONTROL 0x402e0220u
N#define CYREG_CAN_CAN_RX12_ID 0x402e0224u
N#define CYREG_CAN_CAN_RX12_DATA_HIGH 0x402e0228u
N#define CYREG_CAN_CAN_RX12_DATA_LOW 0x402e022cu
N#define CYREG_CAN_CAN_RX12_AMR 0x402e0230u
N#define CYREG_CAN_CAN_RX12_ACR 0x402e0234u
N#define CYREG_CAN_CAN_RX12_AMR_DATA 0x402e0238u
N#define CYREG_CAN_CAN_RX12_ACR_DATA 0x402e023cu
N#define CYDEV_CAN_CAN_RX13_BASE 0x402e0240u
N#define CYDEV_CAN_CAN_RX13_SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX13_CONTROL 0x402e0240u
N#define CYREG_CAN_CAN_RX13_ID 0x402e0244u
N#define CYREG_CAN_CAN_RX13_DATA_HIGH 0x402e0248u
N#define CYREG_CAN_CAN_RX13_DATA_LOW 0x402e024cu
N#define CYREG_CAN_CAN_RX13_AMR 0x402e0250u
N#define CYREG_CAN_CAN_RX13_ACR 0x402e0254u
N#define CYREG_CAN_CAN_RX13_AMR_DATA 0x402e0258u
N#define CYREG_CAN_CAN_RX13_ACR_DATA 0x402e025cu
N#define CYDEV_CAN_CAN_RX14_BASE 0x402e0260u
N#define CYDEV_CAN_CAN_RX14_SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX14_CONTROL 0x402e0260u
N#define CYREG_CAN_CAN_RX14_ID 0x402e0264u
N#define CYREG_CAN_CAN_RX14_DATA_HIGH 0x402e0268u
N#define CYREG_CAN_CAN_RX14_DATA_LOW 0x402e026cu
N#define CYREG_CAN_CAN_RX14_AMR 0x402e0270u
N#define CYREG_CAN_CAN_RX14_ACR 0x402e0274u
N#define CYREG_CAN_CAN_RX14_AMR_DATA 0x402e0278u
N#define CYREG_CAN_CAN_RX14_ACR_DATA 0x402e027cu
N#define CYDEV_CAN_CAN_RX15_BASE 0x402e0280u
N#define CYDEV_CAN_CAN_RX15_SIZE 0x00000020u
N#define CYREG_CAN_CAN_RX15_CONTROL 0x402e0280u
N#define CYREG_CAN_CAN_RX15_ID 0x402e0284u
N#define CYREG_CAN_CAN_RX15_DATA_HIGH 0x402e0288u
N#define CYREG_CAN_CAN_RX15_DATA_LOW 0x402e028cu
N#define CYREG_CAN_CAN_RX15_AMR 0x402e0290u
N#define CYREG_CAN_CAN_RX15_ACR 0x402e0294u
N#define CYREG_CAN_CAN_RX15_AMR_DATA 0x402e0298u
N#define CYREG_CAN_CAN_RX15_ACR_DATA 0x402e029cu
N#define CYREG_CAN_CNTL 0x402e0400u
N#define CYFLD_CAN_TT_ENABLE__OFFSET 0x00000000u
N#define CYFLD_CAN_TT_ENABLE__SIZE 0x00000001u
N#define CYFLD_CAN_IP_ENABLE__OFFSET 0x0000001fu
N#define CYFLD_CAN_IP_ENABLE__SIZE 0x00000001u
N#define CYREG_CAN_TTCAN_COUNTER 0x402e0404u
N#define CYFLD_CAN_LOCAL_TIME__OFFSET 0x00000010u
N#define CYFLD_CAN_LOCAL_TIME__SIZE 0x00000010u
N#define CYREG_CAN_TTCAN_COMPARE 0x402e0408u
N#define CYFLD_CAN_TIME_MARK__OFFSET 0x00000010u
N#define CYFLD_CAN_TIME_MARK__SIZE 0x00000010u
N#define CYREG_CAN_TTCAN_CAPTURE 0x402e040cu
N#define CYFLD_CAN_SYNC_MARK__OFFSET 0x00000010u
N#define CYFLD_CAN_SYNC_MARK__SIZE 0x00000010u
N#define CYREG_CAN_TTCAN_TIMING 0x402e0410u
N#define CYREG_CAN_INTR_CAN 0x402e0414u
N#define CYFLD_CAN_INT_STATUS__OFFSET 0x00000000u
N#define CYFLD_CAN_INT_STATUS__SIZE 0x00000001u
N#define CYFLD_CAN_TT_COMPARE__OFFSET 0x00000001u
N#define CYFLD_CAN_TT_COMPARE__SIZE 0x00000001u
N#define CYFLD_CAN_TT_CAPTURE__OFFSET 0x00000002u
N#define CYFLD_CAN_TT_CAPTURE__SIZE 0x00000001u
N#define CYREG_CAN_INTR_CAN_SET 0x402e0418u
N#define CYREG_CAN_INTR_CAN_MASK 0x402e041cu
N#define CYREG_CAN_INTR_CAN_MASKED 0x402e0420u
N#define CYDEV_EXCO_BASE 0x402f0000u
N#define CYDEV_EXCO_SIZE 0x00010000u
N#define CYREG_EXCO_CLK_SELECT 0x402f0000u
N#define CYFLD_EXCO_CLK_SELECT__OFFSET 0x00000000u
N#define CYFLD_EXCO_CLK_SELECT__SIZE 0x00000001u
N#define CYFLD_EXCO_REF_SEL__OFFSET 0x00000001u
N#define CYFLD_EXCO_REF_SEL__SIZE 0x00000001u
N#define CYREG_EXCO_ECO_CONFIG 0x402f0008u
N#define CYFLD_EXCO_CLK_EN__OFFSET 0x00000000u
N#define CYFLD_EXCO_CLK_EN__SIZE 0x00000001u
N#define CYFLD_EXCO_AGC_EN__OFFSET 0x00000001u
N#define CYFLD_EXCO_AGC_EN__SIZE 0x00000001u
N#define CYFLD_EXCO_ENABLE__OFFSET 0x0000001fu
N#define CYFLD_EXCO_ENABLE__SIZE 0x00000001u
N#define CYREG_EXCO_ECO_STATUS 0x402f000cu
N#define CYFLD_EXCO_WATCHDOG_ERROR__OFFSET 0x00000000u
N#define CYFLD_EXCO_WATCHDOG_ERROR__SIZE 0x00000001u
N#define CYREG_EXCO_PLL_CONFIG 0x402f0014u
N#define CYFLD_EXCO_FEEDBACK_DIV__OFFSET 0x00000000u
N#define CYFLD_EXCO_FEEDBACK_DIV__SIZE 0x00000008u
N#define CYFLD_EXCO_REFERENCE_DIV__OFFSET 0x00000008u
N#define CYFLD_EXCO_REFERENCE_DIV__SIZE 0x00000006u
N#define CYFLD_EXCO_OUTPUT_DIV__OFFSET 0x0000000eu
N#define CYFLD_EXCO_OUTPUT_DIV__SIZE 0x00000002u
N#define CYVAL_EXCO_OUTPUT_DIV_PASS 0x00000000u
N#define CYVAL_EXCO_OUTPUT_DIV_DIV2 0x00000001u
N#define CYVAL_EXCO_OUTPUT_DIV_DIV4 0x00000002u
N#define CYVAL_EXCO_OUTPUT_DIV_DIV8 0x00000003u
N#define CYFLD_EXCO_ICP_SEL__OFFSET 0x00000010u
N#define CYFLD_EXCO_ICP_SEL__SIZE 0x00000003u
N#define CYFLD_EXCO_BYPASS_SEL__OFFSET 0x00000014u
N#define CYFLD_EXCO_BYPASS_SEL__SIZE 0x00000002u
N#define CYVAL_EXCO_BYPASS_SEL_AUTO 0x00000000u
N#define CYVAL_EXCO_BYPASS_SEL_AUTO1 0x00000001u
N#define CYVAL_EXCO_BYPASS_SEL_PLL_REF 0x00000002u
N#define CYVAL_EXCO_BYPASS_SEL_PLL_OUT 0x00000003u
N#define CYFLD_EXCO_ISOLATE_N__OFFSET 0x0000001eu
N#define CYFLD_EXCO_ISOLATE_N__SIZE 0x00000001u
N#define CYREG_EXCO_PLL_STATUS 0x402f0018u
N#define CYFLD_EXCO_LOCKED__OFFSET 0x00000000u
N#define CYFLD_EXCO_LOCKED__SIZE 0x00000001u
N#define CYREG_EXCO_PLL_TEST 0x402f001cu
N#define CYFLD_EXCO_TEST_MODE__OFFSET 0x00000000u
N#define CYFLD_EXCO_TEST_MODE__SIZE 0x00000003u
N#define CYVAL_EXCO_TEST_MODE_NORMAL 0x00000000u
N#define CYVAL_EXCO_TEST_MODE_TEST_VC_LKG 0x00000001u
N#define CYVAL_EXCO_TEST_MODE_TEST_CP_DN 0x00000002u
N#define CYVAL_EXCO_TEST_MODE_TEST_CP_UP 0x00000003u
N#define CYVAL_EXCO_TEST_MODE_USER_EXT_FL 0x00000004u
N#define CYVAL_EXCO_TEST_MODE_TEST_CTR_PQ 0x00000005u
N#define CYVAL_EXCO_TEST_MODE_TEST_LD_DLY 0x00000006u
N#define CYVAL_EXCO_TEST_MODE_TEST_CTR_ALT 0x00000007u
N#define CYFLD_EXCO_FAST_LOCK_EN__OFFSET 0x00000003u
N#define CYFLD_EXCO_FAST_LOCK_EN__SIZE 0x00000001u
N#define CYFLD_EXCO_UNLOCK_OCCURRED__OFFSET 0x00000004u
N#define CYFLD_EXCO_UNLOCK_OCCURRED__SIZE 0x00000001u
N#define CYREG_EXCO_EXCO_PGM_CLK 0x402f0020u
N#define CYFLD_EXCO_CLK_ECO__OFFSET 0x00000001u
N#define CYFLD_EXCO_CLK_ECO__SIZE 0x00000001u
N#define CYFLD_EXCO_CLK_PLL0_IN__OFFSET 0x00000002u
N#define CYFLD_EXCO_CLK_PLL0_IN__SIZE 0x00000001u
N#define CYFLD_EXCO_CLK_PLL0_OUT__OFFSET 0x00000003u
N#define CYFLD_EXCO_CLK_PLL0_OUT__SIZE 0x00000001u
N#define CYFLD_EXCO_EN_CLK_PLL0__OFFSET 0x00000004u
N#define CYFLD_EXCO_EN_CLK_PLL0__SIZE 0x00000001u
N#define CYREG_EXCO_ECO_TRIM0 0x402fff00u
N#define CYFLD_EXCO_WDTRIM__OFFSET 0x00000000u
N#define CYFLD_EXCO_WDTRIM__SIZE 0x00000002u
N#define CYFLD_EXCO_ATRIM__OFFSET 0x00000002u
N#define CYFLD_EXCO_ATRIM__SIZE 0x00000003u
N#define CYREG_EXCO_ECO_TRIM1 0x402fff04u
N#define CYFLD_EXCO_FTRIM__OFFSET 0x00000000u
N#define CYFLD_EXCO_FTRIM__SIZE 0x00000002u
N#define CYFLD_EXCO_RTRIM__OFFSET 0x00000002u
N#define CYFLD_EXCO_RTRIM__SIZE 0x00000002u
N#define CYFLD_EXCO_GTRIM__OFFSET 0x00000004u
N#define CYFLD_EXCO_GTRIM__SIZE 0x00000002u
N#define CYREG_EXCO_ECO_TRIM2 0x402fff08u
N#define CYFLD_EXCO_ITRIM__OFFSET 0x00000000u
N#define CYFLD_EXCO_ITRIM__SIZE 0x00000006u
N#define CYREG_EXCO_PLL_TRIM 0x402fff0cu
N#define CYFLD_EXCO_VCO_GAIN__OFFSET 0x00000000u
N#define CYFLD_EXCO_VCO_GAIN__SIZE 0x00000002u
N#define CYFLD_EXCO_LOCK_WINDOW__OFFSET 0x00000002u
N#define CYFLD_EXCO_LOCK_WINDOW__SIZE 0x00000002u
N#define CYVAL_EXCO_LOCK_WINDOW_DELAY_25NS 0x00000000u
N#define CYVAL_EXCO_LOCK_WINDOW_DELAY_50NS 0x00000001u
N#define CYVAL_EXCO_LOCK_WINDOW_DELAY_75NS 0x00000002u
N#define CYVAL_EXCO_LOCK_WINDOW_DELAY_100NS 0x00000003u
N#define CYFLD_EXCO_LOCK_DELAY__OFFSET 0x00000004u
N#define CYFLD_EXCO_LOCK_DELAY__SIZE 0x00000002u
N#define CYVAL_EXCO_LOCK_DELAY_PFD_CLK_16 0x00000000u
N#define CYVAL_EXCO_LOCK_DELAY_PFD_CLK_32 0x00000001u
N#define CYVAL_EXCO_LOCK_DELAY_PFD_CLK_48 0x00000002u
N#define CYVAL_EXCO_LOCK_DELAY_PFD_CLK_64 0x00000003u
N#define CYDEV_CTBM0_BASE 0x40300000u
N#define CYDEV_CTBM0_SIZE 0x00010000u
N#define CYREG_CTBM0_CTB_CTRL 0x40300000u
N#define CYFLD_CTBM_DEEPSLEEP_ON__OFFSET 0x0000001eu
N#define CYFLD_CTBM_DEEPSLEEP_ON__SIZE 0x00000001u
N#define CYFLD_CTBM_ENABLED__OFFSET 0x0000001fu
N#define CYFLD_CTBM_ENABLED__SIZE 0x00000001u
N#define CYREG_CTBM0_OA_RES0_CTRL 0x40300004u
N#define CYFLD_CTBM_OA0_PWR_MODE__OFFSET 0x00000000u
N#define CYFLD_CTBM_OA0_PWR_MODE__SIZE 0x00000002u
N#define CYVAL_CTBM_OA0_PWR_MODE_OFF 0x00000000u
N#define CYVAL_CTBM_OA0_PWR_MODE_LOW 0x00000001u
N#define CYVAL_CTBM_OA0_PWR_MODE_MEDIUM 0x00000002u
N#define CYVAL_CTBM_OA0_PWR_MODE_HIGH 0x00000003u
N#define CYFLD_CTBM_OA0_DRIVE_STR_SEL__OFFSET 0x00000002u
N#define CYFLD_CTBM_OA0_DRIVE_STR_SEL__SIZE 0x00000001u
N#define CYFLD_CTBM_OA0_COMP_EN__OFFSET 0x00000004u
N#define CYFLD_CTBM_OA0_COMP_EN__SIZE 0x00000001u
N#define CYFLD_CTBM_OA0_HYST_EN__OFFSET 0x00000005u
N#define CYFLD_CTBM_OA0_HYST_EN__SIZE 0x00000001u
N#define CYFLD_CTBM_OA0_BYPASS_DSI_SYNC__OFFSET 0x00000006u
N#define CYFLD_CTBM_OA0_BYPASS_DSI_SYNC__SIZE 0x00000001u
N#define CYFLD_CTBM_OA0_DSI_LEVEL__OFFSET 0x00000007u
N#define CYFLD_CTBM_OA0_DSI_LEVEL__SIZE 0x00000001u
N#define CYFLD_CTBM_OA0_COMPINT__OFFSET 0x00000008u
N#define CYFLD_CTBM_OA0_COMPINT__SIZE 0x00000002u
N#define CYVAL_CTBM_OA0_COMPINT_DISABLE 0x00000000u
N#define CYVAL_CTBM_OA0_COMPINT_RISING 0x00000001u
N#define CYVAL_CTBM_OA0_COMPINT_FALLING 0x00000002u
N#define CYVAL_CTBM_OA0_COMPINT_BOTH 0x00000003u
N#define CYFLD_CTBM_OA0_PUMP_EN__OFFSET 0x0000000bu
N#define CYFLD_CTBM_OA0_PUMP_EN__SIZE 0x00000001u
N#define CYREG_CTBM0_OA_RES1_CTRL 0x40300008u
N#define CYFLD_CTBM_OA1_PWR_MODE__OFFSET 0x00000000u
N#define CYFLD_CTBM_OA1_PWR_MODE__SIZE 0x00000002u
N#define CYFLD_CTBM_OA1_DRIVE_STR_SEL__OFFSET 0x00000002u
N#define CYFLD_CTBM_OA1_DRIVE_STR_SEL__SIZE 0x00000001u
N#define CYFLD_CTBM_OA1_COMP_EN__OFFSET 0x00000004u
N#define CYFLD_CTBM_OA1_COMP_EN__SIZE 0x00000001u
N#define CYFLD_CTBM_OA1_HYST_EN__OFFSET 0x00000005u
N#define CYFLD_CTBM_OA1_HYST_EN__SIZE 0x00000001u
N#define CYFLD_CTBM_OA1_BYPASS_DSI_SYNC__OFFSET 0x00000006u
N#define CYFLD_CTBM_OA1_BYPASS_DSI_SYNC__SIZE 0x00000001u
N#define CYFLD_CTBM_OA1_DSI_LEVEL__OFFSET 0x00000007u
N#define CYFLD_CTBM_OA1_DSI_LEVEL__SIZE 0x00000001u
N#define CYFLD_CTBM_OA1_COMPINT__OFFSET 0x00000008u
N#define CYFLD_CTBM_OA1_COMPINT__SIZE 0x00000002u
N#define CYVAL_CTBM_OA1_COMPINT_DISABLE 0x00000000u
N#define CYVAL_CTBM_OA1_COMPINT_RISING 0x00000001u
N#define CYVAL_CTBM_OA1_COMPINT_FALLING 0x00000002u
N#define CYVAL_CTBM_OA1_COMPINT_BOTH 0x00000003u
N#define CYFLD_CTBM_OA1_PUMP_EN__OFFSET 0x0000000bu
N#define CYFLD_CTBM_OA1_PUMP_EN__SIZE 0x00000001u
N#define CYREG_CTBM0_COMP_STAT 0x4030000cu
N#define CYFLD_CTBM_OA0_COMP__OFFSET 0x00000000u
N#define CYFLD_CTBM_OA0_COMP__SIZE 0x00000001u
N#define CYFLD_CTBM_OA1_COMP__OFFSET 0x00000010u
N#define CYFLD_CTBM_OA1_COMP__SIZE 0x00000001u
N#define CYREG_CTBM0_INTR 0x40300020u
N#define CYFLD_CTBM_COMP0__OFFSET 0x00000000u
N#define CYFLD_CTBM_COMP0__SIZE 0x00000001u
N#define CYFLD_CTBM_COMP1__OFFSET 0x00000001u
N#define CYFLD_CTBM_COMP1__SIZE 0x00000001u
N#define CYREG_CTBM0_INTR_SET 0x40300024u
N#define CYFLD_CTBM_COMP0_SET__OFFSET 0x00000000u
N#define CYFLD_CTBM_COMP0_SET__SIZE 0x00000001u
N#define CYFLD_CTBM_COMP1_SET__OFFSET 0x00000001u
N#define CYFLD_CTBM_COMP1_SET__SIZE 0x00000001u
N#define CYREG_CTBM0_INTR_MASK 0x40300028u
N#define CYFLD_CTBM_COMP0_MASK__OFFSET 0x00000000u
N#define CYFLD_CTBM_COMP0_MASK__SIZE 0x00000001u
N#define CYFLD_CTBM_COMP1_MASK__OFFSET 0x00000001u
N#define CYFLD_CTBM_COMP1_MASK__SIZE 0x00000001u
N#define CYREG_CTBM0_INTR_MASKED 0x4030002cu
N#define CYFLD_CTBM_COMP0_MASKED__OFFSET 0x00000000u
N#define CYFLD_CTBM_COMP0_MASKED__SIZE 0x00000001u
N#define CYFLD_CTBM_COMP1_MASKED__OFFSET 0x00000001u
N#define CYFLD_CTBM_COMP1_MASKED__SIZE 0x00000001u
N#define CYREG_CTBM0_DFT_CTRL 0x40300030u
N#define CYFLD_CTBM_DFT_MODE__OFFSET 0x00000000u
N#define CYFLD_CTBM_DFT_MODE__SIZE 0x00000003u
N#define CYFLD_CTBM_DFT_EN__OFFSET 0x0000001fu
N#define CYFLD_CTBM_DFT_EN__SIZE 0x00000001u
N#define CYREG_CTBM0_OA0_SW 0x40300080u
N#define CYFLD_CTBM_OA0P_A00__OFFSET 0x00000000u
N#define CYFLD_CTBM_OA0P_A00__SIZE 0x00000001u
N#define CYFLD_CTBM_OA0P_A20__OFFSET 0x00000002u
N#define CYFLD_CTBM_OA0P_A20__SIZE 0x00000001u
N#define CYFLD_CTBM_OA0P_A30__OFFSET 0x00000003u
N#define CYFLD_CTBM_OA0P_A30__SIZE 0x00000001u
N#define CYFLD_CTBM_OA0M_A11__OFFSET 0x00000008u
N#define CYFLD_CTBM_OA0M_A11__SIZE 0x00000001u
N#define CYFLD_CTBM_OA0M_A81__OFFSET 0x0000000eu
N#define CYFLD_CTBM_OA0M_A81__SIZE 0x00000001u
N#define CYFLD_CTBM_OA0O_D51__OFFSET 0x00000012u
N#define CYFLD_CTBM_OA0O_D51__SIZE 0x00000001u
N#define CYFLD_CTBM_OA0O_D81__OFFSET 0x00000015u
N#define CYFLD_CTBM_OA0O_D81__SIZE 0x00000001u
N#define CYREG_CTBM0_OA0_SW_CLEAR 0x40300084u
N#define CYREG_CTBM0_OA1_SW 0x40300088u
N#define CYFLD_CTBM_OA1P_A03__OFFSET 0x00000000u
N#define CYFLD_CTBM_OA1P_A03__SIZE 0x00000001u
N#define CYFLD_CTBM_OA1P_A13__OFFSET 0x00000001u
N#define CYFLD_CTBM_OA1P_A13__SIZE 0x00000001u
N#define CYFLD_CTBM_OA1P_A43__OFFSET 0x00000004u
N#define CYFLD_CTBM_OA1P_A43__SIZE 0x00000001u
N#define CYFLD_CTBM_OA1M_A22__OFFSET 0x00000008u
N#define CYFLD_CTBM_OA1M_A22__SIZE 0x00000001u
N#define CYFLD_CTBM_OA1M_A82__OFFSET 0x0000000eu
N#define CYFLD_CTBM_OA1M_A82__SIZE 0x00000001u
N#define CYFLD_CTBM_OA1O_D52__OFFSET 0x00000012u
N#define CYFLD_CTBM_OA1O_D52__SIZE 0x00000001u
N#define CYFLD_CTBM_OA1O_D62__OFFSET 0x00000013u
N#define CYFLD_CTBM_OA1O_D62__SIZE 0x00000001u
N#define CYFLD_CTBM_OA1O_D82__OFFSET 0x00000015u
N#define CYFLD_CTBM_OA1O_D82__SIZE 0x00000001u
N#define CYREG_CTBM0_OA1_SW_CLEAR 0x4030008cu
N#define CYREG_CTBM0_CTB_SW_HW_CTRL 0x403000c0u
N#define CYFLD_CTBM_P2_HW_CTRL__OFFSET 0x00000002u
N#define CYFLD_CTBM_P2_HW_CTRL__SIZE 0x00000001u
N#define CYFLD_CTBM_P3_HW_CTRL__OFFSET 0x00000003u
N#define CYFLD_CTBM_P3_HW_CTRL__SIZE 0x00000001u
N#define CYREG_CTBM0_CTB_SW_STATUS 0x403000c4u
N#define CYFLD_CTBM_OA0O_D51_STAT__OFFSET 0x0000001cu
N#define CYFLD_CTBM_OA0O_D51_STAT__SIZE 0x00000001u
N#define CYFLD_CTBM_OA1O_D52_STAT__OFFSET 0x0000001du
N#define CYFLD_CTBM_OA1O_D52_STAT__SIZE 0x00000001u
N#define CYFLD_CTBM_OA1O_D62_STAT__OFFSET 0x0000001eu
N#define CYFLD_CTBM_OA1O_D62_STAT__SIZE 0x00000001u
N#define CYREG_CTBM0_OA0_OFFSET_TRIM 0x40300f00u
N#define CYFLD_CTBM_OA0_OFFSET_TRIM__OFFSET 0x00000000u
N#define CYFLD_CTBM_OA0_OFFSET_TRIM__SIZE 0x00000006u
N#define CYREG_CTBM0_OA0_SLOPE_OFFSET_TRIM 0x40300f04u
N#define CYFLD_CTBM_OA0_SLOPE_OFFSET_TRIM__OFFSET 0x00000000u
N#define CYFLD_CTBM_OA0_SLOPE_OFFSET_TRIM__SIZE 0x00000006u
N#define CYREG_CTBM0_OA0_COMP_TRIM 0x40300f08u
N#define CYFLD_CTBM_OA0_COMP_TRIM__OFFSET 0x00000000u
N#define CYFLD_CTBM_OA0_COMP_TRIM__SIZE 0x00000002u
N#define CYREG_CTBM0_OA1_OFFSET_TRIM 0x40300f0cu
N#define CYFLD_CTBM_OA1_OFFSET_TRIM__OFFSET 0x00000000u
N#define CYFLD_CTBM_OA1_OFFSET_TRIM__SIZE 0x00000006u
N#define CYREG_CTBM0_OA1_SLOPE_OFFSET_TRIM 0x40300f10u
N#define CYFLD_CTBM_OA1_SLOPE_OFFSET_TRIM__OFFSET 0x00000000u
N#define CYFLD_CTBM_OA1_SLOPE_OFFSET_TRIM__SIZE 0x00000006u
N#define CYREG_CTBM0_OA1_COMP_TRIM 0x40300f14u
N#define CYFLD_CTBM_OA1_COMP_TRIM__OFFSET 0x00000000u
N#define CYFLD_CTBM_OA1_COMP_TRIM__SIZE 0x00000002u
N#define CYDEV_SAR_BASE 0x403a0000u
N#define CYDEV_SAR_SIZE 0x00010000u
N#define CYREG_SAR_CTRL 0x403a0000u
N#define CYFLD_SAR_VREF_SEL__OFFSET 0x00000004u
N#define CYFLD_SAR_VREF_SEL__SIZE 0x00000003u
N#define CYVAL_SAR_VREF_SEL_VREF0 0x00000000u
N#define CYVAL_SAR_VREF_SEL_VREF1 0x00000001u
N#define CYVAL_SAR_VREF_SEL_VREF2 0x00000002u
N#define CYVAL_SAR_VREF_SEL_VREF_AROUTE 0x00000003u
N#define CYVAL_SAR_VREF_SEL_VBGR 0x00000004u
N#define CYVAL_SAR_VREF_SEL_VREF_EXT 0x00000005u
N#define CYVAL_SAR_VREF_SEL_VDDA_DIV_2 0x00000006u
N#define CYVAL_SAR_VREF_SEL_VDDA 0x00000007u
N#define CYFLD_SAR_VREF_BYP_CAP_EN__OFFSET 0x00000007u
N#define CYFLD_SAR_VREF_BYP_CAP_EN__SIZE 0x00000001u
N#define CYFLD_SAR_NEG_SEL__OFFSET 0x00000009u
N#define CYFLD_SAR_NEG_SEL__SIZE 0x00000003u
N#define CYVAL_SAR_NEG_SEL_VSSA_KELVIN 0x00000000u
N#define CYVAL_SAR_NEG_SEL_ART_VSSA 0x00000001u
N#define CYVAL_SAR_NEG_SEL_P1 0x00000002u
N#define CYVAL_SAR_NEG_SEL_P3 0x00000003u
N#define CYVAL_SAR_NEG_SEL_P5 0x00000004u
N#define CYVAL_SAR_NEG_SEL_P7 0x00000005u
N#define CYVAL_SAR_NEG_SEL_ACORE 0x00000006u
N#define CYVAL_SAR_NEG_SEL_VREF 0x00000007u
N#define CYFLD_SAR_SAR_HW_CTRL_NEGVREF__OFFSET 0x0000000du
N#define CYFLD_SAR_SAR_HW_CTRL_NEGVREF__SIZE 0x00000001u
N#define CYFLD_SAR_PWR_CTRL_VREF__OFFSET 0x0000000eu
N#define CYFLD_SAR_PWR_CTRL_VREF__SIZE 0x00000002u
N#define CYVAL_SAR_PWR_CTRL_VREF_NORMAL_PWR 0x00000000u
N#define CYVAL_SAR_PWR_CTRL_VREF_HALF_PWR 0x00000001u
N#define CYVAL_SAR_PWR_CTRL_VREF_THIRD_PWR 0x00000002u
N#define CYVAL_SAR_PWR_CTRL_VREF_QUARTER_PWR 0x00000003u
N#define CYFLD_SAR_SPARE__OFFSET 0x00000010u
N#define CYFLD_SAR_SPARE__SIZE 0x00000004u
N#define CYFLD_SAR_BOOSTPUMP_EN__OFFSET 0x00000014u
N#define CYFLD_SAR_BOOSTPUMP_EN__SIZE 0x00000001u
N#define CYFLD_SAR_ICONT_LV__OFFSET 0x00000018u
N#define CYFLD_SAR_ICONT_LV__SIZE 0x00000002u
N#define CYVAL_SAR_ICONT_LV_NORMAL_PWR 0x00000000u
N#define CYVAL_SAR_ICONT_LV_HALF_PWR 0x00000001u
N#define CYVAL_SAR_ICONT_LV_MORE_PWR 0x00000002u
N#define CYVAL_SAR_ICONT_LV_QUARTER_PWR 0x00000003u
N#define CYFLD_SAR_DEEPSLEEP_ON__OFFSET 0x0000001bu
N#define CYFLD_SAR_DEEPSLEEP_ON__SIZE 0x00000001u
N#define CYFLD_SAR_DSI_SYNC_CONFIG__OFFSET 0x0000001cu
N#define CYFLD_SAR_DSI_SYNC_CONFIG__SIZE 0x00000001u
N#define CYFLD_SAR_DSI_MODE__OFFSET 0x0000001du
N#define CYFLD_SAR_DSI_MODE__SIZE 0x00000001u
N#define CYFLD_SAR_SWITCH_DISABLE__OFFSET 0x0000001eu
N#define CYFLD_SAR_SWITCH_DISABLE__SIZE 0x00000001u
N#define CYFLD_SAR_ENABLED__OFFSET 0x0000001fu
N#define CYFLD_SAR_ENABLED__SIZE 0x00000001u
N#define CYREG_SAR_SAMPLE_CTRL 0x403a0004u
N#define CYFLD_SAR_SUB_RESOLUTION__OFFSET 0x00000000u
N#define CYFLD_SAR_SUB_RESOLUTION__SIZE 0x00000001u
N#define CYVAL_SAR_SUB_RESOLUTION_8B 0x00000000u
N#define CYVAL_SAR_SUB_RESOLUTION_10B 0x00000001u
N#define CYFLD_SAR_LEFT_ALIGN__OFFSET 0x00000001u
N#define CYFLD_SAR_LEFT_ALIGN__SIZE 0x00000001u
N#define CYFLD_SAR_SINGLE_ENDED_SIGNED__OFFSET 0x00000002u
N#define CYFLD_SAR_SINGLE_ENDED_SIGNED__SIZE 0x00000001u
N#define CYVAL_SAR_SINGLE_ENDED_SIGNED_UNSIGNED 0x00000000u
N#define CYVAL_SAR_SINGLE_ENDED_SIGNED_SIGNED 0x00000001u
N#define CYFLD_SAR_DIFFERENTIAL_SIGNED__OFFSET 0x00000003u
N#define CYFLD_SAR_DIFFERENTIAL_SIGNED__SIZE 0x00000001u
N#define CYVAL_SAR_DIFFERENTIAL_SIGNED_UNSIGNED 0x00000000u
N#define CYVAL_SAR_DIFFERENTIAL_SIGNED_SIGNED 0x00000001u
N#define CYFLD_SAR_AVG_CNT__OFFSET 0x00000004u
N#define CYFLD_SAR_AVG_CNT__SIZE 0x00000003u
N#define CYFLD_SAR_AVG_SHIFT__OFFSET 0x00000007u
N#define CYFLD_SAR_AVG_SHIFT__SIZE 0x00000001u
N#define CYFLD_SAR_CONTINUOUS__OFFSET 0x00000010u
N#define CYFLD_SAR_CONTINUOUS__SIZE 0x00000001u
N#define CYFLD_SAR_DSI_TRIGGER_EN__OFFSET 0x00000011u
N#define CYFLD_SAR_DSI_TRIGGER_EN__SIZE 0x00000001u
N#define CYFLD_SAR_DSI_TRIGGER_LEVEL__OFFSET 0x00000012u
N#define CYFLD_SAR_DSI_TRIGGER_LEVEL__SIZE 0x00000001u
N#define CYFLD_SAR_DSI_SYNC_TRIGGER__OFFSET 0x00000013u
N#define CYFLD_SAR_DSI_SYNC_TRIGGER__SIZE 0x00000001u
N#define CYFLD_SAR_EOS_DSI_OUT_EN__OFFSET 0x0000001fu
N#define CYFLD_SAR_EOS_DSI_OUT_EN__SIZE 0x00000001u
N#define CYREG_SAR_SAMPLE_TIME01 0x403a0010u
N#define CYFLD_SAR_SAMPLE_TIME0__OFFSET 0x00000000u
N#define CYFLD_SAR_SAMPLE_TIME0__SIZE 0x0000000au
N#define CYFLD_SAR_SAMPLE_TIME1__OFFSET 0x00000010u
N#define CYFLD_SAR_SAMPLE_TIME1__SIZE 0x0000000au
N#define CYREG_SAR_SAMPLE_TIME23 0x403a0014u
N#define CYFLD_SAR_SAMPLE_TIME2__OFFSET 0x00000000u
N#define CYFLD_SAR_SAMPLE_TIME2__SIZE 0x0000000au
N#define CYFLD_SAR_SAMPLE_TIME3__OFFSET 0x00000010u
N#define CYFLD_SAR_SAMPLE_TIME3__SIZE 0x0000000au
N#define CYREG_SAR_RANGE_THRES 0x403a0018u
N#define CYFLD_SAR_RANGE_LOW__OFFSET 0x00000000u
N#define CYFLD_SAR_RANGE_LOW__SIZE 0x00000010u
N#define CYFLD_SAR_RANGE_HIGH__OFFSET 0x00000010u
N#define CYFLD_SAR_RANGE_HIGH__SIZE 0x00000010u
N#define CYREG_SAR_RANGE_COND 0x403a001cu
N#define CYFLD_SAR_RANGE_COND__OFFSET 0x0000001eu
N#define CYFLD_SAR_RANGE_COND__SIZE 0x00000002u
N#define CYVAL_SAR_RANGE_COND_BELOW 0x00000000u
N#define CYVAL_SAR_RANGE_COND_INSIDE 0x00000001u
N#define CYVAL_SAR_RANGE_COND_ABOVE 0x00000002u
N#define CYVAL_SAR_RANGE_COND_OUTSIDE 0x00000003u
N#define CYREG_SAR_CHAN_EN 0x403a0020u
N#define CYFLD_SAR_CHAN_EN__OFFSET 0x00000000u
N#define CYFLD_SAR_CHAN_EN__SIZE 0x00000010u
N#define CYREG_SAR_START_CTRL 0x403a0024u
N#define CYFLD_SAR_FW_TRIGGER__OFFSET 0x00000000u
N#define CYFLD_SAR_FW_TRIGGER__SIZE 0x00000001u
N#define CYREG_SAR_DFT_CTRL 0x403a0030u
N#define CYFLD_SAR_DLY_INC__OFFSET 0x00000000u
N#define CYFLD_SAR_DLY_INC__SIZE 0x00000001u
N#define CYFLD_SAR_HIZ__OFFSET 0x00000001u
N#define CYFLD_SAR_HIZ__SIZE 0x00000001u
N#define CYFLD_SAR_DFT_INC__OFFSET 0x00000010u
N#define CYFLD_SAR_DFT_INC__SIZE 0x00000004u
N#define CYFLD_SAR_DFT_OUTC__OFFSET 0x00000014u
N#define CYFLD_SAR_DFT_OUTC__SIZE 0x00000003u
N#define CYFLD_SAR_SEL_CSEL_DFT__OFFSET 0x00000018u
N#define CYFLD_SAR_SEL_CSEL_DFT__SIZE 0x00000004u
N#define CYFLD_SAR_EN_CSEL_DFT__OFFSET 0x0000001cu
N#define CYFLD_SAR_EN_CSEL_DFT__SIZE 0x00000001u
N#define CYFLD_SAR_DCEN__OFFSET 0x0000001du
N#define CYFLD_SAR_DCEN__SIZE 0x00000001u
N#define CYFLD_SAR_ADFT_OVERRIDE__OFFSET 0x0000001fu
N#define CYFLD_SAR_ADFT_OVERRIDE__SIZE 0x00000001u
N#define CYREG_SAR_CHAN_CONFIG0 0x403a0080u
N#define CYFLD_SAR_PIN_ADDR__OFFSET 0x00000000u
N#define CYFLD_SAR_PIN_ADDR__SIZE 0x00000003u
N#define CYFLD_SAR_PORT_ADDR__OFFSET 0x00000004u
N#define CYFLD_SAR_PORT_ADDR__SIZE 0x00000003u
N#define CYVAL_SAR_PORT_ADDR_SARMUX 0x00000000u
N#define CYVAL_SAR_PORT_ADDR_CTB0 0x00000001u
N#define CYVAL_SAR_PORT_ADDR_CTB1 0x00000002u
N#define CYVAL_SAR_PORT_ADDR_CTB2 0x00000003u
N#define CYVAL_SAR_PORT_ADDR_CTB3 0x00000004u
N#define CYVAL_SAR_PORT_ADDR_AROUTE_VIRT2 0x00000005u
N#define CYVAL_SAR_PORT_ADDR_AROUTE_VIRT1 0x00000006u
N#define CYVAL_SAR_PORT_ADDR_SARMUX_VIRT 0x00000007u
N#define CYFLD_SAR_DIFFERENTIAL_EN__OFFSET 0x00000008u
N#define CYFLD_SAR_DIFFERENTIAL_EN__SIZE 0x00000001u
N#define CYFLD_SAR_RESOLUTION__OFFSET 0x00000009u
N#define CYFLD_SAR_RESOLUTION__SIZE 0x00000001u
N#define CYVAL_SAR_RESOLUTION_MAXRES 0x00000000u
N#define CYVAL_SAR_RESOLUTION_SUBRES 0x00000001u
N#define CYFLD_SAR_AVG_EN__OFFSET 0x0000000au
N#define CYFLD_SAR_AVG_EN__SIZE 0x00000001u
N#define CYFLD_SAR_SAMPLE_TIME_SEL__OFFSET 0x0000000cu
N#define CYFLD_SAR_SAMPLE_TIME_SEL__SIZE 0x00000002u
N#define CYFLD_SAR_DSI_OUT_EN__OFFSET 0x0000001fu
N#define CYFLD_SAR_DSI_OUT_EN__SIZE 0x00000001u
N#define CYREG_SAR_CHAN_CONFIG1 0x403a0084u
N#define CYREG_SAR_CHAN_CONFIG2 0x403a0088u
N#define CYREG_SAR_CHAN_CONFIG3 0x403a008cu
N#define CYREG_SAR_CHAN_CONFIG4 0x403a0090u
N#define CYREG_SAR_CHAN_CONFIG5 0x403a0094u
N#define CYREG_SAR_CHAN_CONFIG6 0x403a0098u
N#define CYREG_SAR_CHAN_CONFIG7 0x403a009cu
N#define CYREG_SAR_CHAN_CONFIG8 0x403a00a0u
N#define CYREG_SAR_CHAN_CONFIG9 0x403a00a4u
N#define CYREG_SAR_CHAN_CONFIG10 0x403a00a8u
N#define CYREG_SAR_CHAN_CONFIG11 0x403a00acu
N#define CYREG_SAR_CHAN_CONFIG12 0x403a00b0u
N#define CYREG_SAR_CHAN_CONFIG13 0x403a00b4u
N#define CYREG_SAR_CHAN_CONFIG14 0x403a00b8u
N#define CYREG_SAR_CHAN_CONFIG15 0x403a00bcu
N#define CYREG_SAR_CHAN_WORK0 0x403a0100u
N#define CYFLD_SAR_WORK__OFFSET 0x00000000u
N#define CYFLD_SAR_WORK__SIZE 0x00000010u
N#define CYFLD_SAR_CHAN_WORK_VALID_MIR__OFFSET 0x0000001fu
N#define CYFLD_SAR_CHAN_WORK_VALID_MIR__SIZE 0x00000001u
N#define CYREG_SAR_CHAN_WORK1 0x403a0104u
N#define CYREG_SAR_CHAN_WORK2 0x403a0108u
N#define CYREG_SAR_CHAN_WORK3 0x403a010cu
N#define CYREG_SAR_CHAN_WORK4 0x403a0110u
N#define CYREG_SAR_CHAN_WORK5 0x403a0114u
N#define CYREG_SAR_CHAN_WORK6 0x403a0118u
N#define CYREG_SAR_CHAN_WORK7 0x403a011cu
N#define CYREG_SAR_CHAN_WORK8 0x403a0120u
N#define CYREG_SAR_CHAN_WORK9 0x403a0124u
N#define CYREG_SAR_CHAN_WORK10 0x403a0128u
N#define CYREG_SAR_CHAN_WORK11 0x403a012cu
N#define CYREG_SAR_CHAN_WORK12 0x403a0130u
N#define CYREG_SAR_CHAN_WORK13 0x403a0134u
N#define CYREG_SAR_CHAN_WORK14 0x403a0138u
N#define CYREG_SAR_CHAN_WORK15 0x403a013cu
N#define CYREG_SAR_CHAN_RESULT0 0x403a0180u
N#define CYFLD_SAR_RESULT__OFFSET 0x00000000u
N#define CYFLD_SAR_RESULT__SIZE 0x00000010u
N#define CYFLD_SAR_SATURATE_INTR_MIR__OFFSET 0x0000001du
N#define CYFLD_SAR_SATURATE_INTR_MIR__SIZE 0x00000001u
N#define CYFLD_SAR_RANGE_INTR_MIR__OFFSET 0x0000001eu
N#define CYFLD_SAR_RANGE_INTR_MIR__SIZE 0x00000001u
N#define CYFLD_SAR_CHAN_RESULT_VALID_MIR__OFFSET 0x0000001fu
N#define CYFLD_SAR_CHAN_RESULT_VALID_MIR__SIZE 0x00000001u
N#define CYREG_SAR_CHAN_RESULT1 0x403a0184u
N#define CYREG_SAR_CHAN_RESULT2 0x403a0188u
N#define CYREG_SAR_CHAN_RESULT3 0x403a018cu
N#define CYREG_SAR_CHAN_RESULT4 0x403a0190u
N#define CYREG_SAR_CHAN_RESULT5 0x403a0194u
N#define CYREG_SAR_CHAN_RESULT6 0x403a0198u
N#define CYREG_SAR_CHAN_RESULT7 0x403a019cu
N#define CYREG_SAR_CHAN_RESULT8 0x403a01a0u
N#define CYREG_SAR_CHAN_RESULT9 0x403a01a4u
N#define CYREG_SAR_CHAN_RESULT10 0x403a01a8u
N#define CYREG_SAR_CHAN_RESULT11 0x403a01acu
N#define CYREG_SAR_CHAN_RESULT12 0x403a01b0u
N#define CYREG_SAR_CHAN_RESULT13 0x403a01b4u
N#define CYREG_SAR_CHAN_RESULT14 0x403a01b8u
N#define CYREG_SAR_CHAN_RESULT15 0x403a01bcu
N#define CYREG_SAR_CHAN_WORK_VALID 0x403a0200u
N#define CYFLD_SAR_CHAN_WORK_VALID__OFFSET 0x00000000u
N#define CYFLD_SAR_CHAN_WORK_VALID__SIZE 0x00000010u
N#define CYREG_SAR_CHAN_RESULT_VALID 0x403a0204u
N#define CYFLD_SAR_CHAN_RESULT_VALID__OFFSET 0x00000000u
N#define CYFLD_SAR_CHAN_RESULT_VALID__SIZE 0x00000010u
N#define CYREG_SAR_STATUS 0x403a0208u
N#define CYFLD_SAR_CUR_CHAN__OFFSET 0x00000000u
N#define CYFLD_SAR_CUR_CHAN__SIZE 0x00000005u
N#define CYFLD_SAR_SW_VREF_NEG__OFFSET 0x0000001eu
N#define CYFLD_SAR_SW_VREF_NEG__SIZE 0x00000001u
N#define CYFLD_SAR_BUSY__OFFSET 0x0000001fu
N#define CYFLD_SAR_BUSY__SIZE 0x00000001u
N#define CYREG_SAR_AVG_STAT 0x403a020cu
N#define CYFLD_SAR_CUR_AVG_ACCU__OFFSET 0x00000000u
N#define CYFLD_SAR_CUR_AVG_ACCU__SIZE 0x00000014u
N#define CYFLD_SAR_CUR_AVG_CNT__OFFSET 0x00000018u
N#define CYFLD_SAR_CUR_AVG_CNT__SIZE 0x00000008u
N#define CYREG_SAR_INTR 0x403a0210u
N#define CYFLD_SAR_EOS_INTR__OFFSET 0x00000000u
N#define CYFLD_SAR_EOS_INTR__SIZE 0x00000001u
N#define CYFLD_SAR_OVERFLOW_INTR__OFFSET 0x00000001u
N#define CYFLD_SAR_OVERFLOW_INTR__SIZE 0x00000001u
N#define CYFLD_SAR_FW_COLLISION_INTR__OFFSET 0x00000002u
N#define CYFLD_SAR_FW_COLLISION_INTR__SIZE 0x00000001u
N#define CYFLD_SAR_DSI_COLLISION_INTR__OFFSET 0x00000003u
N#define CYFLD_SAR_DSI_COLLISION_INTR__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_EOC_INTR__OFFSET 0x00000004u
N#define CYFLD_SAR_INJ_EOC_INTR__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_SATURATE_INTR__OFFSET 0x00000005u
N#define CYFLD_SAR_INJ_SATURATE_INTR__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_RANGE_INTR__OFFSET 0x00000006u
N#define CYFLD_SAR_INJ_RANGE_INTR__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_COLLISION_INTR__OFFSET 0x00000007u
N#define CYFLD_SAR_INJ_COLLISION_INTR__SIZE 0x00000001u
N#define CYREG_SAR_INTR_SET 0x403a0214u
N#define CYFLD_SAR_EOS_SET__OFFSET 0x00000000u
N#define CYFLD_SAR_EOS_SET__SIZE 0x00000001u
N#define CYFLD_SAR_OVERFLOW_SET__OFFSET 0x00000001u
N#define CYFLD_SAR_OVERFLOW_SET__SIZE 0x00000001u
N#define CYFLD_SAR_FW_COLLISION_SET__OFFSET 0x00000002u
N#define CYFLD_SAR_FW_COLLISION_SET__SIZE 0x00000001u
N#define CYFLD_SAR_DSI_COLLISION_SET__OFFSET 0x00000003u
N#define CYFLD_SAR_DSI_COLLISION_SET__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_EOC_SET__OFFSET 0x00000004u
N#define CYFLD_SAR_INJ_EOC_SET__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_SATURATE_SET__OFFSET 0x00000005u
N#define CYFLD_SAR_INJ_SATURATE_SET__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_RANGE_SET__OFFSET 0x00000006u
N#define CYFLD_SAR_INJ_RANGE_SET__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_COLLISION_SET__OFFSET 0x00000007u
N#define CYFLD_SAR_INJ_COLLISION_SET__SIZE 0x00000001u
N#define CYREG_SAR_INTR_MASK 0x403a0218u
N#define CYFLD_SAR_EOS_MASK__OFFSET 0x00000000u
N#define CYFLD_SAR_EOS_MASK__SIZE 0x00000001u
N#define CYFLD_SAR_OVERFLOW_MASK__OFFSET 0x00000001u
N#define CYFLD_SAR_OVERFLOW_MASK__SIZE 0x00000001u
N#define CYFLD_SAR_FW_COLLISION_MASK__OFFSET 0x00000002u
N#define CYFLD_SAR_FW_COLLISION_MASK__SIZE 0x00000001u
N#define CYFLD_SAR_DSI_COLLISION_MASK__OFFSET 0x00000003u
N#define CYFLD_SAR_DSI_COLLISION_MASK__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_EOC_MASK__OFFSET 0x00000004u
N#define CYFLD_SAR_INJ_EOC_MASK__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_SATURATE_MASK__OFFSET 0x00000005u
N#define CYFLD_SAR_INJ_SATURATE_MASK__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_RANGE_MASK__OFFSET 0x00000006u
N#define CYFLD_SAR_INJ_RANGE_MASK__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_COLLISION_MASK__OFFSET 0x00000007u
N#define CYFLD_SAR_INJ_COLLISION_MASK__SIZE 0x00000001u
N#define CYREG_SAR_INTR_MASKED 0x403a021cu
N#define CYFLD_SAR_EOS_MASKED__OFFSET 0x00000000u
N#define CYFLD_SAR_EOS_MASKED__SIZE 0x00000001u
N#define CYFLD_SAR_OVERFLOW_MASKED__OFFSET 0x00000001u
N#define CYFLD_SAR_OVERFLOW_MASKED__SIZE 0x00000001u
N#define CYFLD_SAR_FW_COLLISION_MASKED__OFFSET 0x00000002u
N#define CYFLD_SAR_FW_COLLISION_MASKED__SIZE 0x00000001u
N#define CYFLD_SAR_DSI_COLLISION_MASKED__OFFSET 0x00000003u
N#define CYFLD_SAR_DSI_COLLISION_MASKED__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_EOC_MASKED__OFFSET 0x00000004u
N#define CYFLD_SAR_INJ_EOC_MASKED__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_SATURATE_MASKED__OFFSET 0x00000005u
N#define CYFLD_SAR_INJ_SATURATE_MASKED__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_RANGE_MASKED__OFFSET 0x00000006u
N#define CYFLD_SAR_INJ_RANGE_MASKED__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_COLLISION_MASKED__OFFSET 0x00000007u
N#define CYFLD_SAR_INJ_COLLISION_MASKED__SIZE 0x00000001u
N#define CYREG_SAR_SATURATE_INTR 0x403a0220u
N#define CYFLD_SAR_SATURATE_INTR__OFFSET 0x00000000u
N#define CYFLD_SAR_SATURATE_INTR__SIZE 0x00000010u
N#define CYREG_SAR_SATURATE_INTR_SET 0x403a0224u
N#define CYFLD_SAR_SATURATE_SET__OFFSET 0x00000000u
N#define CYFLD_SAR_SATURATE_SET__SIZE 0x00000010u
N#define CYREG_SAR_SATURATE_INTR_MASK 0x403a0228u
N#define CYFLD_SAR_SATURATE_MASK__OFFSET 0x00000000u
N#define CYFLD_SAR_SATURATE_MASK__SIZE 0x00000010u
N#define CYREG_SAR_SATURATE_INTR_MASKED 0x403a022cu
N#define CYFLD_SAR_SATURATE_MASKED__OFFSET 0x00000000u
N#define CYFLD_SAR_SATURATE_MASKED__SIZE 0x00000010u
N#define CYREG_SAR_RANGE_INTR 0x403a0230u
N#define CYFLD_SAR_RANGE_INTR__OFFSET 0x00000000u
N#define CYFLD_SAR_RANGE_INTR__SIZE 0x00000010u
N#define CYREG_SAR_RANGE_INTR_SET 0x403a0234u
N#define CYFLD_SAR_RANGE_SET__OFFSET 0x00000000u
N#define CYFLD_SAR_RANGE_SET__SIZE 0x00000010u
N#define CYREG_SAR_RANGE_INTR_MASK 0x403a0238u
N#define CYFLD_SAR_RANGE_MASK__OFFSET 0x00000000u
N#define CYFLD_SAR_RANGE_MASK__SIZE 0x00000010u
N#define CYREG_SAR_RANGE_INTR_MASKED 0x403a023cu
N#define CYFLD_SAR_RANGE_MASKED__OFFSET 0x00000000u
N#define CYFLD_SAR_RANGE_MASKED__SIZE 0x00000010u
N#define CYREG_SAR_INTR_CAUSE 0x403a0240u
N#define CYFLD_SAR_EOS_MASKED_MIR__OFFSET 0x00000000u
N#define CYFLD_SAR_EOS_MASKED_MIR__SIZE 0x00000001u
N#define CYFLD_SAR_OVERFLOW_MASKED_MIR__OFFSET 0x00000001u
N#define CYFLD_SAR_OVERFLOW_MASKED_MIR__SIZE 0x00000001u
N#define CYFLD_SAR_FW_COLLISION_MASKED_MIR__OFFSET 0x00000002u
N#define CYFLD_SAR_FW_COLLISION_MASKED_MIR__SIZE 0x00000001u
N#define CYFLD_SAR_DSI_COLLISION_MASKED_MIR__OFFSET 0x00000003u
N#define CYFLD_SAR_DSI_COLLISION_MASKED_MIR__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_EOC_MASKED_MIR__OFFSET 0x00000004u
N#define CYFLD_SAR_INJ_EOC_MASKED_MIR__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_SATURATE_MASKED_MIR__OFFSET 0x00000005u
N#define CYFLD_SAR_INJ_SATURATE_MASKED_MIR__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_RANGE_MASKED_MIR__OFFSET 0x00000006u
N#define CYFLD_SAR_INJ_RANGE_MASKED_MIR__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_COLLISION_MASKED_MIR__OFFSET 0x00000007u
N#define CYFLD_SAR_INJ_COLLISION_MASKED_MIR__SIZE 0x00000001u
N#define CYFLD_SAR_SATURATE_MASKED_RED__OFFSET 0x0000001eu
N#define CYFLD_SAR_SATURATE_MASKED_RED__SIZE 0x00000001u
N#define CYFLD_SAR_RANGE_MASKED_RED__OFFSET 0x0000001fu
N#define CYFLD_SAR_RANGE_MASKED_RED__SIZE 0x00000001u
N#define CYREG_SAR_INJ_CHAN_CONFIG 0x403a0280u
N#define CYFLD_SAR_INJ_PIN_ADDR__OFFSET 0x00000000u
N#define CYFLD_SAR_INJ_PIN_ADDR__SIZE 0x00000003u
N#define CYFLD_SAR_INJ_PORT_ADDR__OFFSET 0x00000004u
N#define CYFLD_SAR_INJ_PORT_ADDR__SIZE 0x00000003u
N#define CYVAL_SAR_INJ_PORT_ADDR_SARMUX 0x00000000u
N#define CYVAL_SAR_INJ_PORT_ADDR_CTB0 0x00000001u
N#define CYVAL_SAR_INJ_PORT_ADDR_CTB1 0x00000002u
N#define CYVAL_SAR_INJ_PORT_ADDR_CTB2 0x00000003u
N#define CYVAL_SAR_INJ_PORT_ADDR_CTB3 0x00000004u
N#define CYVAL_SAR_INJ_PORT_ADDR_AROUTE_VIRT 0x00000006u
N#define CYVAL_SAR_INJ_PORT_ADDR_SARMUX_VIRT 0x00000007u
N#define CYFLD_SAR_INJ_DIFFERENTIAL_EN__OFFSET 0x00000008u
N#define CYFLD_SAR_INJ_DIFFERENTIAL_EN__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_RESOLUTION__OFFSET 0x00000009u
N#define CYFLD_SAR_INJ_RESOLUTION__SIZE 0x00000001u
N#define CYVAL_SAR_INJ_RESOLUTION_12B 0x00000000u
N#define CYVAL_SAR_INJ_RESOLUTION_SUBRES 0x00000001u
N#define CYFLD_SAR_INJ_AVG_EN__OFFSET 0x0000000au
N#define CYFLD_SAR_INJ_AVG_EN__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_SAMPLE_TIME_SEL__OFFSET 0x0000000cu
N#define CYFLD_SAR_INJ_SAMPLE_TIME_SEL__SIZE 0x00000002u
N#define CYFLD_SAR_INJ_TAILGATING__OFFSET 0x0000001eu
N#define CYFLD_SAR_INJ_TAILGATING__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_START_EN__OFFSET 0x0000001fu
N#define CYFLD_SAR_INJ_START_EN__SIZE 0x00000001u
N#define CYREG_SAR_INJ_RESULT 0x403a0290u
N#define CYFLD_SAR_INJ_RESULT__OFFSET 0x00000000u
N#define CYFLD_SAR_INJ_RESULT__SIZE 0x00000010u
N#define CYFLD_SAR_INJ_COLLISION_INTR_MIR__OFFSET 0x0000001cu
N#define CYFLD_SAR_INJ_COLLISION_INTR_MIR__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_SATURATE_INTR_MIR__OFFSET 0x0000001du
N#define CYFLD_SAR_INJ_SATURATE_INTR_MIR__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_RANGE_INTR_MIR__OFFSET 0x0000001eu
N#define CYFLD_SAR_INJ_RANGE_INTR_MIR__SIZE 0x00000001u
N#define CYFLD_SAR_INJ_EOC_INTR_MIR__OFFSET 0x0000001fu
N#define CYFLD_SAR_INJ_EOC_INTR_MIR__SIZE 0x00000001u
N#define CYREG_SAR_MUX_SWITCH0 0x403a0300u
N#define CYFLD_SAR_MUX_FW_P0_VPLUS__OFFSET 0x00000000u
N#define CYFLD_SAR_MUX_FW_P0_VPLUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P1_VPLUS__OFFSET 0x00000001u
N#define CYFLD_SAR_MUX_FW_P1_VPLUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P2_VPLUS__OFFSET 0x00000002u
N#define CYFLD_SAR_MUX_FW_P2_VPLUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P3_VPLUS__OFFSET 0x00000003u
N#define CYFLD_SAR_MUX_FW_P3_VPLUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P4_VPLUS__OFFSET 0x00000004u
N#define CYFLD_SAR_MUX_FW_P4_VPLUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P5_VPLUS__OFFSET 0x00000005u
N#define CYFLD_SAR_MUX_FW_P5_VPLUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P6_VPLUS__OFFSET 0x00000006u
N#define CYFLD_SAR_MUX_FW_P6_VPLUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P7_VPLUS__OFFSET 0x00000007u
N#define CYFLD_SAR_MUX_FW_P7_VPLUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P0_VMINUS__OFFSET 0x00000008u
N#define CYFLD_SAR_MUX_FW_P0_VMINUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P1_VMINUS__OFFSET 0x00000009u
N#define CYFLD_SAR_MUX_FW_P1_VMINUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P2_VMINUS__OFFSET 0x0000000au
N#define CYFLD_SAR_MUX_FW_P2_VMINUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P3_VMINUS__OFFSET 0x0000000bu
N#define CYFLD_SAR_MUX_FW_P3_VMINUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P4_VMINUS__OFFSET 0x0000000cu
N#define CYFLD_SAR_MUX_FW_P4_VMINUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P5_VMINUS__OFFSET 0x0000000du
N#define CYFLD_SAR_MUX_FW_P5_VMINUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P6_VMINUS__OFFSET 0x0000000eu
N#define CYFLD_SAR_MUX_FW_P6_VMINUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P7_VMINUS__OFFSET 0x0000000fu
N#define CYFLD_SAR_MUX_FW_P7_VMINUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_VSSA_VMINUS__OFFSET 0x00000010u
N#define CYFLD_SAR_MUX_FW_VSSA_VMINUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_TEMP_VPLUS__OFFSET 0x00000011u
N#define CYFLD_SAR_MUX_FW_TEMP_VPLUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_AMUXBUSA_VPLUS__OFFSET 0x00000012u
N#define CYFLD_SAR_MUX_FW_AMUXBUSA_VPLUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_AMUXBUSB_VPLUS__OFFSET 0x00000013u
N#define CYFLD_SAR_MUX_FW_AMUXBUSB_VPLUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_AMUXBUSA_VMINUS__OFFSET 0x00000014u
N#define CYFLD_SAR_MUX_FW_AMUXBUSA_VMINUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_AMUXBUSB_VMINUS__OFFSET 0x00000015u
N#define CYFLD_SAR_MUX_FW_AMUXBUSB_VMINUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_SARBUS0_VPLUS__OFFSET 0x00000016u
N#define CYFLD_SAR_MUX_FW_SARBUS0_VPLUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_SARBUS1_VPLUS__OFFSET 0x00000017u
N#define CYFLD_SAR_MUX_FW_SARBUS1_VPLUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_SARBUS0_VMINUS__OFFSET 0x00000018u
N#define CYFLD_SAR_MUX_FW_SARBUS0_VMINUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_SARBUS1_VMINUS__OFFSET 0x00000019u
N#define CYFLD_SAR_MUX_FW_SARBUS1_VMINUS__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P4_COREIO0__OFFSET 0x0000001au
N#define CYFLD_SAR_MUX_FW_P4_COREIO0__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P5_COREIO1__OFFSET 0x0000001bu
N#define CYFLD_SAR_MUX_FW_P5_COREIO1__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P6_COREIO2__OFFSET 0x0000001cu
N#define CYFLD_SAR_MUX_FW_P6_COREIO2__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P7_COREIO3__OFFSET 0x0000001du
N#define CYFLD_SAR_MUX_FW_P7_COREIO3__SIZE 0x00000001u
N#define CYREG_SAR_MUX_SWITCH_CLEAR0 0x403a0304u
N#define CYREG_SAR_MUX_SWITCH1 0x403a0308u
N#define CYFLD_SAR_MUX_FW_P4_DFT_INP__OFFSET 0x00000000u
N#define CYFLD_SAR_MUX_FW_P4_DFT_INP__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_P5_DFT_INM__OFFSET 0x00000001u
N#define CYFLD_SAR_MUX_FW_P5_DFT_INM__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_ADFT0_SARBUS0__OFFSET 0x00000002u
N#define CYFLD_SAR_MUX_FW_ADFT0_SARBUS0__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_FW_ADFT1_SARBUS1__OFFSET 0x00000003u
N#define CYFLD_SAR_MUX_FW_ADFT1_SARBUS1__SIZE 0x00000001u
N#define CYREG_SAR_MUX_SWITCH_CLEAR1 0x403a030cu
N#define CYREG_SAR_MUX_SWITCH_HW_CTRL 0x403a0340u
N#define CYFLD_SAR_MUX_HW_CTRL_P0__OFFSET 0x00000000u
N#define CYFLD_SAR_MUX_HW_CTRL_P0__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_HW_CTRL_P1__OFFSET 0x00000001u
N#define CYFLD_SAR_MUX_HW_CTRL_P1__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_HW_CTRL_P2__OFFSET 0x00000002u
N#define CYFLD_SAR_MUX_HW_CTRL_P2__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_HW_CTRL_P3__OFFSET 0x00000003u
N#define CYFLD_SAR_MUX_HW_CTRL_P3__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_HW_CTRL_P4__OFFSET 0x00000004u
N#define CYFLD_SAR_MUX_HW_CTRL_P4__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_HW_CTRL_P5__OFFSET 0x00000005u
N#define CYFLD_SAR_MUX_HW_CTRL_P5__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_HW_CTRL_P6__OFFSET 0x00000006u
N#define CYFLD_SAR_MUX_HW_CTRL_P6__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_HW_CTRL_P7__OFFSET 0x00000007u
N#define CYFLD_SAR_MUX_HW_CTRL_P7__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_HW_CTRL_VSSA__OFFSET 0x00000010u
N#define CYFLD_SAR_MUX_HW_CTRL_VSSA__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_HW_CTRL_TEMP__OFFSET 0x00000011u
N#define CYFLD_SAR_MUX_HW_CTRL_TEMP__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_HW_CTRL_AMUXBUSA__OFFSET 0x00000012u
N#define CYFLD_SAR_MUX_HW_CTRL_AMUXBUSA__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_HW_CTRL_AMUXBUSB__OFFSET 0x00000013u
N#define CYFLD_SAR_MUX_HW_CTRL_AMUXBUSB__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_HW_CTRL_SARBUS0__OFFSET 0x00000016u
N#define CYFLD_SAR_MUX_HW_CTRL_SARBUS0__SIZE 0x00000001u
N#define CYFLD_SAR_MUX_HW_CTRL_SARBUS1__OFFSET 0x00000017u
N#define CYFLD_SAR_MUX_HW_CTRL_SARBUS1__SIZE 0x00000001u
N#define CYREG_SAR_MUX_SWITCH_STATUS 0x403a0348u
N#define CYREG_SAR_PUMP_CTRL 0x403a0380u
N#define CYFLD_SAR_CLOCK_SEL__OFFSET 0x00000000u
N#define CYFLD_SAR_CLOCK_SEL__SIZE 0x00000001u
N#define CYREG_SAR_ANA_TRIM 0x403a0f00u
N#define CYFLD_SAR_CAP_TRIM__OFFSET 0x00000000u
N#define CYFLD_SAR_CAP_TRIM__SIZE 0x00000003u
N#define CYFLD_SAR_TRIMUNIT__OFFSET 0x00000003u
N#define CYFLD_SAR_TRIMUNIT__SIZE 0x00000001u
N#define CYREG_SAR_WOUNDING 0x403a0f04u
N#define CYFLD_SAR_WOUND_RESOLUTION__OFFSET 0x00000000u
N#define CYFLD_SAR_WOUND_RESOLUTION__SIZE 0x00000002u
N#define CYVAL_SAR_WOUND_RESOLUTION_12BIT 0x00000000u
N#define CYVAL_SAR_WOUND_RESOLUTION_10BIT 0x00000001u
N#define CYVAL_SAR_WOUND_RESOLUTION_8BIT 0x00000002u
N#define CYVAL_SAR_WOUND_RESOLUTION_8BIT_TOO 0x00000003u
N#define CYDEV_PASS_BASE 0x403f0000u
N#define CYDEV_PASS_SIZE 0x00010000u
N#define CYREG_PASS_INTR_CAUSE 0x403f0000u
N#define CYFLD_PASS_CTB0_INT__OFFSET 0x00000000u
N#define CYFLD_PASS_CTB0_INT__SIZE 0x00000001u
N#define CYREG_PASS_DFT_CTRL 0x403f0030u
N#define CYFLD_PASS_DSAB_ADFT_RES_EN__OFFSET 0x00000000u
N#define CYFLD_PASS_DSAB_ADFT_RES_EN__SIZE 0x00000001u
N#define CYREG_PASS_PASS_CTRL 0x403f0108u
N#define CYFLD_PASS_PMPCLK_BYP__OFFSET 0x00000000u
N#define CYFLD_PASS_PMPCLK_BYP__SIZE 0x00000001u
N#define CYFLD_PASS_PMPCLK_SRC__OFFSET 0x00000001u
N#define CYFLD_PASS_PMPCLK_SRC__SIZE 0x00000001u
N#define CYFLD_PASS_RMB_BITS__OFFSET 0x00000008u
N#define CYFLD_PASS_RMB_BITS__SIZE 0x00000008u
N#define CYDEV_PASS_DSAB_BASE 0x403f0e00u
N#define CYDEV_PASS_DSAB_SIZE 0x00000100u
N#define CYREG_PASS_DSAB_DSAB_CTRL 0x403f0e00u
N#define CYFLD_PASS_DSAB_CURRENT_SEL__OFFSET 0x00000000u
N#define CYFLD_PASS_DSAB_CURRENT_SEL__SIZE 0x00000006u
N#define CYFLD_PASS_DSAB_SEL_OUT__OFFSET 0x00000008u
N#define CYFLD_PASS_DSAB_SEL_OUT__SIZE 0x00000004u
N#define CYFLD_PASS_DSAB_REF_SWAP_EN__OFFSET 0x00000010u
N#define CYFLD_PASS_DSAB_REF_SWAP_EN__SIZE 0x00000004u
N#define CYFLD_PASS_DSAB_BYPASS_MODE_EN__OFFSET 0x00000018u
N#define CYFLD_PASS_DSAB_BYPASS_MODE_EN__SIZE 0x00000001u
N#define CYFLD_PASS_DSAB_STARTUP_RM__OFFSET 0x0000001cu
N#define CYFLD_PASS_DSAB_STARTUP_RM__SIZE 0x00000001u
N#define CYFLD_PASS_DSAB_ENABLED__OFFSET 0x0000001fu
N#define CYFLD_PASS_DSAB_ENABLED__SIZE 0x00000001u
N#define CYREG_PASS_DSAB_DSAB_DFT 0x403f0e04u
N#define CYFLD_PASS_DSAB_EN_DFT__OFFSET 0x00000000u
N#define CYFLD_PASS_DSAB_EN_DFT__SIZE 0x00000004u
N#define CYREG_PASS_DSAB_TRIM 0x403f0f00u
N#define CYFLD_PASS_IBIAS_TRIM__OFFSET 0x00000000u
N#define CYFLD_PASS_IBIAS_TRIM__SIZE 0x00000004u
N#define CYFLD_PASS_DSAB_RMB_BITS__OFFSET 0x00000004u
N#define CYFLD_PASS_DSAB_RMB_BITS__SIZE 0x00000002u
N#define CYDEV_CM0P_BASE 0xe0000000u
N#define CYDEV_CM0P_SIZE 0x00100000u
N#define CYREG_CM0P_DWT_PID4 0xe0001fd0u
N#define CYFLD_CM0P_VALUE__OFFSET 0x00000000u
N#define CYFLD_CM0P_VALUE__SIZE 0x00000020u
N#define CYREG_CM0P_DWT_PID0 0xe0001fe0u
N#define CYREG_CM0P_DWT_PID1 0xe0001fe4u
N#define CYREG_CM0P_DWT_PID2 0xe0001fe8u
N#define CYREG_CM0P_DWT_PID3 0xe0001fecu
N#define CYREG_CM0P_DWT_CID0 0xe0001ff0u
N#define CYREG_CM0P_DWT_CID1 0xe0001ff4u
N#define CYREG_CM0P_DWT_CID2 0xe0001ff8u
N#define CYREG_CM0P_DWT_CID3 0xe0001ffcu
N#define CYREG_CM0P_BP_PID4 0xe0002fd0u
N#define CYREG_CM0P_BP_PID0 0xe0002fe0u
N#define CYREG_CM0P_BP_PID1 0xe0002fe4u
N#define CYREG_CM0P_BP_PID2 0xe0002fe8u
N#define CYREG_CM0P_BP_PID3 0xe0002fecu
N#define CYREG_CM0P_BP_CID0 0xe0002ff0u
N#define CYREG_CM0P_BP_CID1 0xe0002ff4u
N#define CYREG_CM0P_BP_CID2 0xe0002ff8u
N#define CYREG_CM0P_BP_CID3 0xe0002ffcu
N#define CYREG_CM0P_SYST_CSR 0xe000e010u
N#define CYFLD_CM0P_ENABLE__OFFSET 0x00000000u
N#define CYFLD_CM0P_ENABLE__SIZE 0x00000001u
N#define CYFLD_CM0P_TICKINT__OFFSET 0x00000001u
N#define CYFLD_CM0P_TICKINT__SIZE 0x00000001u
N#define CYFLD_CM0P_CLKSOURCE__OFFSET 0x00000002u
N#define CYFLD_CM0P_CLKSOURCE__SIZE 0x00000001u
N#define CYFLD_CM0P_COUNTFLAG__OFFSET 0x00000010u
N#define CYFLD_CM0P_COUNTFLAG__SIZE 0x00000001u
N#define CYREG_CM0P_SYST_RVR 0xe000e014u
N#define CYFLD_CM0P_RELOAD__OFFSET 0x00000000u
N#define CYFLD_CM0P_RELOAD__SIZE 0x00000018u
N#define CYREG_CM0P_SYST_CVR 0xe000e018u
N#define CYFLD_CM0P_CURRENT__OFFSET 0x00000000u
N#define CYFLD_CM0P_CURRENT__SIZE 0x00000018u
N#define CYREG_CM0P_SYST_CALIB 0xe000e01cu
N#define CYFLD_CM0P_TENMS__OFFSET 0x00000000u
N#define CYFLD_CM0P_TENMS__SIZE 0x00000018u
N#define CYFLD_CM0P_SKEW__OFFSET 0x0000001eu
N#define CYFLD_CM0P_SKEW__SIZE 0x00000001u
N#define CYFLD_CM0P_NOREF__OFFSET 0x0000001fu
N#define CYFLD_CM0P_NOREF__SIZE 0x00000001u
N#define CYREG_CM0P_ISER 0xe000e100u
N#define CYFLD_CM0P_SETENA__OFFSET 0x00000000u
N#define CYFLD_CM0P_SETENA__SIZE 0x00000020u
N#define CYREG_CM0P_ICER 0xe000e180u
N#define CYFLD_CM0P_CLRENA__OFFSET 0x00000000u
N#define CYFLD_CM0P_CLRENA__SIZE 0x00000020u
N#define CYREG_CM0P_ISPR 0xe000e200u
N#define CYFLD_CM0P_SETPEND__OFFSET 0x00000000u
N#define CYFLD_CM0P_SETPEND__SIZE 0x00000020u
N#define CYREG_CM0P_ICPR 0xe000e280u
N#define CYFLD_CM0P_CLRPEND__OFFSET 0x00000000u
N#define CYFLD_CM0P_CLRPEND__SIZE 0x00000020u
N#define CYREG_CM0P_IPR0 0xe000e400u
N#define CYFLD_CM0P_PRI_N0__OFFSET 0x00000006u
N#define CYFLD_CM0P_PRI_N0__SIZE 0x00000002u
N#define CYFLD_CM0P_PRI_N1__OFFSET 0x0000000eu
N#define CYFLD_CM0P_PRI_N1__SIZE 0x00000002u
N#define CYFLD_CM0P_PRI_N2__OFFSET 0x00000016u
N#define CYFLD_CM0P_PRI_N2__SIZE 0x00000002u
N#define CYFLD_CM0P_PRI_N3__OFFSET 0x0000001eu
N#define CYFLD_CM0P_PRI_N3__SIZE 0x00000002u
N#define CYREG_CM0P_IPR1 0xe000e404u
N#define CYREG_CM0P_IPR2 0xe000e408u
N#define CYREG_CM0P_IPR3 0xe000e40cu
N#define CYREG_CM0P_IPR4 0xe000e410u
N#define CYREG_CM0P_IPR5 0xe000e414u
N#define CYREG_CM0P_IPR6 0xe000e418u
N#define CYREG_CM0P_IPR7 0xe000e41cu
N#define CYREG_CM0P_CPUID 0xe000ed00u
N#define CYFLD_CM0P_REVISION__OFFSET 0x00000000u
N#define CYFLD_CM0P_REVISION__SIZE 0x00000004u
N#define CYFLD_CM0P_PARTNO__OFFSET 0x00000004u
N#define CYFLD_CM0P_PARTNO__SIZE 0x0000000cu
N#define CYFLD_CM0P_CONSTANT__OFFSET 0x00000010u
N#define CYFLD_CM0P_CONSTANT__SIZE 0x00000004u
N#define CYFLD_CM0P_VARIANT__OFFSET 0x00000014u
N#define CYFLD_CM0P_VARIANT__SIZE 0x00000004u
N#define CYFLD_CM0P_IMPLEMENTER__OFFSET 0x00000018u
N#define CYFLD_CM0P_IMPLEMENTER__SIZE 0x00000008u
N#define CYREG_CM0P_ICSR 0xe000ed04u
N#define CYFLD_CM0P_VECTACTIVE__OFFSET 0x00000000u
N#define CYFLD_CM0P_VECTACTIVE__SIZE 0x00000009u
N#define CYFLD_CM0P_VECTPENDING__OFFSET 0x0000000cu
N#define CYFLD_CM0P_VECTPENDING__SIZE 0x00000009u
N#define CYFLD_CM0P_ISRPENDING__OFFSET 0x00000016u
N#define CYFLD_CM0P_ISRPENDING__SIZE 0x00000001u
N#define CYFLD_CM0P_ISRPREEMPT__OFFSET 0x00000017u
N#define CYFLD_CM0P_ISRPREEMPT__SIZE 0x00000001u
N#define CYFLD_CM0P_PENDSTCLR__OFFSET 0x00000019u
N#define CYFLD_CM0P_PENDSTCLR__SIZE 0x00000001u
N#define CYFLD_CM0P_PENDSTSETb__OFFSET 0x0000001au
N#define CYFLD_CM0P_PENDSTSETb__SIZE 0x00000001u
N#define CYFLD_CM0P_PENDSVCLR__OFFSET 0x0000001bu
N#define CYFLD_CM0P_PENDSVCLR__SIZE 0x00000001u
N#define CYFLD_CM0P_PENDSVSET__OFFSET 0x0000001cu
N#define CYFLD_CM0P_PENDSVSET__SIZE 0x00000001u
N#define CYFLD_CM0P_NMIPENDSET__OFFSET 0x0000001fu
N#define CYFLD_CM0P_NMIPENDSET__SIZE 0x00000001u
N#define CYREG_CM0P_VTOR 0xe000ed08u
N#define CYFLD_CM0P_TBLOFF__OFFSET 0x00000008u
N#define CYFLD_CM0P_TBLOFF__SIZE 0x00000018u
N#define CYREG_CM0P_AIRCR 0xe000ed0cu
N#define CYFLD_CM0P_VECTCLRACTIVE__OFFSET 0x00000001u
N#define CYFLD_CM0P_VECTCLRACTIVE__SIZE 0x00000001u
N#define CYFLD_CM0P_SYSRESETREQ__OFFSET 0x00000002u
N#define CYFLD_CM0P_SYSRESETREQ__SIZE 0x00000001u
N#define CYFLD_CM0P_ENDIANNESS__OFFSET 0x0000000fu
N#define CYFLD_CM0P_ENDIANNESS__SIZE 0x00000001u
N#define CYFLD_CM0P_VECTKEY__OFFSET 0x00000010u
N#define CYFLD_CM0P_VECTKEY__SIZE 0x00000010u
N#define CYREG_CM0P_SCR 0xe000ed10u
N#define CYFLD_CM0P_SLEEPONEXIT__OFFSET 0x00000001u
N#define CYFLD_CM0P_SLEEPONEXIT__SIZE 0x00000001u
N#define CYFLD_CM0P_SLEEPDEEP__OFFSET 0x00000002u
N#define CYFLD_CM0P_SLEEPDEEP__SIZE 0x00000001u
N#define CYFLD_CM0P_SEVONPEND__OFFSET 0x00000004u
N#define CYFLD_CM0P_SEVONPEND__SIZE 0x00000001u
N#define CYREG_CM0P_CCR 0xe000ed14u
N#define CYFLD_CM0P_UNALIGN_TRP__OFFSET 0x00000003u
N#define CYFLD_CM0P_UNALIGN_TRP__SIZE 0x00000001u
N#define CYFLD_CM0P_STKALIGN__OFFSET 0x00000009u
N#define CYFLD_CM0P_STKALIGN__SIZE 0x00000001u
N#define CYREG_CM0P_SHPR2 0xe000ed1cu
N#define CYFLD_CM0P_PRI_11__OFFSET 0x0000001eu
N#define CYFLD_CM0P_PRI_11__SIZE 0x00000002u
N#define CYREG_CM0P_SHPR3 0xe000ed20u
N#define CYFLD_CM0P_PRI_14__OFFSET 0x00000016u
N#define CYFLD_CM0P_PRI_14__SIZE 0x00000002u
N#define CYFLD_CM0P_PRI_15__OFFSET 0x0000001eu
N#define CYFLD_CM0P_PRI_15__SIZE 0x00000002u
N#define CYREG_CM0P_SHCSR 0xe000ed24u
N#define CYFLD_CM0P_SVCALLPENDED__OFFSET 0x0000000fu
N#define CYFLD_CM0P_SVCALLPENDED__SIZE 0x00000001u
N#define CYREG_CM0P_SCS_PID4 0xe000efd0u
N#define CYREG_CM0P_SCS_PID0 0xe000efe0u
N#define CYREG_CM0P_SCS_PID1 0xe000efe4u
N#define CYREG_CM0P_SCS_PID2 0xe000efe8u
N#define CYREG_CM0P_SCS_PID3 0xe000efecu
N#define CYREG_CM0P_SCS_CID0 0xe000eff0u
N#define CYREG_CM0P_SCS_CID1 0xe000eff4u
N#define CYREG_CM0P_SCS_CID2 0xe000eff8u
N#define CYREG_CM0P_SCS_CID3 0xe000effcu
N#define CYREG_CM0P_ROM_SCS 0xe00ff000u
N#define CYREG_CM0P_ROM_DWT 0xe00ff004u
N#define CYREG_CM0P_ROM_BPU 0xe00ff008u
N#define CYREG_CM0P_ROM_END 0xe00ff00cu
N#define CYREG_CM0P_ROM_CSMT 0xe00fffccu
N#define CYREG_CM0P_ROM_PID4 0xe00fffd0u
N#define CYREG_CM0P_ROM_PID0 0xe00fffe0u
N#define CYREG_CM0P_ROM_PID1 0xe00fffe4u
N#define CYREG_CM0P_ROM_PID2 0xe00fffe8u
N#define CYREG_CM0P_ROM_PID3 0xe00fffecu
N#define CYREG_CM0P_ROM_CID0 0xe00ffff0u
N#define CYREG_CM0P_ROM_CID1 0xe00ffff4u
N#define CYREG_CM0P_ROM_CID2 0xe00ffff8u
N#define CYREG_CM0P_ROM_CID3 0xe00ffffcu
N#define CYDEV_ROMTABLE_BASE 0xf0000000u
N#define CYDEV_ROMTABLE_SIZE 0x00001000u
N#define CYREG_ROMTABLE_ADDR 0xf0000000u
N#define CYFLD_ROMTABLE_PRESENT__OFFSET 0x00000000u
N#define CYFLD_ROMTABLE_PRESENT__SIZE 0x00000001u
N#define CYFLD_ROMTABLE_FORMAT_32BIT__OFFSET 0x00000001u
N#define CYFLD_ROMTABLE_FORMAT_32BIT__SIZE 0x00000001u
N#define CYFLD_ROMTABLE_ADDR_OFFSET__OFFSET 0x0000000cu
N#define CYFLD_ROMTABLE_ADDR_OFFSET__SIZE 0x00000014u
N#define CYREG_ROMTABLE_DID 0xf0000fccu
N#define CYFLD_ROMTABLE_VALUE__OFFSET 0x00000000u
N#define CYFLD_ROMTABLE_VALUE__SIZE 0x00000020u
N#define CYREG_ROMTABLE_PID4 0xf0000fd0u
N#define CYFLD_ROMTABLE_JEP_CONTINUATION__OFFSET 0x00000000u
N#define CYFLD_ROMTABLE_JEP_CONTINUATION__SIZE 0x00000004u
N#define CYFLD_ROMTABLE_COUNT__OFFSET 0x00000004u
N#define CYFLD_ROMTABLE_COUNT__SIZE 0x00000004u
N#define CYREG_ROMTABLE_PID5 0xf0000fd4u
N#define CYREG_ROMTABLE_PID6 0xf0000fd8u
N#define CYREG_ROMTABLE_PID7 0xf0000fdcu
N#define CYREG_ROMTABLE_PID0 0xf0000fe0u
N#define CYFLD_ROMTABLE_PN_MIN__OFFSET 0x00000000u
N#define CYFLD_ROMTABLE_PN_MIN__SIZE 0x00000008u
N#define CYREG_ROMTABLE_PID1 0xf0000fe4u
N#define CYFLD_ROMTABLE_PN_MAJ__OFFSET 0x00000000u
N#define CYFLD_ROMTABLE_PN_MAJ__SIZE 0x00000004u
N#define CYFLD_ROMTABLE_JEPID_MIN__OFFSET 0x00000004u
N#define CYFLD_ROMTABLE_JEPID_MIN__SIZE 0x00000004u
N#define CYREG_ROMTABLE_PID2 0xf0000fe8u
N#define CYFLD_ROMTABLE_JEPID_MAJ__OFFSET 0x00000000u
N#define CYFLD_ROMTABLE_JEPID_MAJ__SIZE 0x00000003u
N#define CYFLD_ROMTABLE_REV__OFFSET 0x00000004u
N#define CYFLD_ROMTABLE_REV__SIZE 0x00000004u
N#define CYREG_ROMTABLE_PID3 0xf0000fecu
N#define CYFLD_ROMTABLE_CM__OFFSET 0x00000000u
N#define CYFLD_ROMTABLE_CM__SIZE 0x00000004u
N#define CYFLD_ROMTABLE_REV_AND__OFFSET 0x00000004u
N#define CYFLD_ROMTABLE_REV_AND__SIZE 0x00000004u
N#define CYREG_ROMTABLE_CID0 0xf0000ff0u
N#define CYREG_ROMTABLE_CID1 0xf0000ff4u
N#define CYREG_ROMTABLE_CID2 0xf0000ff8u
N#define CYREG_ROMTABLE_CID3 0xf0000ffcu
N#define CYDEV_FLS_SECTOR_SIZE 0x00020000u
N#define CYDEV_FLS_ROW_SIZE 0x00000100u
N#endif /* CYDEVICE_TRM_H */
L 22 "Generated_Source\PSoC4\SPI_0_OLED_FLASH.h" 2
N#include <cyfitter.h>
L 1 "Generated_Source\PSoC4\cyfitter.h" 1
N/*******************************************************************************
N* File Name: cyfitter.h
N* 
N* PSoC Creator  4.2
N*
N* Description:
N* 
N* This file is automatically generated by PSoC Creator.
N*
N********************************************************************************
N* Copyright (c) 2007-2018 Cypress Semiconductor.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N********************************************************************************/
N
N#ifndef INCLUDED_CYFITTER_H
N#define INCLUDED_CYFITTER_H
N#include "cydevice_trm.h"
N
N/* ADC */
N#define ADC_cy_psoc4_sar__CLOCK_DIV_ID 0x00000043u
N#define ADC_cy_psoc4_sar__SAR_ANA_TRIM CYREG_SAR_ANA_TRIM
N#define ADC_cy_psoc4_sar__SAR_AVG_STAT CYREG_SAR_AVG_STAT
N#define ADC_cy_psoc4_sar__SAR_CHAN_CONFIG00 CYREG_SAR_CHAN_CONFIG0
N#define ADC_cy_psoc4_sar__SAR_CHAN_CONFIG01 CYREG_SAR_CHAN_CONFIG1
N#define ADC_cy_psoc4_sar__SAR_CHAN_CONFIG02 CYREG_SAR_CHAN_CONFIG2
N#define ADC_cy_psoc4_sar__SAR_CHAN_CONFIG03 CYREG_SAR_CHAN_CONFIG3
N#define ADC_cy_psoc4_sar__SAR_CHAN_CONFIG04 CYREG_SAR_CHAN_CONFIG4
N#define ADC_cy_psoc4_sar__SAR_CHAN_CONFIG05 CYREG_SAR_CHAN_CONFIG5
N#define ADC_cy_psoc4_sar__SAR_CHAN_CONFIG06 CYREG_SAR_CHAN_CONFIG6
N#define ADC_cy_psoc4_sar__SAR_CHAN_CONFIG07 CYREG_SAR_CHAN_CONFIG7
N#define ADC_cy_psoc4_sar__SAR_CHAN_CONFIG08 CYREG_SAR_CHAN_CONFIG8
N#define ADC_cy_psoc4_sar__SAR_CHAN_CONFIG09 CYREG_SAR_CHAN_CONFIG9
N#define ADC_cy_psoc4_sar__SAR_CHAN_CONFIG10 CYREG_SAR_CHAN_CONFIG10
N#define ADC_cy_psoc4_sar__SAR_CHAN_CONFIG11 CYREG_SAR_CHAN_CONFIG11
N#define ADC_cy_psoc4_sar__SAR_CHAN_CONFIG12 CYREG_SAR_CHAN_CONFIG12
N#define ADC_cy_psoc4_sar__SAR_CHAN_CONFIG13 CYREG_SAR_CHAN_CONFIG13
N#define ADC_cy_psoc4_sar__SAR_CHAN_CONFIG14 CYREG_SAR_CHAN_CONFIG14
N#define ADC_cy_psoc4_sar__SAR_CHAN_CONFIG15 CYREG_SAR_CHAN_CONFIG15
N#define ADC_cy_psoc4_sar__SAR_CHAN_EN CYREG_SAR_CHAN_EN
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT_VALID CYREG_SAR_CHAN_RESULT_VALID
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT00 CYREG_SAR_CHAN_RESULT0
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT01 CYREG_SAR_CHAN_RESULT1
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT02 CYREG_SAR_CHAN_RESULT2
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT03 CYREG_SAR_CHAN_RESULT3
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT04 CYREG_SAR_CHAN_RESULT4
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT05 CYREG_SAR_CHAN_RESULT5
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT06 CYREG_SAR_CHAN_RESULT6
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT07 CYREG_SAR_CHAN_RESULT7
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT08 CYREG_SAR_CHAN_RESULT8
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT09 CYREG_SAR_CHAN_RESULT9
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT10 CYREG_SAR_CHAN_RESULT10
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT11 CYREG_SAR_CHAN_RESULT11
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT12 CYREG_SAR_CHAN_RESULT12
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT13 CYREG_SAR_CHAN_RESULT13
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT14 CYREG_SAR_CHAN_RESULT14
N#define ADC_cy_psoc4_sar__SAR_CHAN_RESULT15 CYREG_SAR_CHAN_RESULT15
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK_VALID CYREG_SAR_CHAN_WORK_VALID
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK00 CYREG_SAR_CHAN_WORK0
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK01 CYREG_SAR_CHAN_WORK1
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK02 CYREG_SAR_CHAN_WORK2
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK03 CYREG_SAR_CHAN_WORK3
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK04 CYREG_SAR_CHAN_WORK4
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK05 CYREG_SAR_CHAN_WORK5
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK06 CYREG_SAR_CHAN_WORK6
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK07 CYREG_SAR_CHAN_WORK7
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK08 CYREG_SAR_CHAN_WORK8
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK09 CYREG_SAR_CHAN_WORK9
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK10 CYREG_SAR_CHAN_WORK10
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK11 CYREG_SAR_CHAN_WORK11
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK12 CYREG_SAR_CHAN_WORK12
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK13 CYREG_SAR_CHAN_WORK13
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK14 CYREG_SAR_CHAN_WORK14
N#define ADC_cy_psoc4_sar__SAR_CHAN_WORK15 CYREG_SAR_CHAN_WORK15
N#define ADC_cy_psoc4_sar__SAR_CTRL CYREG_SAR_CTRL
N#define ADC_cy_psoc4_sar__SAR_DFT_CTRL CYREG_SAR_DFT_CTRL
N#define ADC_cy_psoc4_sar__SAR_INTR CYREG_SAR_INTR
N#define ADC_cy_psoc4_sar__SAR_INTR_CAUSE CYREG_SAR_INTR_CAUSE
N#define ADC_cy_psoc4_sar__SAR_INTR_MASK CYREG_SAR_INTR_MASK
N#define ADC_cy_psoc4_sar__SAR_INTR_MASKED CYREG_SAR_INTR_MASKED
N#define ADC_cy_psoc4_sar__SAR_INTR_SET CYREG_SAR_INTR_SET
N#define ADC_cy_psoc4_sar__SAR_MUX_SWITCH_CLEAR0 CYREG_SAR_MUX_SWITCH_CLEAR0
N#define ADC_cy_psoc4_sar__SAR_MUX_SWITCH_CLEAR1 CYREG_SAR_MUX_SWITCH_CLEAR1
N#define ADC_cy_psoc4_sar__SAR_MUX_SWITCH_HW_CTRL CYREG_SAR_MUX_SWITCH_HW_CTRL
N#define ADC_cy_psoc4_sar__SAR_MUX_SWITCH_STATUS CYREG_SAR_MUX_SWITCH_STATUS
N#define ADC_cy_psoc4_sar__SAR_MUX_SWITCH0 CYREG_SAR_MUX_SWITCH0
N#define ADC_cy_psoc4_sar__SAR_MUX_SWITCH1 CYREG_SAR_MUX_SWITCH1
N#define ADC_cy_psoc4_sar__SAR_NUMBER 0u
N#define ADC_cy_psoc4_sar__SAR_PUMP_CTRL CYREG_SAR_PUMP_CTRL
N#define ADC_cy_psoc4_sar__SAR_RANGE_COND CYREG_SAR_RANGE_COND
N#define ADC_cy_psoc4_sar__SAR_RANGE_INTR CYREG_SAR_RANGE_INTR
N#define ADC_cy_psoc4_sar__SAR_RANGE_INTR_MASK CYREG_SAR_RANGE_INTR_MASK
N#define ADC_cy_psoc4_sar__SAR_RANGE_INTR_MASKED CYREG_SAR_RANGE_INTR_MASKED
N#define ADC_cy_psoc4_sar__SAR_RANGE_INTR_SET CYREG_SAR_RANGE_INTR_SET
N#define ADC_cy_psoc4_sar__SAR_RANGE_THRES CYREG_SAR_RANGE_THRES
N#define ADC_cy_psoc4_sar__SAR_SAMPLE_CTRL CYREG_SAR_SAMPLE_CTRL
N#define ADC_cy_psoc4_sar__SAR_SAMPLE_TIME01 CYREG_SAR_SAMPLE_TIME01
N#define ADC_cy_psoc4_sar__SAR_SAMPLE_TIME23 CYREG_SAR_SAMPLE_TIME23
N#define ADC_cy_psoc4_sar__SAR_SATURATE_INTR CYREG_SAR_SATURATE_INTR
N#define ADC_cy_psoc4_sar__SAR_SATURATE_INTR_MASK CYREG_SAR_SATURATE_INTR_MASK
N#define ADC_cy_psoc4_sar__SAR_SATURATE_INTR_MASKED CYREG_SAR_SATURATE_INTR_MASKED
N#define ADC_cy_psoc4_sar__SAR_SATURATE_INTR_SET CYREG_SAR_SATURATE_INTR_SET
N#define ADC_cy_psoc4_sar__SAR_START_CTRL CYREG_SAR_START_CTRL
N#define ADC_cy_psoc4_sar__SAR_STATUS CYREG_SAR_STATUS
N#define ADC_cy_psoc4_sar__SAR_WOUNDING CYREG_SAR_WOUNDING
N#define ADC_cy_psoc4_sarmux_8__CH_0_PIN 5
N#define ADC_cy_psoc4_sarmux_8__CH_0_PORT 0
N#define ADC_cy_psoc4_sarmux_8__CH_1_PIN 6
N#define ADC_cy_psoc4_sarmux_8__CH_1_PORT 0
N#define ADC_cy_psoc4_sarmux_8__CH_2_PIN 7
N#define ADC_cy_psoc4_sarmux_8__CH_2_PORT 0
N#define ADC_cy_psoc4_sarmux_8__SAR_AVG_STAT CYREG_SAR_AVG_STAT
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_CONFIG00 CYREG_SAR_CHAN_CONFIG0
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_CONFIG01 CYREG_SAR_CHAN_CONFIG1
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_CONFIG02 CYREG_SAR_CHAN_CONFIG2
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_CONFIG03 CYREG_SAR_CHAN_CONFIG3
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_CONFIG04 CYREG_SAR_CHAN_CONFIG4
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_CONFIG05 CYREG_SAR_CHAN_CONFIG5
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_CONFIG06 CYREG_SAR_CHAN_CONFIG6
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_CONFIG07 CYREG_SAR_CHAN_CONFIG7
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_CONFIG08 CYREG_SAR_CHAN_CONFIG8
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_CONFIG09 CYREG_SAR_CHAN_CONFIG9
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_CONFIG10 CYREG_SAR_CHAN_CONFIG10
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_CONFIG11 CYREG_SAR_CHAN_CONFIG11
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_CONFIG12 CYREG_SAR_CHAN_CONFIG12
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_CONFIG13 CYREG_SAR_CHAN_CONFIG13
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_CONFIG14 CYREG_SAR_CHAN_CONFIG14
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_CONFIG15 CYREG_SAR_CHAN_CONFIG15
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_EN CYREG_SAR_CHAN_EN
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT_VALID CYREG_SAR_CHAN_RESULT_VALID
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT00 CYREG_SAR_CHAN_RESULT0
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT01 CYREG_SAR_CHAN_RESULT1
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT02 CYREG_SAR_CHAN_RESULT2
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT03 CYREG_SAR_CHAN_RESULT3
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT04 CYREG_SAR_CHAN_RESULT4
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT05 CYREG_SAR_CHAN_RESULT5
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT06 CYREG_SAR_CHAN_RESULT6
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT07 CYREG_SAR_CHAN_RESULT7
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT08 CYREG_SAR_CHAN_RESULT8
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT09 CYREG_SAR_CHAN_RESULT9
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT10 CYREG_SAR_CHAN_RESULT10
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT11 CYREG_SAR_CHAN_RESULT11
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT12 CYREG_SAR_CHAN_RESULT12
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT13 CYREG_SAR_CHAN_RESULT13
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT14 CYREG_SAR_CHAN_RESULT14
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_RESULT15 CYREG_SAR_CHAN_RESULT15
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK_VALID CYREG_SAR_CHAN_WORK_VALID
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK00 CYREG_SAR_CHAN_WORK0
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK01 CYREG_SAR_CHAN_WORK1
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK02 CYREG_SAR_CHAN_WORK2
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK03 CYREG_SAR_CHAN_WORK3
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK04 CYREG_SAR_CHAN_WORK4
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK05 CYREG_SAR_CHAN_WORK5
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK06 CYREG_SAR_CHAN_WORK6
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK07 CYREG_SAR_CHAN_WORK7
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK08 CYREG_SAR_CHAN_WORK8
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK09 CYREG_SAR_CHAN_WORK9
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK10 CYREG_SAR_CHAN_WORK10
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK11 CYREG_SAR_CHAN_WORK11
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK12 CYREG_SAR_CHAN_WORK12
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK13 CYREG_SAR_CHAN_WORK13
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK14 CYREG_SAR_CHAN_WORK14
N#define ADC_cy_psoc4_sarmux_8__SAR_CHAN_WORK15 CYREG_SAR_CHAN_WORK15
N#define ADC_cy_psoc4_sarmux_8__SAR_INJ_CHAN_CONFIG CYREG_SAR_INJ_CHAN_CONFIG
N#define ADC_cy_psoc4_sarmux_8__SAR_INJ_RESULT CYREG_SAR_INJ_RESULT
N#define ADC_cy_psoc4_sarmux_8__SAR_MUX_SWITCH_CLEAR0 CYREG_SAR_MUX_SWITCH_CLEAR0
N#define ADC_cy_psoc4_sarmux_8__SAR_MUX_SWITCH_CLEAR1 CYREG_SAR_MUX_SWITCH_CLEAR1
N#define ADC_cy_psoc4_sarmux_8__SAR_MUX_SWITCH_HW_CTRL CYREG_SAR_MUX_SWITCH_HW_CTRL
N#define ADC_cy_psoc4_sarmux_8__SAR_MUX_SWITCH_STATUS CYREG_SAR_MUX_SWITCH_STATUS
N#define ADC_cy_psoc4_sarmux_8__SAR_MUX_SWITCH0 CYREG_SAR_MUX_SWITCH0
N#define ADC_cy_psoc4_sarmux_8__SAR_MUX_SWITCH1 CYREG_SAR_MUX_SWITCH1
N#define ADC_cy_psoc4_sarmux_8__SAR_START_CTRL CYREG_SAR_START_CTRL
N#define ADC_cy_psoc4_sarmux_8__VNEG0 0
N#define ADC_intClock__CTRL_REGISTER CYREG_PERI_PCLK_CTL18
N#define ADC_intClock__DIV_ID 0x00000043u
N#define ADC_intClock__DIV_REGISTER CYREG_PERI_DIV_16_CTL3
N#define ADC_intClock__PA_DIV_ID 0x000000FFu
N#define ADC_IRQ__INTC_CLR_EN_REG CYREG_CM0P_ICER
N#define ADC_IRQ__INTC_CLR_PD_REG CYREG_CM0P_ICPR
N#define ADC_IRQ__INTC_MASK 0x2000000u
N#define ADC_IRQ__INTC_NUMBER 25u
N#define ADC_IRQ__INTC_PRIOR_MASK 0xC000u
N#define ADC_IRQ__INTC_PRIOR_NUM 3u
N#define ADC_IRQ__INTC_PRIOR_REG CYREG_CM0P_IPR6
N#define ADC_IRQ__INTC_SET_EN_REG CYREG_CM0P_ISER
N#define ADC_IRQ__INTC_SET_PD_REG CYREG_CM0P_ISPR
N
N/* isr_1 */
N#define isr_1__INTC_CLR_EN_REG CYREG_CM0P_ICER
N#define isr_1__INTC_CLR_PD_REG CYREG_CM0P_ICPR
N#define isr_1__INTC_MASK 0x01u
N#define isr_1__INTC_NUMBER 0u
N#define isr_1__INTC_PRIOR_MASK 0xC0u
N#define isr_1__INTC_PRIOR_NUM 3u
N#define isr_1__INTC_PRIOR_REG CYREG_CM0P_IPR0
N#define isr_1__INTC_SET_EN_REG CYREG_CM0P_ISER
N#define isr_1__INTC_SET_PD_REG CYREG_CM0P_ISPR
N
N/* isr_2 */
N#define isr_2__INTC_CLR_EN_REG CYREG_CM0P_ICER
N#define isr_2__INTC_CLR_PD_REG CYREG_CM0P_ICPR
N#define isr_2__INTC_MASK 0x02u
N#define isr_2__INTC_NUMBER 1u
N#define isr_2__INTC_PRIOR_MASK 0xC000u
N#define isr_2__INTC_PRIOR_NUM 3u
N#define isr_2__INTC_PRIOR_REG CYREG_CM0P_IPR0
N#define isr_2__INTC_SET_EN_REG CYREG_CM0P_ISER
N#define isr_2__INTC_SET_PD_REG CYREG_CM0P_ISPR
N
N/* I2C_ST */
N#define I2C_ST__0__DR CYREG_GPIO_PRT5_DR
N#define I2C_ST__0__DR_CLR CYREG_GPIO_PRT5_DR_CLR
N#define I2C_ST__0__DR_INV CYREG_GPIO_PRT5_DR_INV
N#define I2C_ST__0__DR_SET CYREG_GPIO_PRT5_DR_SET
N#define I2C_ST__0__HSIOM CYREG_HSIOM_PORT_SEL5
N#define I2C_ST__0__HSIOM_MASK 0xF0000000u
N#define I2C_ST__0__HSIOM_SHIFT 28u
N#define I2C_ST__0__INTCFG CYREG_GPIO_PRT5_INTR_CFG
N#define I2C_ST__0__INTR CYREG_GPIO_PRT5_INTR
N#define I2C_ST__0__INTR_CFG CYREG_GPIO_PRT5_INTR_CFG
N#define I2C_ST__0__INTSTAT CYREG_GPIO_PRT5_INTR
N#define I2C_ST__0__MASK 0x80u
N#define I2C_ST__0__PC CYREG_GPIO_PRT5_PC
N#define I2C_ST__0__PC2 CYREG_GPIO_PRT5_PC2
N#define I2C_ST__0__PORT 5u
N#define I2C_ST__0__PS CYREG_GPIO_PRT5_PS
N#define I2C_ST__0__SHIFT 7u
N#define I2C_ST__DR CYREG_GPIO_PRT5_DR
N#define I2C_ST__DR_CLR CYREG_GPIO_PRT5_DR_CLR
N#define I2C_ST__DR_INV CYREG_GPIO_PRT5_DR_INV
N#define I2C_ST__DR_SET CYREG_GPIO_PRT5_DR_SET
N#define I2C_ST__INTCFG CYREG_GPIO_PRT5_INTR_CFG
N#define I2C_ST__INTR CYREG_GPIO_PRT5_INTR
N#define I2C_ST__INTR_CFG CYREG_GPIO_PRT5_INTR_CFG
N#define I2C_ST__INTSTAT CYREG_GPIO_PRT5_INTR
N#define I2C_ST__MASK 0x80u
N#define I2C_ST__PC CYREG_GPIO_PRT5_PC
N#define I2C_ST__PC2 CYREG_GPIO_PRT5_PC2
N#define I2C_ST__PORT 5u
N#define I2C_ST__PS CYREG_GPIO_PRT5_PS
N#define I2C_ST__SHIFT 7u
N
N/* RF_ADC */
N#define RF_ADC__0__DR CYREG_GPIO_PRT2_DR
N#define RF_ADC__0__DR_CLR CYREG_GPIO_PRT2_DR_CLR
N#define RF_ADC__0__DR_INV CYREG_GPIO_PRT2_DR_INV
N#define RF_ADC__0__DR_SET CYREG_GPIO_PRT2_DR_SET
N#define RF_ADC__0__HSIOM CYREG_HSIOM_PORT_SEL2
N#define RF_ADC__0__HSIOM_MASK 0xF0000000u
N#define RF_ADC__0__HSIOM_SHIFT 28u
N#define RF_ADC__0__INTCFG CYREG_GPIO_PRT2_INTR_CFG
N#define RF_ADC__0__INTR CYREG_GPIO_PRT2_INTR
N#define RF_ADC__0__INTR_CFG CYREG_GPIO_PRT2_INTR_CFG
N#define RF_ADC__0__INTSTAT CYREG_GPIO_PRT2_INTR
N#define RF_ADC__0__MASK 0x80u
N#define RF_ADC__0__PC CYREG_GPIO_PRT2_PC
N#define RF_ADC__0__PC2 CYREG_GPIO_PRT2_PC2
N#define RF_ADC__0__PORT 2u
N#define RF_ADC__0__PS CYREG_GPIO_PRT2_PS
N#define RF_ADC__0__SHIFT 7u
N#define RF_ADC__DR CYREG_GPIO_PRT2_DR
N#define RF_ADC__DR_CLR CYREG_GPIO_PRT2_DR_CLR
N#define RF_ADC__DR_INV CYREG_GPIO_PRT2_DR_INV
N#define RF_ADC__DR_SET CYREG_GPIO_PRT2_DR_SET
N#define RF_ADC__INTCFG CYREG_GPIO_PRT2_INTR_CFG
N#define RF_ADC__INTR CYREG_GPIO_PRT2_INTR
N#define RF_ADC__INTR_CFG CYREG_GPIO_PRT2_INTR_CFG
N#define RF_ADC__INTSTAT CYREG_GPIO_PRT2_INTR
N#define RF_ADC__MASK 0x80u
N#define RF_ADC__PC CYREG_GPIO_PRT2_PC
N#define RF_ADC__PC2 CYREG_GPIO_PRT2_PC2
N#define RF_ADC__PORT 2u
N#define RF_ADC__PS CYREG_GPIO_PRT2_PS
N#define RF_ADC__SHIFT 7u
N
N/* BAT_ADC */
N#define BAT_ADC__0__DR CYREG_GPIO_PRT2_DR
N#define BAT_ADC__0__DR_CLR CYREG_GPIO_PRT2_DR_CLR
N#define BAT_ADC__0__DR_INV CYREG_GPIO_PRT2_DR_INV
N#define BAT_ADC__0__DR_SET CYREG_GPIO_PRT2_DR_SET
N#define BAT_ADC__0__HSIOM CYREG_HSIOM_PORT_SEL2
N#define BAT_ADC__0__HSIOM_MASK 0x00F00000u
N#define BAT_ADC__0__HSIOM_SHIFT 20u
N#define BAT_ADC__0__INTCFG CYREG_GPIO_PRT2_INTR_CFG
N#define BAT_ADC__0__INTR CYREG_GPIO_PRT2_INTR
N#define BAT_ADC__0__INTR_CFG CYREG_GPIO_PRT2_INTR_CFG
N#define BAT_ADC__0__INTSTAT CYREG_GPIO_PRT2_INTR
N#define BAT_ADC__0__MASK 0x20u
N#define BAT_ADC__0__PC CYREG_GPIO_PRT2_PC
N#define BAT_ADC__0__PC2 CYREG_GPIO_PRT2_PC2
N#define BAT_ADC__0__PORT 2u
N#define BAT_ADC__0__PS CYREG_GPIO_PRT2_PS
N#define BAT_ADC__0__SHIFT 5u
N#define BAT_ADC__DR CYREG_GPIO_PRT2_DR
N#define BAT_ADC__DR_CLR CYREG_GPIO_PRT2_DR_CLR
N#define BAT_ADC__DR_INV CYREG_GPIO_PRT2_DR_INV
N#define BAT_ADC__DR_SET CYREG_GPIO_PRT2_DR_SET
N#define BAT_ADC__INTCFG CYREG_GPIO_PRT2_INTR_CFG
N#define BAT_ADC__INTR CYREG_GPIO_PRT2_INTR
N#define BAT_ADC__INTR_CFG CYREG_GPIO_PRT2_INTR_CFG
N#define BAT_ADC__INTSTAT CYREG_GPIO_PRT2_INTR
N#define BAT_ADC__MASK 0x20u
N#define BAT_ADC__PC CYREG_GPIO_PRT2_PC
N#define BAT_ADC__PC2 CYREG_GPIO_PRT2_PC2
N#define BAT_ADC__PORT 2u
N#define BAT_ADC__PS CYREG_GPIO_PRT2_PS
N#define BAT_ADC__SHIFT 5u
N
N/* I2C_SCL */
N#define I2C_SCL__0__DR CYREG_GPIO_PRT7_DR
N#define I2C_SCL__0__DR_CLR CYREG_GPIO_PRT7_DR_CLR
N#define I2C_SCL__0__DR_INV CYREG_GPIO_PRT7_DR_INV
N#define I2C_SCL__0__DR_SET CYREG_GPIO_PRT7_DR_SET
N#define I2C_SCL__0__HSIOM CYREG_HSIOM_PORT_SEL7
N#define I2C_SCL__0__HSIOM_MASK 0x000000F0u
N#define I2C_SCL__0__HSIOM_SHIFT 4u
N#define I2C_SCL__0__INTCFG CYREG_GPIO_PRT7_INTR_CFG
N#define I2C_SCL__0__INTR CYREG_GPIO_PRT7_INTR
N#define I2C_SCL__0__INTR_CFG CYREG_GPIO_PRT7_INTR_CFG
N#define I2C_SCL__0__INTSTAT CYREG_GPIO_PRT7_INTR
N#define I2C_SCL__0__MASK 0x02u
N#define I2C_SCL__0__PC CYREG_GPIO_PRT7_PC
N#define I2C_SCL__0__PC2 CYREG_GPIO_PRT7_PC2
N#define I2C_SCL__0__PORT 7u
N#define I2C_SCL__0__PS CYREG_GPIO_PRT7_PS
N#define I2C_SCL__0__SHIFT 1u
N#define I2C_SCL__DR CYREG_GPIO_PRT7_DR
N#define I2C_SCL__DR_CLR CYREG_GPIO_PRT7_DR_CLR
N#define I2C_SCL__DR_INV CYREG_GPIO_PRT7_DR_INV
N#define I2C_SCL__DR_SET CYREG_GPIO_PRT7_DR_SET
N#define I2C_SCL__INTCFG CYREG_GPIO_PRT7_INTR_CFG
N#define I2C_SCL__INTR CYREG_GPIO_PRT7_INTR
N#define I2C_SCL__INTR_CFG CYREG_GPIO_PRT7_INTR_CFG
N#define I2C_SCL__INTSTAT CYREG_GPIO_PRT7_INTR
N#define I2C_SCL__MASK 0x02u
N#define I2C_SCL__PC CYREG_GPIO_PRT7_PC
N#define I2C_SCL__PC2 CYREG_GPIO_PRT7_PC2
N#define I2C_SCL__PORT 7u
N#define I2C_SCL__PS CYREG_GPIO_PRT7_PS
N#define I2C_SCL__SHIFT 1u
N
N/* I2C_SDA */
N#define I2C_SDA__0__DR CYREG_GPIO_PRT7_DR
N#define I2C_SDA__0__DR_CLR CYREG_GPIO_PRT7_DR_CLR
N#define I2C_SDA__0__DR_INV CYREG_GPIO_PRT7_DR_INV
N#define I2C_SDA__0__DR_SET CYREG_GPIO_PRT7_DR_SET
N#define I2C_SDA__0__HSIOM CYREG_HSIOM_PORT_SEL7
N#define I2C_SDA__0__HSIOM_MASK 0x0000000Fu
N#define I2C_SDA__0__HSIOM_SHIFT 0u
N#define I2C_SDA__0__INTCFG CYREG_GPIO_PRT7_INTR_CFG
N#define I2C_SDA__0__INTR CYREG_GPIO_PRT7_INTR
N#define I2C_SDA__0__INTR_CFG CYREG_GPIO_PRT7_INTR_CFG
N#define I2C_SDA__0__INTSTAT CYREG_GPIO_PRT7_INTR
N#define I2C_SDA__0__MASK 0x01u
N#define I2C_SDA__0__PC CYREG_GPIO_PRT7_PC
N#define I2C_SDA__0__PC2 CYREG_GPIO_PRT7_PC2
N#define I2C_SDA__0__PORT 7u
N#define I2C_SDA__0__PS CYREG_GPIO_PRT7_PS
N#define I2C_SDA__0__SHIFT 0u
N#define I2C_SDA__DR CYREG_GPIO_PRT7_DR
N#define I2C_SDA__DR_CLR CYREG_GPIO_PRT7_DR_CLR
N#define I2C_SDA__DR_INV CYREG_GPIO_PRT7_DR_INV
N#define I2C_SDA__DR_SET CYREG_GPIO_PRT7_DR_SET
N#define I2C_SDA__INTCFG CYREG_GPIO_PRT7_INTR_CFG
N#define I2C_SDA__INTR CYREG_GPIO_PRT7_INTR
N#define I2C_SDA__INTR_CFG CYREG_GPIO_PRT7_INTR_CFG
N#define I2C_SDA__INTSTAT CYREG_GPIO_PRT7_INTR
N#define I2C_SDA__MASK 0x01u
N#define I2C_SDA__PC CYREG_GPIO_PRT7_PC
N#define I2C_SDA__PC2 CYREG_GPIO_PRT7_PC2
N#define I2C_SDA__PORT 7u
N#define I2C_SDA__PS CYREG_GPIO_PRT7_PS
N#define I2C_SDA__SHIFT 0u
N
N/* OLED_DC */
N#define OLED_DC__0__DR CYREG_GPIO_PRT5_DR
N#define OLED_DC__0__DR_CLR CYREG_GPIO_PRT5_DR_CLR
N#define OLED_DC__0__DR_INV CYREG_GPIO_PRT5_DR_INV
N#define OLED_DC__0__DR_SET CYREG_GPIO_PRT5_DR_SET
N#define OLED_DC__0__HSIOM CYREG_HSIOM_PORT_SEL5
N#define OLED_DC__0__HSIOM_MASK 0x0000F000u
N#define OLED_DC__0__HSIOM_SHIFT 12u
N#define OLED_DC__0__INTCFG CYREG_GPIO_PRT5_INTR_CFG
N#define OLED_DC__0__INTR CYREG_GPIO_PRT5_INTR
N#define OLED_DC__0__INTR_CFG CYREG_GPIO_PRT5_INTR_CFG
N#define OLED_DC__0__INTSTAT CYREG_GPIO_PRT5_INTR
N#define OLED_DC__0__MASK 0x08u
N#define OLED_DC__0__PC CYREG_GPIO_PRT5_PC
N#define OLED_DC__0__PC2 CYREG_GPIO_PRT5_PC2
N#define OLED_DC__0__PORT 5u
N#define OLED_DC__0__PS CYREG_GPIO_PRT5_PS
N#define OLED_DC__0__SHIFT 3u
N#define OLED_DC__DR CYREG_GPIO_PRT5_DR
N#define OLED_DC__DR_CLR CYREG_GPIO_PRT5_DR_CLR
N#define OLED_DC__DR_INV CYREG_GPIO_PRT5_DR_INV
N#define OLED_DC__DR_SET CYREG_GPIO_PRT5_DR_SET
N#define OLED_DC__INTCFG CYREG_GPIO_PRT5_INTR_CFG
N#define OLED_DC__INTR CYREG_GPIO_PRT5_INTR
N#define OLED_DC__INTR_CFG CYREG_GPIO_PRT5_INTR_CFG
N#define OLED_DC__INTSTAT CYREG_GPIO_PRT5_INTR
N#define OLED_DC__MASK 0x08u
N#define OLED_DC__PC CYREG_GPIO_PRT5_PC
N#define OLED_DC__PC2 CYREG_GPIO_PRT5_PC2
N#define OLED_DC__PORT 5u
N#define OLED_DC__PS CYREG_GPIO_PRT5_PS
N#define OLED_DC__SHIFT 3u
N
N/* OP1_INT */
N#define OP1_INT__0__DR CYREG_GPIO_PRT0_DR
N#define OP1_INT__0__DR_CLR CYREG_GPIO_PRT0_DR_CLR
N#define OP1_INT__0__DR_INV CYREG_GPIO_PRT0_DR_INV
N#define OP1_INT__0__DR_SET CYREG_GPIO_PRT0_DR_SET
N#define OP1_INT__0__HSIOM CYREG_HSIOM_PORT_SEL0
N#define OP1_INT__0__HSIOM_MASK 0x0000000Fu
N#define OP1_INT__0__HSIOM_SHIFT 0u
N#define OP1_INT__0__INTCFG CYREG_GPIO_PRT0_INTR_CFG
N#define OP1_INT__0__INTR CYREG_GPIO_PRT0_INTR
N#define OP1_INT__0__INTR_CFG CYREG_GPIO_PRT0_INTR_CFG
N#define OP1_INT__0__INTSTAT CYREG_GPIO_PRT0_INTR
N#define OP1_INT__0__MASK 0x01u
N#define OP1_INT__0__PC CYREG_GPIO_PRT0_PC
N#define OP1_INT__0__PC2 CYREG_GPIO_PRT0_PC2
N#define OP1_INT__0__PORT 0u
N#define OP1_INT__0__PS CYREG_GPIO_PRT0_PS
N#define OP1_INT__0__SHIFT 0u
N#define OP1_INT__DR CYREG_GPIO_PRT0_DR
N#define OP1_INT__DR_CLR CYREG_GPIO_PRT0_DR_CLR
N#define OP1_INT__DR_INV CYREG_GPIO_PRT0_DR_INV
N#define OP1_INT__DR_SET CYREG_GPIO_PRT0_DR_SET
N#define OP1_INT__INTCFG CYREG_GPIO_PRT0_INTR_CFG
N#define OP1_INT__INTR CYREG_GPIO_PRT0_INTR
N#define OP1_INT__INTR_CFG CYREG_GPIO_PRT0_INTR_CFG
N#define OP1_INT__INTSTAT CYREG_GPIO_PRT0_INTR
N#define OP1_INT__MASK 0x01u
N#define OP1_INT__PC CYREG_GPIO_PRT0_PC
N#define OP1_INT__PC2 CYREG_GPIO_PRT0_PC2
N#define OP1_INT__PORT 0u
N#define OP1_INT__PS CYREG_GPIO_PRT0_PS
N#define OP1_INT__SHIFT 0u
N
N/* OP2_INT */
N#define OP2_INT__0__DR CYREG_GPIO_PRT0_DR
N#define OP2_INT__0__DR_CLR CYREG_GPIO_PRT0_DR_CLR
N#define OP2_INT__0__DR_INV CYREG_GPIO_PRT0_DR_INV
N#define OP2_INT__0__DR_SET CYREG_GPIO_PRT0_DR_SET
N#define OP2_INT__0__HSIOM CYREG_HSIOM_PORT_SEL0
N#define OP2_INT__0__HSIOM_MASK 0x0F000000u
N#define OP2_INT__0__HSIOM_SHIFT 24u
N#define OP2_INT__0__INTCFG CYREG_GPIO_PRT0_INTR_CFG
N#define OP2_INT__0__INTR CYREG_GPIO_PRT0_INTR
N#define OP2_INT__0__INTR_CFG CYREG_GPIO_PRT0_INTR_CFG
N#define OP2_INT__0__INTSTAT CYREG_GPIO_PRT0_INTR
N#define OP2_INT__0__MASK 0x40u
N#define OP2_INT__0__PC CYREG_GPIO_PRT0_PC
N#define OP2_INT__0__PC2 CYREG_GPIO_PRT0_PC2
N#define OP2_INT__0__PORT 0u
N#define OP2_INT__0__PS CYREG_GPIO_PRT0_PS
N#define OP2_INT__0__SHIFT 6u
N#define OP2_INT__DR CYREG_GPIO_PRT0_DR
N#define OP2_INT__DR_CLR CYREG_GPIO_PRT0_DR_CLR
N#define OP2_INT__DR_INV CYREG_GPIO_PRT0_DR_INV
N#define OP2_INT__DR_SET CYREG_GPIO_PRT0_DR_SET
N#define OP2_INT__INTCFG CYREG_GPIO_PRT0_INTR_CFG
N#define OP2_INT__INTR CYREG_GPIO_PRT0_INTR
N#define OP2_INT__INTR_CFG CYREG_GPIO_PRT0_INTR_CFG
N#define OP2_INT__INTSTAT CYREG_GPIO_PRT0_INTR
N#define OP2_INT__MASK 0x40u
N#define OP2_INT__PC CYREG_GPIO_PRT0_PC
N#define OP2_INT__PC2 CYREG_GPIO_PRT0_PC2
N#define OP2_INT__PORT 0u
N#define OP2_INT__PS CYREG_GPIO_PRT0_PS
N#define OP2_INT__SHIFT 6u
N
N/* OP3_INT */
N#define OP3_INT__0__DR CYREG_GPIO_PRT5_DR
N#define OP3_INT__0__DR_CLR CYREG_GPIO_PRT5_DR_CLR
N#define OP3_INT__0__DR_INV CYREG_GPIO_PRT5_DR_INV
N#define OP3_INT__0__DR_SET CYREG_GPIO_PRT5_DR_SET
N#define OP3_INT__0__HSIOM CYREG_HSIOM_PORT_SEL5
N#define OP3_INT__0__HSIOM_MASK 0x00000F00u
N#define OP3_INT__0__HSIOM_SHIFT 8u
N#define OP3_INT__0__INTCFG CYREG_GPIO_PRT5_INTR_CFG
N#define OP3_INT__0__INTR CYREG_GPIO_PRT5_INTR
N#define OP3_INT__0__INTR_CFG CYREG_GPIO_PRT5_INTR_CFG
N#define OP3_INT__0__INTSTAT CYREG_GPIO_PRT5_INTR
N#define OP3_INT__0__MASK 0x04u
N#define OP3_INT__0__PC CYREG_GPIO_PRT5_PC
N#define OP3_INT__0__PC2 CYREG_GPIO_PRT5_PC2
N#define OP3_INT__0__PORT 5u
N#define OP3_INT__0__PS CYREG_GPIO_PRT5_PS
N#define OP3_INT__0__SHIFT 2u
N#define OP3_INT__DR CYREG_GPIO_PRT5_DR
N#define OP3_INT__DR_CLR CYREG_GPIO_PRT5_DR_CLR
N#define OP3_INT__DR_INV CYREG_GPIO_PRT5_DR_INV
N#define OP3_INT__DR_SET CYREG_GPIO_PRT5_DR_SET
N#define OP3_INT__INTCFG CYREG_GPIO_PRT5_INTR_CFG
N#define OP3_INT__INTR CYREG_GPIO_PRT5_INTR
N#define OP3_INT__INTR_CFG CYREG_GPIO_PRT5_INTR_CFG
N#define OP3_INT__INTSTAT CYREG_GPIO_PRT5_INTR
N#define OP3_INT__MASK 0x04u
N#define OP3_INT__PC CYREG_GPIO_PRT5_PC
N#define OP3_INT__PC2 CYREG_GPIO_PRT5_PC2
N#define OP3_INT__PORT 5u
N#define OP3_INT__PS CYREG_GPIO_PRT5_PS
N#define OP3_INT__SHIFT 2u
N
N/* TEST_IO */
N#define TEST_IO__0__DR CYREG_GPIO_PRT0_DR
N#define TEST_IO__0__DR_CLR CYREG_GPIO_PRT0_DR_CLR
N#define TEST_IO__0__DR_INV CYREG_GPIO_PRT0_DR_INV
N#define TEST_IO__0__DR_SET CYREG_GPIO_PRT0_DR_SET
N#define TEST_IO__0__HSIOM CYREG_HSIOM_PORT_SEL0
N#define TEST_IO__0__HSIOM_MASK 0xF0000000u
N#define TEST_IO__0__HSIOM_SHIFT 28u
N#define TEST_IO__0__INTCFG CYREG_GPIO_PRT0_INTR_CFG
N#define TEST_IO__0__INTR CYREG_GPIO_PRT0_INTR
N#define TEST_IO__0__INTR_CFG CYREG_GPIO_PRT0_INTR_CFG
N#define TEST_IO__0__INTSTAT CYREG_GPIO_PRT0_INTR
N#define TEST_IO__0__MASK 0x80u
N#define TEST_IO__0__PC CYREG_GPIO_PRT0_PC
N#define TEST_IO__0__PC2 CYREG_GPIO_PRT0_PC2
N#define TEST_IO__0__PORT 0u
N#define TEST_IO__0__PS CYREG_GPIO_PRT0_PS
N#define TEST_IO__0__SHIFT 7u
N#define TEST_IO__DR CYREG_GPIO_PRT0_DR
N#define TEST_IO__DR_CLR CYREG_GPIO_PRT0_DR_CLR
N#define TEST_IO__DR_INV CYREG_GPIO_PRT0_DR_INV
N#define TEST_IO__DR_SET CYREG_GPIO_PRT0_DR_SET
N#define TEST_IO__INTCFG CYREG_GPIO_PRT0_INTR_CFG
N#define TEST_IO__INTR CYREG_GPIO_PRT0_INTR
N#define TEST_IO__INTR_CFG CYREG_GPIO_PRT0_INTR_CFG
N#define TEST_IO__INTSTAT CYREG_GPIO_PRT0_INTR
N#define TEST_IO__MASK 0x80u
N#define TEST_IO__PC CYREG_GPIO_PRT0_PC
N#define TEST_IO__PC2 CYREG_GPIO_PRT0_PC2
N#define TEST_IO__PORT 0u
N#define TEST_IO__PS CYREG_GPIO_PRT0_PS
N#define TEST_IO__SHIFT 7u
N
N/* isr_wdt */
N#define isr_wdt__INTC_CLR_EN_REG CYREG_CM0P_ICER
N#define isr_wdt__INTC_CLR_PD_REG CYREG_CM0P_ICPR
N#define isr_wdt__INTC_MASK 0x40u
N#define isr_wdt__INTC_NUMBER 6u
N#define isr_wdt__INTC_PRIOR_MASK 0xC00000u
N#define isr_wdt__INTC_PRIOR_NUM 3u
N#define isr_wdt__INTC_PRIOR_REG CYREG_CM0P_IPR1
N#define isr_wdt__INTC_SET_EN_REG CYREG_CM0P_ISER
N#define isr_wdt__INTC_SET_PD_REG CYREG_CM0P_ISPR
N
N/* CapSense */
N#define CapSense_Cmod__0__DR CYREG_GPIO_PRT4_DR
N#define CapSense_Cmod__0__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define CapSense_Cmod__0__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define CapSense_Cmod__0__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define CapSense_Cmod__0__HSIOM CYREG_HSIOM_PORT_SEL4
N#define CapSense_Cmod__0__HSIOM_MASK 0x00000F00u
N#define CapSense_Cmod__0__HSIOM_SHIFT 8u
N#define CapSense_Cmod__0__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Cmod__0__INTR CYREG_GPIO_PRT4_INTR
N#define CapSense_Cmod__0__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Cmod__0__INTSTAT CYREG_GPIO_PRT4_INTR
N#define CapSense_Cmod__0__MASK 0x04u
N#define CapSense_Cmod__0__PC CYREG_GPIO_PRT4_PC
N#define CapSense_Cmod__0__PC2 CYREG_GPIO_PRT4_PC2
N#define CapSense_Cmod__0__PORT 4u
N#define CapSense_Cmod__0__PS CYREG_GPIO_PRT4_PS
N#define CapSense_Cmod__0__SHIFT 2u
N#define CapSense_Cmod__Cmod__DR CYREG_GPIO_PRT4_DR
N#define CapSense_Cmod__Cmod__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define CapSense_Cmod__Cmod__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define CapSense_Cmod__Cmod__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define CapSense_Cmod__Cmod__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Cmod__Cmod__INTR CYREG_GPIO_PRT4_INTR
N#define CapSense_Cmod__Cmod__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Cmod__Cmod__INTSTAT CYREG_GPIO_PRT4_INTR
N#define CapSense_Cmod__Cmod__MASK 0x04u
N#define CapSense_Cmod__Cmod__PC CYREG_GPIO_PRT4_PC
N#define CapSense_Cmod__Cmod__PC2 CYREG_GPIO_PRT4_PC2
N#define CapSense_Cmod__Cmod__PORT 4u
N#define CapSense_Cmod__Cmod__PS CYREG_GPIO_PRT4_PS
N#define CapSense_Cmod__Cmod__SHIFT 2u
N#define CapSense_Cmod__DR CYREG_GPIO_PRT4_DR
N#define CapSense_Cmod__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define CapSense_Cmod__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define CapSense_Cmod__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define CapSense_Cmod__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Cmod__INTR CYREG_GPIO_PRT4_INTR
N#define CapSense_Cmod__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Cmod__INTSTAT CYREG_GPIO_PRT4_INTR
N#define CapSense_Cmod__MASK 0x04u
N#define CapSense_Cmod__PC CYREG_GPIO_PRT4_PC
N#define CapSense_Cmod__PC2 CYREG_GPIO_PRT4_PC2
N#define CapSense_Cmod__PORT 4u
N#define CapSense_Cmod__PS CYREG_GPIO_PRT4_PS
N#define CapSense_Cmod__SHIFT 2u
N#define CapSense_CSD__ADC_CTL CYREG_CSD_ADC_CTL
N#define CapSense_CSD__CMOD_PAD 1u
N#define CapSense_CSD__CSD_CONFIG CYREG_CSD_CONFIG
N#define CapSense_CSD__CSD_INTR CYREG_CSD_INTR
N#define CapSense_CSD__CSD_INTR_SET CYREG_CSD_INTR_SET
N#define CapSense_CSD__CSD_NUMBER 0u
N#define CapSense_CSD__CSD_STATUS CYREG_CSD_STATUS
N#define CapSense_CSD__CSDCMP CYREG_CSD_CSDCMP
N#define CapSense_CSD__CSH_TANK_PAD 2u
N#define CapSense_CSD__CSHIELD_PAD 4u
N#define CapSense_CSD__DEDICATED_IO0 CapSense_CSD__CMOD_PAD
N#define CapSense_CSD__HSCMP CYREG_CSD_HSCMP
N#define CapSense_CSD__INTR_MASK CYREG_CSD_INTR_MASK
N#define CapSense_CSD__REFGEN CYREG_CSD_REFGEN
N#define CapSense_CSD__RESULT_VAL1 CYREG_CSD_RESULT_VAL1
N#define CapSense_CSD__RESULT_VAL2 CYREG_CSD_RESULT_VAL2
N#define CapSense_CSD__SENSE_DUTY CYREG_CSD_SENSE_DUTY
N#define CapSense_CSD__SENSE_PERIOD CYREG_CSD_SENSE_PERIOD
N#define CapSense_CSD__SEQ_INIT_CNT CYREG_CSD_SEQ_INIT_CNT
N#define CapSense_CSD__SEQ_NORM_CNT CYREG_CSD_SEQ_NORM_CNT
N#define CapSense_CSD__SEQ_START CYREG_CSD_SEQ_START
N#define CapSense_CSD__SEQ_TIME CYREG_CSD_SEQ_TIME
N#define CapSense_CSD__SW_AMUXBUF_SEL CYREG_CSD_SW_AMUXBUF_SEL
N#define CapSense_CSD__SW_BYP_SEL CYREG_CSD_SW_BYP_SEL
N#define CapSense_CSD__SW_CMP_N_SEL CYREG_CSD_SW_CMP_N_SEL
N#define CapSense_CSD__SW_CMP_P_SEL CYREG_CSD_SW_CMP_P_SEL
N#define CapSense_CSD__SW_DSI_SEL CYREG_CSD_SW_DSI_SEL
N#define CapSense_CSD__SW_FW_MOD_SEL CYREG_CSD_SW_FW_MOD_SEL
N#define CapSense_CSD__SW_FW_TANK_SEL CYREG_CSD_SW_FW_TANK_SEL
N#define CapSense_CSD__SW_HS_N_SEL CYREG_CSD_SW_HS_N_SEL
N#define CapSense_CSD__SW_HS_P_SEL CYREG_CSD_SW_HS_P_SEL
N#define CapSense_CSD__SW_REFGEN_SEL CYREG_CSD_SW_REFGEN_SEL
N#define CapSense_CSD__SW_RES CYREG_CSD_SW_RES
N#define CapSense_CSD__SW_SHIELD_SEL CYREG_CSD_SW_SHIELD_SEL
N#define CapSense_CSD__VREF_EXT_PAD 8u
N#define CapSense_IDACComp__CONFIG CYREG_CSD_CONFIG
N#define CapSense_IDACComp__IDAC CYREG_CSD_IDACB
N#define CapSense_IDACComp__POSITION 1u
N#define CapSense_IDACMod__CONFIG CYREG_CSD_CONFIG
N#define CapSense_IDACMod__IDAC CYREG_CSD_IDACA
N#define CapSense_IDACMod__POSITION 0u
N#define CapSense_ISR__INTC_CLR_EN_REG CYREG_CM0P_ICER
N#define CapSense_ISR__INTC_CLR_PD_REG CYREG_CM0P_ICPR
N#define CapSense_ISR__INTC_MASK 0x10000u
N#define CapSense_ISR__INTC_NUMBER 16u
N#define CapSense_ISR__INTC_PRIOR_MASK 0xC0u
N#define CapSense_ISR__INTC_PRIOR_NUM 3u
N#define CapSense_ISR__INTC_PRIOR_REG CYREG_CM0P_IPR4
N#define CapSense_ISR__INTC_SET_EN_REG CYREG_CM0P_ISER
N#define CapSense_ISR__INTC_SET_PD_REG CYREG_CM0P_ISPR
N#define CapSense_ModClk__CTRL_REGISTER CYREG_PERI_PCLK_CTL5
N#define CapSense_ModClk__DIV_ID 0x00000040u
N#define CapSense_ModClk__DIV_REGISTER CYREG_PERI_DIV_16_CTL0
N#define CapSense_ModClk__PA_DIV_ID 0x000000FFu
N#define CapSense_Sns__0__DR CYREG_GPIO_PRT4_DR
N#define CapSense_Sns__0__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define CapSense_Sns__0__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define CapSense_Sns__0__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define CapSense_Sns__0__HSIOM CYREG_HSIOM_PORT_SEL4
N#define CapSense_Sns__0__HSIOM_MASK 0x0000F000u
N#define CapSense_Sns__0__HSIOM_SHIFT 12u
N#define CapSense_Sns__0__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Sns__0__INTR CYREG_GPIO_PRT4_INTR
N#define CapSense_Sns__0__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Sns__0__INTSTAT CYREG_GPIO_PRT4_INTR
N#define CapSense_Sns__0__MASK 0x08u
N#define CapSense_Sns__0__PC CYREG_GPIO_PRT4_PC
N#define CapSense_Sns__0__PC2 CYREG_GPIO_PRT4_PC2
N#define CapSense_Sns__0__PORT 4u
N#define CapSense_Sns__0__PS CYREG_GPIO_PRT4_PS
N#define CapSense_Sns__0__SHIFT 3u
N#define CapSense_Sns__1__DR CYREG_GPIO_PRT4_DR
N#define CapSense_Sns__1__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define CapSense_Sns__1__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define CapSense_Sns__1__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define CapSense_Sns__1__HSIOM CYREG_HSIOM_PORT_SEL4
N#define CapSense_Sns__1__HSIOM_MASK 0x0000000Fu
N#define CapSense_Sns__1__HSIOM_SHIFT 0u
N#define CapSense_Sns__1__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Sns__1__INTR CYREG_GPIO_PRT4_INTR
N#define CapSense_Sns__1__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Sns__1__INTSTAT CYREG_GPIO_PRT4_INTR
N#define CapSense_Sns__1__MASK 0x01u
N#define CapSense_Sns__1__PC CYREG_GPIO_PRT4_PC
N#define CapSense_Sns__1__PC2 CYREG_GPIO_PRT4_PC2
N#define CapSense_Sns__1__PORT 4u
N#define CapSense_Sns__1__PS CYREG_GPIO_PRT4_PS
N#define CapSense_Sns__1__SHIFT 0u
N#define CapSense_Sns__10__DR CYREG_GPIO_PRT6_DR
N#define CapSense_Sns__10__DR_CLR CYREG_GPIO_PRT6_DR_CLR
N#define CapSense_Sns__10__DR_INV CYREG_GPIO_PRT6_DR_INV
N#define CapSense_Sns__10__DR_SET CYREG_GPIO_PRT6_DR_SET
N#define CapSense_Sns__10__HSIOM CYREG_HSIOM_PORT_SEL6
N#define CapSense_Sns__10__HSIOM_MASK 0x000F0000u
N#define CapSense_Sns__10__HSIOM_SHIFT 16u
N#define CapSense_Sns__10__INTCFG CYREG_GPIO_PRT6_INTR_CFG
N#define CapSense_Sns__10__INTR CYREG_GPIO_PRT6_INTR
N#define CapSense_Sns__10__INTR_CFG CYREG_GPIO_PRT6_INTR_CFG
N#define CapSense_Sns__10__INTSTAT CYREG_GPIO_PRT6_INTR
N#define CapSense_Sns__10__MASK 0x10u
N#define CapSense_Sns__10__PC CYREG_GPIO_PRT6_PC
N#define CapSense_Sns__10__PC2 CYREG_GPIO_PRT6_PC2
N#define CapSense_Sns__10__PORT 6u
N#define CapSense_Sns__10__PS CYREG_GPIO_PRT6_PS
N#define CapSense_Sns__10__SHIFT 4u
N#define CapSense_Sns__11__DR CYREG_GPIO_PRT6_DR
N#define CapSense_Sns__11__DR_CLR CYREG_GPIO_PRT6_DR_CLR
N#define CapSense_Sns__11__DR_INV CYREG_GPIO_PRT6_DR_INV
N#define CapSense_Sns__11__DR_SET CYREG_GPIO_PRT6_DR_SET
N#define CapSense_Sns__11__HSIOM CYREG_HSIOM_PORT_SEL6
N#define CapSense_Sns__11__HSIOM_MASK 0x00000F00u
N#define CapSense_Sns__11__HSIOM_SHIFT 8u
N#define CapSense_Sns__11__INTCFG CYREG_GPIO_PRT6_INTR_CFG
N#define CapSense_Sns__11__INTR CYREG_GPIO_PRT6_INTR
N#define CapSense_Sns__11__INTR_CFG CYREG_GPIO_PRT6_INTR_CFG
N#define CapSense_Sns__11__INTSTAT CYREG_GPIO_PRT6_INTR
N#define CapSense_Sns__11__MASK 0x04u
N#define CapSense_Sns__11__PC CYREG_GPIO_PRT6_PC
N#define CapSense_Sns__11__PC2 CYREG_GPIO_PRT6_PC2
N#define CapSense_Sns__11__PORT 6u
N#define CapSense_Sns__11__PS CYREG_GPIO_PRT6_PS
N#define CapSense_Sns__11__SHIFT 2u
N#define CapSense_Sns__2__DR CYREG_GPIO_PRT4_DR
N#define CapSense_Sns__2__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define CapSense_Sns__2__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define CapSense_Sns__2__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define CapSense_Sns__2__HSIOM CYREG_HSIOM_PORT_SEL4
N#define CapSense_Sns__2__HSIOM_MASK 0x000000F0u
N#define CapSense_Sns__2__HSIOM_SHIFT 4u
N#define CapSense_Sns__2__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Sns__2__INTR CYREG_GPIO_PRT4_INTR
N#define CapSense_Sns__2__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Sns__2__INTSTAT CYREG_GPIO_PRT4_INTR
N#define CapSense_Sns__2__MASK 0x02u
N#define CapSense_Sns__2__PC CYREG_GPIO_PRT4_PC
N#define CapSense_Sns__2__PC2 CYREG_GPIO_PRT4_PC2
N#define CapSense_Sns__2__PORT 4u
N#define CapSense_Sns__2__PS CYREG_GPIO_PRT4_PS
N#define CapSense_Sns__2__SHIFT 1u
N#define CapSense_Sns__3__DR CYREG_GPIO_PRT3_DR
N#define CapSense_Sns__3__DR_CLR CYREG_GPIO_PRT3_DR_CLR
N#define CapSense_Sns__3__DR_INV CYREG_GPIO_PRT3_DR_INV
N#define CapSense_Sns__3__DR_SET CYREG_GPIO_PRT3_DR_SET
N#define CapSense_Sns__3__HSIOM CYREG_HSIOM_PORT_SEL3
N#define CapSense_Sns__3__HSIOM_MASK 0xF0000000u
N#define CapSense_Sns__3__HSIOM_SHIFT 28u
N#define CapSense_Sns__3__INTCFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__3__INTR CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__3__INTR_CFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__3__INTSTAT CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__3__MASK 0x80u
N#define CapSense_Sns__3__PC CYREG_GPIO_PRT3_PC
N#define CapSense_Sns__3__PC2 CYREG_GPIO_PRT3_PC2
N#define CapSense_Sns__3__PORT 3u
N#define CapSense_Sns__3__PS CYREG_GPIO_PRT3_PS
N#define CapSense_Sns__3__SHIFT 7u
N#define CapSense_Sns__4__DR CYREG_GPIO_PRT3_DR
N#define CapSense_Sns__4__DR_CLR CYREG_GPIO_PRT3_DR_CLR
N#define CapSense_Sns__4__DR_INV CYREG_GPIO_PRT3_DR_INV
N#define CapSense_Sns__4__DR_SET CYREG_GPIO_PRT3_DR_SET
N#define CapSense_Sns__4__HSIOM CYREG_HSIOM_PORT_SEL3
N#define CapSense_Sns__4__HSIOM_MASK 0x0F000000u
N#define CapSense_Sns__4__HSIOM_SHIFT 24u
N#define CapSense_Sns__4__INTCFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__4__INTR CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__4__INTR_CFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__4__INTSTAT CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__4__MASK 0x40u
N#define CapSense_Sns__4__PC CYREG_GPIO_PRT3_PC
N#define CapSense_Sns__4__PC2 CYREG_GPIO_PRT3_PC2
N#define CapSense_Sns__4__PORT 3u
N#define CapSense_Sns__4__PS CYREG_GPIO_PRT3_PS
N#define CapSense_Sns__4__SHIFT 6u
N#define CapSense_Sns__5__DR CYREG_GPIO_PRT3_DR
N#define CapSense_Sns__5__DR_CLR CYREG_GPIO_PRT3_DR_CLR
N#define CapSense_Sns__5__DR_INV CYREG_GPIO_PRT3_DR_INV
N#define CapSense_Sns__5__DR_SET CYREG_GPIO_PRT3_DR_SET
N#define CapSense_Sns__5__HSIOM CYREG_HSIOM_PORT_SEL3
N#define CapSense_Sns__5__HSIOM_MASK 0x00F00000u
N#define CapSense_Sns__5__HSIOM_SHIFT 20u
N#define CapSense_Sns__5__INTCFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__5__INTR CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__5__INTR_CFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__5__INTSTAT CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__5__MASK 0x20u
N#define CapSense_Sns__5__PC CYREG_GPIO_PRT3_PC
N#define CapSense_Sns__5__PC2 CYREG_GPIO_PRT3_PC2
N#define CapSense_Sns__5__PORT 3u
N#define CapSense_Sns__5__PS CYREG_GPIO_PRT3_PS
N#define CapSense_Sns__5__SHIFT 5u
N#define CapSense_Sns__6__DR CYREG_GPIO_PRT3_DR
N#define CapSense_Sns__6__DR_CLR CYREG_GPIO_PRT3_DR_CLR
N#define CapSense_Sns__6__DR_INV CYREG_GPIO_PRT3_DR_INV
N#define CapSense_Sns__6__DR_SET CYREG_GPIO_PRT3_DR_SET
N#define CapSense_Sns__6__HSIOM CYREG_HSIOM_PORT_SEL3
N#define CapSense_Sns__6__HSIOM_MASK 0x000F0000u
N#define CapSense_Sns__6__HSIOM_SHIFT 16u
N#define CapSense_Sns__6__INTCFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__6__INTR CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__6__INTR_CFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__6__INTSTAT CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__6__MASK 0x10u
N#define CapSense_Sns__6__PC CYREG_GPIO_PRT3_PC
N#define CapSense_Sns__6__PC2 CYREG_GPIO_PRT3_PC2
N#define CapSense_Sns__6__PORT 3u
N#define CapSense_Sns__6__PS CYREG_GPIO_PRT3_PS
N#define CapSense_Sns__6__SHIFT 4u
N#define CapSense_Sns__7__DR CYREG_GPIO_PRT3_DR
N#define CapSense_Sns__7__DR_CLR CYREG_GPIO_PRT3_DR_CLR
N#define CapSense_Sns__7__DR_INV CYREG_GPIO_PRT3_DR_INV
N#define CapSense_Sns__7__DR_SET CYREG_GPIO_PRT3_DR_SET
N#define CapSense_Sns__7__HSIOM CYREG_HSIOM_PORT_SEL3
N#define CapSense_Sns__7__HSIOM_MASK 0x000000F0u
N#define CapSense_Sns__7__HSIOM_SHIFT 4u
N#define CapSense_Sns__7__INTCFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__7__INTR CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__7__INTR_CFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__7__INTSTAT CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__7__MASK 0x02u
N#define CapSense_Sns__7__PC CYREG_GPIO_PRT3_PC
N#define CapSense_Sns__7__PC2 CYREG_GPIO_PRT3_PC2
N#define CapSense_Sns__7__PORT 3u
N#define CapSense_Sns__7__PS CYREG_GPIO_PRT3_PS
N#define CapSense_Sns__7__SHIFT 1u
N#define CapSense_Sns__8__DR CYREG_GPIO_PRT3_DR
N#define CapSense_Sns__8__DR_CLR CYREG_GPIO_PRT3_DR_CLR
N#define CapSense_Sns__8__DR_INV CYREG_GPIO_PRT3_DR_INV
N#define CapSense_Sns__8__DR_SET CYREG_GPIO_PRT3_DR_SET
N#define CapSense_Sns__8__HSIOM CYREG_HSIOM_PORT_SEL3
N#define CapSense_Sns__8__HSIOM_MASK 0x0000000Fu
N#define CapSense_Sns__8__HSIOM_SHIFT 0u
N#define CapSense_Sns__8__INTCFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__8__INTR CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__8__INTR_CFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__8__INTSTAT CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__8__MASK 0x01u
N#define CapSense_Sns__8__PC CYREG_GPIO_PRT3_PC
N#define CapSense_Sns__8__PC2 CYREG_GPIO_PRT3_PC2
N#define CapSense_Sns__8__PORT 3u
N#define CapSense_Sns__8__PS CYREG_GPIO_PRT3_PS
N#define CapSense_Sns__8__SHIFT 0u
N#define CapSense_Sns__9__DR CYREG_GPIO_PRT6_DR
N#define CapSense_Sns__9__DR_CLR CYREG_GPIO_PRT6_DR_CLR
N#define CapSense_Sns__9__DR_INV CYREG_GPIO_PRT6_DR_INV
N#define CapSense_Sns__9__DR_SET CYREG_GPIO_PRT6_DR_SET
N#define CapSense_Sns__9__HSIOM CYREG_HSIOM_PORT_SEL6
N#define CapSense_Sns__9__HSIOM_MASK 0x00F00000u
N#define CapSense_Sns__9__HSIOM_SHIFT 20u
N#define CapSense_Sns__9__INTCFG CYREG_GPIO_PRT6_INTR_CFG
N#define CapSense_Sns__9__INTR CYREG_GPIO_PRT6_INTR
N#define CapSense_Sns__9__INTR_CFG CYREG_GPIO_PRT6_INTR_CFG
N#define CapSense_Sns__9__INTSTAT CYREG_GPIO_PRT6_INTR
N#define CapSense_Sns__9__MASK 0x20u
N#define CapSense_Sns__9__PC CYREG_GPIO_PRT6_PC
N#define CapSense_Sns__9__PC2 CYREG_GPIO_PRT6_PC2
N#define CapSense_Sns__9__PORT 6u
N#define CapSense_Sns__9__PS CYREG_GPIO_PRT6_PS
N#define CapSense_Sns__9__SHIFT 5u
N#define CapSense_Sns__Button0_Sns0__DR CYREG_GPIO_PRT4_DR
N#define CapSense_Sns__Button0_Sns0__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define CapSense_Sns__Button0_Sns0__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define CapSense_Sns__Button0_Sns0__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define CapSense_Sns__Button0_Sns0__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Sns__Button0_Sns0__INTR CYREG_GPIO_PRT4_INTR
N#define CapSense_Sns__Button0_Sns0__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Sns__Button0_Sns0__INTSTAT CYREG_GPIO_PRT4_INTR
N#define CapSense_Sns__Button0_Sns0__MASK 0x08u
N#define CapSense_Sns__Button0_Sns0__PC CYREG_GPIO_PRT4_PC
N#define CapSense_Sns__Button0_Sns0__PC2 CYREG_GPIO_PRT4_PC2
N#define CapSense_Sns__Button0_Sns0__PORT 4u
N#define CapSense_Sns__Button0_Sns0__PS CYREG_GPIO_PRT4_PS
N#define CapSense_Sns__Button0_Sns0__SHIFT 3u
N#define CapSense_Sns__Button1_Sns0__DR CYREG_GPIO_PRT4_DR
N#define CapSense_Sns__Button1_Sns0__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define CapSense_Sns__Button1_Sns0__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define CapSense_Sns__Button1_Sns0__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define CapSense_Sns__Button1_Sns0__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Sns__Button1_Sns0__INTR CYREG_GPIO_PRT4_INTR
N#define CapSense_Sns__Button1_Sns0__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Sns__Button1_Sns0__INTSTAT CYREG_GPIO_PRT4_INTR
N#define CapSense_Sns__Button1_Sns0__MASK 0x01u
N#define CapSense_Sns__Button1_Sns0__PC CYREG_GPIO_PRT4_PC
N#define CapSense_Sns__Button1_Sns0__PC2 CYREG_GPIO_PRT4_PC2
N#define CapSense_Sns__Button1_Sns0__PORT 4u
N#define CapSense_Sns__Button1_Sns0__PS CYREG_GPIO_PRT4_PS
N#define CapSense_Sns__Button1_Sns0__SHIFT 0u
N#define CapSense_Sns__Button10_Sns0__DR CYREG_GPIO_PRT6_DR
N#define CapSense_Sns__Button10_Sns0__DR_CLR CYREG_GPIO_PRT6_DR_CLR
N#define CapSense_Sns__Button10_Sns0__DR_INV CYREG_GPIO_PRT6_DR_INV
N#define CapSense_Sns__Button10_Sns0__DR_SET CYREG_GPIO_PRT6_DR_SET
N#define CapSense_Sns__Button10_Sns0__INTCFG CYREG_GPIO_PRT6_INTR_CFG
N#define CapSense_Sns__Button10_Sns0__INTR CYREG_GPIO_PRT6_INTR
N#define CapSense_Sns__Button10_Sns0__INTR_CFG CYREG_GPIO_PRT6_INTR_CFG
N#define CapSense_Sns__Button10_Sns0__INTSTAT CYREG_GPIO_PRT6_INTR
N#define CapSense_Sns__Button10_Sns0__MASK 0x10u
N#define CapSense_Sns__Button10_Sns0__PC CYREG_GPIO_PRT6_PC
N#define CapSense_Sns__Button10_Sns0__PC2 CYREG_GPIO_PRT6_PC2
N#define CapSense_Sns__Button10_Sns0__PORT 6u
N#define CapSense_Sns__Button10_Sns0__PS CYREG_GPIO_PRT6_PS
N#define CapSense_Sns__Button10_Sns0__SHIFT 4u
N#define CapSense_Sns__Button11_Sns0__DR CYREG_GPIO_PRT6_DR
N#define CapSense_Sns__Button11_Sns0__DR_CLR CYREG_GPIO_PRT6_DR_CLR
N#define CapSense_Sns__Button11_Sns0__DR_INV CYREG_GPIO_PRT6_DR_INV
N#define CapSense_Sns__Button11_Sns0__DR_SET CYREG_GPIO_PRT6_DR_SET
N#define CapSense_Sns__Button11_Sns0__INTCFG CYREG_GPIO_PRT6_INTR_CFG
N#define CapSense_Sns__Button11_Sns0__INTR CYREG_GPIO_PRT6_INTR
N#define CapSense_Sns__Button11_Sns0__INTR_CFG CYREG_GPIO_PRT6_INTR_CFG
N#define CapSense_Sns__Button11_Sns0__INTSTAT CYREG_GPIO_PRT6_INTR
N#define CapSense_Sns__Button11_Sns0__MASK 0x04u
N#define CapSense_Sns__Button11_Sns0__PC CYREG_GPIO_PRT6_PC
N#define CapSense_Sns__Button11_Sns0__PC2 CYREG_GPIO_PRT6_PC2
N#define CapSense_Sns__Button11_Sns0__PORT 6u
N#define CapSense_Sns__Button11_Sns0__PS CYREG_GPIO_PRT6_PS
N#define CapSense_Sns__Button11_Sns0__SHIFT 2u
N#define CapSense_Sns__Button2_Sns0__DR CYREG_GPIO_PRT4_DR
N#define CapSense_Sns__Button2_Sns0__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define CapSense_Sns__Button2_Sns0__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define CapSense_Sns__Button2_Sns0__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define CapSense_Sns__Button2_Sns0__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Sns__Button2_Sns0__INTR CYREG_GPIO_PRT4_INTR
N#define CapSense_Sns__Button2_Sns0__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define CapSense_Sns__Button2_Sns0__INTSTAT CYREG_GPIO_PRT4_INTR
N#define CapSense_Sns__Button2_Sns0__MASK 0x02u
N#define CapSense_Sns__Button2_Sns0__PC CYREG_GPIO_PRT4_PC
N#define CapSense_Sns__Button2_Sns0__PC2 CYREG_GPIO_PRT4_PC2
N#define CapSense_Sns__Button2_Sns0__PORT 4u
N#define CapSense_Sns__Button2_Sns0__PS CYREG_GPIO_PRT4_PS
N#define CapSense_Sns__Button2_Sns0__SHIFT 1u
N#define CapSense_Sns__Button3_Sns0__DR CYREG_GPIO_PRT3_DR
N#define CapSense_Sns__Button3_Sns0__DR_CLR CYREG_GPIO_PRT3_DR_CLR
N#define CapSense_Sns__Button3_Sns0__DR_INV CYREG_GPIO_PRT3_DR_INV
N#define CapSense_Sns__Button3_Sns0__DR_SET CYREG_GPIO_PRT3_DR_SET
N#define CapSense_Sns__Button3_Sns0__INTCFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__Button3_Sns0__INTR CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__Button3_Sns0__INTR_CFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__Button3_Sns0__INTSTAT CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__Button3_Sns0__MASK 0x80u
N#define CapSense_Sns__Button3_Sns0__PC CYREG_GPIO_PRT3_PC
N#define CapSense_Sns__Button3_Sns0__PC2 CYREG_GPIO_PRT3_PC2
N#define CapSense_Sns__Button3_Sns0__PORT 3u
N#define CapSense_Sns__Button3_Sns0__PS CYREG_GPIO_PRT3_PS
N#define CapSense_Sns__Button3_Sns0__SHIFT 7u
N#define CapSense_Sns__Button4_Sns0__DR CYREG_GPIO_PRT3_DR
N#define CapSense_Sns__Button4_Sns0__DR_CLR CYREG_GPIO_PRT3_DR_CLR
N#define CapSense_Sns__Button4_Sns0__DR_INV CYREG_GPIO_PRT3_DR_INV
N#define CapSense_Sns__Button4_Sns0__DR_SET CYREG_GPIO_PRT3_DR_SET
N#define CapSense_Sns__Button4_Sns0__INTCFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__Button4_Sns0__INTR CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__Button4_Sns0__INTR_CFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__Button4_Sns0__INTSTAT CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__Button4_Sns0__MASK 0x40u
N#define CapSense_Sns__Button4_Sns0__PC CYREG_GPIO_PRT3_PC
N#define CapSense_Sns__Button4_Sns0__PC2 CYREG_GPIO_PRT3_PC2
N#define CapSense_Sns__Button4_Sns0__PORT 3u
N#define CapSense_Sns__Button4_Sns0__PS CYREG_GPIO_PRT3_PS
N#define CapSense_Sns__Button4_Sns0__SHIFT 6u
N#define CapSense_Sns__Button5_Sns0__DR CYREG_GPIO_PRT3_DR
N#define CapSense_Sns__Button5_Sns0__DR_CLR CYREG_GPIO_PRT3_DR_CLR
N#define CapSense_Sns__Button5_Sns0__DR_INV CYREG_GPIO_PRT3_DR_INV
N#define CapSense_Sns__Button5_Sns0__DR_SET CYREG_GPIO_PRT3_DR_SET
N#define CapSense_Sns__Button5_Sns0__INTCFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__Button5_Sns0__INTR CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__Button5_Sns0__INTR_CFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__Button5_Sns0__INTSTAT CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__Button5_Sns0__MASK 0x20u
N#define CapSense_Sns__Button5_Sns0__PC CYREG_GPIO_PRT3_PC
N#define CapSense_Sns__Button5_Sns0__PC2 CYREG_GPIO_PRT3_PC2
N#define CapSense_Sns__Button5_Sns0__PORT 3u
N#define CapSense_Sns__Button5_Sns0__PS CYREG_GPIO_PRT3_PS
N#define CapSense_Sns__Button5_Sns0__SHIFT 5u
N#define CapSense_Sns__Button6_Sns0__DR CYREG_GPIO_PRT3_DR
N#define CapSense_Sns__Button6_Sns0__DR_CLR CYREG_GPIO_PRT3_DR_CLR
N#define CapSense_Sns__Button6_Sns0__DR_INV CYREG_GPIO_PRT3_DR_INV
N#define CapSense_Sns__Button6_Sns0__DR_SET CYREG_GPIO_PRT3_DR_SET
N#define CapSense_Sns__Button6_Sns0__INTCFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__Button6_Sns0__INTR CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__Button6_Sns0__INTR_CFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__Button6_Sns0__INTSTAT CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__Button6_Sns0__MASK 0x10u
N#define CapSense_Sns__Button6_Sns0__PC CYREG_GPIO_PRT3_PC
N#define CapSense_Sns__Button6_Sns0__PC2 CYREG_GPIO_PRT3_PC2
N#define CapSense_Sns__Button6_Sns0__PORT 3u
N#define CapSense_Sns__Button6_Sns0__PS CYREG_GPIO_PRT3_PS
N#define CapSense_Sns__Button6_Sns0__SHIFT 4u
N#define CapSense_Sns__Button7_Sns0__DR CYREG_GPIO_PRT3_DR
N#define CapSense_Sns__Button7_Sns0__DR_CLR CYREG_GPIO_PRT3_DR_CLR
N#define CapSense_Sns__Button7_Sns0__DR_INV CYREG_GPIO_PRT3_DR_INV
N#define CapSense_Sns__Button7_Sns0__DR_SET CYREG_GPIO_PRT3_DR_SET
N#define CapSense_Sns__Button7_Sns0__INTCFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__Button7_Sns0__INTR CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__Button7_Sns0__INTR_CFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__Button7_Sns0__INTSTAT CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__Button7_Sns0__MASK 0x02u
N#define CapSense_Sns__Button7_Sns0__PC CYREG_GPIO_PRT3_PC
N#define CapSense_Sns__Button7_Sns0__PC2 CYREG_GPIO_PRT3_PC2
N#define CapSense_Sns__Button7_Sns0__PORT 3u
N#define CapSense_Sns__Button7_Sns0__PS CYREG_GPIO_PRT3_PS
N#define CapSense_Sns__Button7_Sns0__SHIFT 1u
N#define CapSense_Sns__Button8_Sns0__DR CYREG_GPIO_PRT3_DR
N#define CapSense_Sns__Button8_Sns0__DR_CLR CYREG_GPIO_PRT3_DR_CLR
N#define CapSense_Sns__Button8_Sns0__DR_INV CYREG_GPIO_PRT3_DR_INV
N#define CapSense_Sns__Button8_Sns0__DR_SET CYREG_GPIO_PRT3_DR_SET
N#define CapSense_Sns__Button8_Sns0__INTCFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__Button8_Sns0__INTR CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__Button8_Sns0__INTR_CFG CYREG_GPIO_PRT3_INTR_CFG
N#define CapSense_Sns__Button8_Sns0__INTSTAT CYREG_GPIO_PRT3_INTR
N#define CapSense_Sns__Button8_Sns0__MASK 0x01u
N#define CapSense_Sns__Button8_Sns0__PC CYREG_GPIO_PRT3_PC
N#define CapSense_Sns__Button8_Sns0__PC2 CYREG_GPIO_PRT3_PC2
N#define CapSense_Sns__Button8_Sns0__PORT 3u
N#define CapSense_Sns__Button8_Sns0__PS CYREG_GPIO_PRT3_PS
N#define CapSense_Sns__Button8_Sns0__SHIFT 0u
N#define CapSense_Sns__Button9_Sns0__DR CYREG_GPIO_PRT6_DR
N#define CapSense_Sns__Button9_Sns0__DR_CLR CYREG_GPIO_PRT6_DR_CLR
N#define CapSense_Sns__Button9_Sns0__DR_INV CYREG_GPIO_PRT6_DR_INV
N#define CapSense_Sns__Button9_Sns0__DR_SET CYREG_GPIO_PRT6_DR_SET
N#define CapSense_Sns__Button9_Sns0__INTCFG CYREG_GPIO_PRT6_INTR_CFG
N#define CapSense_Sns__Button9_Sns0__INTR CYREG_GPIO_PRT6_INTR
N#define CapSense_Sns__Button9_Sns0__INTR_CFG CYREG_GPIO_PRT6_INTR_CFG
N#define CapSense_Sns__Button9_Sns0__INTSTAT CYREG_GPIO_PRT6_INTR
N#define CapSense_Sns__Button9_Sns0__MASK 0x20u
N#define CapSense_Sns__Button9_Sns0__PC CYREG_GPIO_PRT6_PC
N#define CapSense_Sns__Button9_Sns0__PC2 CYREG_GPIO_PRT6_PC2
N#define CapSense_Sns__Button9_Sns0__PORT 6u
N#define CapSense_Sns__Button9_Sns0__PS CYREG_GPIO_PRT6_PS
N#define CapSense_Sns__Button9_Sns0__SHIFT 5u
N
N/* LOCK_INT */
N#define LOCK_INT__0__DR CYREG_GPIO_PRT0_DR
N#define LOCK_INT__0__DR_CLR CYREG_GPIO_PRT0_DR_CLR
N#define LOCK_INT__0__DR_INV CYREG_GPIO_PRT0_DR_INV
N#define LOCK_INT__0__DR_SET CYREG_GPIO_PRT0_DR_SET
N#define LOCK_INT__0__HSIOM CYREG_HSIOM_PORT_SEL0
N#define LOCK_INT__0__HSIOM_MASK 0x000000F0u
N#define LOCK_INT__0__HSIOM_SHIFT 4u
N#define LOCK_INT__0__INTCFG CYREG_GPIO_PRT0_INTR_CFG
N#define LOCK_INT__0__INTR CYREG_GPIO_PRT0_INTR
N#define LOCK_INT__0__INTR_CFG CYREG_GPIO_PRT0_INTR_CFG
N#define LOCK_INT__0__INTSTAT CYREG_GPIO_PRT0_INTR
N#define LOCK_INT__0__MASK 0x02u
N#define LOCK_INT__0__PC CYREG_GPIO_PRT0_PC
N#define LOCK_INT__0__PC2 CYREG_GPIO_PRT0_PC2
N#define LOCK_INT__0__PORT 0u
N#define LOCK_INT__0__PS CYREG_GPIO_PRT0_PS
N#define LOCK_INT__0__SHIFT 1u
N#define LOCK_INT__1__DR CYREG_GPIO_PRT0_DR
N#define LOCK_INT__1__DR_CLR CYREG_GPIO_PRT0_DR_CLR
N#define LOCK_INT__1__DR_INV CYREG_GPIO_PRT0_DR_INV
N#define LOCK_INT__1__DR_SET CYREG_GPIO_PRT0_DR_SET
N#define LOCK_INT__1__HSIOM CYREG_HSIOM_PORT_SEL0
N#define LOCK_INT__1__HSIOM_MASK 0x00000F00u
N#define LOCK_INT__1__HSIOM_SHIFT 8u
N#define LOCK_INT__1__INTCFG CYREG_GPIO_PRT0_INTR_CFG
N#define LOCK_INT__1__INTR CYREG_GPIO_PRT0_INTR
N#define LOCK_INT__1__INTR_CFG CYREG_GPIO_PRT0_INTR_CFG
N#define LOCK_INT__1__INTSTAT CYREG_GPIO_PRT0_INTR
N#define LOCK_INT__1__MASK 0x04u
N#define LOCK_INT__1__PC CYREG_GPIO_PRT0_PC
N#define LOCK_INT__1__PC2 CYREG_GPIO_PRT0_PC2
N#define LOCK_INT__1__PORT 0u
N#define LOCK_INT__1__PS CYREG_GPIO_PRT0_PS
N#define LOCK_INT__1__SHIFT 2u
N#define LOCK_INT__2__DR CYREG_GPIO_PRT0_DR
N#define LOCK_INT__2__DR_CLR CYREG_GPIO_PRT0_DR_CLR
N#define LOCK_INT__2__DR_INV CYREG_GPIO_PRT0_DR_INV
N#define LOCK_INT__2__DR_SET CYREG_GPIO_PRT0_DR_SET
N#define LOCK_INT__2__HSIOM CYREG_HSIOM_PORT_SEL0
N#define LOCK_INT__2__HSIOM_MASK 0x0000F000u
N#define LOCK_INT__2__HSIOM_SHIFT 12u
N#define LOCK_INT__2__INTCFG CYREG_GPIO_PRT0_INTR_CFG
N#define LOCK_INT__2__INTR CYREG_GPIO_PRT0_INTR
N#define LOCK_INT__2__INTR_CFG CYREG_GPIO_PRT0_INTR_CFG
N#define LOCK_INT__2__INTSTAT CYREG_GPIO_PRT0_INTR
N#define LOCK_INT__2__MASK 0x08u
N#define LOCK_INT__2__PC CYREG_GPIO_PRT0_PC
N#define LOCK_INT__2__PC2 CYREG_GPIO_PRT0_PC2
N#define LOCK_INT__2__PORT 0u
N#define LOCK_INT__2__PS CYREG_GPIO_PRT0_PS
N#define LOCK_INT__2__SHIFT 3u
N#define LOCK_INT__DR CYREG_GPIO_PRT0_DR
N#define LOCK_INT__DR_CLR CYREG_GPIO_PRT0_DR_CLR
N#define LOCK_INT__DR_INV CYREG_GPIO_PRT0_DR_INV
N#define LOCK_INT__DR_SET CYREG_GPIO_PRT0_DR_SET
N#define LOCK_INT__INTCFG CYREG_GPIO_PRT0_INTR_CFG
N#define LOCK_INT__INTR CYREG_GPIO_PRT0_INTR
N#define LOCK_INT__INTR_CFG CYREG_GPIO_PRT0_INTR_CFG
N#define LOCK_INT__INTSTAT CYREG_GPIO_PRT0_INTR
N#define LOCK_INT__LOCK_BNT_INT__DR CYREG_GPIO_PRT0_DR
N#define LOCK_INT__LOCK_BNT_INT__DR_CLR CYREG_GPIO_PRT0_DR_CLR
N#define LOCK_INT__LOCK_BNT_INT__DR_INV CYREG_GPIO_PRT0_DR_INV
N#define LOCK_INT__LOCK_BNT_INT__DR_SET CYREG_GPIO_PRT0_DR_SET
N#define LOCK_INT__LOCK_BNT_INT__INTCFG CYREG_GPIO_PRT0_INTR_CFG
N#define LOCK_INT__LOCK_BNT_INT__INTR CYREG_GPIO_PRT0_INTR
N#define LOCK_INT__LOCK_BNT_INT__INTR_CFG CYREG_GPIO_PRT0_INTR_CFG
N#define LOCK_INT__LOCK_BNT_INT__INTSTAT CYREG_GPIO_PRT0_INTR
N#define LOCK_INT__LOCK_BNT_INT__MASK 0x02u
N#define LOCK_INT__LOCK_BNT_INT__PC CYREG_GPIO_PRT0_PC
N#define LOCK_INT__LOCK_BNT_INT__PC2 CYREG_GPIO_PRT0_PC2
N#define LOCK_INT__LOCK_BNT_INT__PORT 0u
N#define LOCK_INT__LOCK_BNT_INT__PS CYREG_GPIO_PRT0_PS
N#define LOCK_INT__LOCK_BNT_INT__SHIFT 1u
N#define LOCK_INT__LOCK_MODE_INT__DR CYREG_GPIO_PRT0_DR
N#define LOCK_INT__LOCK_MODE_INT__DR_CLR CYREG_GPIO_PRT0_DR_CLR
N#define LOCK_INT__LOCK_MODE_INT__DR_INV CYREG_GPIO_PRT0_DR_INV
N#define LOCK_INT__LOCK_MODE_INT__DR_SET CYREG_GPIO_PRT0_DR_SET
N#define LOCK_INT__LOCK_MODE_INT__INTCFG CYREG_GPIO_PRT0_INTR_CFG
N#define LOCK_INT__LOCK_MODE_INT__INTR CYREG_GPIO_PRT0_INTR
N#define LOCK_INT__LOCK_MODE_INT__INTR_CFG CYREG_GPIO_PRT0_INTR_CFG
N#define LOCK_INT__LOCK_MODE_INT__INTSTAT CYREG_GPIO_PRT0_INTR
N#define LOCK_INT__LOCK_MODE_INT__MASK 0x04u
N#define LOCK_INT__LOCK_MODE_INT__PC CYREG_GPIO_PRT0_PC
N#define LOCK_INT__LOCK_MODE_INT__PC2 CYREG_GPIO_PRT0_PC2
N#define LOCK_INT__LOCK_MODE_INT__PORT 0u
N#define LOCK_INT__LOCK_MODE_INT__PS CYREG_GPIO_PRT0_PS
N#define LOCK_INT__LOCK_MODE_INT__SHIFT 2u
N#define LOCK_INT__LOCK_SLOT_INT__DR CYREG_GPIO_PRT0_DR
N#define LOCK_INT__LOCK_SLOT_INT__DR_CLR CYREG_GPIO_PRT0_DR_CLR
N#define LOCK_INT__LOCK_SLOT_INT__DR_INV CYREG_GPIO_PRT0_DR_INV
N#define LOCK_INT__LOCK_SLOT_INT__DR_SET CYREG_GPIO_PRT0_DR_SET
N#define LOCK_INT__LOCK_SLOT_INT__INTCFG CYREG_GPIO_PRT0_INTR_CFG
N#define LOCK_INT__LOCK_SLOT_INT__INTR CYREG_GPIO_PRT0_INTR
N#define LOCK_INT__LOCK_SLOT_INT__INTR_CFG CYREG_GPIO_PRT0_INTR_CFG
N#define LOCK_INT__LOCK_SLOT_INT__INTSTAT CYREG_GPIO_PRT0_INTR
N#define LOCK_INT__LOCK_SLOT_INT__MASK 0x08u
N#define LOCK_INT__LOCK_SLOT_INT__PC CYREG_GPIO_PRT0_PC
N#define LOCK_INT__LOCK_SLOT_INT__PC2 CYREG_GPIO_PRT0_PC2
N#define LOCK_INT__LOCK_SLOT_INT__PORT 0u
N#define LOCK_INT__LOCK_SLOT_INT__PS CYREG_GPIO_PRT0_PS
N#define LOCK_INT__LOCK_SLOT_INT__SHIFT 3u
N#define LOCK_INT__MASK 0x0Eu
N#define LOCK_INT__PC CYREG_GPIO_PRT0_PC
N#define LOCK_INT__PC2 CYREG_GPIO_PRT0_PC2
N#define LOCK_INT__PORT 0u
N#define LOCK_INT__PS CYREG_GPIO_PRT0_PS
N#define LOCK_INT__SHIFT 1u
N#define LOCK_INT__SNAP CYREG_GPIO_PRT0_INTR
N
N/* MOTO_ADC */
N#define MOTO_ADC__0__DR CYREG_GPIO_PRT2_DR
N#define MOTO_ADC__0__DR_CLR CYREG_GPIO_PRT2_DR_CLR
N#define MOTO_ADC__0__DR_INV CYREG_GPIO_PRT2_DR_INV
N#define MOTO_ADC__0__DR_SET CYREG_GPIO_PRT2_DR_SET
N#define MOTO_ADC__0__HSIOM CYREG_HSIOM_PORT_SEL2
N#define MOTO_ADC__0__HSIOM_MASK 0x0F000000u
N#define MOTO_ADC__0__HSIOM_SHIFT 24u
N#define MOTO_ADC__0__INTCFG CYREG_GPIO_PRT2_INTR_CFG
N#define MOTO_ADC__0__INTR CYREG_GPIO_PRT2_INTR
N#define MOTO_ADC__0__INTR_CFG CYREG_GPIO_PRT2_INTR_CFG
N#define MOTO_ADC__0__INTSTAT CYREG_GPIO_PRT2_INTR
N#define MOTO_ADC__0__MASK 0x40u
N#define MOTO_ADC__0__PC CYREG_GPIO_PRT2_PC
N#define MOTO_ADC__0__PC2 CYREG_GPIO_PRT2_PC2
N#define MOTO_ADC__0__PORT 2u
N#define MOTO_ADC__0__PS CYREG_GPIO_PRT2_PS
N#define MOTO_ADC__0__SHIFT 6u
N#define MOTO_ADC__DR CYREG_GPIO_PRT2_DR
N#define MOTO_ADC__DR_CLR CYREG_GPIO_PRT2_DR_CLR
N#define MOTO_ADC__DR_INV CYREG_GPIO_PRT2_DR_INV
N#define MOTO_ADC__DR_SET CYREG_GPIO_PRT2_DR_SET
N#define MOTO_ADC__INTCFG CYREG_GPIO_PRT2_INTR_CFG
N#define MOTO_ADC__INTR CYREG_GPIO_PRT2_INTR
N#define MOTO_ADC__INTR_CFG CYREG_GPIO_PRT2_INTR_CFG
N#define MOTO_ADC__INTSTAT CYREG_GPIO_PRT2_INTR
N#define MOTO_ADC__MASK 0x40u
N#define MOTO_ADC__PC CYREG_GPIO_PRT2_PC
N#define MOTO_ADC__PC2 CYREG_GPIO_PRT2_PC2
N#define MOTO_ADC__PORT 2u
N#define MOTO_ADC__PS CYREG_GPIO_PRT2_PS
N#define MOTO_ADC__SHIFT 6u
N
N/* GPIO_ISR1 */
N#define GPIO_ISR1__0__DR CYREG_GPIO_PRT1_DR
N#define GPIO_ISR1__0__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define GPIO_ISR1__0__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define GPIO_ISR1__0__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define GPIO_ISR1__0__HSIOM CYREG_HSIOM_PORT_SEL1
N#define GPIO_ISR1__0__HSIOM_MASK 0x00000F00u
N#define GPIO_ISR1__0__HSIOM_SHIFT 8u
N#define GPIO_ISR1__0__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__0__INTR CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__0__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__0__INTSTAT CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__0__MASK 0x04u
N#define GPIO_ISR1__0__PC CYREG_GPIO_PRT1_PC
N#define GPIO_ISR1__0__PC2 CYREG_GPIO_PRT1_PC2
N#define GPIO_ISR1__0__PORT 1u
N#define GPIO_ISR1__0__PS CYREG_GPIO_PRT1_PS
N#define GPIO_ISR1__0__SHIFT 2u
N#define GPIO_ISR1__1__DR CYREG_GPIO_PRT1_DR
N#define GPIO_ISR1__1__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define GPIO_ISR1__1__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define GPIO_ISR1__1__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define GPIO_ISR1__1__HSIOM CYREG_HSIOM_PORT_SEL1
N#define GPIO_ISR1__1__HSIOM_MASK 0x0000F000u
N#define GPIO_ISR1__1__HSIOM_SHIFT 12u
N#define GPIO_ISR1__1__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__1__INTR CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__1__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__1__INTSTAT CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__1__MASK 0x08u
N#define GPIO_ISR1__1__PC CYREG_GPIO_PRT1_PC
N#define GPIO_ISR1__1__PC2 CYREG_GPIO_PRT1_PC2
N#define GPIO_ISR1__1__PORT 1u
N#define GPIO_ISR1__1__PS CYREG_GPIO_PRT1_PS
N#define GPIO_ISR1__1__SHIFT 3u
N#define GPIO_ISR1__2__DR CYREG_GPIO_PRT1_DR
N#define GPIO_ISR1__2__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define GPIO_ISR1__2__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define GPIO_ISR1__2__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define GPIO_ISR1__2__HSIOM CYREG_HSIOM_PORT_SEL1
N#define GPIO_ISR1__2__HSIOM_MASK 0x000F0000u
N#define GPIO_ISR1__2__HSIOM_SHIFT 16u
N#define GPIO_ISR1__2__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__2__INTR CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__2__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__2__INTSTAT CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__2__MASK 0x10u
N#define GPIO_ISR1__2__PC CYREG_GPIO_PRT1_PC
N#define GPIO_ISR1__2__PC2 CYREG_GPIO_PRT1_PC2
N#define GPIO_ISR1__2__PORT 1u
N#define GPIO_ISR1__2__PS CYREG_GPIO_PRT1_PS
N#define GPIO_ISR1__2__SHIFT 4u
N#define GPIO_ISR1__3__DR CYREG_GPIO_PRT1_DR
N#define GPIO_ISR1__3__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define GPIO_ISR1__3__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define GPIO_ISR1__3__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define GPIO_ISR1__3__HSIOM CYREG_HSIOM_PORT_SEL1
N#define GPIO_ISR1__3__HSIOM_MASK 0x00F00000u
N#define GPIO_ISR1__3__HSIOM_SHIFT 20u
N#define GPIO_ISR1__3__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__3__INTR CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__3__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__3__INTSTAT CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__3__MASK 0x20u
N#define GPIO_ISR1__3__PC CYREG_GPIO_PRT1_PC
N#define GPIO_ISR1__3__PC2 CYREG_GPIO_PRT1_PC2
N#define GPIO_ISR1__3__PORT 1u
N#define GPIO_ISR1__3__PS CYREG_GPIO_PRT1_PS
N#define GPIO_ISR1__3__SHIFT 5u
N#define GPIO_ISR1__BLE_INT__DR CYREG_GPIO_PRT1_DR
N#define GPIO_ISR1__BLE_INT__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define GPIO_ISR1__BLE_INT__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define GPIO_ISR1__BLE_INT__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define GPIO_ISR1__BLE_INT__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__BLE_INT__INTR CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__BLE_INT__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__BLE_INT__INTSTAT CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__BLE_INT__MASK 0x10u
N#define GPIO_ISR1__BLE_INT__PC CYREG_GPIO_PRT1_PC
N#define GPIO_ISR1__BLE_INT__PC2 CYREG_GPIO_PRT1_PC2
N#define GPIO_ISR1__BLE_INT__PORT 1u
N#define GPIO_ISR1__BLE_INT__PS CYREG_GPIO_PRT1_PS
N#define GPIO_ISR1__BLE_INT__SHIFT 4u
N#define GPIO_ISR1__DR CYREG_GPIO_PRT1_DR
N#define GPIO_ISR1__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define GPIO_ISR1__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define GPIO_ISR1__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define GPIO_ISR1__EXT_UART_2_INT__DR CYREG_GPIO_PRT1_DR
N#define GPIO_ISR1__EXT_UART_2_INT__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define GPIO_ISR1__EXT_UART_2_INT__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define GPIO_ISR1__EXT_UART_2_INT__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define GPIO_ISR1__EXT_UART_2_INT__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__EXT_UART_2_INT__INTR CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__EXT_UART_2_INT__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__EXT_UART_2_INT__INTSTAT CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__EXT_UART_2_INT__MASK 0x08u
N#define GPIO_ISR1__EXT_UART_2_INT__PC CYREG_GPIO_PRT1_PC
N#define GPIO_ISR1__EXT_UART_2_INT__PC2 CYREG_GPIO_PRT1_PC2
N#define GPIO_ISR1__EXT_UART_2_INT__PORT 1u
N#define GPIO_ISR1__EXT_UART_2_INT__PS CYREG_GPIO_PRT1_PS
N#define GPIO_ISR1__EXT_UART_2_INT__SHIFT 3u
N#define GPIO_ISR1__FPC_UART_0_INT__DR CYREG_GPIO_PRT1_DR
N#define GPIO_ISR1__FPC_UART_0_INT__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define GPIO_ISR1__FPC_UART_0_INT__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define GPIO_ISR1__FPC_UART_0_INT__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define GPIO_ISR1__FPC_UART_0_INT__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__FPC_UART_0_INT__INTR CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__FPC_UART_0_INT__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__FPC_UART_0_INT__INTSTAT CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__FPC_UART_0_INT__MASK 0x20u
N#define GPIO_ISR1__FPC_UART_0_INT__PC CYREG_GPIO_PRT1_PC
N#define GPIO_ISR1__FPC_UART_0_INT__PC2 CYREG_GPIO_PRT1_PC2
N#define GPIO_ISR1__FPC_UART_0_INT__PORT 1u
N#define GPIO_ISR1__FPC_UART_0_INT__PS CYREG_GPIO_PRT1_PS
N#define GPIO_ISR1__FPC_UART_0_INT__SHIFT 5u
N#define GPIO_ISR1__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__INTR CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__INTSTAT CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__KEY_INT__DR CYREG_GPIO_PRT1_DR
N#define GPIO_ISR1__KEY_INT__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define GPIO_ISR1__KEY_INT__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define GPIO_ISR1__KEY_INT__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define GPIO_ISR1__KEY_INT__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__KEY_INT__INTR CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__KEY_INT__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define GPIO_ISR1__KEY_INT__INTSTAT CYREG_GPIO_PRT1_INTR
N#define GPIO_ISR1__KEY_INT__MASK 0x04u
N#define GPIO_ISR1__KEY_INT__PC CYREG_GPIO_PRT1_PC
N#define GPIO_ISR1__KEY_INT__PC2 CYREG_GPIO_PRT1_PC2
N#define GPIO_ISR1__KEY_INT__PORT 1u
N#define GPIO_ISR1__KEY_INT__PS CYREG_GPIO_PRT1_PS
N#define GPIO_ISR1__KEY_INT__SHIFT 2u
N#define GPIO_ISR1__MASK 0x3Cu
N#define GPIO_ISR1__PC CYREG_GPIO_PRT1_PC
N#define GPIO_ISR1__PC2 CYREG_GPIO_PRT1_PC2
N#define GPIO_ISR1__PORT 1u
N#define GPIO_ISR1__PS CYREG_GPIO_PRT1_PS
N#define GPIO_ISR1__SHIFT 2u
N#define GPIO_ISR1__SNAP CYREG_GPIO_PRT1_INTR
N
N/* CARD_RESET */
N#define CARD_RESET__0__DR CYREG_GPIO_PRT5_DR
N#define CARD_RESET__0__DR_CLR CYREG_GPIO_PRT5_DR_CLR
N#define CARD_RESET__0__DR_INV CYREG_GPIO_PRT5_DR_INV
N#define CARD_RESET__0__DR_SET CYREG_GPIO_PRT5_DR_SET
N#define CARD_RESET__0__HSIOM CYREG_HSIOM_PORT_SEL5
N#define CARD_RESET__0__HSIOM_MASK 0x00F00000u
N#define CARD_RESET__0__HSIOM_SHIFT 20u
N#define CARD_RESET__0__INTCFG CYREG_GPIO_PRT5_INTR_CFG
N#define CARD_RESET__0__INTR CYREG_GPIO_PRT5_INTR
N#define CARD_RESET__0__INTR_CFG CYREG_GPIO_PRT5_INTR_CFG
N#define CARD_RESET__0__INTSTAT CYREG_GPIO_PRT5_INTR
N#define CARD_RESET__0__MASK 0x20u
N#define CARD_RESET__0__PC CYREG_GPIO_PRT5_PC
N#define CARD_RESET__0__PC2 CYREG_GPIO_PRT5_PC2
N#define CARD_RESET__0__PORT 5u
N#define CARD_RESET__0__PS CYREG_GPIO_PRT5_PS
N#define CARD_RESET__0__SHIFT 5u
N#define CARD_RESET__DR CYREG_GPIO_PRT5_DR
N#define CARD_RESET__DR_CLR CYREG_GPIO_PRT5_DR_CLR
N#define CARD_RESET__DR_INV CYREG_GPIO_PRT5_DR_INV
N#define CARD_RESET__DR_SET CYREG_GPIO_PRT5_DR_SET
N#define CARD_RESET__INTCFG CYREG_GPIO_PRT5_INTR_CFG
N#define CARD_RESET__INTR CYREG_GPIO_PRT5_INTR
N#define CARD_RESET__INTR_CFG CYREG_GPIO_PRT5_INTR_CFG
N#define CARD_RESET__INTSTAT CYREG_GPIO_PRT5_INTR
N#define CARD_RESET__MASK 0x20u
N#define CARD_RESET__PC CYREG_GPIO_PRT5_PC
N#define CARD_RESET__PC2 CYREG_GPIO_PRT5_PC2
N#define CARD_RESET__PORT 5u
N#define CARD_RESET__PS CYREG_GPIO_PRT5_PS
N#define CARD_RESET__SHIFT 5u
N
N/* SPI_1_CARD */
N#define SPI_1_CARD_miso_m__0__DR CYREG_GPIO_PRT4_DR
N#define SPI_1_CARD_miso_m__0__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define SPI_1_CARD_miso_m__0__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define SPI_1_CARD_miso_m__0__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define SPI_1_CARD_miso_m__0__HSIOM CYREG_HSIOM_PORT_SEL4
N#define SPI_1_CARD_miso_m__0__HSIOM_GPIO 0u
N#define SPI_1_CARD_miso_m__0__HSIOM_MASK 0x00F00000u
N#define SPI_1_CARD_miso_m__0__HSIOM_SHIFT 20u
N#define SPI_1_CARD_miso_m__0__HSIOM_SPI 14u
N#define SPI_1_CARD_miso_m__0__HSIOM_SPI_MISO 14u
N#define SPI_1_CARD_miso_m__0__HSIOM_UART 9u
N#define SPI_1_CARD_miso_m__0__HSIOM_UART_TX 9u
N#define SPI_1_CARD_miso_m__0__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define SPI_1_CARD_miso_m__0__INTR CYREG_GPIO_PRT4_INTR
N#define SPI_1_CARD_miso_m__0__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define SPI_1_CARD_miso_m__0__INTSTAT CYREG_GPIO_PRT4_INTR
N#define SPI_1_CARD_miso_m__0__MASK 0x20u
N#define SPI_1_CARD_miso_m__0__PC CYREG_GPIO_PRT4_PC
N#define SPI_1_CARD_miso_m__0__PC2 CYREG_GPIO_PRT4_PC2
N#define SPI_1_CARD_miso_m__0__PORT 4u
N#define SPI_1_CARD_miso_m__0__PS CYREG_GPIO_PRT4_PS
N#define SPI_1_CARD_miso_m__0__SHIFT 5u
N#define SPI_1_CARD_miso_m__DR CYREG_GPIO_PRT4_DR
N#define SPI_1_CARD_miso_m__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define SPI_1_CARD_miso_m__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define SPI_1_CARD_miso_m__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define SPI_1_CARD_miso_m__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define SPI_1_CARD_miso_m__INTR CYREG_GPIO_PRT4_INTR
N#define SPI_1_CARD_miso_m__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define SPI_1_CARD_miso_m__INTSTAT CYREG_GPIO_PRT4_INTR
N#define SPI_1_CARD_miso_m__MASK 0x20u
N#define SPI_1_CARD_miso_m__PC CYREG_GPIO_PRT4_PC
N#define SPI_1_CARD_miso_m__PC2 CYREG_GPIO_PRT4_PC2
N#define SPI_1_CARD_miso_m__PORT 4u
N#define SPI_1_CARD_miso_m__PS CYREG_GPIO_PRT4_PS
N#define SPI_1_CARD_miso_m__SHIFT 5u
N#define SPI_1_CARD_mosi_m__0__DR CYREG_GPIO_PRT4_DR
N#define SPI_1_CARD_mosi_m__0__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define SPI_1_CARD_mosi_m__0__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define SPI_1_CARD_mosi_m__0__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define SPI_1_CARD_mosi_m__0__HSIOM CYREG_HSIOM_PORT_SEL4
N#define SPI_1_CARD_mosi_m__0__HSIOM_GPIO 0u
N#define SPI_1_CARD_mosi_m__0__HSIOM_MASK 0x000F0000u
N#define SPI_1_CARD_mosi_m__0__HSIOM_SHIFT 16u
N#define SPI_1_CARD_mosi_m__0__HSIOM_SPI 14u
N#define SPI_1_CARD_mosi_m__0__HSIOM_SPI_MOSI 14u
N#define SPI_1_CARD_mosi_m__0__HSIOM_UART 9u
N#define SPI_1_CARD_mosi_m__0__HSIOM_UART_RX 9u
N#define SPI_1_CARD_mosi_m__0__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define SPI_1_CARD_mosi_m__0__INTR CYREG_GPIO_PRT4_INTR
N#define SPI_1_CARD_mosi_m__0__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define SPI_1_CARD_mosi_m__0__INTSTAT CYREG_GPIO_PRT4_INTR
N#define SPI_1_CARD_mosi_m__0__MASK 0x10u
N#define SPI_1_CARD_mosi_m__0__PC CYREG_GPIO_PRT4_PC
N#define SPI_1_CARD_mosi_m__0__PC2 CYREG_GPIO_PRT4_PC2
N#define SPI_1_CARD_mosi_m__0__PORT 4u
N#define SPI_1_CARD_mosi_m__0__PS CYREG_GPIO_PRT4_PS
N#define SPI_1_CARD_mosi_m__0__SHIFT 4u
N#define SPI_1_CARD_mosi_m__DR CYREG_GPIO_PRT4_DR
N#define SPI_1_CARD_mosi_m__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define SPI_1_CARD_mosi_m__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define SPI_1_CARD_mosi_m__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define SPI_1_CARD_mosi_m__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define SPI_1_CARD_mosi_m__INTR CYREG_GPIO_PRT4_INTR
N#define SPI_1_CARD_mosi_m__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define SPI_1_CARD_mosi_m__INTSTAT CYREG_GPIO_PRT4_INTR
N#define SPI_1_CARD_mosi_m__MASK 0x10u
N#define SPI_1_CARD_mosi_m__PC CYREG_GPIO_PRT4_PC
N#define SPI_1_CARD_mosi_m__PC2 CYREG_GPIO_PRT4_PC2
N#define SPI_1_CARD_mosi_m__PORT 4u
N#define SPI_1_CARD_mosi_m__PS CYREG_GPIO_PRT4_PS
N#define SPI_1_CARD_mosi_m__SHIFT 4u
N#define SPI_1_CARD_SCB__CTRL CYREG_SCB4_CTRL
N#define SPI_1_CARD_SCB__EZ_DATA0 CYREG_SCB4_EZ_DATA0
N#define SPI_1_CARD_SCB__EZ_DATA1 CYREG_SCB4_EZ_DATA1
N#define SPI_1_CARD_SCB__EZ_DATA10 CYREG_SCB4_EZ_DATA10
N#define SPI_1_CARD_SCB__EZ_DATA11 CYREG_SCB4_EZ_DATA11
N#define SPI_1_CARD_SCB__EZ_DATA12 CYREG_SCB4_EZ_DATA12
N#define SPI_1_CARD_SCB__EZ_DATA13 CYREG_SCB4_EZ_DATA13
N#define SPI_1_CARD_SCB__EZ_DATA14 CYREG_SCB4_EZ_DATA14
N#define SPI_1_CARD_SCB__EZ_DATA15 CYREG_SCB4_EZ_DATA15
N#define SPI_1_CARD_SCB__EZ_DATA16 CYREG_SCB4_EZ_DATA16
N#define SPI_1_CARD_SCB__EZ_DATA17 CYREG_SCB4_EZ_DATA17
N#define SPI_1_CARD_SCB__EZ_DATA18 CYREG_SCB4_EZ_DATA18
N#define SPI_1_CARD_SCB__EZ_DATA19 CYREG_SCB4_EZ_DATA19
N#define SPI_1_CARD_SCB__EZ_DATA2 CYREG_SCB4_EZ_DATA2
N#define SPI_1_CARD_SCB__EZ_DATA20 CYREG_SCB4_EZ_DATA20
N#define SPI_1_CARD_SCB__EZ_DATA21 CYREG_SCB4_EZ_DATA21
N#define SPI_1_CARD_SCB__EZ_DATA22 CYREG_SCB4_EZ_DATA22
N#define SPI_1_CARD_SCB__EZ_DATA23 CYREG_SCB4_EZ_DATA23
N#define SPI_1_CARD_SCB__EZ_DATA24 CYREG_SCB4_EZ_DATA24
N#define SPI_1_CARD_SCB__EZ_DATA25 CYREG_SCB4_EZ_DATA25
N#define SPI_1_CARD_SCB__EZ_DATA26 CYREG_SCB4_EZ_DATA26
N#define SPI_1_CARD_SCB__EZ_DATA27 CYREG_SCB4_EZ_DATA27
N#define SPI_1_CARD_SCB__EZ_DATA28 CYREG_SCB4_EZ_DATA28
N#define SPI_1_CARD_SCB__EZ_DATA29 CYREG_SCB4_EZ_DATA29
N#define SPI_1_CARD_SCB__EZ_DATA3 CYREG_SCB4_EZ_DATA3
N#define SPI_1_CARD_SCB__EZ_DATA30 CYREG_SCB4_EZ_DATA30
N#define SPI_1_CARD_SCB__EZ_DATA31 CYREG_SCB4_EZ_DATA31
N#define SPI_1_CARD_SCB__EZ_DATA4 CYREG_SCB4_EZ_DATA4
N#define SPI_1_CARD_SCB__EZ_DATA5 CYREG_SCB4_EZ_DATA5
N#define SPI_1_CARD_SCB__EZ_DATA6 CYREG_SCB4_EZ_DATA6
N#define SPI_1_CARD_SCB__EZ_DATA7 CYREG_SCB4_EZ_DATA7
N#define SPI_1_CARD_SCB__EZ_DATA8 CYREG_SCB4_EZ_DATA8
N#define SPI_1_CARD_SCB__EZ_DATA9 CYREG_SCB4_EZ_DATA9
N#define SPI_1_CARD_SCB__I2C_CFG CYREG_SCB4_I2C_CFG
N#define SPI_1_CARD_SCB__I2C_CTRL CYREG_SCB4_I2C_CTRL
N#define SPI_1_CARD_SCB__I2C_M_CMD CYREG_SCB4_I2C_M_CMD
N#define SPI_1_CARD_SCB__I2C_S_CMD CYREG_SCB4_I2C_S_CMD
N#define SPI_1_CARD_SCB__I2C_STATUS CYREG_SCB4_I2C_STATUS
N#define SPI_1_CARD_SCB__INTR_CAUSE CYREG_SCB4_INTR_CAUSE
N#define SPI_1_CARD_SCB__INTR_I2C_EC CYREG_SCB4_INTR_I2C_EC
N#define SPI_1_CARD_SCB__INTR_I2C_EC_MASK CYREG_SCB4_INTR_I2C_EC_MASK
N#define SPI_1_CARD_SCB__INTR_I2C_EC_MASKED CYREG_SCB4_INTR_I2C_EC_MASKED
N#define SPI_1_CARD_SCB__INTR_M CYREG_SCB4_INTR_M
N#define SPI_1_CARD_SCB__INTR_M_MASK CYREG_SCB4_INTR_M_MASK
N#define SPI_1_CARD_SCB__INTR_M_MASKED CYREG_SCB4_INTR_M_MASKED
N#define SPI_1_CARD_SCB__INTR_M_SET CYREG_SCB4_INTR_M_SET
N#define SPI_1_CARD_SCB__INTR_RX CYREG_SCB4_INTR_RX
N#define SPI_1_CARD_SCB__INTR_RX_MASK CYREG_SCB4_INTR_RX_MASK
N#define SPI_1_CARD_SCB__INTR_RX_MASKED CYREG_SCB4_INTR_RX_MASKED
N#define SPI_1_CARD_SCB__INTR_RX_SET CYREG_SCB4_INTR_RX_SET
N#define SPI_1_CARD_SCB__INTR_S CYREG_SCB4_INTR_S
N#define SPI_1_CARD_SCB__INTR_S_MASK CYREG_SCB4_INTR_S_MASK
N#define SPI_1_CARD_SCB__INTR_S_MASKED CYREG_SCB4_INTR_S_MASKED
N#define SPI_1_CARD_SCB__INTR_S_SET CYREG_SCB4_INTR_S_SET
N#define SPI_1_CARD_SCB__INTR_SPI_EC CYREG_SCB4_INTR_SPI_EC
N#define SPI_1_CARD_SCB__INTR_SPI_EC_MASK CYREG_SCB4_INTR_SPI_EC_MASK
N#define SPI_1_CARD_SCB__INTR_SPI_EC_MASKED CYREG_SCB4_INTR_SPI_EC_MASKED
N#define SPI_1_CARD_SCB__INTR_TX CYREG_SCB4_INTR_TX
N#define SPI_1_CARD_SCB__INTR_TX_MASK CYREG_SCB4_INTR_TX_MASK
N#define SPI_1_CARD_SCB__INTR_TX_MASKED CYREG_SCB4_INTR_TX_MASKED
N#define SPI_1_CARD_SCB__INTR_TX_SET CYREG_SCB4_INTR_TX_SET
N#define SPI_1_CARD_SCB__RX_CTRL CYREG_SCB4_RX_CTRL
N#define SPI_1_CARD_SCB__RX_FIFO_CTRL CYREG_SCB4_RX_FIFO_CTRL
N#define SPI_1_CARD_SCB__RX_FIFO_RD CYREG_SCB4_RX_FIFO_RD
N#define SPI_1_CARD_SCB__RX_FIFO_RD_SILENT CYREG_SCB4_RX_FIFO_RD_SILENT
N#define SPI_1_CARD_SCB__RX_FIFO_STATUS CYREG_SCB4_RX_FIFO_STATUS
N#define SPI_1_CARD_SCB__RX_MATCH CYREG_SCB4_RX_MATCH
N#define SPI_1_CARD_SCB__SPI_CTRL CYREG_SCB4_SPI_CTRL
N#define SPI_1_CARD_SCB__SPI_STATUS CYREG_SCB4_SPI_STATUS
N#define SPI_1_CARD_SCB__SS0_POSISTION 0u
N#define SPI_1_CARD_SCB__SS1_POSISTION 1u
N#define SPI_1_CARD_SCB__SS2_POSISTION 2u
N#define SPI_1_CARD_SCB__SS3_POSISTION 3u
N#define SPI_1_CARD_SCB__STATUS CYREG_SCB4_STATUS
N#define SPI_1_CARD_SCB__TX_CTRL CYREG_SCB4_TX_CTRL
N#define SPI_1_CARD_SCB__TX_FIFO_CTRL CYREG_SCB4_TX_FIFO_CTRL
N#define SPI_1_CARD_SCB__TX_FIFO_STATUS CYREG_SCB4_TX_FIFO_STATUS
N#define SPI_1_CARD_SCB__TX_FIFO_WR CYREG_SCB4_TX_FIFO_WR
N#define SPI_1_CARD_SCB__UART_CTRL CYREG_SCB4_UART_CTRL
N#define SPI_1_CARD_SCB__UART_FLOW_CTRL CYREG_SCB4_UART_FLOW_CTRL
N#define SPI_1_CARD_SCB__UART_RX_CTRL CYREG_SCB4_UART_RX_CTRL
N#define SPI_1_CARD_SCB__UART_RX_STATUS CYREG_SCB4_UART_RX_STATUS
N#define SPI_1_CARD_SCB__UART_TX_CTRL CYREG_SCB4_UART_TX_CTRL
N#define SPI_1_CARD_SCBCLK__CTRL_REGISTER CYREG_PERI_PCLK_CTL4
N#define SPI_1_CARD_SCBCLK__DIV_ID 0x00000041u
N#define SPI_1_CARD_SCBCLK__DIV_REGISTER CYREG_PERI_DIV_16_CTL1
N#define SPI_1_CARD_SCBCLK__PA_DIV_ID 0x000000FFu
N#define SPI_1_CARD_sclk_m__0__DR CYREG_GPIO_PRT4_DR
N#define SPI_1_CARD_sclk_m__0__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define SPI_1_CARD_sclk_m__0__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define SPI_1_CARD_sclk_m__0__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define SPI_1_CARD_sclk_m__0__HSIOM CYREG_HSIOM_PORT_SEL4
N#define SPI_1_CARD_sclk_m__0__HSIOM_GPIO 0u
N#define SPI_1_CARD_sclk_m__0__HSIOM_MASK 0x0F000000u
N#define SPI_1_CARD_sclk_m__0__HSIOM_SHIFT 24u
N#define SPI_1_CARD_sclk_m__0__HSIOM_SPI 14u
N#define SPI_1_CARD_sclk_m__0__HSIOM_SPI_CLK 14u
N#define SPI_1_CARD_sclk_m__0__HSIOM_UART 9u
N#define SPI_1_CARD_sclk_m__0__HSIOM_UART_CTS 9u
N#define SPI_1_CARD_sclk_m__0__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define SPI_1_CARD_sclk_m__0__INTR CYREG_GPIO_PRT4_INTR
N#define SPI_1_CARD_sclk_m__0__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define SPI_1_CARD_sclk_m__0__INTSTAT CYREG_GPIO_PRT4_INTR
N#define SPI_1_CARD_sclk_m__0__MASK 0x40u
N#define SPI_1_CARD_sclk_m__0__PC CYREG_GPIO_PRT4_PC
N#define SPI_1_CARD_sclk_m__0__PC2 CYREG_GPIO_PRT4_PC2
N#define SPI_1_CARD_sclk_m__0__PORT 4u
N#define SPI_1_CARD_sclk_m__0__PS CYREG_GPIO_PRT4_PS
N#define SPI_1_CARD_sclk_m__0__SHIFT 6u
N#define SPI_1_CARD_sclk_m__DR CYREG_GPIO_PRT4_DR
N#define SPI_1_CARD_sclk_m__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define SPI_1_CARD_sclk_m__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define SPI_1_CARD_sclk_m__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define SPI_1_CARD_sclk_m__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define SPI_1_CARD_sclk_m__INTR CYREG_GPIO_PRT4_INTR
N#define SPI_1_CARD_sclk_m__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define SPI_1_CARD_sclk_m__INTSTAT CYREG_GPIO_PRT4_INTR
N#define SPI_1_CARD_sclk_m__MASK 0x40u
N#define SPI_1_CARD_sclk_m__PC CYREG_GPIO_PRT4_PC
N#define SPI_1_CARD_sclk_m__PC2 CYREG_GPIO_PRT4_PC2
N#define SPI_1_CARD_sclk_m__PORT 4u
N#define SPI_1_CARD_sclk_m__PS CYREG_GPIO_PRT4_PS
N#define SPI_1_CARD_sclk_m__SHIFT 6u
N#define SPI_1_CARD_ss0_m__0__DR CYREG_GPIO_PRT4_DR
N#define SPI_1_CARD_ss0_m__0__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define SPI_1_CARD_ss0_m__0__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define SPI_1_CARD_ss0_m__0__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define SPI_1_CARD_ss0_m__0__HSIOM CYREG_HSIOM_PORT_SEL4
N#define SPI_1_CARD_ss0_m__0__HSIOM_GPIO 0u
N#define SPI_1_CARD_ss0_m__0__HSIOM_MASK 0xF0000000u
N#define SPI_1_CARD_ss0_m__0__HSIOM_SHIFT 28u
N#define SPI_1_CARD_ss0_m__0__HSIOM_SPI 14u
N#define SPI_1_CARD_ss0_m__0__HSIOM_SPI_SELECT0 14u
N#define SPI_1_CARD_ss0_m__0__HSIOM_UART 9u
N#define SPI_1_CARD_ss0_m__0__HSIOM_UART_RTS 9u
N#define SPI_1_CARD_ss0_m__0__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define SPI_1_CARD_ss0_m__0__INTR CYREG_GPIO_PRT4_INTR
N#define SPI_1_CARD_ss0_m__0__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define SPI_1_CARD_ss0_m__0__INTSTAT CYREG_GPIO_PRT4_INTR
N#define SPI_1_CARD_ss0_m__0__MASK 0x80u
N#define SPI_1_CARD_ss0_m__0__PC CYREG_GPIO_PRT4_PC
N#define SPI_1_CARD_ss0_m__0__PC2 CYREG_GPIO_PRT4_PC2
N#define SPI_1_CARD_ss0_m__0__PORT 4u
N#define SPI_1_CARD_ss0_m__0__PS CYREG_GPIO_PRT4_PS
N#define SPI_1_CARD_ss0_m__0__SHIFT 7u
N#define SPI_1_CARD_ss0_m__DR CYREG_GPIO_PRT4_DR
N#define SPI_1_CARD_ss0_m__DR_CLR CYREG_GPIO_PRT4_DR_CLR
N#define SPI_1_CARD_ss0_m__DR_INV CYREG_GPIO_PRT4_DR_INV
N#define SPI_1_CARD_ss0_m__DR_SET CYREG_GPIO_PRT4_DR_SET
N#define SPI_1_CARD_ss0_m__INTCFG CYREG_GPIO_PRT4_INTR_CFG
N#define SPI_1_CARD_ss0_m__INTR CYREG_GPIO_PRT4_INTR
N#define SPI_1_CARD_ss0_m__INTR_CFG CYREG_GPIO_PRT4_INTR_CFG
N#define SPI_1_CARD_ss0_m__INTSTAT CYREG_GPIO_PRT4_INTR
N#define SPI_1_CARD_ss0_m__MASK 0x80u
N#define SPI_1_CARD_ss0_m__PC CYREG_GPIO_PRT4_PC
N#define SPI_1_CARD_ss0_m__PC2 CYREG_GPIO_PRT4_PC2
N#define SPI_1_CARD_ss0_m__PORT 4u
N#define SPI_1_CARD_ss0_m__PS CYREG_GPIO_PRT4_PS
N#define SPI_1_CARD_ss0_m__SHIFT 7u
N
N/* UART_0_FPC */
N#define UART_0_FPC_rx__0__DR CYREG_GPIO_PRT6_DR
N#define UART_0_FPC_rx__0__DR_CLR CYREG_GPIO_PRT6_DR_CLR
N#define UART_0_FPC_rx__0__DR_INV CYREG_GPIO_PRT6_DR_INV
N#define UART_0_FPC_rx__0__DR_SET CYREG_GPIO_PRT6_DR_SET
N#define UART_0_FPC_rx__0__HSIOM CYREG_HSIOM_PORT_SEL6
N#define UART_0_FPC_rx__0__HSIOM_GPIO 0u
N#define UART_0_FPC_rx__0__HSIOM_I2C 14u
N#define UART_0_FPC_rx__0__HSIOM_I2C_SCL 14u
N#define UART_0_FPC_rx__0__HSIOM_MASK 0x0000000Fu
N#define UART_0_FPC_rx__0__HSIOM_SHIFT 0u
N#define UART_0_FPC_rx__0__HSIOM_SPI 15u
N#define UART_0_FPC_rx__0__HSIOM_SPI_MOSI 15u
N#define UART_0_FPC_rx__0__HSIOM_UART 9u
N#define UART_0_FPC_rx__0__HSIOM_UART_RX 9u
N#define UART_0_FPC_rx__0__INTCFG CYREG_GPIO_PRT6_INTR_CFG
N#define UART_0_FPC_rx__0__INTR CYREG_GPIO_PRT6_INTR
N#define UART_0_FPC_rx__0__INTR_CFG CYREG_GPIO_PRT6_INTR_CFG
N#define UART_0_FPC_rx__0__INTSTAT CYREG_GPIO_PRT6_INTR
N#define UART_0_FPC_rx__0__MASK 0x01u
N#define UART_0_FPC_rx__0__PC CYREG_GPIO_PRT6_PC
N#define UART_0_FPC_rx__0__PC2 CYREG_GPIO_PRT6_PC2
N#define UART_0_FPC_rx__0__PORT 6u
N#define UART_0_FPC_rx__0__PS CYREG_GPIO_PRT6_PS
N#define UART_0_FPC_rx__0__SHIFT 0u
N#define UART_0_FPC_rx__DR CYREG_GPIO_PRT6_DR
N#define UART_0_FPC_rx__DR_CLR CYREG_GPIO_PRT6_DR_CLR
N#define UART_0_FPC_rx__DR_INV CYREG_GPIO_PRT6_DR_INV
N#define UART_0_FPC_rx__DR_SET CYREG_GPIO_PRT6_DR_SET
N#define UART_0_FPC_rx__INTCFG CYREG_GPIO_PRT6_INTR_CFG
N#define UART_0_FPC_rx__INTR CYREG_GPIO_PRT6_INTR
N#define UART_0_FPC_rx__INTR_CFG CYREG_GPIO_PRT6_INTR_CFG
N#define UART_0_FPC_rx__INTSTAT CYREG_GPIO_PRT6_INTR
N#define UART_0_FPC_rx__MASK 0x01u
N#define UART_0_FPC_rx__PC CYREG_GPIO_PRT6_PC
N#define UART_0_FPC_rx__PC2 CYREG_GPIO_PRT6_PC2
N#define UART_0_FPC_rx__PORT 6u
N#define UART_0_FPC_rx__PS CYREG_GPIO_PRT6_PS
N#define UART_0_FPC_rx__SHIFT 0u
N#define UART_0_FPC_SCB__CTRL CYREG_SCB3_CTRL
N#define UART_0_FPC_SCB__EZ_DATA0 CYREG_SCB3_EZ_DATA0
N#define UART_0_FPC_SCB__EZ_DATA1 CYREG_SCB3_EZ_DATA1
N#define UART_0_FPC_SCB__EZ_DATA10 CYREG_SCB3_EZ_DATA10
N#define UART_0_FPC_SCB__EZ_DATA11 CYREG_SCB3_EZ_DATA11
N#define UART_0_FPC_SCB__EZ_DATA12 CYREG_SCB3_EZ_DATA12
N#define UART_0_FPC_SCB__EZ_DATA13 CYREG_SCB3_EZ_DATA13
N#define UART_0_FPC_SCB__EZ_DATA14 CYREG_SCB3_EZ_DATA14
N#define UART_0_FPC_SCB__EZ_DATA15 CYREG_SCB3_EZ_DATA15
N#define UART_0_FPC_SCB__EZ_DATA16 CYREG_SCB3_EZ_DATA16
N#define UART_0_FPC_SCB__EZ_DATA17 CYREG_SCB3_EZ_DATA17
N#define UART_0_FPC_SCB__EZ_DATA18 CYREG_SCB3_EZ_DATA18
N#define UART_0_FPC_SCB__EZ_DATA19 CYREG_SCB3_EZ_DATA19
N#define UART_0_FPC_SCB__EZ_DATA2 CYREG_SCB3_EZ_DATA2
N#define UART_0_FPC_SCB__EZ_DATA20 CYREG_SCB3_EZ_DATA20
N#define UART_0_FPC_SCB__EZ_DATA21 CYREG_SCB3_EZ_DATA21
N#define UART_0_FPC_SCB__EZ_DATA22 CYREG_SCB3_EZ_DATA22
N#define UART_0_FPC_SCB__EZ_DATA23 CYREG_SCB3_EZ_DATA23
N#define UART_0_FPC_SCB__EZ_DATA24 CYREG_SCB3_EZ_DATA24
N#define UART_0_FPC_SCB__EZ_DATA25 CYREG_SCB3_EZ_DATA25
N#define UART_0_FPC_SCB__EZ_DATA26 CYREG_SCB3_EZ_DATA26
N#define UART_0_FPC_SCB__EZ_DATA27 CYREG_SCB3_EZ_DATA27
N#define UART_0_FPC_SCB__EZ_DATA28 CYREG_SCB3_EZ_DATA28
N#define UART_0_FPC_SCB__EZ_DATA29 CYREG_SCB3_EZ_DATA29
N#define UART_0_FPC_SCB__EZ_DATA3 CYREG_SCB3_EZ_DATA3
N#define UART_0_FPC_SCB__EZ_DATA30 CYREG_SCB3_EZ_DATA30
N#define UART_0_FPC_SCB__EZ_DATA31 CYREG_SCB3_EZ_DATA31
N#define UART_0_FPC_SCB__EZ_DATA4 CYREG_SCB3_EZ_DATA4
N#define UART_0_FPC_SCB__EZ_DATA5 CYREG_SCB3_EZ_DATA5
N#define UART_0_FPC_SCB__EZ_DATA6 CYREG_SCB3_EZ_DATA6
N#define UART_0_FPC_SCB__EZ_DATA7 CYREG_SCB3_EZ_DATA7
N#define UART_0_FPC_SCB__EZ_DATA8 CYREG_SCB3_EZ_DATA8
N#define UART_0_FPC_SCB__EZ_DATA9 CYREG_SCB3_EZ_DATA9
N#define UART_0_FPC_SCB__I2C_CFG CYREG_SCB3_I2C_CFG
N#define UART_0_FPC_SCB__I2C_CTRL CYREG_SCB3_I2C_CTRL
N#define UART_0_FPC_SCB__I2C_M_CMD CYREG_SCB3_I2C_M_CMD
N#define UART_0_FPC_SCB__I2C_S_CMD CYREG_SCB3_I2C_S_CMD
N#define UART_0_FPC_SCB__I2C_STATUS CYREG_SCB3_I2C_STATUS
N#define UART_0_FPC_SCB__INTR_CAUSE CYREG_SCB3_INTR_CAUSE
N#define UART_0_FPC_SCB__INTR_I2C_EC CYREG_SCB3_INTR_I2C_EC
N#define UART_0_FPC_SCB__INTR_I2C_EC_MASK CYREG_SCB3_INTR_I2C_EC_MASK
N#define UART_0_FPC_SCB__INTR_I2C_EC_MASKED CYREG_SCB3_INTR_I2C_EC_MASKED
N#define UART_0_FPC_SCB__INTR_M CYREG_SCB3_INTR_M
N#define UART_0_FPC_SCB__INTR_M_MASK CYREG_SCB3_INTR_M_MASK
N#define UART_0_FPC_SCB__INTR_M_MASKED CYREG_SCB3_INTR_M_MASKED
N#define UART_0_FPC_SCB__INTR_M_SET CYREG_SCB3_INTR_M_SET
N#define UART_0_FPC_SCB__INTR_RX CYREG_SCB3_INTR_RX
N#define UART_0_FPC_SCB__INTR_RX_MASK CYREG_SCB3_INTR_RX_MASK
N#define UART_0_FPC_SCB__INTR_RX_MASKED CYREG_SCB3_INTR_RX_MASKED
N#define UART_0_FPC_SCB__INTR_RX_SET CYREG_SCB3_INTR_RX_SET
N#define UART_0_FPC_SCB__INTR_S CYREG_SCB3_INTR_S
N#define UART_0_FPC_SCB__INTR_S_MASK CYREG_SCB3_INTR_S_MASK
N#define UART_0_FPC_SCB__INTR_S_MASKED CYREG_SCB3_INTR_S_MASKED
N#define UART_0_FPC_SCB__INTR_S_SET CYREG_SCB3_INTR_S_SET
N#define UART_0_FPC_SCB__INTR_SPI_EC CYREG_SCB3_INTR_SPI_EC
N#define UART_0_FPC_SCB__INTR_SPI_EC_MASK CYREG_SCB3_INTR_SPI_EC_MASK
N#define UART_0_FPC_SCB__INTR_SPI_EC_MASKED CYREG_SCB3_INTR_SPI_EC_MASKED
N#define UART_0_FPC_SCB__INTR_TX CYREG_SCB3_INTR_TX
N#define UART_0_FPC_SCB__INTR_TX_MASK CYREG_SCB3_INTR_TX_MASK
N#define UART_0_FPC_SCB__INTR_TX_MASKED CYREG_SCB3_INTR_TX_MASKED
N#define UART_0_FPC_SCB__INTR_TX_SET CYREG_SCB3_INTR_TX_SET
N#define UART_0_FPC_SCB__RX_CTRL CYREG_SCB3_RX_CTRL
N#define UART_0_FPC_SCB__RX_FIFO_CTRL CYREG_SCB3_RX_FIFO_CTRL
N#define UART_0_FPC_SCB__RX_FIFO_RD CYREG_SCB3_RX_FIFO_RD
N#define UART_0_FPC_SCB__RX_FIFO_RD_SILENT CYREG_SCB3_RX_FIFO_RD_SILENT
N#define UART_0_FPC_SCB__RX_FIFO_STATUS CYREG_SCB3_RX_FIFO_STATUS
N#define UART_0_FPC_SCB__RX_MATCH CYREG_SCB3_RX_MATCH
N#define UART_0_FPC_SCB__SPI_CTRL CYREG_SCB3_SPI_CTRL
N#define UART_0_FPC_SCB__SPI_STATUS CYREG_SCB3_SPI_STATUS
N#define UART_0_FPC_SCB__SS0_POSISTION 0u
N#define UART_0_FPC_SCB__SS1_POSISTION 1u
N#define UART_0_FPC_SCB__SS2_POSISTION 2u
N#define UART_0_FPC_SCB__SS3_POSISTION 3u
N#define UART_0_FPC_SCB__STATUS CYREG_SCB3_STATUS
N#define UART_0_FPC_SCB__TX_CTRL CYREG_SCB3_TX_CTRL
N#define UART_0_FPC_SCB__TX_FIFO_CTRL CYREG_SCB3_TX_FIFO_CTRL
N#define UART_0_FPC_SCB__TX_FIFO_STATUS CYREG_SCB3_TX_FIFO_STATUS
N#define UART_0_FPC_SCB__TX_FIFO_WR CYREG_SCB3_TX_FIFO_WR
N#define UART_0_FPC_SCB__UART_CTRL CYREG_SCB3_UART_CTRL
N#define UART_0_FPC_SCB__UART_FLOW_CTRL CYREG_SCB3_UART_FLOW_CTRL
N#define UART_0_FPC_SCB__UART_RX_CTRL CYREG_SCB3_UART_RX_CTRL
N#define UART_0_FPC_SCB__UART_RX_STATUS CYREG_SCB3_UART_RX_STATUS
N#define UART_0_FPC_SCB__UART_TX_CTRL CYREG_SCB3_UART_TX_CTRL
N#define UART_0_FPC_SCB_IRQ__INTC_CLR_EN_REG CYREG_CM0P_ICER
N#define UART_0_FPC_SCB_IRQ__INTC_CLR_PD_REG CYREG_CM0P_ICPR
N#define UART_0_FPC_SCB_IRQ__INTC_MASK 0x400u
N#define UART_0_FPC_SCB_IRQ__INTC_NUMBER 10u
N#define UART_0_FPC_SCB_IRQ__INTC_PRIOR_MASK 0xC00000u
N#define UART_0_FPC_SCB_IRQ__INTC_PRIOR_NUM 3u
N#define UART_0_FPC_SCB_IRQ__INTC_PRIOR_REG CYREG_CM0P_IPR2
N#define UART_0_FPC_SCB_IRQ__INTC_SET_EN_REG CYREG_CM0P_ISER
N#define UART_0_FPC_SCB_IRQ__INTC_SET_PD_REG CYREG_CM0P_ISPR
N#define UART_0_FPC_SCBCLK__CTRL_REGISTER CYREG_PERI_PCLK_CTL3
N#define UART_0_FPC_SCBCLK__DIV_ID 0x00000045u
N#define UART_0_FPC_SCBCLK__DIV_REGISTER CYREG_PERI_DIV_16_CTL5
N#define UART_0_FPC_SCBCLK__PA_DIV_ID 0x000000FFu
N#define UART_0_FPC_tx__0__DR CYREG_GPIO_PRT6_DR
N#define UART_0_FPC_tx__0__DR_CLR CYREG_GPIO_PRT6_DR_CLR
N#define UART_0_FPC_tx__0__DR_INV CYREG_GPIO_PRT6_DR_INV
N#define UART_0_FPC_tx__0__DR_SET CYREG_GPIO_PRT6_DR_SET
N#define UART_0_FPC_tx__0__HSIOM CYREG_HSIOM_PORT_SEL6
N#define UART_0_FPC_tx__0__HSIOM_GPIO 0u
N#define UART_0_FPC_tx__0__HSIOM_I2C 14u
N#define UART_0_FPC_tx__0__HSIOM_I2C_SDA 14u
N#define UART_0_FPC_tx__0__HSIOM_MASK 0x000000F0u
N#define UART_0_FPC_tx__0__HSIOM_SHIFT 4u
N#define UART_0_FPC_tx__0__HSIOM_SPI 15u
N#define UART_0_FPC_tx__0__HSIOM_SPI_MISO 15u
N#define UART_0_FPC_tx__0__HSIOM_UART 9u
N#define UART_0_FPC_tx__0__HSIOM_UART_TX 9u
N#define UART_0_FPC_tx__0__INTCFG CYREG_GPIO_PRT6_INTR_CFG
N#define UART_0_FPC_tx__0__INTR CYREG_GPIO_PRT6_INTR
N#define UART_0_FPC_tx__0__INTR_CFG CYREG_GPIO_PRT6_INTR_CFG
N#define UART_0_FPC_tx__0__INTSTAT CYREG_GPIO_PRT6_INTR
N#define UART_0_FPC_tx__0__MASK 0x02u
N#define UART_0_FPC_tx__0__PC CYREG_GPIO_PRT6_PC
N#define UART_0_FPC_tx__0__PC2 CYREG_GPIO_PRT6_PC2
N#define UART_0_FPC_tx__0__PORT 6u
N#define UART_0_FPC_tx__0__PS CYREG_GPIO_PRT6_PS
N#define UART_0_FPC_tx__0__SHIFT 1u
N#define UART_0_FPC_tx__DR CYREG_GPIO_PRT6_DR
N#define UART_0_FPC_tx__DR_CLR CYREG_GPIO_PRT6_DR_CLR
N#define UART_0_FPC_tx__DR_INV CYREG_GPIO_PRT6_DR_INV
N#define UART_0_FPC_tx__DR_SET CYREG_GPIO_PRT6_DR_SET
N#define UART_0_FPC_tx__INTCFG CYREG_GPIO_PRT6_INTR_CFG
N#define UART_0_FPC_tx__INTR CYREG_GPIO_PRT6_INTR
N#define UART_0_FPC_tx__INTR_CFG CYREG_GPIO_PRT6_INTR_CFG
N#define UART_0_FPC_tx__INTSTAT CYREG_GPIO_PRT6_INTR
N#define UART_0_FPC_tx__MASK 0x02u
N#define UART_0_FPC_tx__PC CYREG_GPIO_PRT6_PC
N#define UART_0_FPC_tx__PC2 CYREG_GPIO_PRT6_PC2
N#define UART_0_FPC_tx__PORT 6u
N#define UART_0_FPC_tx__PS CYREG_GPIO_PRT6_PS
N#define UART_0_FPC_tx__SHIFT 1u
N
N/* UART_1_BLE */
N#define UART_1_BLE_rx__0__DR CYREG_GPIO_PRT1_DR
N#define UART_1_BLE_rx__0__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define UART_1_BLE_rx__0__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define UART_1_BLE_rx__0__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define UART_1_BLE_rx__0__HSIOM CYREG_HSIOM_PORT_SEL1
N#define UART_1_BLE_rx__0__HSIOM_GPIO 0u
N#define UART_1_BLE_rx__0__HSIOM_I2C 14u
N#define UART_1_BLE_rx__0__HSIOM_I2C_SCL 14u
N#define UART_1_BLE_rx__0__HSIOM_MASK 0x0000000Fu
N#define UART_1_BLE_rx__0__HSIOM_SHIFT 0u
N#define UART_1_BLE_rx__0__HSIOM_SPI 15u
N#define UART_1_BLE_rx__0__HSIOM_SPI_MOSI 15u
N#define UART_1_BLE_rx__0__HSIOM_UART 9u
N#define UART_1_BLE_rx__0__HSIOM_UART_RX 9u
N#define UART_1_BLE_rx__0__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define UART_1_BLE_rx__0__INTR CYREG_GPIO_PRT1_INTR
N#define UART_1_BLE_rx__0__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define UART_1_BLE_rx__0__INTSTAT CYREG_GPIO_PRT1_INTR
N#define UART_1_BLE_rx__0__MASK 0x01u
N#define UART_1_BLE_rx__0__PC CYREG_GPIO_PRT1_PC
N#define UART_1_BLE_rx__0__PC2 CYREG_GPIO_PRT1_PC2
N#define UART_1_BLE_rx__0__PORT 1u
N#define UART_1_BLE_rx__0__PS CYREG_GPIO_PRT1_PS
N#define UART_1_BLE_rx__0__SHIFT 0u
N#define UART_1_BLE_rx__DR CYREG_GPIO_PRT1_DR
N#define UART_1_BLE_rx__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define UART_1_BLE_rx__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define UART_1_BLE_rx__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define UART_1_BLE_rx__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define UART_1_BLE_rx__INTR CYREG_GPIO_PRT1_INTR
N#define UART_1_BLE_rx__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define UART_1_BLE_rx__INTSTAT CYREG_GPIO_PRT1_INTR
N#define UART_1_BLE_rx__MASK 0x01u
N#define UART_1_BLE_rx__PC CYREG_GPIO_PRT1_PC
N#define UART_1_BLE_rx__PC2 CYREG_GPIO_PRT1_PC2
N#define UART_1_BLE_rx__PORT 1u
N#define UART_1_BLE_rx__PS CYREG_GPIO_PRT1_PS
N#define UART_1_BLE_rx__SHIFT 0u
N#define UART_1_BLE_SCB__CTRL CYREG_SCB0_CTRL
N#define UART_1_BLE_SCB__EZ_DATA0 CYREG_SCB0_EZ_DATA0
N#define UART_1_BLE_SCB__EZ_DATA1 CYREG_SCB0_EZ_DATA1
N#define UART_1_BLE_SCB__EZ_DATA10 CYREG_SCB0_EZ_DATA10
N#define UART_1_BLE_SCB__EZ_DATA11 CYREG_SCB0_EZ_DATA11
N#define UART_1_BLE_SCB__EZ_DATA12 CYREG_SCB0_EZ_DATA12
N#define UART_1_BLE_SCB__EZ_DATA13 CYREG_SCB0_EZ_DATA13
N#define UART_1_BLE_SCB__EZ_DATA14 CYREG_SCB0_EZ_DATA14
N#define UART_1_BLE_SCB__EZ_DATA15 CYREG_SCB0_EZ_DATA15
N#define UART_1_BLE_SCB__EZ_DATA16 CYREG_SCB0_EZ_DATA16
N#define UART_1_BLE_SCB__EZ_DATA17 CYREG_SCB0_EZ_DATA17
N#define UART_1_BLE_SCB__EZ_DATA18 CYREG_SCB0_EZ_DATA18
N#define UART_1_BLE_SCB__EZ_DATA19 CYREG_SCB0_EZ_DATA19
N#define UART_1_BLE_SCB__EZ_DATA2 CYREG_SCB0_EZ_DATA2
N#define UART_1_BLE_SCB__EZ_DATA20 CYREG_SCB0_EZ_DATA20
N#define UART_1_BLE_SCB__EZ_DATA21 CYREG_SCB0_EZ_DATA21
N#define UART_1_BLE_SCB__EZ_DATA22 CYREG_SCB0_EZ_DATA22
N#define UART_1_BLE_SCB__EZ_DATA23 CYREG_SCB0_EZ_DATA23
N#define UART_1_BLE_SCB__EZ_DATA24 CYREG_SCB0_EZ_DATA24
N#define UART_1_BLE_SCB__EZ_DATA25 CYREG_SCB0_EZ_DATA25
N#define UART_1_BLE_SCB__EZ_DATA26 CYREG_SCB0_EZ_DATA26
N#define UART_1_BLE_SCB__EZ_DATA27 CYREG_SCB0_EZ_DATA27
N#define UART_1_BLE_SCB__EZ_DATA28 CYREG_SCB0_EZ_DATA28
N#define UART_1_BLE_SCB__EZ_DATA29 CYREG_SCB0_EZ_DATA29
N#define UART_1_BLE_SCB__EZ_DATA3 CYREG_SCB0_EZ_DATA3
N#define UART_1_BLE_SCB__EZ_DATA30 CYREG_SCB0_EZ_DATA30
N#define UART_1_BLE_SCB__EZ_DATA31 CYREG_SCB0_EZ_DATA31
N#define UART_1_BLE_SCB__EZ_DATA4 CYREG_SCB0_EZ_DATA4
N#define UART_1_BLE_SCB__EZ_DATA5 CYREG_SCB0_EZ_DATA5
N#define UART_1_BLE_SCB__EZ_DATA6 CYREG_SCB0_EZ_DATA6
N#define UART_1_BLE_SCB__EZ_DATA7 CYREG_SCB0_EZ_DATA7
N#define UART_1_BLE_SCB__EZ_DATA8 CYREG_SCB0_EZ_DATA8
N#define UART_1_BLE_SCB__EZ_DATA9 CYREG_SCB0_EZ_DATA9
N#define UART_1_BLE_SCB__I2C_CFG CYREG_SCB0_I2C_CFG
N#define UART_1_BLE_SCB__I2C_CTRL CYREG_SCB0_I2C_CTRL
N#define UART_1_BLE_SCB__I2C_M_CMD CYREG_SCB0_I2C_M_CMD
N#define UART_1_BLE_SCB__I2C_S_CMD CYREG_SCB0_I2C_S_CMD
N#define UART_1_BLE_SCB__I2C_STATUS CYREG_SCB0_I2C_STATUS
N#define UART_1_BLE_SCB__INTR_CAUSE CYREG_SCB0_INTR_CAUSE
N#define UART_1_BLE_SCB__INTR_I2C_EC CYREG_SCB0_INTR_I2C_EC
N#define UART_1_BLE_SCB__INTR_I2C_EC_MASK CYREG_SCB0_INTR_I2C_EC_MASK
N#define UART_1_BLE_SCB__INTR_I2C_EC_MASKED CYREG_SCB0_INTR_I2C_EC_MASKED
N#define UART_1_BLE_SCB__INTR_M CYREG_SCB0_INTR_M
N#define UART_1_BLE_SCB__INTR_M_MASK CYREG_SCB0_INTR_M_MASK
N#define UART_1_BLE_SCB__INTR_M_MASKED CYREG_SCB0_INTR_M_MASKED
N#define UART_1_BLE_SCB__INTR_M_SET CYREG_SCB0_INTR_M_SET
N#define UART_1_BLE_SCB__INTR_RX CYREG_SCB0_INTR_RX
N#define UART_1_BLE_SCB__INTR_RX_MASK CYREG_SCB0_INTR_RX_MASK
N#define UART_1_BLE_SCB__INTR_RX_MASKED CYREG_SCB0_INTR_RX_MASKED
N#define UART_1_BLE_SCB__INTR_RX_SET CYREG_SCB0_INTR_RX_SET
N#define UART_1_BLE_SCB__INTR_S CYREG_SCB0_INTR_S
N#define UART_1_BLE_SCB__INTR_S_MASK CYREG_SCB0_INTR_S_MASK
N#define UART_1_BLE_SCB__INTR_S_MASKED CYREG_SCB0_INTR_S_MASKED
N#define UART_1_BLE_SCB__INTR_S_SET CYREG_SCB0_INTR_S_SET
N#define UART_1_BLE_SCB__INTR_SPI_EC CYREG_SCB0_INTR_SPI_EC
N#define UART_1_BLE_SCB__INTR_SPI_EC_MASK CYREG_SCB0_INTR_SPI_EC_MASK
N#define UART_1_BLE_SCB__INTR_SPI_EC_MASKED CYREG_SCB0_INTR_SPI_EC_MASKED
N#define UART_1_BLE_SCB__INTR_TX CYREG_SCB0_INTR_TX
N#define UART_1_BLE_SCB__INTR_TX_MASK CYREG_SCB0_INTR_TX_MASK
N#define UART_1_BLE_SCB__INTR_TX_MASKED CYREG_SCB0_INTR_TX_MASKED
N#define UART_1_BLE_SCB__INTR_TX_SET CYREG_SCB0_INTR_TX_SET
N#define UART_1_BLE_SCB__RX_CTRL CYREG_SCB0_RX_CTRL
N#define UART_1_BLE_SCB__RX_FIFO_CTRL CYREG_SCB0_RX_FIFO_CTRL
N#define UART_1_BLE_SCB__RX_FIFO_RD CYREG_SCB0_RX_FIFO_RD
N#define UART_1_BLE_SCB__RX_FIFO_RD_SILENT CYREG_SCB0_RX_FIFO_RD_SILENT
N#define UART_1_BLE_SCB__RX_FIFO_STATUS CYREG_SCB0_RX_FIFO_STATUS
N#define UART_1_BLE_SCB__RX_MATCH CYREG_SCB0_RX_MATCH
N#define UART_1_BLE_SCB__SPI_CTRL CYREG_SCB0_SPI_CTRL
N#define UART_1_BLE_SCB__SPI_STATUS CYREG_SCB0_SPI_STATUS
N#define UART_1_BLE_SCB__SS0_POSISTION 0u
N#define UART_1_BLE_SCB__SS1_POSISTION 1u
N#define UART_1_BLE_SCB__SS2_POSISTION 2u
N#define UART_1_BLE_SCB__SS3_POSISTION 3u
N#define UART_1_BLE_SCB__STATUS CYREG_SCB0_STATUS
N#define UART_1_BLE_SCB__TX_CTRL CYREG_SCB0_TX_CTRL
N#define UART_1_BLE_SCB__TX_FIFO_CTRL CYREG_SCB0_TX_FIFO_CTRL
N#define UART_1_BLE_SCB__TX_FIFO_STATUS CYREG_SCB0_TX_FIFO_STATUS
N#define UART_1_BLE_SCB__TX_FIFO_WR CYREG_SCB0_TX_FIFO_WR
N#define UART_1_BLE_SCB__UART_CTRL CYREG_SCB0_UART_CTRL
N#define UART_1_BLE_SCB__UART_FLOW_CTRL CYREG_SCB0_UART_FLOW_CTRL
N#define UART_1_BLE_SCB__UART_RX_CTRL CYREG_SCB0_UART_RX_CTRL
N#define UART_1_BLE_SCB__UART_RX_STATUS CYREG_SCB0_UART_RX_STATUS
N#define UART_1_BLE_SCB__UART_TX_CTRL CYREG_SCB0_UART_TX_CTRL
N#define UART_1_BLE_SCB_IRQ__INTC_CLR_EN_REG CYREG_CM0P_ICER
N#define UART_1_BLE_SCB_IRQ__INTC_CLR_PD_REG CYREG_CM0P_ICPR
N#define UART_1_BLE_SCB_IRQ__INTC_MASK 0x80u
N#define UART_1_BLE_SCB_IRQ__INTC_NUMBER 7u
N#define UART_1_BLE_SCB_IRQ__INTC_PRIOR_MASK 0xC0000000u
N#define UART_1_BLE_SCB_IRQ__INTC_PRIOR_NUM 3u
N#define UART_1_BLE_SCB_IRQ__INTC_PRIOR_REG CYREG_CM0P_IPR1
N#define UART_1_BLE_SCB_IRQ__INTC_SET_EN_REG CYREG_CM0P_ISER
N#define UART_1_BLE_SCB_IRQ__INTC_SET_PD_REG CYREG_CM0P_ISPR
N#define UART_1_BLE_SCBCLK__CTRL_REGISTER CYREG_PERI_PCLK_CTL0
N#define UART_1_BLE_SCBCLK__DIV_ID 0x00000046u
N#define UART_1_BLE_SCBCLK__DIV_REGISTER CYREG_PERI_DIV_16_CTL6
N#define UART_1_BLE_SCBCLK__PA_DIV_ID 0x000000FFu
N#define UART_1_BLE_tx__0__DR CYREG_GPIO_PRT1_DR
N#define UART_1_BLE_tx__0__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define UART_1_BLE_tx__0__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define UART_1_BLE_tx__0__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define UART_1_BLE_tx__0__HSIOM CYREG_HSIOM_PORT_SEL1
N#define UART_1_BLE_tx__0__HSIOM_GPIO 0u
N#define UART_1_BLE_tx__0__HSIOM_I2C 14u
N#define UART_1_BLE_tx__0__HSIOM_I2C_SDA 14u
N#define UART_1_BLE_tx__0__HSIOM_MASK 0x000000F0u
N#define UART_1_BLE_tx__0__HSIOM_SHIFT 4u
N#define UART_1_BLE_tx__0__HSIOM_SPI 15u
N#define UART_1_BLE_tx__0__HSIOM_SPI_MISO 15u
N#define UART_1_BLE_tx__0__HSIOM_UART 9u
N#define UART_1_BLE_tx__0__HSIOM_UART_TX 9u
N#define UART_1_BLE_tx__0__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define UART_1_BLE_tx__0__INTR CYREG_GPIO_PRT1_INTR
N#define UART_1_BLE_tx__0__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define UART_1_BLE_tx__0__INTSTAT CYREG_GPIO_PRT1_INTR
N#define UART_1_BLE_tx__0__MASK 0x02u
N#define UART_1_BLE_tx__0__PC CYREG_GPIO_PRT1_PC
N#define UART_1_BLE_tx__0__PC2 CYREG_GPIO_PRT1_PC2
N#define UART_1_BLE_tx__0__PORT 1u
N#define UART_1_BLE_tx__0__PS CYREG_GPIO_PRT1_PS
N#define UART_1_BLE_tx__0__SHIFT 1u
N#define UART_1_BLE_tx__DR CYREG_GPIO_PRT1_DR
N#define UART_1_BLE_tx__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define UART_1_BLE_tx__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define UART_1_BLE_tx__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define UART_1_BLE_tx__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define UART_1_BLE_tx__INTR CYREG_GPIO_PRT1_INTR
N#define UART_1_BLE_tx__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define UART_1_BLE_tx__INTSTAT CYREG_GPIO_PRT1_INTR
N#define UART_1_BLE_tx__MASK 0x02u
N#define UART_1_BLE_tx__PC CYREG_GPIO_PRT1_PC
N#define UART_1_BLE_tx__PC2 CYREG_GPIO_PRT1_PC2
N#define UART_1_BLE_tx__PORT 1u
N#define UART_1_BLE_tx__PS CYREG_GPIO_PRT1_PS
N#define UART_1_BLE_tx__SHIFT 1u
N
N/* UART_2_EXT */
N#define UART_2_EXT_rx__0__DR CYREG_GPIO_PRT5_DR
N#define UART_2_EXT_rx__0__DR_CLR CYREG_GPIO_PRT5_DR_CLR
N#define UART_2_EXT_rx__0__DR_INV CYREG_GPIO_PRT5_DR_INV
N#define UART_2_EXT_rx__0__DR_SET CYREG_GPIO_PRT5_DR_SET
N#define UART_2_EXT_rx__0__HSIOM CYREG_HSIOM_PORT_SEL5
N#define UART_2_EXT_rx__0__HSIOM_GPIO 0u
N#define UART_2_EXT_rx__0__HSIOM_I2C 14u
N#define UART_2_EXT_rx__0__HSIOM_I2C_SCL 14u
N#define UART_2_EXT_rx__0__HSIOM_MASK 0x0000000Fu
N#define UART_2_EXT_rx__0__HSIOM_SHIFT 0u
N#define UART_2_EXT_rx__0__HSIOM_SPI 15u
N#define UART_2_EXT_rx__0__HSIOM_SPI_MOSI 15u
N#define UART_2_EXT_rx__0__HSIOM_UART 11u
N#define UART_2_EXT_rx__0__HSIOM_UART_RX 11u
N#define UART_2_EXT_rx__0__INTCFG CYREG_GPIO_PRT5_INTR_CFG
N#define UART_2_EXT_rx__0__INTR CYREG_GPIO_PRT5_INTR
N#define UART_2_EXT_rx__0__INTR_CFG CYREG_GPIO_PRT5_INTR_CFG
N#define UART_2_EXT_rx__0__INTSTAT CYREG_GPIO_PRT5_INTR
N#define UART_2_EXT_rx__0__MASK 0x01u
N#define UART_2_EXT_rx__0__PC CYREG_GPIO_PRT5_PC
N#define UART_2_EXT_rx__0__PC2 CYREG_GPIO_PRT5_PC2
N#define UART_2_EXT_rx__0__PORT 5u
N#define UART_2_EXT_rx__0__PS CYREG_GPIO_PRT5_PS
N#define UART_2_EXT_rx__0__SHIFT 0u
N#define UART_2_EXT_rx__DR CYREG_GPIO_PRT5_DR
N#define UART_2_EXT_rx__DR_CLR CYREG_GPIO_PRT5_DR_CLR
N#define UART_2_EXT_rx__DR_INV CYREG_GPIO_PRT5_DR_INV
N#define UART_2_EXT_rx__DR_SET CYREG_GPIO_PRT5_DR_SET
N#define UART_2_EXT_rx__INTCFG CYREG_GPIO_PRT5_INTR_CFG
N#define UART_2_EXT_rx__INTR CYREG_GPIO_PRT5_INTR
N#define UART_2_EXT_rx__INTR_CFG CYREG_GPIO_PRT5_INTR_CFG
N#define UART_2_EXT_rx__INTSTAT CYREG_GPIO_PRT5_INTR
N#define UART_2_EXT_rx__MASK 0x01u
N#define UART_2_EXT_rx__PC CYREG_GPIO_PRT5_PC
N#define UART_2_EXT_rx__PC2 CYREG_GPIO_PRT5_PC2
N#define UART_2_EXT_rx__PORT 5u
N#define UART_2_EXT_rx__PS CYREG_GPIO_PRT5_PS
N#define UART_2_EXT_rx__SHIFT 0u
N#define UART_2_EXT_SCB__CTRL CYREG_SCB2_CTRL
N#define UART_2_EXT_SCB__EZ_DATA0 CYREG_SCB2_EZ_DATA0
N#define UART_2_EXT_SCB__EZ_DATA1 CYREG_SCB2_EZ_DATA1
N#define UART_2_EXT_SCB__EZ_DATA10 CYREG_SCB2_EZ_DATA10
N#define UART_2_EXT_SCB__EZ_DATA11 CYREG_SCB2_EZ_DATA11
N#define UART_2_EXT_SCB__EZ_DATA12 CYREG_SCB2_EZ_DATA12
N#define UART_2_EXT_SCB__EZ_DATA13 CYREG_SCB2_EZ_DATA13
N#define UART_2_EXT_SCB__EZ_DATA14 CYREG_SCB2_EZ_DATA14
N#define UART_2_EXT_SCB__EZ_DATA15 CYREG_SCB2_EZ_DATA15
N#define UART_2_EXT_SCB__EZ_DATA16 CYREG_SCB2_EZ_DATA16
N#define UART_2_EXT_SCB__EZ_DATA17 CYREG_SCB2_EZ_DATA17
N#define UART_2_EXT_SCB__EZ_DATA18 CYREG_SCB2_EZ_DATA18
N#define UART_2_EXT_SCB__EZ_DATA19 CYREG_SCB2_EZ_DATA19
N#define UART_2_EXT_SCB__EZ_DATA2 CYREG_SCB2_EZ_DATA2
N#define UART_2_EXT_SCB__EZ_DATA20 CYREG_SCB2_EZ_DATA20
N#define UART_2_EXT_SCB__EZ_DATA21 CYREG_SCB2_EZ_DATA21
N#define UART_2_EXT_SCB__EZ_DATA22 CYREG_SCB2_EZ_DATA22
N#define UART_2_EXT_SCB__EZ_DATA23 CYREG_SCB2_EZ_DATA23
N#define UART_2_EXT_SCB__EZ_DATA24 CYREG_SCB2_EZ_DATA24
N#define UART_2_EXT_SCB__EZ_DATA25 CYREG_SCB2_EZ_DATA25
N#define UART_2_EXT_SCB__EZ_DATA26 CYREG_SCB2_EZ_DATA26
N#define UART_2_EXT_SCB__EZ_DATA27 CYREG_SCB2_EZ_DATA27
N#define UART_2_EXT_SCB__EZ_DATA28 CYREG_SCB2_EZ_DATA28
N#define UART_2_EXT_SCB__EZ_DATA29 CYREG_SCB2_EZ_DATA29
N#define UART_2_EXT_SCB__EZ_DATA3 CYREG_SCB2_EZ_DATA3
N#define UART_2_EXT_SCB__EZ_DATA30 CYREG_SCB2_EZ_DATA30
N#define UART_2_EXT_SCB__EZ_DATA31 CYREG_SCB2_EZ_DATA31
N#define UART_2_EXT_SCB__EZ_DATA4 CYREG_SCB2_EZ_DATA4
N#define UART_2_EXT_SCB__EZ_DATA5 CYREG_SCB2_EZ_DATA5
N#define UART_2_EXT_SCB__EZ_DATA6 CYREG_SCB2_EZ_DATA6
N#define UART_2_EXT_SCB__EZ_DATA7 CYREG_SCB2_EZ_DATA7
N#define UART_2_EXT_SCB__EZ_DATA8 CYREG_SCB2_EZ_DATA8
N#define UART_2_EXT_SCB__EZ_DATA9 CYREG_SCB2_EZ_DATA9
N#define UART_2_EXT_SCB__I2C_CFG CYREG_SCB2_I2C_CFG
N#define UART_2_EXT_SCB__I2C_CTRL CYREG_SCB2_I2C_CTRL
N#define UART_2_EXT_SCB__I2C_M_CMD CYREG_SCB2_I2C_M_CMD
N#define UART_2_EXT_SCB__I2C_S_CMD CYREG_SCB2_I2C_S_CMD
N#define UART_2_EXT_SCB__I2C_STATUS CYREG_SCB2_I2C_STATUS
N#define UART_2_EXT_SCB__INTR_CAUSE CYREG_SCB2_INTR_CAUSE
N#define UART_2_EXT_SCB__INTR_I2C_EC CYREG_SCB2_INTR_I2C_EC
N#define UART_2_EXT_SCB__INTR_I2C_EC_MASK CYREG_SCB2_INTR_I2C_EC_MASK
N#define UART_2_EXT_SCB__INTR_I2C_EC_MASKED CYREG_SCB2_INTR_I2C_EC_MASKED
N#define UART_2_EXT_SCB__INTR_M CYREG_SCB2_INTR_M
N#define UART_2_EXT_SCB__INTR_M_MASK CYREG_SCB2_INTR_M_MASK
N#define UART_2_EXT_SCB__INTR_M_MASKED CYREG_SCB2_INTR_M_MASKED
N#define UART_2_EXT_SCB__INTR_M_SET CYREG_SCB2_INTR_M_SET
N#define UART_2_EXT_SCB__INTR_RX CYREG_SCB2_INTR_RX
N#define UART_2_EXT_SCB__INTR_RX_MASK CYREG_SCB2_INTR_RX_MASK
N#define UART_2_EXT_SCB__INTR_RX_MASKED CYREG_SCB2_INTR_RX_MASKED
N#define UART_2_EXT_SCB__INTR_RX_SET CYREG_SCB2_INTR_RX_SET
N#define UART_2_EXT_SCB__INTR_S CYREG_SCB2_INTR_S
N#define UART_2_EXT_SCB__INTR_S_MASK CYREG_SCB2_INTR_S_MASK
N#define UART_2_EXT_SCB__INTR_S_MASKED CYREG_SCB2_INTR_S_MASKED
N#define UART_2_EXT_SCB__INTR_S_SET CYREG_SCB2_INTR_S_SET
N#define UART_2_EXT_SCB__INTR_SPI_EC CYREG_SCB2_INTR_SPI_EC
N#define UART_2_EXT_SCB__INTR_SPI_EC_MASK CYREG_SCB2_INTR_SPI_EC_MASK
N#define UART_2_EXT_SCB__INTR_SPI_EC_MASKED CYREG_SCB2_INTR_SPI_EC_MASKED
N#define UART_2_EXT_SCB__INTR_TX CYREG_SCB2_INTR_TX
N#define UART_2_EXT_SCB__INTR_TX_MASK CYREG_SCB2_INTR_TX_MASK
N#define UART_2_EXT_SCB__INTR_TX_MASKED CYREG_SCB2_INTR_TX_MASKED
N#define UART_2_EXT_SCB__INTR_TX_SET CYREG_SCB2_INTR_TX_SET
N#define UART_2_EXT_SCB__RX_CTRL CYREG_SCB2_RX_CTRL
N#define UART_2_EXT_SCB__RX_FIFO_CTRL CYREG_SCB2_RX_FIFO_CTRL
N#define UART_2_EXT_SCB__RX_FIFO_RD CYREG_SCB2_RX_FIFO_RD
N#define UART_2_EXT_SCB__RX_FIFO_RD_SILENT CYREG_SCB2_RX_FIFO_RD_SILENT
N#define UART_2_EXT_SCB__RX_FIFO_STATUS CYREG_SCB2_RX_FIFO_STATUS
N#define UART_2_EXT_SCB__RX_MATCH CYREG_SCB2_RX_MATCH
N#define UART_2_EXT_SCB__SPI_CTRL CYREG_SCB2_SPI_CTRL
N#define UART_2_EXT_SCB__SPI_STATUS CYREG_SCB2_SPI_STATUS
N#define UART_2_EXT_SCB__SS0_POSISTION 0u
N#define UART_2_EXT_SCB__SS1_POSISTION 1u
N#define UART_2_EXT_SCB__SS2_POSISTION 2u
N#define UART_2_EXT_SCB__SS3_POSISTION 3u
N#define UART_2_EXT_SCB__STATUS CYREG_SCB2_STATUS
N#define UART_2_EXT_SCB__TX_CTRL CYREG_SCB2_TX_CTRL
N#define UART_2_EXT_SCB__TX_FIFO_CTRL CYREG_SCB2_TX_FIFO_CTRL
N#define UART_2_EXT_SCB__TX_FIFO_STATUS CYREG_SCB2_TX_FIFO_STATUS
N#define UART_2_EXT_SCB__TX_FIFO_WR CYREG_SCB2_TX_FIFO_WR
N#define UART_2_EXT_SCB__UART_CTRL CYREG_SCB2_UART_CTRL
N#define UART_2_EXT_SCB__UART_FLOW_CTRL CYREG_SCB2_UART_FLOW_CTRL
N#define UART_2_EXT_SCB__UART_RX_CTRL CYREG_SCB2_UART_RX_CTRL
N#define UART_2_EXT_SCB__UART_RX_STATUS CYREG_SCB2_UART_RX_STATUS
N#define UART_2_EXT_SCB__UART_TX_CTRL CYREG_SCB2_UART_TX_CTRL
N#define UART_2_EXT_SCB_IRQ__INTC_CLR_EN_REG CYREG_CM0P_ICER
N#define UART_2_EXT_SCB_IRQ__INTC_CLR_PD_REG CYREG_CM0P_ICPR
N#define UART_2_EXT_SCB_IRQ__INTC_MASK 0x200u
N#define UART_2_EXT_SCB_IRQ__INTC_NUMBER 9u
N#define UART_2_EXT_SCB_IRQ__INTC_PRIOR_MASK 0xC000u
N#define UART_2_EXT_SCB_IRQ__INTC_PRIOR_NUM 3u
N#define UART_2_EXT_SCB_IRQ__INTC_PRIOR_REG CYREG_CM0P_IPR2
N#define UART_2_EXT_SCB_IRQ__INTC_SET_EN_REG CYREG_CM0P_ISER
N#define UART_2_EXT_SCB_IRQ__INTC_SET_PD_REG CYREG_CM0P_ISPR
N#define UART_2_EXT_SCBCLK__CTRL_REGISTER CYREG_PERI_PCLK_CTL2
N#define UART_2_EXT_SCBCLK__DIV_ID 0x00000044u
N#define UART_2_EXT_SCBCLK__DIV_REGISTER CYREG_PERI_DIV_16_CTL4
N#define UART_2_EXT_SCBCLK__PA_DIV_ID 0x000000FFu
N#define UART_2_EXT_tx__0__DR CYREG_GPIO_PRT5_DR
N#define UART_2_EXT_tx__0__DR_CLR CYREG_GPIO_PRT5_DR_CLR
N#define UART_2_EXT_tx__0__DR_INV CYREG_GPIO_PRT5_DR_INV
N#define UART_2_EXT_tx__0__DR_SET CYREG_GPIO_PRT5_DR_SET
N#define UART_2_EXT_tx__0__HSIOM CYREG_HSIOM_PORT_SEL5
N#define UART_2_EXT_tx__0__HSIOM_GPIO 0u
N#define UART_2_EXT_tx__0__HSIOM_I2C 14u
N#define UART_2_EXT_tx__0__HSIOM_I2C_SDA 14u
N#define UART_2_EXT_tx__0__HSIOM_MASK 0x000000F0u
N#define UART_2_EXT_tx__0__HSIOM_SHIFT 4u
N#define UART_2_EXT_tx__0__HSIOM_SPI 15u
N#define UART_2_EXT_tx__0__HSIOM_SPI_MISO 15u
N#define UART_2_EXT_tx__0__HSIOM_UART 11u
N#define UART_2_EXT_tx__0__HSIOM_UART_TX 11u
N#define UART_2_EXT_tx__0__INTCFG CYREG_GPIO_PRT5_INTR_CFG
N#define UART_2_EXT_tx__0__INTR CYREG_GPIO_PRT5_INTR
N#define UART_2_EXT_tx__0__INTR_CFG CYREG_GPIO_PRT5_INTR_CFG
N#define UART_2_EXT_tx__0__INTSTAT CYREG_GPIO_PRT5_INTR
N#define UART_2_EXT_tx__0__MASK 0x02u
N#define UART_2_EXT_tx__0__PC CYREG_GPIO_PRT5_PC
N#define UART_2_EXT_tx__0__PC2 CYREG_GPIO_PRT5_PC2
N#define UART_2_EXT_tx__0__PORT 5u
N#define UART_2_EXT_tx__0__PS CYREG_GPIO_PRT5_PS
N#define UART_2_EXT_tx__0__SHIFT 1u
N#define UART_2_EXT_tx__DR CYREG_GPIO_PRT5_DR
N#define UART_2_EXT_tx__DR_CLR CYREG_GPIO_PRT5_DR_CLR
N#define UART_2_EXT_tx__DR_INV CYREG_GPIO_PRT5_DR_INV
N#define UART_2_EXT_tx__DR_SET CYREG_GPIO_PRT5_DR_SET
N#define UART_2_EXT_tx__INTCFG CYREG_GPIO_PRT5_INTR_CFG
N#define UART_2_EXT_tx__INTR CYREG_GPIO_PRT5_INTR
N#define UART_2_EXT_tx__INTR_CFG CYREG_GPIO_PRT5_INTR_CFG
N#define UART_2_EXT_tx__INTSTAT CYREG_GPIO_PRT5_INTR
N#define UART_2_EXT_tx__MASK 0x02u
N#define UART_2_EXT_tx__PC CYREG_GPIO_PRT5_PC
N#define UART_2_EXT_tx__PC2 CYREG_GPIO_PRT5_PC2
N#define UART_2_EXT_tx__PORT 5u
N#define UART_2_EXT_tx__PS CYREG_GPIO_PRT5_PS
N#define UART_2_EXT_tx__SHIFT 1u
N
N/* VOICE_BUSY */
N#define VOICE_BUSY__0__DR CYREG_GPIO_PRT5_DR
N#define VOICE_BUSY__0__DR_CLR CYREG_GPIO_PRT5_DR_CLR
N#define VOICE_BUSY__0__DR_INV CYREG_GPIO_PRT5_DR_INV
N#define VOICE_BUSY__0__DR_SET CYREG_GPIO_PRT5_DR_SET
N#define VOICE_BUSY__0__HSIOM CYREG_HSIOM_PORT_SEL5
N#define VOICE_BUSY__0__HSIOM_MASK 0x0F000000u
N#define VOICE_BUSY__0__HSIOM_SHIFT 24u
N#define VOICE_BUSY__0__INTCFG CYREG_GPIO_PRT5_INTR_CFG
N#define VOICE_BUSY__0__INTR CYREG_GPIO_PRT5_INTR
N#define VOICE_BUSY__0__INTR_CFG CYREG_GPIO_PRT5_INTR_CFG
N#define VOICE_BUSY__0__INTSTAT CYREG_GPIO_PRT5_INTR
N#define VOICE_BUSY__0__MASK 0x40u
N#define VOICE_BUSY__0__PC CYREG_GPIO_PRT5_PC
N#define VOICE_BUSY__0__PC2 CYREG_GPIO_PRT5_PC2
N#define VOICE_BUSY__0__PORT 5u
N#define VOICE_BUSY__0__PS CYREG_GPIO_PRT5_PS
N#define VOICE_BUSY__0__SHIFT 6u
N#define VOICE_BUSY__DR CYREG_GPIO_PRT5_DR
N#define VOICE_BUSY__DR_CLR CYREG_GPIO_PRT5_DR_CLR
N#define VOICE_BUSY__DR_INV CYREG_GPIO_PRT5_DR_INV
N#define VOICE_BUSY__DR_SET CYREG_GPIO_PRT5_DR_SET
N#define VOICE_BUSY__INTCFG CYREG_GPIO_PRT5_INTR_CFG
N#define VOICE_BUSY__INTR CYREG_GPIO_PRT5_INTR
N#define VOICE_BUSY__INTR_CFG CYREG_GPIO_PRT5_INTR_CFG
N#define VOICE_BUSY__INTSTAT CYREG_GPIO_PRT5_INTR
N#define VOICE_BUSY__MASK 0x40u
N#define VOICE_BUSY__PC CYREG_GPIO_PRT5_PC
N#define VOICE_BUSY__PC2 CYREG_GPIO_PRT5_PC2
N#define VOICE_BUSY__PORT 5u
N#define VOICE_BUSY__PS CYREG_GPIO_PRT5_PS
N#define VOICE_BUSY__SHIFT 6u
N
N/* VOICE_DATA */
N#define VOICE_DATA__0__DR CYREG_GPIO_PRT1_DR
N#define VOICE_DATA__0__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define VOICE_DATA__0__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define VOICE_DATA__0__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define VOICE_DATA__0__HSIOM CYREG_HSIOM_PORT_SEL1
N#define VOICE_DATA__0__HSIOM_MASK 0xF0000000u
N#define VOICE_DATA__0__HSIOM_SHIFT 28u
N#define VOICE_DATA__0__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define VOICE_DATA__0__INTR CYREG_GPIO_PRT1_INTR
N#define VOICE_DATA__0__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define VOICE_DATA__0__INTSTAT CYREG_GPIO_PRT1_INTR
N#define VOICE_DATA__0__MASK 0x80u
N#define VOICE_DATA__0__PC CYREG_GPIO_PRT1_PC
N#define VOICE_DATA__0__PC2 CYREG_GPIO_PRT1_PC2
N#define VOICE_DATA__0__PORT 1u
N#define VOICE_DATA__0__PS CYREG_GPIO_PRT1_PS
N#define VOICE_DATA__0__SHIFT 7u
N#define VOICE_DATA__DR CYREG_GPIO_PRT1_DR
N#define VOICE_DATA__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define VOICE_DATA__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define VOICE_DATA__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define VOICE_DATA__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define VOICE_DATA__INTR CYREG_GPIO_PRT1_INTR
N#define VOICE_DATA__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define VOICE_DATA__INTSTAT CYREG_GPIO_PRT1_INTR
N#define VOICE_DATA__MASK 0x80u
N#define VOICE_DATA__PC CYREG_GPIO_PRT1_PC
N#define VOICE_DATA__PC2 CYREG_GPIO_PRT1_PC2
N#define VOICE_DATA__PORT 1u
N#define VOICE_DATA__PS CYREG_GPIO_PRT1_PS
N#define VOICE_DATA__SHIFT 7u
N
N/* COVER_CHK_INT */
N#define COVER_CHK_INT__0__DR CYREG_GPIO_PRT1_DR
N#define COVER_CHK_INT__0__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define COVER_CHK_INT__0__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define COVER_CHK_INT__0__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define COVER_CHK_INT__0__HSIOM CYREG_HSIOM_PORT_SEL1
N#define COVER_CHK_INT__0__HSIOM_MASK 0x0F000000u
N#define COVER_CHK_INT__0__HSIOM_SHIFT 24u
N#define COVER_CHK_INT__0__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define COVER_CHK_INT__0__INTR CYREG_GPIO_PRT1_INTR
N#define COVER_CHK_INT__0__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define COVER_CHK_INT__0__INTSTAT CYREG_GPIO_PRT1_INTR
N#define COVER_CHK_INT__0__MASK 0x40u
N#define COVER_CHK_INT__0__PC CYREG_GPIO_PRT1_PC
N#define COVER_CHK_INT__0__PC2 CYREG_GPIO_PRT1_PC2
N#define COVER_CHK_INT__0__PORT 1u
N#define COVER_CHK_INT__0__PS CYREG_GPIO_PRT1_PS
N#define COVER_CHK_INT__0__SHIFT 6u
N#define COVER_CHK_INT__DR CYREG_GPIO_PRT1_DR
N#define COVER_CHK_INT__DR_CLR CYREG_GPIO_PRT1_DR_CLR
N#define COVER_CHK_INT__DR_INV CYREG_GPIO_PRT1_DR_INV
N#define COVER_CHK_INT__DR_SET CYREG_GPIO_PRT1_DR_SET
N#define COVER_CHK_INT__INTCFG CYREG_GPIO_PRT1_INTR_CFG
N#define COVER_CHK_INT__INTR CYREG_GPIO_PRT1_INTR
N#define COVER_CHK_INT__INTR_CFG CYREG_GPIO_PRT1_INTR_CFG
N#define COVER_CHK_INT__INTSTAT CYREG_GPIO_PRT1_INTR
N#define COVER_CHK_INT__MASK 0x40u
N#define COVER_CHK_INT__PC CYREG_GPIO_PRT1_PC
N#define COVER_CHK_INT__PC2 CYREG_GPIO_PRT1_PC2
N#define COVER_CHK_INT__PORT 1u
N#define COVER_CHK_INT__PS CYREG_GPIO_PRT1_PS
N#define COVER_CHK_INT__SHIFT 6u
N
N/* SPI_0_OLED_FLASH */
N#define SPI_0_OLED_FLASH_miso_m__0__DR CYREG_GPIO_PRT2_DR
N#define SPI_0_OLED_FLASH_miso_m__0__DR_CLR CYREG_GPIO_PRT2_DR_CLR
N#define SPI_0_OLED_FLASH_miso_m__0__DR_INV CYREG_GPIO_PRT2_DR_INV
N#define SPI_0_OLED_FLASH_miso_m__0__DR_SET CYREG_GPIO_PRT2_DR_SET
N#define SPI_0_OLED_FLASH_miso_m__0__HSIOM CYREG_HSIOM_PORT_SEL2
N#define SPI_0_OLED_FLASH_miso_m__0__HSIOM_GPIO 0u
N#define SPI_0_OLED_FLASH_miso_m__0__HSIOM_I2C 14u
N#define SPI_0_OLED_FLASH_miso_m__0__HSIOM_I2C_SDA 14u
N#define SPI_0_OLED_FLASH_miso_m__0__HSIOM_MASK 0x000000F0u
N#define SPI_0_OLED_FLASH_miso_m__0__HSIOM_SHIFT 4u
N#define SPI_0_OLED_FLASH_miso_m__0__HSIOM_SPI 15u
N#define SPI_0_OLED_FLASH_miso_m__0__HSIOM_SPI_MISO 15u
N#define SPI_0_OLED_FLASH_miso_m__0__INTCFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_miso_m__0__INTR CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_miso_m__0__INTR_CFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_miso_m__0__INTSTAT CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_miso_m__0__MASK 0x02u
N#define SPI_0_OLED_FLASH_miso_m__0__PC CYREG_GPIO_PRT2_PC
N#define SPI_0_OLED_FLASH_miso_m__0__PC2 CYREG_GPIO_PRT2_PC2
N#define SPI_0_OLED_FLASH_miso_m__0__PORT 2u
N#define SPI_0_OLED_FLASH_miso_m__0__PS CYREG_GPIO_PRT2_PS
N#define SPI_0_OLED_FLASH_miso_m__0__SHIFT 1u
N#define SPI_0_OLED_FLASH_miso_m__DR CYREG_GPIO_PRT2_DR
N#define SPI_0_OLED_FLASH_miso_m__DR_CLR CYREG_GPIO_PRT2_DR_CLR
N#define SPI_0_OLED_FLASH_miso_m__DR_INV CYREG_GPIO_PRT2_DR_INV
N#define SPI_0_OLED_FLASH_miso_m__DR_SET CYREG_GPIO_PRT2_DR_SET
N#define SPI_0_OLED_FLASH_miso_m__INTCFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_miso_m__INTR CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_miso_m__INTR_CFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_miso_m__INTSTAT CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_miso_m__MASK 0x02u
N#define SPI_0_OLED_FLASH_miso_m__PC CYREG_GPIO_PRT2_PC
N#define SPI_0_OLED_FLASH_miso_m__PC2 CYREG_GPIO_PRT2_PC2
N#define SPI_0_OLED_FLASH_miso_m__PORT 2u
N#define SPI_0_OLED_FLASH_miso_m__PS CYREG_GPIO_PRT2_PS
N#define SPI_0_OLED_FLASH_miso_m__SHIFT 1u
N#define SPI_0_OLED_FLASH_mosi_m__0__DR CYREG_GPIO_PRT2_DR
N#define SPI_0_OLED_FLASH_mosi_m__0__DR_CLR CYREG_GPIO_PRT2_DR_CLR
N#define SPI_0_OLED_FLASH_mosi_m__0__DR_INV CYREG_GPIO_PRT2_DR_INV
N#define SPI_0_OLED_FLASH_mosi_m__0__DR_SET CYREG_GPIO_PRT2_DR_SET
N#define SPI_0_OLED_FLASH_mosi_m__0__HSIOM CYREG_HSIOM_PORT_SEL2
N#define SPI_0_OLED_FLASH_mosi_m__0__HSIOM_GPIO 0u
N#define SPI_0_OLED_FLASH_mosi_m__0__HSIOM_I2C 14u
N#define SPI_0_OLED_FLASH_mosi_m__0__HSIOM_I2C_SCL 14u
N#define SPI_0_OLED_FLASH_mosi_m__0__HSIOM_MASK 0x0000000Fu
N#define SPI_0_OLED_FLASH_mosi_m__0__HSIOM_SHIFT 0u
N#define SPI_0_OLED_FLASH_mosi_m__0__HSIOM_SPI 15u
N#define SPI_0_OLED_FLASH_mosi_m__0__HSIOM_SPI_MOSI 15u
N#define SPI_0_OLED_FLASH_mosi_m__0__INTCFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_mosi_m__0__INTR CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_mosi_m__0__INTR_CFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_mosi_m__0__INTSTAT CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_mosi_m__0__MASK 0x01u
N#define SPI_0_OLED_FLASH_mosi_m__0__PC CYREG_GPIO_PRT2_PC
N#define SPI_0_OLED_FLASH_mosi_m__0__PC2 CYREG_GPIO_PRT2_PC2
N#define SPI_0_OLED_FLASH_mosi_m__0__PORT 2u
N#define SPI_0_OLED_FLASH_mosi_m__0__PS CYREG_GPIO_PRT2_PS
N#define SPI_0_OLED_FLASH_mosi_m__0__SHIFT 0u
N#define SPI_0_OLED_FLASH_mosi_m__DR CYREG_GPIO_PRT2_DR
N#define SPI_0_OLED_FLASH_mosi_m__DR_CLR CYREG_GPIO_PRT2_DR_CLR
N#define SPI_0_OLED_FLASH_mosi_m__DR_INV CYREG_GPIO_PRT2_DR_INV
N#define SPI_0_OLED_FLASH_mosi_m__DR_SET CYREG_GPIO_PRT2_DR_SET
N#define SPI_0_OLED_FLASH_mosi_m__INTCFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_mosi_m__INTR CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_mosi_m__INTR_CFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_mosi_m__INTSTAT CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_mosi_m__MASK 0x01u
N#define SPI_0_OLED_FLASH_mosi_m__PC CYREG_GPIO_PRT2_PC
N#define SPI_0_OLED_FLASH_mosi_m__PC2 CYREG_GPIO_PRT2_PC2
N#define SPI_0_OLED_FLASH_mosi_m__PORT 2u
N#define SPI_0_OLED_FLASH_mosi_m__PS CYREG_GPIO_PRT2_PS
N#define SPI_0_OLED_FLASH_mosi_m__SHIFT 0u
N#define SPI_0_OLED_FLASH_SCB__CTRL CYREG_SCB1_CTRL
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA0 CYREG_SCB1_EZ_DATA0
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA1 CYREG_SCB1_EZ_DATA1
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA10 CYREG_SCB1_EZ_DATA10
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA11 CYREG_SCB1_EZ_DATA11
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA12 CYREG_SCB1_EZ_DATA12
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA13 CYREG_SCB1_EZ_DATA13
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA14 CYREG_SCB1_EZ_DATA14
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA15 CYREG_SCB1_EZ_DATA15
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA16 CYREG_SCB1_EZ_DATA16
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA17 CYREG_SCB1_EZ_DATA17
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA18 CYREG_SCB1_EZ_DATA18
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA19 CYREG_SCB1_EZ_DATA19
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA2 CYREG_SCB1_EZ_DATA2
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA20 CYREG_SCB1_EZ_DATA20
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA21 CYREG_SCB1_EZ_DATA21
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA22 CYREG_SCB1_EZ_DATA22
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA23 CYREG_SCB1_EZ_DATA23
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA24 CYREG_SCB1_EZ_DATA24
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA25 CYREG_SCB1_EZ_DATA25
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA26 CYREG_SCB1_EZ_DATA26
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA27 CYREG_SCB1_EZ_DATA27
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA28 CYREG_SCB1_EZ_DATA28
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA29 CYREG_SCB1_EZ_DATA29
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA3 CYREG_SCB1_EZ_DATA3
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA30 CYREG_SCB1_EZ_DATA30
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA31 CYREG_SCB1_EZ_DATA31
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA4 CYREG_SCB1_EZ_DATA4
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA5 CYREG_SCB1_EZ_DATA5
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA6 CYREG_SCB1_EZ_DATA6
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA7 CYREG_SCB1_EZ_DATA7
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA8 CYREG_SCB1_EZ_DATA8
N#define SPI_0_OLED_FLASH_SCB__EZ_DATA9 CYREG_SCB1_EZ_DATA9
N#define SPI_0_OLED_FLASH_SCB__I2C_CFG CYREG_SCB1_I2C_CFG
N#define SPI_0_OLED_FLASH_SCB__I2C_CTRL CYREG_SCB1_I2C_CTRL
N#define SPI_0_OLED_FLASH_SCB__I2C_M_CMD CYREG_SCB1_I2C_M_CMD
N#define SPI_0_OLED_FLASH_SCB__I2C_S_CMD CYREG_SCB1_I2C_S_CMD
N#define SPI_0_OLED_FLASH_SCB__I2C_STATUS CYREG_SCB1_I2C_STATUS
N#define SPI_0_OLED_FLASH_SCB__INTR_CAUSE CYREG_SCB1_INTR_CAUSE
N#define SPI_0_OLED_FLASH_SCB__INTR_I2C_EC CYREG_SCB1_INTR_I2C_EC
N#define SPI_0_OLED_FLASH_SCB__INTR_I2C_EC_MASK CYREG_SCB1_INTR_I2C_EC_MASK
N#define SPI_0_OLED_FLASH_SCB__INTR_I2C_EC_MASKED CYREG_SCB1_INTR_I2C_EC_MASKED
N#define SPI_0_OLED_FLASH_SCB__INTR_M CYREG_SCB1_INTR_M
N#define SPI_0_OLED_FLASH_SCB__INTR_M_MASK CYREG_SCB1_INTR_M_MASK
N#define SPI_0_OLED_FLASH_SCB__INTR_M_MASKED CYREG_SCB1_INTR_M_MASKED
N#define SPI_0_OLED_FLASH_SCB__INTR_M_SET CYREG_SCB1_INTR_M_SET
N#define SPI_0_OLED_FLASH_SCB__INTR_RX CYREG_SCB1_INTR_RX
N#define SPI_0_OLED_FLASH_SCB__INTR_RX_MASK CYREG_SCB1_INTR_RX_MASK
N#define SPI_0_OLED_FLASH_SCB__INTR_RX_MASKED CYREG_SCB1_INTR_RX_MASKED
N#define SPI_0_OLED_FLASH_SCB__INTR_RX_SET CYREG_SCB1_INTR_RX_SET
N#define SPI_0_OLED_FLASH_SCB__INTR_S CYREG_SCB1_INTR_S
N#define SPI_0_OLED_FLASH_SCB__INTR_S_MASK CYREG_SCB1_INTR_S_MASK
N#define SPI_0_OLED_FLASH_SCB__INTR_S_MASKED CYREG_SCB1_INTR_S_MASKED
N#define SPI_0_OLED_FLASH_SCB__INTR_S_SET CYREG_SCB1_INTR_S_SET
N#define SPI_0_OLED_FLASH_SCB__INTR_SPI_EC CYREG_SCB1_INTR_SPI_EC
N#define SPI_0_OLED_FLASH_SCB__INTR_SPI_EC_MASK CYREG_SCB1_INTR_SPI_EC_MASK
N#define SPI_0_OLED_FLASH_SCB__INTR_SPI_EC_MASKED CYREG_SCB1_INTR_SPI_EC_MASKED
N#define SPI_0_OLED_FLASH_SCB__INTR_TX CYREG_SCB1_INTR_TX
N#define SPI_0_OLED_FLASH_SCB__INTR_TX_MASK CYREG_SCB1_INTR_TX_MASK
N#define SPI_0_OLED_FLASH_SCB__INTR_TX_MASKED CYREG_SCB1_INTR_TX_MASKED
N#define SPI_0_OLED_FLASH_SCB__INTR_TX_SET CYREG_SCB1_INTR_TX_SET
N#define SPI_0_OLED_FLASH_SCB__RX_CTRL CYREG_SCB1_RX_CTRL
N#define SPI_0_OLED_FLASH_SCB__RX_FIFO_CTRL CYREG_SCB1_RX_FIFO_CTRL
N#define SPI_0_OLED_FLASH_SCB__RX_FIFO_RD CYREG_SCB1_RX_FIFO_RD
N#define SPI_0_OLED_FLASH_SCB__RX_FIFO_RD_SILENT CYREG_SCB1_RX_FIFO_RD_SILENT
N#define SPI_0_OLED_FLASH_SCB__RX_FIFO_STATUS CYREG_SCB1_RX_FIFO_STATUS
N#define SPI_0_OLED_FLASH_SCB__RX_MATCH CYREG_SCB1_RX_MATCH
N#define SPI_0_OLED_FLASH_SCB__SPI_CTRL CYREG_SCB1_SPI_CTRL
N#define SPI_0_OLED_FLASH_SCB__SPI_STATUS CYREG_SCB1_SPI_STATUS
N#define SPI_0_OLED_FLASH_SCB__SS0_POSISTION 0u
N#define SPI_0_OLED_FLASH_SCB__SS1_POSISTION 1u
N#define SPI_0_OLED_FLASH_SCB__SS2_POSISTION 2u
N#define SPI_0_OLED_FLASH_SCB__SS3_POSISTION 3u
N#define SPI_0_OLED_FLASH_SCB__STATUS CYREG_SCB1_STATUS
N#define SPI_0_OLED_FLASH_SCB__TX_CTRL CYREG_SCB1_TX_CTRL
N#define SPI_0_OLED_FLASH_SCB__TX_FIFO_CTRL CYREG_SCB1_TX_FIFO_CTRL
N#define SPI_0_OLED_FLASH_SCB__TX_FIFO_STATUS CYREG_SCB1_TX_FIFO_STATUS
N#define SPI_0_OLED_FLASH_SCB__TX_FIFO_WR CYREG_SCB1_TX_FIFO_WR
N#define SPI_0_OLED_FLASH_SCB__UART_CTRL CYREG_SCB1_UART_CTRL
N#define SPI_0_OLED_FLASH_SCB__UART_FLOW_CTRL CYREG_SCB1_UART_FLOW_CTRL
N#define SPI_0_OLED_FLASH_SCB__UART_RX_CTRL CYREG_SCB1_UART_RX_CTRL
N#define SPI_0_OLED_FLASH_SCB__UART_RX_STATUS CYREG_SCB1_UART_RX_STATUS
N#define SPI_0_OLED_FLASH_SCB__UART_TX_CTRL CYREG_SCB1_UART_TX_CTRL
N#define SPI_0_OLED_FLASH_SCBCLK__CTRL_REGISTER CYREG_PERI_PCLK_CTL1
N#define SPI_0_OLED_FLASH_SCBCLK__DIV_ID 0x00000042u
N#define SPI_0_OLED_FLASH_SCBCLK__DIV_REGISTER CYREG_PERI_DIV_16_CTL2
N#define SPI_0_OLED_FLASH_SCBCLK__PA_DIV_ID 0x000000FFu
N#define SPI_0_OLED_FLASH_sclk_m__0__DR CYREG_GPIO_PRT2_DR
N#define SPI_0_OLED_FLASH_sclk_m__0__DR_CLR CYREG_GPIO_PRT2_DR_CLR
N#define SPI_0_OLED_FLASH_sclk_m__0__DR_INV CYREG_GPIO_PRT2_DR_INV
N#define SPI_0_OLED_FLASH_sclk_m__0__DR_SET CYREG_GPIO_PRT2_DR_SET
N#define SPI_0_OLED_FLASH_sclk_m__0__HSIOM CYREG_HSIOM_PORT_SEL2
N#define SPI_0_OLED_FLASH_sclk_m__0__HSIOM_GPIO 0u
N#define SPI_0_OLED_FLASH_sclk_m__0__HSIOM_MASK 0x00000F00u
N#define SPI_0_OLED_FLASH_sclk_m__0__HSIOM_SHIFT 8u
N#define SPI_0_OLED_FLASH_sclk_m__0__HSIOM_SPI 15u
N#define SPI_0_OLED_FLASH_sclk_m__0__HSIOM_SPI_CLK 15u
N#define SPI_0_OLED_FLASH_sclk_m__0__INTCFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_sclk_m__0__INTR CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_sclk_m__0__INTR_CFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_sclk_m__0__INTSTAT CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_sclk_m__0__MASK 0x04u
N#define SPI_0_OLED_FLASH_sclk_m__0__PC CYREG_GPIO_PRT2_PC
N#define SPI_0_OLED_FLASH_sclk_m__0__PC2 CYREG_GPIO_PRT2_PC2
N#define SPI_0_OLED_FLASH_sclk_m__0__PORT 2u
N#define SPI_0_OLED_FLASH_sclk_m__0__PS CYREG_GPIO_PRT2_PS
N#define SPI_0_OLED_FLASH_sclk_m__0__SHIFT 2u
N#define SPI_0_OLED_FLASH_sclk_m__DR CYREG_GPIO_PRT2_DR
N#define SPI_0_OLED_FLASH_sclk_m__DR_CLR CYREG_GPIO_PRT2_DR_CLR
N#define SPI_0_OLED_FLASH_sclk_m__DR_INV CYREG_GPIO_PRT2_DR_INV
N#define SPI_0_OLED_FLASH_sclk_m__DR_SET CYREG_GPIO_PRT2_DR_SET
N#define SPI_0_OLED_FLASH_sclk_m__INTCFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_sclk_m__INTR CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_sclk_m__INTR_CFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_sclk_m__INTSTAT CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_sclk_m__MASK 0x04u
N#define SPI_0_OLED_FLASH_sclk_m__PC CYREG_GPIO_PRT2_PC
N#define SPI_0_OLED_FLASH_sclk_m__PC2 CYREG_GPIO_PRT2_PC2
N#define SPI_0_OLED_FLASH_sclk_m__PORT 2u
N#define SPI_0_OLED_FLASH_sclk_m__PS CYREG_GPIO_PRT2_PS
N#define SPI_0_OLED_FLASH_sclk_m__SHIFT 2u
N#define SPI_0_OLED_FLASH_ss0_m__0__DR CYREG_GPIO_PRT2_DR
N#define SPI_0_OLED_FLASH_ss0_m__0__DR_CLR CYREG_GPIO_PRT2_DR_CLR
N#define SPI_0_OLED_FLASH_ss0_m__0__DR_INV CYREG_GPIO_PRT2_DR_INV
N#define SPI_0_OLED_FLASH_ss0_m__0__DR_SET CYREG_GPIO_PRT2_DR_SET
N#define SPI_0_OLED_FLASH_ss0_m__0__HSIOM CYREG_HSIOM_PORT_SEL2
N#define SPI_0_OLED_FLASH_ss0_m__0__HSIOM_GPIO 0u
N#define SPI_0_OLED_FLASH_ss0_m__0__HSIOM_MASK 0x0000F000u
N#define SPI_0_OLED_FLASH_ss0_m__0__HSIOM_SHIFT 12u
N#define SPI_0_OLED_FLASH_ss0_m__0__HSIOM_SPI 15u
N#define SPI_0_OLED_FLASH_ss0_m__0__HSIOM_SPI_SELECT0 15u
N#define SPI_0_OLED_FLASH_ss0_m__0__INTCFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_ss0_m__0__INTR CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_ss0_m__0__INTR_CFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_ss0_m__0__INTSTAT CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_ss0_m__0__MASK 0x08u
N#define SPI_0_OLED_FLASH_ss0_m__0__PC CYREG_GPIO_PRT2_PC
N#define SPI_0_OLED_FLASH_ss0_m__0__PC2 CYREG_GPIO_PRT2_PC2
N#define SPI_0_OLED_FLASH_ss0_m__0__PORT 2u
N#define SPI_0_OLED_FLASH_ss0_m__0__PS CYREG_GPIO_PRT2_PS
N#define SPI_0_OLED_FLASH_ss0_m__0__SHIFT 3u
N#define SPI_0_OLED_FLASH_ss0_m__DR CYREG_GPIO_PRT2_DR
N#define SPI_0_OLED_FLASH_ss0_m__DR_CLR CYREG_GPIO_PRT2_DR_CLR
N#define SPI_0_OLED_FLASH_ss0_m__DR_INV CYREG_GPIO_PRT2_DR_INV
N#define SPI_0_OLED_FLASH_ss0_m__DR_SET CYREG_GPIO_PRT2_DR_SET
N#define SPI_0_OLED_FLASH_ss0_m__INTCFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_ss0_m__INTR CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_ss0_m__INTR_CFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_ss0_m__INTSTAT CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_ss0_m__MASK 0x08u
N#define SPI_0_OLED_FLASH_ss0_m__PC CYREG_GPIO_PRT2_PC
N#define SPI_0_OLED_FLASH_ss0_m__PC2 CYREG_GPIO_PRT2_PC2
N#define SPI_0_OLED_FLASH_ss0_m__PORT 2u
N#define SPI_0_OLED_FLASH_ss0_m__PS CYREG_GPIO_PRT2_PS
N#define SPI_0_OLED_FLASH_ss0_m__SHIFT 3u
N#define SPI_0_OLED_FLASH_ss1_m__0__DR CYREG_GPIO_PRT2_DR
N#define SPI_0_OLED_FLASH_ss1_m__0__DR_CLR CYREG_GPIO_PRT2_DR_CLR
N#define SPI_0_OLED_FLASH_ss1_m__0__DR_INV CYREG_GPIO_PRT2_DR_INV
N#define SPI_0_OLED_FLASH_ss1_m__0__DR_SET CYREG_GPIO_PRT2_DR_SET
N#define SPI_0_OLED_FLASH_ss1_m__0__HSIOM CYREG_HSIOM_PORT_SEL2
N#define SPI_0_OLED_FLASH_ss1_m__0__HSIOM_GPIO 0u
N#define SPI_0_OLED_FLASH_ss1_m__0__HSIOM_MASK 0x000F0000u
N#define SPI_0_OLED_FLASH_ss1_m__0__HSIOM_SHIFT 16u
N#define SPI_0_OLED_FLASH_ss1_m__0__HSIOM_SPI 15u
N#define SPI_0_OLED_FLASH_ss1_m__0__HSIOM_SPI_SELECT1 15u
N#define SPI_0_OLED_FLASH_ss1_m__0__INTCFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_ss1_m__0__INTR CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_ss1_m__0__INTR_CFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_ss1_m__0__INTSTAT CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_ss1_m__0__MASK 0x10u
N#define SPI_0_OLED_FLASH_ss1_m__0__PC CYREG_GPIO_PRT2_PC
N#define SPI_0_OLED_FLASH_ss1_m__0__PC2 CYREG_GPIO_PRT2_PC2
N#define SPI_0_OLED_FLASH_ss1_m__0__PORT 2u
N#define SPI_0_OLED_FLASH_ss1_m__0__PS CYREG_GPIO_PRT2_PS
N#define SPI_0_OLED_FLASH_ss1_m__0__SHIFT 4u
N#define SPI_0_OLED_FLASH_ss1_m__DR CYREG_GPIO_PRT2_DR
N#define SPI_0_OLED_FLASH_ss1_m__DR_CLR CYREG_GPIO_PRT2_DR_CLR
N#define SPI_0_OLED_FLASH_ss1_m__DR_INV CYREG_GPIO_PRT2_DR_INV
N#define SPI_0_OLED_FLASH_ss1_m__DR_SET CYREG_GPIO_PRT2_DR_SET
N#define SPI_0_OLED_FLASH_ss1_m__INTCFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_ss1_m__INTR CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_ss1_m__INTR_CFG CYREG_GPIO_PRT2_INTR_CFG
N#define SPI_0_OLED_FLASH_ss1_m__INTSTAT CYREG_GPIO_PRT2_INTR
N#define SPI_0_OLED_FLASH_ss1_m__MASK 0x10u
N#define SPI_0_OLED_FLASH_ss1_m__PC CYREG_GPIO_PRT2_PC
N#define SPI_0_OLED_FLASH_ss1_m__PC2 CYREG_GPIO_PRT2_PC2
N#define SPI_0_OLED_FLASH_ss1_m__PORT 2u
N#define SPI_0_OLED_FLASH_ss1_m__PS CYREG_GPIO_PRT2_PS
N#define SPI_0_OLED_FLASH_ss1_m__SHIFT 4u
N
N/* Miscellaneous */
N#define CY_PROJECT_NAME "LOCK"
N#define CY_VERSION "PSoC Creator  4.2"
N#define CYDEV_BANDGAP_VOLTAGE 1.200
N#define CYDEV_BCLK__HFCLK__HZ 48000000U
N#define CYDEV_BCLK__HFCLK__KHZ 48000U
N#define CYDEV_BCLK__HFCLK__MHZ 48U
N#define CYDEV_BCLK__SYSCLK__HZ 48000000U
N#define CYDEV_BCLK__SYSCLK__KHZ 48000U
N#define CYDEV_BCLK__SYSCLK__MHZ 48U
N#define CYDEV_CHIP_DIE_LEOPARD 1u
N#define CYDEV_CHIP_DIE_PSOC4A 18u
N#define CYDEV_CHIP_DIE_PSOC5LP 2u
N#define CYDEV_CHIP_DIE_PSOC5TM 3u
N#define CYDEV_CHIP_DIE_TMA4 4u
N#define CYDEV_CHIP_DIE_UNKNOWN 0u
N#define CYDEV_CHIP_FAMILY_FM0P 5u
N#define CYDEV_CHIP_FAMILY_FM3 6u
N#define CYDEV_CHIP_FAMILY_FM4 7u
N#define CYDEV_CHIP_FAMILY_PSOC3 1u
N#define CYDEV_CHIP_FAMILY_PSOC4 2u
N#define CYDEV_CHIP_FAMILY_PSOC5 3u
N#define CYDEV_CHIP_FAMILY_PSOC6 4u
N#define CYDEV_CHIP_FAMILY_UNKNOWN 0u
N#define CYDEV_CHIP_FAMILY_USED CYDEV_CHIP_FAMILY_PSOC4
N#define CYDEV_CHIP_JTAG_ID 0x257011B5u
N#define CYDEV_CHIP_MEMBER_3A 1u
N#define CYDEV_CHIP_MEMBER_4A 18u
N#define CYDEV_CHIP_MEMBER_4D 13u
N#define CYDEV_CHIP_MEMBER_4E 6u
N#define CYDEV_CHIP_MEMBER_4F 19u
N#define CYDEV_CHIP_MEMBER_4G 4u
N#define CYDEV_CHIP_MEMBER_4H 17u
N#define CYDEV_CHIP_MEMBER_4I 23u
N#define CYDEV_CHIP_MEMBER_4J 14u
N#define CYDEV_CHIP_MEMBER_4K 15u
N#define CYDEV_CHIP_MEMBER_4L 22u
N#define CYDEV_CHIP_MEMBER_4M 21u
N#define CYDEV_CHIP_MEMBER_4N 10u
N#define CYDEV_CHIP_MEMBER_4O 7u
N#define CYDEV_CHIP_MEMBER_4P 20u
N#define CYDEV_CHIP_MEMBER_4Q 12u
N#define CYDEV_CHIP_MEMBER_4R 8u
N#define CYDEV_CHIP_MEMBER_4S 11u
N#define CYDEV_CHIP_MEMBER_4T 9u
N#define CYDEV_CHIP_MEMBER_4U 5u
N#define CYDEV_CHIP_MEMBER_4V 16u
N#define CYDEV_CHIP_MEMBER_5A 3u
N#define CYDEV_CHIP_MEMBER_5B 2u
N#define CYDEV_CHIP_MEMBER_6A 24u
N#define CYDEV_CHIP_MEMBER_FM3 28u
N#define CYDEV_CHIP_MEMBER_FM4 29u
N#define CYDEV_CHIP_MEMBER_PDL_FM0P_TYPE1 25u
N#define CYDEV_CHIP_MEMBER_PDL_FM0P_TYPE2 26u
N#define CYDEV_CHIP_MEMBER_PDL_FM0P_TYPE3 27u
N#define CYDEV_CHIP_MEMBER_UNKNOWN 0u
N#define CYDEV_CHIP_MEMBER_USED CYDEV_CHIP_MEMBER_4V
N#define CYDEV_CHIP_DIE_EXPECT CYDEV_CHIP_MEMBER_USED
N#define CYDEV_CHIP_DIE_ACTUAL CYDEV_CHIP_DIE_EXPECT
N#define CYDEV_CHIP_REV_LEOPARD_ES1 0u
N#define CYDEV_CHIP_REV_LEOPARD_ES2 1u
N#define CYDEV_CHIP_REV_LEOPARD_ES3 3u
N#define CYDEV_CHIP_REV_LEOPARD_PRODUCTION 3u
N#define CYDEV_CHIP_REV_PSOC4A_ES0 17u
N#define CYDEV_CHIP_REV_PSOC4A_PRODUCTION 17u
N#define CYDEV_CHIP_REV_PSOC5LP_ES0 0u
N#define CYDEV_CHIP_REV_PSOC5LP_PRODUCTION 0u
N#define CYDEV_CHIP_REV_PSOC5TM_ES0 0u
N#define CYDEV_CHIP_REV_PSOC5TM_ES1 1u
N#define CYDEV_CHIP_REV_PSOC5TM_PRODUCTION 1u
N#define CYDEV_CHIP_REV_TMA4_ES 17u
N#define CYDEV_CHIP_REV_TMA4_ES2 33u
N#define CYDEV_CHIP_REV_TMA4_PRODUCTION 17u
N#define CYDEV_CHIP_REVISION_3A_ES1 0u
N#define CYDEV_CHIP_REVISION_3A_ES2 1u
N#define CYDEV_CHIP_REVISION_3A_ES3 3u
N#define CYDEV_CHIP_REVISION_3A_PRODUCTION 3u
N#define CYDEV_CHIP_REVISION_4A_ES0 17u
N#define CYDEV_CHIP_REVISION_4A_PRODUCTION 17u
N#define CYDEV_CHIP_REVISION_4D_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4E_CCG2_NO_USBPD 0u
N#define CYDEV_CHIP_REVISION_4E_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4F_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4F_PRODUCTION_256DMA 0u
N#define CYDEV_CHIP_REVISION_4F_PRODUCTION_256K 0u
N#define CYDEV_CHIP_REVISION_4G_ES 17u
N#define CYDEV_CHIP_REVISION_4G_ES2 33u
N#define CYDEV_CHIP_REVISION_4G_PRODUCTION 17u
N#define CYDEV_CHIP_REVISION_4H_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4I_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4J_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4K_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4L_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4M_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4N_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4O_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4P_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4Q_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4R_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4S_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4T_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4U_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_4V_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_5A_ES0 0u
N#define CYDEV_CHIP_REVISION_5A_ES1 1u
N#define CYDEV_CHIP_REVISION_5A_PRODUCTION 1u
N#define CYDEV_CHIP_REVISION_5B_ES0 0u
N#define CYDEV_CHIP_REVISION_5B_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_6A_ES 17u
N#define CYDEV_CHIP_REVISION_6A_NO_UDB 33u
N#define CYDEV_CHIP_REVISION_6A_PRODUCTION 33u
N#define CYDEV_CHIP_REVISION_FM3_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_FM4_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_PDL_FM0P_TYPE1_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_PDL_FM0P_TYPE2_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_PDL_FM0P_TYPE3_PRODUCTION 0u
N#define CYDEV_CHIP_REVISION_USED CYDEV_CHIP_REVISION_4V_PRODUCTION
N#define CYDEV_CHIP_REV_EXPECT CYDEV_CHIP_REVISION_USED
N#define CYDEV_CONFIG_READ_ACCELERATOR 1
N#define CYDEV_CONFIG_UNUSED_IO_AllowButWarn 0
N#define CYDEV_CONFIG_UNUSED_IO_AllowWithInfo 1
N#define CYDEV_CONFIG_UNUSED_IO_Disallowed 2
N#define CYDEV_CONFIG_UNUSED_IO CYDEV_CONFIG_UNUSED_IO_Disallowed
N#define CYDEV_CONFIGURATION_COMPRESSED 1
N#define CYDEV_CONFIGURATION_MODE_COMPRESSED 0
N#define CYDEV_CONFIGURATION_MODE CYDEV_CONFIGURATION_MODE_COMPRESSED
N#define CYDEV_CONFIGURATION_MODE_DMA 2
N#define CYDEV_CONFIGURATION_MODE_UNCOMPRESSED 1
N#define CYDEV_DEBUG_PROTECT_KILL 4
N#define CYDEV_DEBUG_PROTECT_OPEN 1
N#define CYDEV_DEBUG_PROTECT CYDEV_DEBUG_PROTECT_OPEN
N#define CYDEV_DEBUG_PROTECT_PROTECTED 2
N#define CYDEV_DEBUGGING_DPS_Disable 3
N#define CYDEV_DEBUGGING_DPS_SWD 2
N#define CYDEV_DEBUGGING_DPS CYDEV_DEBUGGING_DPS_SWD
N#define CYDEV_DEBUGGING_ENABLE 1
N#define CYDEV_DFT_SELECT_CLK0 8u
N#define CYDEV_DFT_SELECT_CLK1 9u
N#define CYDEV_DMA_CHANNELS_AVAILABLE 8
N#define CYDEV_HEAP_SIZE 0x80
N#define CYDEV_IMO_TRIMMED_BY_USB 0u
N#define CYDEV_IMO_TRIMMED_BY_WCO 0u
N#define CYDEV_INTR_NUMBER_DMA 14u
N#define CYDEV_IS_EXPORTING_CODE 0
N#define CYDEV_IS_IMPORTING_CODE 0
N#define CYDEV_PROJ_TYPE 0
N#define CYDEV_PROJ_TYPE_BOOTLOADER 1
N#define CYDEV_PROJ_TYPE_LAUNCHER 5
N#define CYDEV_PROJ_TYPE_LOADABLE 2
N#define CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER 4
N#define CYDEV_PROJ_TYPE_MULTIAPPBOOTLOADER 3
N#define CYDEV_PROJ_TYPE_STANDARD 0
N#define CYDEV_RTC_SOURCE_DIV 32768
N#define CYDEV_RTC_SOURCE_WDT 2u
N#define CYDEV_STACK_SIZE 0x0800
N#define CYDEV_TIMER2_DIV 32768
N#define CYDEV_USE_BUNDLED_CMSIS 1
N#define CYDEV_VARIABLE_VDDA 1
N#define CYDEV_VDDA 3.3
N#define CYDEV_VDDA_MV 3300
N#define CYDEV_VDDD 3.3
N#define CYDEV_VDDD_MV 3300
N#define CYDEV_WDT_GENERATE_ISR 1u
N#define CYIPBLOCK_m0s8cpussv3_VERSION 1
N#define CYIPBLOCK_m0s8crypto_VERSION 2
N#define CYIPBLOCK_m0s8csdv2_VERSION 2
N#define CYIPBLOCK_m0s8exco_VERSION 1
N#define CYIPBLOCK_m0s8ioss_VERSION 1
N#define CYIPBLOCK_m0s8lcd_VERSION 2
N#define CYIPBLOCK_m0s8lpcomp_VERSION 2
N#define CYIPBLOCK_m0s8pass4a_VERSION 1
N#define CYIPBLOCK_m0s8peri_VERSION 1
N#define CYIPBLOCK_m0s8scb_VERSION 2
N#define CYIPBLOCK_m0s8tcpwm_VERSION 2
N#define CYIPBLOCK_m0s8wco_VERSION 1
N#define CYIPBLOCK_s8srsslt_VERSION 1
N#define DMA_CHANNELS_USED__MASK 0u
N#define CYDEV_BOOTLOADER_ENABLE 0
N
N#endif /* INCLUDED_CYFITTER_H */
L 23 "Generated_Source\PSoC4\SPI_0_OLED_FLASH.h" 2
N#include <cytypes.h>
L 1 "Generated_Source\PSoC4\cytypes.h" 1
N/***************************************************************************//**
N* \file cytypes.h
N* \version 5.70
N*
N* \brief CyTypes provides register access macros and approved types for use in
N* firmware.
N*
N* \note Due to endiannesses of the hardware and some compilers, the register
N* access macros for big endian compilers use some library calls to arrange
N* data the correct way.
N*
N* Register Access macros and functions perform their operations on an
N* input of the type pointer to void.  The arguments passed to it should be
N* pointers to the type associated with the register size.
N* (i.e. a "uint8 *" shouldn't be passed to obtain a 16-bit register value)
N*
N********************************************************************************
N* \copyright
N* Copyright 2008-2018, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_BOOT_CYTYPES_H)
X#if !0L
N#define CY_BOOT_CYTYPES_H
N
N#if defined(__C51__)
X#if 0L
S    #include <intrins.h>
N#endif  /* (__C51__) */
N
N/* ARM and C99 or later */
N#if defined(__GNUC__) || defined(__ARMCC_VERSION) || (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L)
X#if 0L || 1L || (1L && 199901L >= 199901L)
N    #include <stdint.h>
L 1 "D:\Keil_v5\ARM\ARMCC\bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 180721 $
N * Checkin $Date: 2013-06-24 09:41:57 +0100 (Mon, 24 Jun 2013) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5040049
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N * '__int64' is used instead of 'long long' so that this header
N * can be used in --strict mode.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed       __int64 intmax_t;
Ntypedef unsigned       __int64 uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __ESCAPE__(~0x7fffffffffffffffll) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#define INTPTR_MIN (~0x7fffffff)
N
N    /* maximum value of pointer-holding signed integer type */
N#define INTPTR_MAX   2147483647
N
N    /* maximum value of pointer-holding unsigned integer type */
N#define UINTPTR_MAX  4294967295u
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#define PTRDIFF_MIN (~0x7fffffff)
N#define PTRDIFF_MAX   2147483647
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#define SIZE_MAX 4294967295u
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __ESCAPE__(x ## ll)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __ESCAPE__(x ## ull)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif 
N  #endif /* __cplusplus */
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
N
N
N
L 35 "Generated_Source\PSoC4\cytypes.h" 2
N#endif  /* (__GNUC__) || defined(__ARMCC_VERSION) || (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) */
N
N#include "cyfitter.h"
N
N
N#if defined( __ICCARM__ )
X#if 0L
S    /* Suppress warning for multiple volatile variables in an expression. */
S    /* This is common in component code and usage is not order dependent. */
S    #pragma diag_suppress=Pa082
N#endif  /* defined( __ICCARM__ ) */
N
N
N/***************************************
N* Conditional Compilation Parameters
N***************************************/
N
N
N/*******************************************************************************
N* FAMILY encodes the overall architectural family
N*******************************************************************************/
N#define CY_PSOC3 (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
N#define CY_PSOC4 (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC4)
N#define CY_PSOC5 (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC5)
N
N
N/*******************************************************************************
N* MEMBER encodes both the family and the detailed architecture
N*******************************************************************************/
N#ifdef CYDEV_CHIP_MEMBER_4D
N    #define CY_PSOC4_4000   (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4D)
N#else
S    #define CY_PSOC4_4000   (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4D */
N
N#define CY_PSOC4_4100       (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4A)
N#define CY_PSOC4_4200       (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4A)
N
N#ifdef CYDEV_CHIP_MEMBER_4F
N    #define CY_PSOC4_4100BL (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4F)
N    #define CY_PSOC4_4200BL (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4F)
N#else
S    #define CY_PSOC4_4100BL (0u != 0u)
S    #define CY_PSOC4_4200BL (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4F */
N
N#ifdef CYDEV_CHIP_MEMBER_4M
N    #define CY_PSOC4_4100M (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4M)
N    #define CY_PSOC4_4200M (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4M)
N#else
S    #define CY_PSOC4_4100M (0u != 0u)
S    #define CY_PSOC4_4200M (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4M */
N
N#ifdef CYDEV_CHIP_MEMBER_4H
N    #define CY_PSOC4_4200D (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4H)
N#else
S    #define CY_PSOC4_4200D (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4H */
N
N#ifdef CYDEV_CHIP_MEMBER_4L
N    #define CY_PSOC4_4200L (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4L)
N#else
S    #define CY_PSOC4_4200L (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4L */
N
N#ifdef CYDEV_CHIP_MEMBER_4U
N    #define CY_PSOC4_4000U (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4U)
N#else
S    #define CY_PSOC4_4000U (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4U */
N
N#ifdef CYDEV_CHIP_MEMBER_4J
N    #define CY_PSOC4_4000S (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4J)
N#else
S    #define CY_PSOC4_4000S (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4J */
N
N#ifdef CYDEV_CHIP_MEMBER_4K
N    #define CY_PSOC4_4100S (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4K)
N#else
S    #define CY_PSOC4_4100S (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4K */
N
N#ifdef CYDEV_CHIP_MEMBER_4I
N    #define CY_PSOC4_4400 (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4I)
N#else
S    #define CY_PSOC4_4400 (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4I */
N
N#ifdef CYDEV_CHIP_MEMBER_4E
N    #define CY_CCG2 (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4E)
N#else
S    #define CY_CCG2 (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4E */
N
N#ifdef CYDEV_CHIP_MEMBER_4O
N    #define CY_CCG3 (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4O)
N#else
S    #define CY_CCG3 (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4O */
N
N#ifdef CYDEV_CHIP_MEMBER_4R
N    #define CY_CCG3PA (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4R)
N#else
S    #define CY_CCG3PA (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4R */
N
N#ifdef CYDEV_CHIP_MEMBER_4N
N    #define CY_CCG4 (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4N)
N#else
S    #define CY_CCG4 (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4N */
N
N#ifdef CYDEV_CHIP_MEMBER_4S
N    #define CY_CCG5 (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4S)
N#else
S    #define CY_CCG5 (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4S */
N
N#ifdef CYDEV_CHIP_MEMBER_4P
N    #define CY_PSOC4_4100BLII (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4P)
N    #define CY_PSOC4_4200BLII (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4P)
N#else
S    #define CY_PSOC4_4100BLII (0u != 0u)
S    #define CY_PSOC4_4200BLII (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4P */
N
N#ifdef CYDEV_CHIP_MEMBER_4V
N    #define CY_PSOC4_4100MS (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4V)
N    #define CY_PSOC4_4100MS (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4V)
N#else
S    #define CY_PSOC4_4100MS (0u != 0u)
S    #define CY_PSOC4_4100MS (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_4V */
N
N#define CY_IP_HOBTO_DEVICE      (!(0 == 1))
N
N
N/*******************************************************************************
N* IP blocks
N*******************************************************************************/
N#if (CY_PSOC4)
X#if ((2u == 2u))
N
N    /* Using SRSSv2 or SRS-Lite */
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #define CY_IP_SRSSV2            (0 != 0)
N        #define CY_IP_SRSSLT            (!CY_IP_SRSSV2)
N    #else
S        #define CY_IP_SRSSV2            (0 == 0)
S        #define CY_IP_SRSSLT            (!CY_IP_SRSSV2)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #define CY_IP_CPUSSV3           (1 == 1)
N        #define CY_IP_CPUSSV2           (0 == 1)
N        #define CY_IP_CPUSS             (0 == 1)
N    #else
S        #define CY_IP_CPUSSV3           (0 != 0)
S        #define CY_IP_CPUSSV2           (0 != 0)
S        #define CY_IP_CPUSS             (0 == 0)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N    /* CM0 present or CM0+ present (1=CM0, 0=CM0+) */
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #if (CY_IP_CPUSSV2)
X        #if ((0 == 1))
S            #define CY_IP_CPUSS_CM0         (0 == 0)
N        #else   /* CY_IP_CPUSSV3 */
N            #define CY_IP_CPUSS_CM0         (0 == 1)
N        #endif  /* (CY_IP_CPUSSV2) */
N        #define CY_IP_CPUSS_CM0PLUS         (!CY_IP_CPUSS_CM0)
N    #else
S        #define CY_IP_CPUSS_CM0             (0 == 0)
S        #define CY_IP_CPUSS_CM0PLUS         (0 != 0)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N
N    /* Flash memory present or not (1=Flash present, 0=Flash not present) */
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #define CY_IP_CPUSS_FLASHC_PRESENT      (0 == 0)
N    #else
S        #define CY_IP_CPUSS_FLASHC_PRESENT      (0 != 0)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N
N    /* Product uses FLASH-Lite or regular FLASH */
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #if (CY_IP_CPUSSV2)
X        #if ((0 == 1))
S            #define CY_IP_FM                (-1 == 0)
S            #define CY_IP_FMLT              (-1 == 1)
S            #define CY_IP_FS                (-1 == 2)
S            #define CY_IP_FSLT              (-1 == 3)
N        #else   /* CY_IP_CPUSSV3 */
N            #define CY_IP_FM                (3 == 0)
N            #define CY_IP_FMLT              (3 == 1)
N            #define CY_IP_FS                (3 == 2)
N            #define CY_IP_FSLT              (3 == 3)
N        #endif  /* (CY_IP_CPUSSV2) */
N    #else
S        #define CY_IP_FM                (!CY_IP_FMLT)       /* Regular FLASH */
S        #define CY_IP_FMLT              (0 != 0)            /* FLASH-Lite */
S        #define CY_IP_FS                (0 != 0)            /* FS */
S        #define CY_IP_FSLT              (0 != 0)            /* FSLT */
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N
N    /* Enable simultaneous execution/programming in multi-macro devices */
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #if (CY_IP_CPUSSV2)
X        #if ((0 == 1))
S            #define CY_IP_FLASH_PARALLEL_PGM_EN (-1 == 1)
N        #else   /* CY_IP_CPUSSV3 */
N            #define CY_IP_FLASH_PARALLEL_PGM_EN (0 == 1)
N        #endif  /* (CY_IP_CPUSSV2) */
N    #else
S        #define CY_IP_FLASH_PARALLEL_PGM_EN     (0u != 0u)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N
N    /* Number of Flash macros used in the device (0, 1 or 2) */
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #if (CY_IP_CPUSSV2)
X        #if ((0 == 1))
S            #define CY_IP_FLASH_MACROS (-1u)
N        #else   /* CY_IP_CPUSSV3 */
N            #define CY_IP_FLASH_MACROS (1u)
N        #endif  /* (CY_IP_CPUSSV2) */
N    #else
S        #define CY_IP_FLASH_MACROS     (1u)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N    /* Number of interrupt request inputs to CM0 */
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #if (CY_IP_CPUSSV2)
X        #if ((0 == 1))
S            #define CY_IP_INT_NR            (-1u)
N        #else   /* CY_IP_CPUSSV3 */
N            #define CY_IP_INT_NR            (28u)
N        #endif  /* (CY_IP_CPUSSV2) */
N    #else
S        #define CY_IP_INT_NR            (32u)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N
N    /* Presence of the BLESS IP block */
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #define CY_IP_BLESS             (0 != 0)
N        #define CY_IP_BLESSV3           (CYIPBLOCK_m0s8bless_VERSION == 3)
N    #else
S        #define CY_IP_BLESS             (0 != 0)
S        #define CY_IP_BLESSV3           (0 != 0)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #define CY_IP_USBDEV            (0 != 0)
N    #else
S        #define CY_IP_USBDEV            (0 != 0)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N
N    /***************************************************************************
N    * Devices with the SPCIF_SYNCHRONOUS parameter set to one will not use
N    * the 36MHz Oscillator for Flash operation. Instead, flash write function
N    * ensures that the charge pump clock and the higher frequency clock (HFCLK)
N    * are set to the IMO at 48MHz prior to writing the flash.
N    ***************************************************************************/
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #if (CY_IP_CPUSSV2)
X        #if ((0 == 1))
S            #define CY_IP_SPCIF_SYNCHRONOUS     (-1 == 1)
N        #else   /* CY_IP_CPUSSV3 */
N            #define CY_IP_SPCIF_SYNCHRONOUS     (1 == 1)
N        #endif  /* (CY_IP_CPUSSV2) */
N    #else
S        #define CY_IP_SPCIF_SYNCHRONOUS     (0 != 0)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N    /* Watch Crystal Oscillator (WCO) is present (32kHz) */
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #if (CY_IP_BLESS)
X        #if ((0 != 0))
S            #define CY_IP_WCO_WCO           (0 != 0)
S            #define CY_IP_WCO_SRSSV2        (0 != 0)
S            #if (CY_IP_BLESSV3)
S                #define CY_IP_WCO_WCOV2     (0 == 0)
S                #define CY_IP_WCO_BLESS     (0 != 0)                
S            #else
S                #define CY_IP_WCO_WCOV2     (0 != 0)
S                #define CY_IP_WCO_BLESS     (0 == 0)
S            #endif
N        #else
N            #define CY_IP_WCO_BLESS         (0 != 0)
N            #define CY_IP_WCO_WCO           (1 == 1)
N            #define CY_IP_WCO_WCOV2         (0 != 0)
N            #define CY_IP_WCO_SRSSV2        (-1 == 1)
N        #endif  /* (CY_IP_BLESS) */
N    #else
S        #define CY_IP_WCO_BLESS             (0 != 0)
S        #define CY_IP_WCO_WCO               (0 != 0)
S        #define CY_IP_WCO_WCOV2             (0 != 0)
S        #define CY_IP_WCO_SRSSV2            (0 != 0)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N    #define CY_IP_WCO   (CY_IP_WCO_BLESS || CY_IP_WCO_WCO || CY_IP_WCO_WCOV2 || CY_IP_WCO_SRSSV2)
N
N    /* External Crystal Oscillator is present (high frequency) */
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #if (CY_IP_BLESS)
X        #if ((0 != 0))
S            #define CY_IP_ECO_SRSSV2        (0 != 0)
S            #define CY_IP_ECO_SRSSLT        (0 != 0)
S            
S            #if (CY_IP_BLESSV3)
S                #define CY_IP_ECO_BLESS     (0 != 0)
S                #define CY_IP_ECO_BLESSV3   (0 == 0)
S            #else
S                #define CY_IP_ECO_BLESS     (0 == 0)
S                #define CY_IP_ECO_BLESSV3   (0 != 0)
S            #endif
N        #else
N            #define CY_IP_ECO_BLESS         (0 != 0)
N            #define CY_IP_ECO_BLESSV3       (0 != 0)
N            #define CY_IP_ECO_SRSSV2        (-1 == 1)
N            #define CY_IP_ECO_SRSSLT        ((1 != 0) && (1 != 0))
N        #endif  /* (CY_IP_BLESS) */
N    #else
S        #define CY_IP_ECO_BLESS             (0 != 0)
S        #define CY_IP_ECO_BLESSV3           (0 != 0)
S        #define CY_IP_ECO_SRSSV2            (0 != 0)
S        #define CY_IP_ECO_SRSSLT            (0 != 0)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N    #define CY_IP_ECO   (CY_IP_ECO_BLESS || CY_IP_ECO_SRSSV2 || CY_IP_ECO_BLESSV3 || CY_IP_ECO_SRSSLT)
N
N    /* PLL is present */
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #if(CY_IP_SRSSV2)
X        #if((0 != 0))
S            #define CY_IP_PLL           ((-1 != 0) || \
S                                          (-1 != 0)) 
X            #define CY_IP_PLL           ((-1 != 0) ||                                           (-1 != 0)) 
S
S            #define CY_IP_PLL_NR        (-1u + \
S                                          -1u)
X            #define CY_IP_PLL_NR        (-1u +                                           -1u)
S        
N        #elif (CY_IP_SRSSLT)
X        #elif ((!(0 != 0)))
N            #define CY_IP_PLL           (1 == 1)
N
N            #define CY_IP_PLL_NR        (1)
N        #else
S            #define CY_IP_PLL           (0 != 0)
S            #define CY_IP_PLL_NR        (0)
N        #endif /* (CY_IP_SRSSV2) */
N    #else
S        #define CY_IP_PLL           (0 != 0)
S        #define CY_IP_PLL_NR        (0)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N    /* Clock Source clk_lf implemented in SysTick Counter. When 0, not implemented, 1=implemented */
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #if (CY_IP_CPUSSV2)
X        #if ((0 == 1))
S            #define CY_SYSTICK_LFCLK_SOURCE     (-1 != 0)
N        #else   /* CY_IP_CPUSSV3 */
N            #define CY_SYSTICK_LFCLK_SOURCE     (1 != 0)
N        #endif  /* (CY_IP_CPUSSV2) */
N    #else
S        #define CY_SYSTICK_LFCLK_SOURCE     (0 != 0)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N
N    /* Flash Macro 0 has extra rows */
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #ifdef CYREG_SFLASH_MACRO_0_FREE_SFLASH0
N            #define CY_SFLASH_XTRA_ROWS         (0 == 0)
N        #else
S            #define CY_SFLASH_XTRA_ROWS         (0 != 0)
N        #endif /* CYREG_SFLASH_MACRO_0_FREE_SFLASH0 */
N
N    #else
S        #define CY_SFLASH_XTRA_ROWS         (0 != 0)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N
N    #if (CY_IP_USBDEV)
X    #if ((0 != 0))
S        #define CY_IP_IMO_TRIMMABLE_BY_USB  (0 == 0)
N    #else
N        #define CY_IP_IMO_TRIMMABLE_BY_USB  (0 != 0)
N    #endif  /* (CY_IP_USBDEV) */
N
N
N    #if (CY_IP_WCO_WCO || CY_IP_WCO_SRSSV2)
X    #if ((1 == 1) || (-1 == 1))
N        #define CY_IP_IMO_TRIMMABLE_BY_WCO  (0 == 0)
N    #else
S        #define CY_IP_IMO_TRIMMABLE_BY_WCO  (0 != 0)
N    #endif  /* (CY_IP_WCO_WCO || CY_IP_WCO_SRSSV2) */
N
N
N    /* DW/DMA Controller present (0=No, 1=Yes) */
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #if (CY_IP_CPUSSV2)
X        #if ((0 == 1))
S            #define CY_IP_DMAC_PRESENT      (-1 == 1)
N        #else
N            #define CY_IP_DMAC_PRESENT      (1 == 1)
N        #endif  /* (CY_IP_CPUSSV2) */
N    #else
S        #define CY_IP_DMAC_PRESENT          (0 != 0)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #define CY_IP_PASS                  (0 == 1)
N    #else
S        #define CY_IP_PASS                  (0 != 0)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N
N
N	/* Number of external slave ports on System Interconnect */
N    #if (CY_IP_HOBTO_DEVICE)
X    #if ((!(0 == 1)))
N        #if (CY_IP_CPUSSV2)
X        #if ((0 == 1))
S            #define CY_IP_SL_NR             (-1)
N        #else
N            #define CY_IP_SL_NR             (3)
N        #endif  /* (CY_IP_CPUSSV2) */
N    #else
S        #define CY_IP_SL_NR                 (0)
N    #endif  /* (CY_IP_HOBTO_DEVICE) */
N
N#else
S
S    #if (CY_PSOC3)
S        #define CY_SYSTICK_LFCLK_SOURCE     (0 != 0)
S    #else /* PSoC 5LP */
S        #define CY_SYSTICK_LFCLK_SOURCE     (0 == 0)
S    #endif /* (CY_PSOC3) */
S
N#endif  /* (CY_PSOC4) */
N
N
N/*******************************************************************************
N* The components version defines. Available started from cy_boot 4.20
N* Use the following construction in order to identify cy_boot version:
N* (defined(CY_BOOT_VERSION) && CY_BOOT_VERSION >= CY_BOOT_4_20)
N*******************************************************************************/
N#define CY_BOOT_4_20            (420u)
N#define CY_BOOT_5_0             (500u)
N#define CY_BOOT_5_10            (510u)
N#define CY_BOOT_5_20            (520u)
N#define CY_BOOT_5_30            (530u)
N#define CY_BOOT_5_40            (540u)
N#define CY_BOOT_5_50            (550u)
N#define CY_BOOT_5_60            (560u)
N#define CY_BOOT_5_70            (570u)
N#define CY_BOOT_VERSION         (CY_BOOT_5_70)
N
N
N/*******************************************************************************
N*   Base Types. Acceptable types from MISRA-C specifying signedness and size.
N*******************************************************************************/
Ntypedef unsigned char   uint8;
Ntypedef unsigned short  uint16;
Ntypedef unsigned long   uint32;
Ntypedef signed   char   int8;
Ntypedef signed   short  int16;
Ntypedef signed   long   int32;
Ntypedef          float  float32;
N
N#if(!CY_PSOC3)
X#if(!(2u == 1u))
N
N    typedef               double float64;
N    typedef          long long   int64;
N    typedef unsigned long long   uint64;
N
N#endif  /* (!CY_PSOC3) */
N
N/* Signed or unsigned depending on compiler selection */
Ntypedef          char   char8;
N
N
N/*******************************************************************************
N*   Memory address functions prototypes
N*******************************************************************************/
N#if(CY_PSOC3)
X#if((2u == 1u))
S
S    /***************************************************************************
S    * Prototypes for absolute memory address functions (cymem.a51) with built-in
S    * endian conversion. These functions should be called through the
S    * CY_GET_XTND_REGxx and CY_SET_XTND_REGxx macros.
S    ***************************************************************************/
S    extern uint8  cyread8       (const volatile void far *addr);
S    extern void   cywrite8      (volatile void far *addr, uint8 value);
S
S    extern uint16 cyread16      (const volatile void far *addr);
S    extern uint16 cyread16_nodpx(const volatile void far *addr);
S
S    extern void   cywrite16      (volatile void far *addr, uint16 value);
S    extern void   cywrite16_nodpx(volatile void far *addr, uint16 value);
S
S    extern uint32 cyread24      (const volatile void far *addr);
S    extern uint32 cyread24_nodpx(const volatile void far *addr);
S
S    extern void   cywrite24      (volatile void far *addr, uint32 value);
S    extern void   cywrite24_nodpx(volatile void far *addr, uint32 value);
S
S    extern uint32 cyread32      (const volatile void far *addr);
S    extern uint32 cyread32_nodpx(const volatile void far *addr);
S
S    extern void   cywrite32      (volatile void far *addr, uint32 value);
S    extern void   cywrite32_nodpx(volatile void far *addr, uint32 value);
S
S
S    /***************************************************************************
S    * Memory access routines from cymem.a51 for the generated device
S    * configuration code. These functions may be subject to change in future
S    * revisions of the cy_boot component and they are not available for all
S    * devices. Most code should use memset or memcpy instead.
S    ***************************************************************************/
S    void cymemzero(void far *addr, uint16 size);
S    void cyconfigcpy(uint16 size, const void far *src, void far *dest) large;
S    void cyconfigcpycode(uint16 size, const void code *src, void far *dest);
S
S    #define CYCONFIGCPY_DECLARED    (1)
S
N#else
N
N    /* Prototype for function to set 24-bit register. Located at cyutils.c */
N    extern void     CySetReg24(uint32 volatile * addr, uint32 value);
N
N    #if(CY_PSOC4)
X    #if((2u == 2u))
N
N        extern uint32 CyGetReg24(uint32 const volatile * addr);
N
N    #endif  /* (CY_PSOC4) */
N
N#endif  /* (CY_PSOC3) */
N
N
N/*******************************************************************************
N*   Memory model definitions. To allow code to be 8051-ARM agnostic.
N*******************************************************************************/
N#if(CY_PSOC3)
X#if((2u == 1u))
S
S    #define CYBDATA     bdata
S    #define CYBIT       bit
S    #define CYCODE      code
S    #define CYCOMPACT   compact
S    #define CYDATA      data
S    #define CYFAR       far
S    #define CYIDATA     idata
S    #define CYLARGE     large
S    #define CYPDATA     pdata
S    #define CYREENTRANT reentrant
S    #define CYSMALL     small
S    #define CYXDATA     xdata
S    #define XDATA       xdata
S
S    #define CY_NOINIT
S
N#else
N
N    #define CYBDATA
N    #define CYBIT      uint8
N    #define CYCODE
N    #define CYCOMPACT
N    #define CYDATA
N    #define CYFAR
N    #define CYIDATA
N    #define CYLARGE
N    #define CYPDATA
N    #define CYREENTRANT
N    #define CYSMALL
N    #define CYXDATA
N    #define XDATA
N
N    #if defined(__ARMCC_VERSION)
X    #if 1L
N
N        #define CY_NOINIT           __attribute__ ((section(".noinit"), zero_init))
N        #define CY_NORETURN         __attribute__ ((noreturn))
N        #define CY_SECTION(name)    __attribute__ ((section(name)))
N
N        /* Specifies a minimum alignment (in bytes) for variables of the
N        *  specified type.
N        */
N        #define CY_ALIGN(align)     __align(align)
N
N
N        /* Attached to an enum, struct, or union type definition, specified that
N        *  the minimum required memory be used to represent the type.
N        */
N        #define CY_PACKED
N        #define CY_PACKED_ATTR      __attribute__ ((packed))
N        #define CY_INLINE           __inline
N    #elif defined (__GNUC__)
S
S        #define CY_NOINIT           __attribute__ ((section(".noinit")))
S        #define CY_NORETURN         __attribute__ ((noreturn))
S        #define CY_SECTION(name)    __attribute__ ((section(name)))
S        #define CY_ALIGN(align)     __attribute__ ((aligned(align)))
S        #define CY_PACKED
S        #define CY_PACKED_ATTR      __attribute__ ((packed))
S        #define CY_INLINE           inline
S    #elif defined (__ICCARM__)
S
S        #define CY_NOINIT           __no_init
S        #define CY_NORETURN         __noreturn
S        #define CY_PACKED           __packed
S        #define CY_PACKED_ATTR
S        #define CY_INLINE           inline
N    #endif  /* (__ARMCC_VERSION) */
N
N#endif  /* (CY_PSOC3) */
N
N
N#if(CY_PSOC3)
X#if((2u == 1u))
S
S    /* 8051 naturally returns 8 bit value. */
S    typedef unsigned char cystatus;
S
N#else
N
N    /* ARM naturally returns 32 bit value. */
N    typedef unsigned long cystatus;
N
N#endif  /* (CY_PSOC3) */
N
N
N/*******************************************************************************
N*  Hardware Register Types.
N*******************************************************************************/
Ntypedef volatile uint8  CYXDATA reg8;
Xtypedef volatile uint8   reg8;
Ntypedef volatile uint16 CYXDATA reg16;
Xtypedef volatile uint16  reg16;
Ntypedef volatile uint32 CYXDATA reg32;
Xtypedef volatile uint32  reg32;
N
N
N/*******************************************************************************
N*  Interrupt Types and Macros
N*******************************************************************************/
N#if(CY_PSOC3)
X#if((2u == 1u))
S
S    #define CY_ISR(FuncName)        void FuncName (void) interrupt 0
S    #define CY_ISR_PROTO(FuncName)  void FuncName (void)
S    typedef void (CYCODE * cyisraddress)(void);
S
N#else
N
N    #define CY_ISR(FuncName)        void FuncName (void)
N    #define CY_ISR_PROTO(FuncName)  void FuncName (void)
N    typedef void (* cyisraddress)(void);
N
N    #if defined (__ICCARM__)
X    #if 0L
S        typedef union { cyisraddress __fun; void * __ptr; } intvec_elem;
N    #endif  /* defined (__ICCARM__) */
N
N#endif  /* (CY_PSOC3) */
N
N
N#define CY_M_PI                         (3.14159265358979323846264338327)
N
N
N/**
N* \addtogroup group_register_access
NA library of macros provides read and write access to the registers of the device. These macros are used with the
Ndefined values made available in the generated cydevice_trm.h and cyfitter.h files. Access to registers should be made
Nusing these macros and not the functions that are used to implement the macros. This allows for device independent code
Ngeneration.
N
NThe PSoC 4 processor architecture use little endian ordering.
N
NSRAM and Flash storage in all architectures is done using the endianness of the architecture and compilers. However,
Nthe registers in all these chips are laid out in little endian order. These macros allow register accesses to match this
Nlittle endian ordering. If you perform operations on multi-byte registers without using these macros, you must consider
Nthe byte ordering of the specific architecture. Examples include usage of DMA to transfer between memory and registers,
Nas well as function calls that are passed an array of bytes in memory.
N
NThe PSoC 4 requires these accesses to be aligned to the width of the transaction.
N
NThe PSoC 4 requires peripheral register accesses to match the hardware register size. Otherwise, the peripheral might
Nignore the transfer and Hard Fault exception will be generated.
N
N*/
N
N/** @} group_register_access */
N
N
N/**
N* \addtogroup group_register_access_macros Register Access
N* \ingroup group_register_access
N* @{
N*/
N
N#if(CY_PSOC3)
X#if((2u == 1u))
S    /*******************************************************************************
S    * Macro Name: CY_GET_REG8(addr)
S    ****************************************************************************//**
S    *
S    * Reads the 8-bit value from the specified register.
S    *
S    * \param reg Register address.
S    *
S    * \return Read value.
S    *
S    *******************************************************************************/
S    #define CY_GET_REG8(addr)               (*((const reg8 *)(addr)))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_REG8(addr, value)
S    ****************************************************************************//**
S    *
S    * Writes the 8-bit value to the specified register.
S    *
S    * \param reg Register address.
S    * \param value Value to write.
S    *
S    *******************************************************************************/
S    #define CY_SET_REG8(addr, value)        (*((reg8 *)(addr))  = (uint8)(value))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_REG16(addr)
S    ****************************************************************************//**
S    *
S    * Reads the 16-bit value from the specified register. This macro implements the
S    * byte swapping required for proper operation.
S    *
S    * \param reg Register address.
S    *
S    * \return Read value.
S    *
S    *******************************************************************************/
S    #define CY_GET_REG16(addr)              cyread16_nodpx ((const volatile void far *)(const reg16 *)(addr))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_REG16(addr, value)
S    ****************************************************************************//**
S    *
S    * Writes the 16-bit value to the specified register. This macro implements the
S    * byte swapping required for proper operation.
S    *
S    * \param reg Register address.
S    * \param value Value to write.
S    *
S    *******************************************************************************/
S    #define CY_SET_REG16(addr, value)       cywrite16_nodpx((volatile void far *)(reg16 *)(addr), value)
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_REG24(addr)
S    ****************************************************************************//**
S    *
S    * Reads the 24-bit value from the specified register. This macro implements the
S    * byte swapping required for proper operation.
S    *
S    * \param reg Register address.
S    *
S    * \return Read value.
S    *
S    *******************************************************************************/
S    #define CY_GET_REG24(addr)              cyread24_nodpx ((const volatile void far *)(const reg32 *)(addr))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_REG24(addr, value)
S    ****************************************************************************//**
S    *
S    * Writes the 24-bit value to the specified register. This macro implements the
S    * byte swapping required for proper operation.
S    *
S    * \param reg Register address.
S    * \param value Value to write.
S    *
S    *******************************************************************************/
S    #define CY_SET_REG24(addr, value)       cywrite24_nodpx((volatile void far *)(reg32 *)(addr),value)
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_REG32(addr)
S    ****************************************************************************//**
S    *
S    * Reads the 32-bit value from the specified register. This macro implements the
S    * byte swapping required for proper operation.
S    *
S    * \param reg Register address.
S    *
S    * \return Read value.
S    *
S    *******************************************************************************/
S    #define CY_GET_REG32(addr)              cyread32_nodpx ((const volatile void far *)(const reg32 *)(addr))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_REG32(addr, value)
S    ****************************************************************************//**
S    *
S    * Writes the 32-bit value to the specified register. This macro implements the
S    * byte swapping required for proper operation.
S    *
S    * \param reg Register address.
S    * \param value Value to write.
S    *
S    *******************************************************************************/
S    #define CY_SET_REG32(addr, value)       cywrite32_nodpx((volatile void far *)(reg32 *)(addr), value)
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_XTND_REG8(addr)
S    ****************************************************************************//**
S    *
S    * Reads the 8-bit value from the specified register.
S    * Identical to \ref CY_GET_REG8 for PSoC 4.
S    *
S    * \param reg Register address.
S    *
S    * \return Read value.
S    *
S    *******************************************************************************/
S    #define CY_GET_XTND_REG8(addr)          cyread8((const volatile void far *)(addr))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_XTND_REG8(addr, value)
S    ****************************************************************************//**
S    *
S    * Writes the 8-bit value to the specified register.
S    * Identical to \ref CY_SET_REG8 for PSoC 4.
S    *
S    * \param reg Register address.
S    * \param value Value to write.
S    *
S    *******************************************************************************/
S    #define CY_SET_XTND_REG8(addr, value)   cywrite8((volatile void far *)(addr), value)
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_XTND_REG16(addr)
S    ****************************************************************************//**
S    *
S    * Reads the 16-bit value from the specified register. This macro implements the
S    * byte swapping required for proper operation. Identical to \ref CY_GET_REG16
S    * for PSoC 4.
S    *
S    * \param reg Register address.
S    *
S    * \return Read value.
S    *
S    *******************************************************************************/
S    #define CY_GET_XTND_REG16(addr)         cyread16((const volatile void far *)(addr))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_XTND_REG16(addr, value)
S    ****************************************************************************//**
S    *
S    * Writes the 16-bit value to the specified register. This macro implements the
S    * byte swapping required for proper operation. Identical to \ref CY_SET_REG16
S    * for PSoC 4.
S    *
S    * \param reg Register address.
S    * \param value Value to write.
S    *
S    *******************************************************************************/
S    #define CY_SET_XTND_REG16(addr, value)  cywrite16((volatile void far *)(addr), value)
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_XTND_REG24(addr)
S    ****************************************************************************//**
S    *
S    * Reads the 24-bit value from the specified register. This macro implements the
S    * byte swapping required for proper operation. Identical to \ref CY_GET_REG24
S    * for PSoC 4.
S    *
S    * \param reg Register address.
S    *
S    * \return Read value.
S    *
S    *******************************************************************************/
S    #define CY_GET_XTND_REG24(addr)         cyread24((const volatile void far *)(addr))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_XTND_REG24(addr, value)
S    ****************************************************************************//**
S    *
S    * Writes the 24-bit value to the specified register. This macro implements the
S    * byte swapping required for proper operation. Identical to \ref CY_SET_REG24
S    * for PSoC 4.
S    *
S    * \param reg Register address.
S    * \param value Value to write.
S    *
S    *******************************************************************************/
S    #define CY_SET_XTND_REG24(addr, value)  cywrite24((volatile void far *)(addr), value)
S
S
S    /*******************************************************************************
S    * Macro Name: CY_GET_XTND_REG32(addr)
S    ****************************************************************************//**
S    *
S    * Reads the 32-bit value from the specified register. This macro implements the
S    * byte swapping required for proper operation. Identical to \ref CY_GET_REG32
S    * for PSoC 4.
S    *
S    * \param reg Register address.
S    *
S    * \return Read value.
S    *
S    *******************************************************************************/
S    #define CY_GET_XTND_REG32(addr)         cyread32((const volatile void far *)(addr))
S
S
S    /*******************************************************************************
S    * Macro Name: CY_SET_XTND_REG32(addr, value)
S    ****************************************************************************//**
S    *
S    * Writes the 32-bit value to the specified register. This macro implements the
S    * byte swapping required for proper operation. Identical to \ref CY_SET_REG32
S    * for PSoC 4.
S    *
S    * \param reg Register address.
S    * \param value Value to write.
S    *
S    *******************************************************************************/
S    #define CY_SET_XTND_REG32(addr, value)  cywrite32((volatile void far *)(addr), value)
S
N#else
N
N    #define CY_GET_REG8(addr)               (*((const reg8 *)(addr)))
N    #define CY_SET_REG8(addr, value)        (*((reg8 *)(addr))  = (uint8)(value))
N
N    #define CY_GET_REG16(addr)              (*((const reg16 *)(addr)))
N    #define CY_SET_REG16(addr, value)       (*((reg16 *)(addr)) = (uint16)(value))
N
N
N    #define CY_SET_REG24(addr, value)       CySetReg24((reg32 *) (addr), (value))
N    #if(CY_PSOC4)
X    #if((2u == 2u))
N        #define CY_GET_REG24(addr)          CyGetReg24((const reg32 *) (addr))
N    #else
S        #define CY_GET_REG24(addr)          (*((const reg32 *)(addr)) & 0x00FFFFFFu)
N    #endif  /* (CY_PSOC4) */
N
N
N    #define CY_GET_REG32(addr)              (*((const reg32 *)(addr)))
N    #define CY_SET_REG32(addr, value)       (*((reg32 *)(addr)) = (uint32)(value))
N
N    /* To allow code to be 8051-ARM agnostic. */
N    #define CY_GET_XTND_REG8(addr)          CY_GET_REG8(addr)
N    #define CY_SET_XTND_REG8(addr, value)   CY_SET_REG8(addr, value)
N
N    #define CY_GET_XTND_REG16(addr)         CY_GET_REG16(addr)
N    #define CY_SET_XTND_REG16(addr, value)  CY_SET_REG16(addr, value)
N
N    #define CY_GET_XTND_REG24(addr)         CY_GET_REG24(addr)
N    #define CY_SET_XTND_REG24(addr, value)  CY_SET_REG24(addr, value)
N
N    #define CY_GET_XTND_REG32(addr)         CY_GET_REG32(addr)
N    #define CY_SET_XTND_REG32(addr, value)  CY_SET_REG32(addr, value)
N
N#endif  /* (CY_PSOC3) */
N/** @} group_register_access_macros */
N
N
N/**
N* \addtogroup group_register_access_bits Bit Manipulation
N* \ingroup group_register_access
N* @{
N*/
N
N#if(CY_PSOC4)
X#if((2u == 2u))
N
N    /*******************************************************************************
N    * Macro Name: CY_GET_FIELD_MASK(regSize, bitFieldName)
N    ****************************************************************************//**
N    *
N    * Returns the bit field mask for the specified register size and bit field
N    * name.
N    *
N    * \param regSize Size of the register in bits.
N    * \param bitFieldName Fully qualified name of the bit field. The biFieldName
N    *  is automatically appended with __OFFSET and __SIZE by the macro for usage.
N    *
N    * \return Returns the bit mask.
N    *
N    *******************************************************************************/
N    #define CY_GET_FIELD_MASK(regSize, bitFieldName) \
N        ((((uint ## regSize) 0xFFFFFFFFu << ((uint32)(regSize) - bitFieldName ## __SIZE - bitFieldName ## __OFFSET)) >>\
N         ((uint32)(regSize) - bitFieldName ## __SIZE)) << bitFieldName ## __OFFSET)
X    #define CY_GET_FIELD_MASK(regSize, bitFieldName)         ((((uint ## regSize) 0xFFFFFFFFu << ((uint32)(regSize) - bitFieldName ## __SIZE - bitFieldName ## __OFFSET)) >>         ((uint32)(regSize) - bitFieldName ## __SIZE)) << bitFieldName ## __OFFSET)
N
N
N    /*******************************************************************************
N    * Macro Name: CY_GET_REG8_FIELD(registerName, bitFieldName)
N    ****************************************************************************//**
N    *
N    * Reads the specified bit field value from the specified 8-bit register.
N    *
N    * The macro operation is not atomic. It is not guaranteed that the shared
N    * register will remain uncorrupted during simultaneous read-modify-write
N    * operation performed by two threads (main and interrupt threads). To
N    * guarantee data integrity in such cases, the macro should be invoked while
N    * the specific interrupt is disabled or within a critical section (all
N    * interrupts are disabled).
N    *
N    * Using this macro on 32-bit and 16-bit width registers will generate a
N    * hard fault exception. Examples of 8-bit registers are the UDB registers.
N    *
N    * \param registerName: The fully qualified name of the PSoC 4 device register.
N    * \param bitFieldName: fully qualified name of the bit field. The biFieldName is
N    * automatically appended with __OFFSET and __SIZE by the macro for usage.
N    *
N    * For fully qualified names of the register and bit fields and the possible
N    * values the field can take, please, refer to a respective PSoC family
N    * register TRM.
N    *
N    * \return Zero if the specified bit field is zero, and a non-zero value,
N    * otherwise. The return value is of type uint32.
N    *
N    *******************************************************************************/
N    #define CY_GET_REG8_FIELD(registerName, bitFieldName) \
N         ((CY_GET_REG8((registerName)) >> bitFieldName ## __OFFSET) & (~(0xFFu << bitFieldName ## __SIZE)))
X    #define CY_GET_REG8_FIELD(registerName, bitFieldName)          ((CY_GET_REG8((registerName)) >> bitFieldName ## __OFFSET) & (~(0xFFu << bitFieldName ## __SIZE)))
N
N
N    /*******************************************************************************
N    * Macro Name: CY_SET_REG8_FIELD(registerName, bitFieldName, value)
N    ****************************************************************************//**
N    *
N    * Sets the specified bit field value of the specified 8-bit register to the
N    * required value.
N    *
N    * The macro operation is not atomic. It is not guaranteed that the shared
N    * register remains uncorrupted during simultaneous read-modify-write
N    * operation performed by two threads (main and interrupt threads). To
N    * guarantee data integrity in such cases, the macro should be invoked while
N    * the specific interrupt is disabled or within a critical section (all
N    * interrupts are disabled).
N    *
N    * Using this macro on the 32-bit and 16-bit width registers, generates a
N    * hard fault exception. Examples of 8-bit registers are the UDB registers.
N    *
N    * \param registerName The fully qualified name of the PSoC 4 device register.
N    * \param bitFieldName fully qualified name of the bit field. The biFieldName is
N    * automatically appended with __OFFSET and __SIZE by the macro for usage.
N    * \param value The value that the field must be configured for.
N    *
N    * For fully qualified names of the register and bit fields and the possible
N    * values the field can take, please, refer to a respective PSoC family
N    * register TRM.
N    *
N    *******************************************************************************/
N    #define CY_SET_REG8_FIELD(registerName, bitFieldName, value) \
N        CY_SET_REG8((registerName), \
N        ((CY_GET_REG8((registerName))                 & ~CY_GET_FIELD_MASK(8, bitFieldName)) | \
N        (((uint8)(value) << bitFieldName ## __OFFSET) &  CY_GET_FIELD_MASK(8, bitFieldName))))
X    #define CY_SET_REG8_FIELD(registerName, bitFieldName, value)         CY_SET_REG8((registerName),         ((CY_GET_REG8((registerName))                 & ~CY_GET_FIELD_MASK(8, bitFieldName)) |         (((uint8)(value) << bitFieldName ## __OFFSET) &  CY_GET_FIELD_MASK(8, bitFieldName))))
N
N
N    /*******************************************************************************
N    * Macro Name: CY_CLEAR_REG8_FIELD(registerName, bitFieldName)
N    ****************************************************************************//**
N    *
N    * Clears the specified bit field of the specified 8-bit register.
N    *
N    * The macro operation is not atomic. It is not guaranteed that the shared
N    * register remains uncorrupted during simultaneous read-modify-write
N    * operation performed by two threads (main and interrupt threads). To
N    * guarantee data integrity in such cases, the macro should be invoked while
N    * the specific interrupt is disabled or within a critical section (all
N    * interrupts are disabled).
N    *
N    * Using this macro on the 32-bit and 16-bit width registers generates a
N    * hard fault exception. Examples of 8-bit registers are the UDB registers.
N    *
N    * \param registerName The fully qualified name of the PSoC 4 device register.
N    * \param bitFieldName fully qualified name of the bit field. The biFieldName is
N    * automatically appended with __OFFSET and __SIZE by the macro for usage.
N    *
N    * For fully qualified names of the register and bit fields and the
N    * possible values the field can take, please, refer to a respective PSoC
N    * family register TRM.
N    *
N    *******************************************************************************/
N    #define CY_CLEAR_REG8_FIELD(registerName, bitFieldName) \
N        (CY_SET_REG8((registerName), (CY_GET_REG8((registerName)) & ~CY_GET_FIELD_MASK(8, bitFieldName))))
X    #define CY_CLEAR_REG8_FIELD(registerName, bitFieldName)         (CY_SET_REG8((registerName), (CY_GET_REG8((registerName)) & ~CY_GET_FIELD_MASK(8, bitFieldName))))
N
N
N    /*******************************************************************************
N    * Macro Name: CY_GET_REG16_FIELD(registerName, bitFieldName)
N    ****************************************************************************//**
N    *
N    * Reads the specified bit field value from the specified 16-bit register.
N    *
N    * The macro operation is not atomic. It is not guaranteed that the shared
N    * register remains uncorrupted during simultaneous read-modify-write
N    * operation performed by two threads (main and interrupt threads). To
N    * guarantee data integrity in such cases, the macro should be invoked while
N    * the specific interrupt is disabled or within a critical section (all
N    * interrupts are disabled).
N    *
N    * Using this macro on the 32-bit and 16-bit width registers generates a
N    * hardfault exception. Examples of 8-bit registers are the UDB registers.
N    *
N    * \param registerName The fully qualified name of the PSoC 4 device register.
N    * \param bitFieldName fully qualified name of the bit field. The biFieldName is
N    * automatically appended with __OFFSET and __SIZE by the macro for usage.
N    *
N    * For fully qualified names of the register and bit fields and the
N    * possible values the field can take, please, refer to a respective PSoC
N    * family register TRM.
N    *
N    * \return Zero if the specified bit field is zero, and a non-zero value,
N    * otherwise. The return value is of type uint32.
N    *
N    *******************************************************************************/
N    #define CY_GET_REG16_FIELD(registerName, bitFieldName) \
N         ((CY_GET_REG16((registerName)) >> bitFieldName ## __OFFSET) & (~(0xFFFFu << bitFieldName ## __SIZE)))
X    #define CY_GET_REG16_FIELD(registerName, bitFieldName)          ((CY_GET_REG16((registerName)) >> bitFieldName ## __OFFSET) & (~(0xFFFFu << bitFieldName ## __SIZE)))
N
N
N    /*******************************************************************************
N    * Macro Name: CY_SET_REG16_FIELD(registerName, bitFieldName, value)
N    ****************************************************************************//**
N    *
N    * Sets the specified bit field value of the specified 16-bit register to the
N    * required value.
N    *
N    * The macro operation is not atomic. It is not guaranteed that the shared
N    * register remains uncorrupted during simultaneous read-modify-write operation
N    * performed by two threads (main and interrupt threads). To guarantee data
N    * integrity in such cases, the macro should be invoked while the specific
N    * interrupt is disabled or within a critical section (all interrupts are
N    * disabled).
N    *
N    * Using this macro on the 32-bit and 16-bit width registers generates a hard
N    * fault exception. Examples of 8-bit registers are the UDB registers.
N    *
N    * \param registerNam The fully qualified name of the PSoC 4 device register.
N    * \param bitFieldName: fully qualified name of the bit field. The biFieldName is
N    * automatically appended with __OFFSET and __SIZE by the macro for usage.
N    * \param value The value that the field must be configured for.
N    *
N    * For fully qualified names of the register and bit fields and the possible
N    * values the field can take, please, refer to a respective PSoC family
N    * register TRM.
N    *
N    *******************************************************************************/
N    #define CY_SET_REG16_FIELD(registerName, bitFieldName, value) \
N        CY_SET_REG16((registerName), \
N        ((CY_GET_REG16((registerName))                 & ~CY_GET_FIELD_MASK(16, bitFieldName)) | \
N        (((uint16)(value) << bitFieldName ## __OFFSET) &  CY_GET_FIELD_MASK(16, bitFieldName))))
X    #define CY_SET_REG16_FIELD(registerName, bitFieldName, value)         CY_SET_REG16((registerName),         ((CY_GET_REG16((registerName))                 & ~CY_GET_FIELD_MASK(16, bitFieldName)) |         (((uint16)(value) << bitFieldName ## __OFFSET) &  CY_GET_FIELD_MASK(16, bitFieldName))))
N
N
N    /*******************************************************************************
N    * Macro Name: CY_CLEAR_REG16_FIELD(registerName, bitFieldName)
N    ****************************************************************************//**
N    *
N    * Clears the specified bit field of the specified 16-bit register.
N    *
N    * The macro operation is not atomic. It is not guaranteed that the shared
N    * register remains uncorrupted during simultaneous read-modify-write operation
N    * performed by two threads (main and interrupt threads). To guarantee data
N    * integrity in such cases, the macro should be invoked while the specific
N    * interrupt is disabled or within a critical section (all interrupts are
N    * disabled).
N    *
N    * Using this macro on the 32-bit and 16-bit width registers generates a hard
N    * fault exception. Examples of 8-bit registers are the UDB registers.
N    *
N    * \param registerName: The fully qualified name of the PSoC 4 device register.
N    * \param bitFieldName: fully qualified name of the bit field. The biFieldName is
N    * automatically appended with __OFFSET and __SIZE by the macro for usage.
N    *
N    * For fully qualified names of the register and bit fields and the possible
N    * values the field can take, please, refer to a respective PSoC family register
N    * TRM.
N    *
N    *******************************************************************************/
N    #define CY_CLEAR_REG16_FIELD(registerName, bitFieldName)\
N        (CY_SET_REG16((registerName), (CY_GET_REG16((registerName)) & ~CY_GET_FIELD_MASK(16, bitFieldName))))
X    #define CY_CLEAR_REG16_FIELD(registerName, bitFieldName)        (CY_SET_REG16((registerName), (CY_GET_REG16((registerName)) & ~CY_GET_FIELD_MASK(16, bitFieldName))))
N
N
N    /*******************************************************************************
N    * Macro Name: CY_GET_REG32_FIELD(registerName, bitFieldName)
N    ****************************************************************************//**
N    *
N    * Reads the specified bit field value from the specified 32-bit register.
N    *
N    * The macro operation is not atomic. It is not guaranteed that the shared
N    * register remains uncorrupted during simultaneous read-modify-write operation
N    * performed by two threads (main and interrupt threads). To guarantee data
N    * integrity in such cases, the macro should be invoked while the specific
N    * interrupt is disabled or within a critical section (all interrupts are
N    * disabled).
N    *
N    * Using this macro on the 16-bit and 8-bit width registers generates a hard
N    * fault exception.
N    *
N    * \param registerName The fully qualified name of the PSoC 4 device register.
N    * \param bitFieldName The Fully qualified name of the bit field. The
N    * biFieldName is automatically appended with __OFFSET and __SIZE by the macro
N    * for usage.
N    *
N    * For fully qualified names of the register and bit fields, please, refer to
N    * a respective PSoC family register TRM.
N    *
N    * \return Zero if the specified bit field is zero, and a non-zero value, otherwise.
N    * The return value is of type uint32.
N    *
N    *******************************************************************************/
N    #define CY_GET_REG32_FIELD(registerName, bitFieldName) \
N          ((CY_GET_REG32((registerName)) >> bitFieldName ## __OFFSET) & (~(0xFFFFFFFFu << bitFieldName ## __SIZE)))
X    #define CY_GET_REG32_FIELD(registerName, bitFieldName)           ((CY_GET_REG32((registerName)) >> bitFieldName ## __OFFSET) & (~(0xFFFFFFFFu << bitFieldName ## __SIZE)))
N
N
N    /*******************************************************************************
N    * Macro Name: CY_SET_REG32_FIELD(registerName, bitFieldName, value)
N    ****************************************************************************//**
N    *
N    * Sets the specified bit field value of the specified 32-bit register to the
N    * required value.
N    *
N    * The macro operation is not atomic. It is not guaranteed that the shared
N    * register remains uncorrupted during simultaneous read-modify-write operation
N    * performed by two threads (main and interrupt threads). To guarantee data
N    * integrity in such cases, the macro should be invoked while the specific
N    * interrupt is disabled or within a critical section (all interrupts are
N    * disabled).
N    *
N    * Using this macro on the 16-bit and 8-bit width registers generates a hard
N    * fault exception.
N    *
N    * \param registerName The fully qualified name of the PSoC 4 device register.
N    * \param bitFieldName The fully qualified name of the bit field. The
N    * biFieldName is automatically appended with __OFFSET and __SIZE by the macro
N    * for usage.
N    * \param value The value that the field must be configured for.
N    *
N    * For fully qualified names of the register and bit fields and the possible
N    * values the field can take, please, refer to a respective PSoC family register
N    * TRM.
N    *
N    *******************************************************************************/
N    #define CY_SET_REG32_FIELD(registerName, bitFieldName, value) \
N        CY_SET_REG32((registerName), \
N        ((CY_GET_REG32((registerName))                 & ~CY_GET_FIELD_MASK(32, bitFieldName)) | \
N        (((uint32)(value) << bitFieldName ## __OFFSET) &  CY_GET_FIELD_MASK(32, bitFieldName))))
X    #define CY_SET_REG32_FIELD(registerName, bitFieldName, value)         CY_SET_REG32((registerName),         ((CY_GET_REG32((registerName))                 & ~CY_GET_FIELD_MASK(32, bitFieldName)) |         (((uint32)(value) << bitFieldName ## __OFFSET) &  CY_GET_FIELD_MASK(32, bitFieldName))))
N
N
N    /*******************************************************************************
N    * Macro Name: CY_CLEAR_REG32_FIELD(registerName, bitFieldName)
N    ****************************************************************************//**
N    *
N    * Clears the specified bit field of the specified 32-bit register.
N    *
N    * The macro operation is not atomic. It is not guaranteed that the shared
N    * register remains uncorrupted during simultaneous read-modify-write operation
N    * performed by two threads (main and interrupt threads). To guarantee data
N    * integrity in such cases, the macro should be invoked while the specific
N    * interrupt is disabled or within a critical section (all interrupts are
N    * disabled).
N    *
N    * Using this macro on the 16-bit and 8-bit width registers generates a hard
N    * fault exception.
N	*
N    * \param registerName The fully qualified name of the PSoC 4 device register.
N    * \param bitFieldName The fully qualified name of the bit field. The
N    * biFieldName is automatically appended with __OFFSET and __SIZE by the macro
N    * for usage.
N    *
N    * For fully qualified names of the register and bit fields and the possible
N    * values the field can take, please, refer to a respective PSoC family register
N    * TRM.
N    *
N    *******************************************************************************/
N    #define CY_CLEAR_REG32_FIELD(registerName, bitFieldName) \
N        (CY_SET_REG32((registerName), (CY_GET_REG32((registerName)) & ~CY_GET_FIELD_MASK(32, bitFieldName))))
X    #define CY_CLEAR_REG32_FIELD(registerName, bitFieldName)         (CY_SET_REG32((registerName), (CY_GET_REG32((registerName)) & ~CY_GET_FIELD_MASK(32, bitFieldName))))
N
N
N    /*******************************************************************************
N    * Macro Name: CY_GET_FIELD(regValue, bitFieldName)
N    ****************************************************************************//**
N    *
N    * Reads the specified bit field value from the given 32-bit value.
N    *
N    * The macro operation is not atomic. It is not guaranteed that the shared
N    * register remains uncorrupted during simultaneous read-modify-write operation
N    * performed by two threads (main and interrupt threads). To guarantee data
N    * integrity in such cases, the macro should be invoked while the specific
N    * interrupt is disabled or within a critical section (all interrupts are
N    * disabled).
N    *
N    * This macro has to be used in conjunction with \ref CY_GET_REG32 for atomic
N    * reads.
N    *
N    * \param regValue The value as read by \ref CY_GET_REG32.
N    * \param bitFieldName The fully qualified name of the bit field. The
N    * biFieldName is automatically appended with __OFFSET and __SIZE by the macro
N    * for usage.
N    *
N    * For fully qualified names of the bit field and the possible values the field
N    * can take, please, refer to a respective PSoC family register TRM.
N    *
N    * \return Zero if the specified bit field is zero, and a non-zero value,
N    * otherwise. The return value is of type uint32.
N    *
N    *******************************************************************************/
N    #define CY_GET_FIELD(regValue, bitFieldName) \
N        (((regValue) >> bitFieldName ## __OFFSET) & (~(0xFFFFFFFFu << bitFieldName ## __SIZE)))
X    #define CY_GET_FIELD(regValue, bitFieldName)         (((regValue) >> bitFieldName ## __OFFSET) & (~(0xFFFFFFFFu << bitFieldName ## __SIZE)))
N
N
N    /*******************************************************************************
N    * Macro Name: CY_SET_FIELD(regValue, bitFieldName, value)
N    ****************************************************************************//**
N    *
N    * Sets the specified bit field value within a given 32-bit value.
N    *
N    * The macro operation is not atomic. It is not guaranteed that the shared
N    * register remains uncorrupted during simultaneous read-modify-write operation
N    * performed by two threads (main and interrupt threads). To guarantee data
N    * integrity in such cases, the macro should be invoked while the specific
N    * interrupt is disabled or within a critical section (all interrupts are
N    * disabled).
N    *
N    * This macro has to be used in conjunction with \ref CY_GET_REG32 for atomic
N    * reads and \ref CY_SET_REG32 for atomic writes.
N    *
N    * \param regValue The value as read by \ref CY_GET_REG32.
N    * \param bitFieldName The fully qualified name of the bit field. The
N    * biFieldName is automatically appended with __OFFSET and __SIZE by the macro
N    * for usage.
N    * \param value The value that the field must be configured for.
N    *
N    * For fully qualified names of the bit field and the possible values the field
N    * can take, please, refer to the respective PSoC family register TRM.
N    *
N    *******************************************************************************/
N    #define CY_SET_FIELD(regValue, bitFieldName, value) \
N        ((regValue) = \
N        ((((uint32)(value) & (~(0xFFFFFFu << bitFieldName ## __SIZE))) << bitFieldName ## __OFFSET)) | \
N        ((uint32)(regValue) & (((~(0xFFu << bitFieldName ## __SIZE))) << bitFieldName ## __OFFSET)))
X    #define CY_SET_FIELD(regValue, bitFieldName, value)         ((regValue) =         ((((uint32)(value) & (~(0xFFFFFFu << bitFieldName ## __SIZE))) << bitFieldName ## __OFFSET)) |         ((uint32)(regValue) & (((~(0xFFu << bitFieldName ## __SIZE))) << bitFieldName ## __OFFSET)))
N
N#endif  /* (CY_PSOC4) */
N
N/** @} group_register_access_bits */
N
N
N/*******************************************************************************
N*  Data manipulation defines
N*******************************************************************************/
N
N/* Get 8 bits of 16 bit value. */
N#define LO8(x)                  ((uint8) ((x) & 0xFFu))
N#define HI8(x)                  ((uint8) ((uint16)(x) >> 8))
N
N/* Get 16 bits of 32 bit value. */
N#define LO16(x)                 ((uint16) ((x) & 0xFFFFu))
N#define HI16(x)                 ((uint16) ((uint32)(x) >> 16))
N
N/* Swap the byte ordering of 32 bit value */
N#define CYSWAP_ENDIAN32(x)  \
N        ((uint32)((((x) >> 24) & 0x000000FFu) | (((x) & 0x00FF0000u) >> 8) | (((x) & 0x0000FF00u) << 8) | ((x) << 24)))
X#define CYSWAP_ENDIAN32(x)          ((uint32)((((x) >> 24) & 0x000000FFu) | (((x) & 0x00FF0000u) >> 8) | (((x) & 0x0000FF00u) << 8) | ((x) << 24)))
N
N/* Swap the byte ordering of 16 bit value */
N#define CYSWAP_ENDIAN16(x)      ((uint16)(((x) << 8) | (((x) >> 8) & 0x00FFu)))
N
N
N/*******************************************************************************
N* Defines the standard return values used in PSoC content. A function is
N* not limited to these return values but can use them when returning standard
N* error values. Return values can be overloaded if documented in the function
N* header. On the 8051 a function can use a larger return type but still use the
N* defined return codes.
N*
N* Zero is successful, all other values indicate some form of failure. 1 - 0x7F -
N* standard defined values; 0x80 - ...  - user or content defined values.
N*******************************************************************************/
N#define CYRET_SUCCESS           (0x00u)           /* Successful */
N#define CYRET_BAD_PARAM         (0x01u)           /* One or more invalid parameters */
N#define CYRET_INVALID_OBJECT    (0x02u)           /* Invalid object specified */
N#define CYRET_MEMORY            (0x03u)           /* Memory related failure */
N#define CYRET_LOCKED            (0x04u)           /* Resource lock failure */
N#define CYRET_EMPTY             (0x05u)           /* No more objects available */
N#define CYRET_BAD_DATA          (0x06u)           /* Bad data received (CRC or other error check) */
N#define CYRET_STARTED           (0x07u)           /* Operation started, but not necessarily completed yet */
N#define CYRET_FINISHED          (0x08u)           /* Operation completed */
N#define CYRET_CANCELED          (0x09u)           /* Operation canceled */
N#define CYRET_TIMEOUT           (0x10u)           /* Operation timed out */
N#define CYRET_INVALID_STATE     (0x11u)           /* Operation not setup or is in an improper state */
N#define CYRET_UNKNOWN           ((cystatus) 0xFFFFFFFFu)    /* Unknown failure */
N
N
N/*******************************************************************************
N*   Intrinsic Defines: Processor NOP instruction
N*******************************************************************************/
N#if(CY_PSOC3)
X#if((2u == 1u))
S
S    #define CY_NOP          _nop_()
S
N#else
N
N    #if defined(__ARMCC_VERSION)
X    #if 1L
N
N        /* RealView */
N        #define CY_NOP      __nop()
N
N    #else
S
S        /* GCC */
S        #define CY_NOP      __asm("NOP\n")
S
N    #endif  /* defined(__ARMCC_VERSION) */
N
N#endif  /* (CY_PSOC3) */
N
N
N/*******************************************************************************
N* The following code is OBSOLETE and must not be used starting from cy_boot 5.10
N*
N* If the obsoleted macro definitions intended for use in the application use the
N* following scheme, redefine your own versions of these definitions:
N*    #ifdef <OBSOLETED_DEFINE>
N*        #undef  <OBSOLETED_DEFINE>
N*        #define <OBSOLETED_DEFINE>      (<New Value>)
N*    #endif
N*
N* Note: Redefine obsoleted macro definitions with caution. They might still be
N*       used in the application and their modification might lead to unexpected
N*       consequences.
N*******************************************************************************/
N#define CY_IP_S8FS      CY_IP_FS
N
N
N/*******************************************************************************
N* The following code is OBSOLETE and must not be used starting from cy_boot 3.10
N*******************************************************************************/
N#define CY_UDB_V0           (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_5A)
N#define CY_UDB_V1           (!CY_UDB_V0)
N#define CY_PSOC4A  (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4A)
N#ifdef CYDEV_CHIP_MEMBER_4D
N    #define CY_PSOC4D   (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_4D)
N    #define CY_PSOC4SF  (CY_PSOC4D)
N#else
S    #define CY_PSOC4D   (0u != 0u)
S    #define CY_PSOC4SF  (CY_PSOC4D)
N#endif  /* CYDEV_CHIP_MEMBER_4D */
N#define CY_PSOC5A  (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_5A)
N#ifdef CYDEV_CHIP_MEMBER_5B
N    #define CY_PSOC5LP  (CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_5B)
N#else
S    #define CY_PSOC5LP  (0u != 0u)
N#endif  /* CYDEV_CHIP_MEMBER_5B */
N
N#if (!CY_PSOC4)
X#if (!(2u == 2u))
S
S    /* Device is PSoC 3 and the revision is ES2 or earlier */
S    #define CY_PSOC3_ES2 ((CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_3A) && \
S        (CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2))
X    #define CY_PSOC3_ES2 ((CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_3A) &&         (CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2))
S
S    /* Device is PSoC 3 and the revision is ES3 or later */
S    #define CY_PSOC3_ES3 ((CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_3A) && \
S        (CYDEV_CHIP_REVISION_USED >= CYDEV_CHIP_REVISION_3A_ES3))
X    #define CY_PSOC3_ES3 ((CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_3A) &&         (CYDEV_CHIP_REVISION_USED >= CYDEV_CHIP_REVISION_3A_ES3))
S
S    /* Device is PSoC 5 and the revision is ES1 or earlier */
S    #define CY_PSOC5_ES1 (CY_PSOC5A && \
S        (CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_5A_ES1))
X    #define CY_PSOC5_ES1 (CY_PSOC5A &&         (CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_5A_ES1))
S
S    /* Device is PSoC 5 and the revision is ES2 or later */
S    #define CY_PSOC5_ES2 (CY_PSOC5A && \
S        (CYDEV_CHIP_REVISION_USED > CYDEV_CHIP_REVISION_5A_ES1))
X    #define CY_PSOC5_ES2 (CY_PSOC5A &&         (CYDEV_CHIP_REVISION_USED > CYDEV_CHIP_REVISION_5A_ES1))
S
N#endif  /* (!CY_PSOC4) */
N
N#endif  /* CY_BOOT_CYTYPES_H */
N
N
N/* [] END OF FILE */
L 24 "Generated_Source\PSoC4\SPI_0_OLED_FLASH.h" 2
N#include <CyLib.h>
L 1 "Generated_Source\PSoC4\CyLib.h" 1
N/***************************************************************************//**
N* \file CyLib.h
N* \version 5.70
N*
N* \brief Provides a system API for the clocking, and interrupts.
N*
N* \note Documentation of the API's in this file is located in the System
N* Reference Guide provided with PSoC Creator.
N*
N********************************************************************************
N* \copyright
N* Copyright 2008-2018, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_BOOT_CYLIB_H)
X#if !0L
N#define CY_BOOT_CYLIB_H
N
N#include "cytypes.h"
N#include "cydevice_trm.h"
N#include "CyLFClk.h"
L 1 "Generated_Source\PSoC4\CyLFClk.h" 1
N/***************************************************************************//**
N* \file .h
N* \version 1.20
N*
N* \brief
N*  This file provides the source code to API for the lfclk and wdt.
N*
N********************************************************************************
N* \copyright
N* Copyright 2008-2017, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N
N#if !defined(CY_LFCLK_CYLIB_H)
X#if !0L
N#define CY_LFCLK_CYLIB_H
N
N#include "cytypes.h"
N#include "cydevice_trm.h"
N
N#define CY_IP_WCO_WDT_EN           (1 == 1)
N
Ntypedef enum
N{
N    CY_SYS_TIMER_WAIT = 0u,
N    CY_SYS_TIMER_INTERRUPT = 1u
N} cy_sys_timer_delaytype_enum;
N
N
N/***************************************
N*    Function Prototypes
N***************************************/
N/**
N* \addtogroup group_general
N* @{
N*/
N/* Clocks API */
Nvoid CySysClkIloStart(void);
Nvoid CySysClkIloStop(void);
N/** @} general */
N
N/**
N* \addtogroup group_compensate
N* @{
N*/
Ncystatus CySysClkIloCompensate(uint32 desiredDelay, uint32 *compensatedCycles);
Nvoid CySysClkIloStartMeasurement(void);
Nvoid CySysClkIloStopMeasurement(void);
N/** @} compensate */
N
N#if(CY_IP_SRSSV2 && (!CY_IP_CPUSS))
X#if((0 != 0) && (!(0 == 1)))
S    /**
S    * \addtogroup group_compensate
S    * @{
S    */
S    cystatus CySysClkIloTrim(uint32 mode, int32 *iloAccuracyInPPT);
S    cystatus CySysClkIloRestoreFactoryTrim(void);
S    /** @} compensate */
S    cystatus CySysClkIloUpdateTrimReg(int32* iloAccuracyInPPT);
N#endif /* (CY_IP_SRSSV2 && (!CY_IP_CPUSS)) */
N
N#if(CY_IP_SRSSV2 && CY_IP_WCO)
X#if((0 != 0) && ((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)))
S    /**
S    * \addtogroup group_general
S    * @{
S    */
S    void CySysClkSetLfclkSource(uint32 source);
S    /** @} group_general */
N#endif /* (CY_IP_SRSSV2 && CY_IP_WCO) */
N
N#if (CY_IP_WCO)
X#if (((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)))
N    /**
N    * \addtogroup group_wco
N    * @{
N    */
N    void   CySysClkWcoStart(void);
N    void   CySysClkWcoStop(void);
N    uint32 CySysClkWcoSetPowerMode(uint32 mode);
N    void CySysClkWcoClockOutSelect(uint32 clockSel);
N    /** @} wco */
N
N    uint32 CySysClkWcoEnabled(void);
N
N#endif /* (CY_IP_WCO) */
N
Ntypedef void (*cyWdtCallback)(void);
N
N#if (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN)
X#if ((!(0 != 0)) && ((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)) && (1 == 1))
N
N    typedef void (*cyTimerCallback)(void);
N#endif /* (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN) */
N
N#if(CY_IP_SRSSV2)
X#if((0 != 0))
S    /**
S    * \addtogroup group_wdtsrssv2
S    * @{
S    */
S    /* WDT API */
S    void   CySysWdtLock(void);
S    void   CySysWdtUnlock(void);
S    void   CySysWdtSetMode(uint32 counterNum, uint32 mode);
S    uint32 CySysWdtGetMode(uint32 counterNum);
S    uint32 CySysWdtGetEnabledStatus(uint32 counterNum);
S    void   CySysWdtSetClearOnMatch(uint32 counterNum, uint32 enable);
S    uint32 CySysWdtGetClearOnMatch(uint32 counterNum);
S    void   CySysWdtEnable(uint32 counterMask);
S    void   CySysWdtDisable(uint32 counterMask);
S    void   CySysWdtSetCascade(uint32 cascadeMask);
S    uint32 CySysWdtGetCascade(void);
S    void   CySysWdtSetMatch(uint32 counterNum, uint32 match);
S    void   CySysWdtSetToggleBit(uint32 bits);
S    uint32 CySysWdtGetToggleBit(void);
S    uint32 CySysWdtGetMatch(uint32 counterNum);
S    uint32 CySysWdtGetCount(uint32 counterNum);
S    uint32 CySysWdtGetInterruptSource(void);
S    void   CySysWdtClearInterrupt(uint32 counterMask);
S    void   CySysWdtResetCounters(uint32 countersMask);
S    cyWdtCallback  CySysWdtSetInterruptCallback(uint32 counterNum, cyWdtCallback function);
S    cyWdtCallback  CySysWdtGetInterruptCallback(uint32 counterNum);
S    void   CySysTimerDelay(uint32 counterNum, cy_sys_timer_delaytype_enum delayType, uint32 delay);
S    void   CySysTimerDelayUntilMatch(uint32 counterNum, cy_sys_timer_delaytype_enum delayType, uint32 match);
S    void   CySysWatchdogFeed(uint32 counterNum);
S    void   CySysWdtEnableCounterIsr(uint32 counterNum);
S    void   CySysWdtDisableCounterIsr(uint32 counterNum);
S    void   CySysWdtIsr(void);
S    /** @} wdtsrssv2 */
N#else
N    /**
N    * \addtogroup group_wdtsrsslite
N    * @{
N    */
N    /* WDT API */
N    uint32 CySysWdtGetEnabledStatus(void);
N    void   CySysWdtEnable(void);
N    void   CySysWdtDisable(void);
N    void   CySysWdtSetMatch(uint32 match);
N    uint32 CySysWdtGetMatch(void);
N    uint32 CySysWdtGetCount(void);
N    void   CySysWdtSetIgnoreBits(uint32 bitsNum);
N    uint32 CySysWdtGetIgnoreBits(void);
N    void   CySysWdtClearInterrupt(void);
N    void   CySysWdtMaskInterrupt(void);
N    void   CySysWdtUnmaskInterrupt(void);
N    cyWdtCallback CySysWdtSetInterruptCallback(cyWdtCallback function);
N    cyWdtCallback CySysWdtGetInterruptCallback(void);
N    void   CySysWdtIsr(void);
N    /** @} wdtsrsslite*/
N#endif  /* (CY_IP_SRSSV2) */
N
N
N#if(CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN)
X#if((!(0 != 0)) && ((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)) && (1 == 1))
N    /**
N    * \addtogroup group_deepsleepwdt
N    * @{
N    */
N    /* WCO WDT APIs */
N    void   CySysClkSetTimerSource(uint32 source);
N    void   CySysTimerSetMode(uint32 counterNum, uint32 mode);
N    uint32 CySysTimerGetMode(uint32 counterNum);
N    uint32 CySysTimerGetEnabledStatus(uint32 counterNum);
N    void   CySysTimerSetClearOnMatch(uint32 counterNum, uint32 enable);
N    uint32 CySysTimerGetClearOnMatch(uint32 counterNum);
N    void   CySysTimerEnable(uint32 counterMask);
N    void   CySysTimerDisable(uint32 counterMask);
N    void   CySysTimerSetCascade(uint32 cascadeMask);
N    uint32 CySysTimerGetCascade(void);
N    void   CySysTimerSetMatch(uint32 counterNum, uint32 match);
N    void   CySysTimerSetToggleBit(uint32 bits);
N    uint32 CySysTimerGetToggleBit(void);
N    uint32 CySysTimerGetMatch(uint32 counterNum);
N    uint32 CySysTimerGetCount(uint32 counterNum);
N    uint32 CySysTimerGetInterruptSource(void);
N    void   CySysTimerClearInterrupt(uint32 counterMask);
N    cyTimerCallback CySysTimerSetInterruptCallback(uint32 counterNum, cyTimerCallback function);
N    cyTimerCallback CySysTimerGetInterruptCallback(uint32 counterNum);
N    void   CySysTimerDelay(uint32 counterNum, cy_sys_timer_delaytype_enum delayType, uint32 delay);
N    void   CySysTimerDelayUntilMatch(uint32 counterNum, cy_sys_timer_delaytype_enum delayType, uint32 match);
N    void   CySysTimerResetCounters(uint32 countersMask);
N    void   CySysTimerEnableIsr(uint32 counterNum);
N    void   CySysTimerDisableIsr(uint32 counterNum);
N    void   CySysTimerIsr(void);
N    /** @} deepsleepwdt */
N#endif /* (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN) */
N
N
N/*******************************************************************************
N* API Constants
N*******************************************************************************/
N#define CY_SYS_UINT16_MAX_VAL    (0xFFFFu)
N
N
N/*******************************************************************************
N* Clock API Constants
N*******************************************************************************/
N
N/* CySysClkIloStart()/CySysClkIloStop() - implementation definitions */
N#define CY_SYS_CLK_ILO_CONFIG_ENABLE                    ((uint32)(( uint32 )0x01u << 31u))
N#define CY_SYS_CLK_DFT_SELECT_DEFAULT_MASK              ((uint32)(( uint32 )0x0fu << 8u ))
N
N/* CySysClkIloCompensate() - one ILO clock in uS multiplied on thousand */
N#if (CY_IP_SRSSV2)
X#if ((0 != 0))
S    #define CY_SYS_CLK_ILO_PERIOD_PPH                   ((uint32) (0x0C35u))
N#else
N    #define CY_SYS_CLK_ILO_PERIOD_PPH                   ((uint32) (0x09C4u))
N#endif /* (CY_IP_SRSSV2) */
N
N/* CySysClkIloCompensate() - implementation definitions */
N#define CY_SYS_CLK_ILO_CALIBR_COMPLETE_MASK             ((uint32)(( uint32 )0x01u << 31u))
N#define CY_SYS_CLK_ILO_DFT_LSB_MASK                     ((uint32)(0x00000FFFu))
N#define CY_SYS_CLK_TRIM_OR_COMP_STARTED                 (1u)
N#define CY_SYS_CLK_TRIM_OR_COMP_FINISHED                (0u)
N#define CY_SYS_CLK_COEF_PHUNDRED                        ((uint32) (0x64u))
N#define CY_SYS_CLK_HALF_OF_CLOCK                        ((uint32) ((uint32) CY_SYS_CLK_ILO_PERIOD_PPH >> 2u))
N
N/* CySysClkIloCompensate() - maximum value of desiredDelay argument */
N#if (CY_IP_SRSSV2)
X#if ((0 != 0))
S    #define CY_SYS_CLK_MAX_DELAY_US                     ((uint32) (0xEE6B2800u))
S    #define CY_SYS_CLK_ILO_PERIOD                       ((uint32) (0x1Fu))
S    #define CY_SYS_CLK_ILO_FREQ_2MSB                    ((uint32) 5u)
N#else
N    #define CY_SYS_CLK_MAX_DELAY_US                     ((uint32) (0x1E8480u))
N    #define CY_SYS_CLK_ILO_FREQ_2MSB                    ((uint32) (0x28u ))
N
N    /**********************************************************************************
N    * CySysClkIloCompensate() - value to walk over oversamling in calculations with 
N    * srsslite. The oversample can be obtained when ilo frequency in equal 80 KHz and
N    * desired clocks are 80 000 clocks.
N    **********************************************************************************/
N    #define CY_SYS_CLK_MAX_LITE_NUMBER                     ((uint32) 53600u)
N#endif /* (CY_IP_SRSSV2) */
N
N#define CY_SYS_CLK_ILO_FREQ_3LSB                       ((uint32) (0x3E8u))
N#define CY_SYS_CLK_DELAY_COUNTS_LIMIT                  ((uint32) (0xD160u))
N#define CY_SYS_CLK_MIN_DELAY_US                        ((uint32) (0x64u))
N
N/* CySysClkSetLfclkSource() - parameter definitions */
N#if (CY_IP_SRSSV2 && CY_IP_WCO)
X#if ((0 != 0) && ((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)))
S
S    /** Internal Low Frequency (32 kHz) Oscillator (ILO) */
S    #define CY_SYS_CLK_LFCLK_SRC_ILO                    (0u)
S
S    /** Low Frequency Watch Crystal Oscillator (WCO) */
S    #define CY_SYS_CLK_LFCLK_SRC_WCO                    ((uint32)(( uint32 )0x01u << 30u))
N#endif /* (CY_IP_SRSSV2 && CY_IP_WCO) */
N
N
N#if (CY_IP_WCO)
X#if (((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)))
N
N    /* CySysClkSetLfclkSource() - implementation definitions */
N    #define CY_SYS_CLK_LFCLK_SEL_MASK                   ((uint32)(( uint32 )0x03u << 30u))
N#endif /* (CY_IP_WCO) */
N
N/* CySysClkSetTimerSource() - implementation definitions */
N#if (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN)
X#if ((!(0 != 0)) && ((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)) && (1 == 1))
N    #define CY_SYS_CLK_TIMER_SEL_MASK                   ((uint32)(( uint32 )0x03u << 30u))
N#endif /* (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN) */
N
N/* CySysClkSetTimerSource() - parameter definitions */
N#if (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN)
X#if ((!(0 != 0)) && ((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)) && (1 == 1))
N
N    /** Internal Low Frequency (32 kHz) Oscillator (ILO) */
N    #define CY_SYS_CLK_TIMER_SRC_ILO                (0u)
N
N    /** Low Frequency Watch Crystal Oscillator (WCO) */
N    #define CY_SYS_CLK_TIMER_SRC_WCO                ((uint32)(( uint32 )0x01u << 30u))
N#endif /* (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN) */
N
N/* CySysClkWcoClockOutSelect() - parameter definitions */
N#if (CY_IP_WCO)
X#if (((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)))
N
N    /** Selects External crystal as WCO’s clock source */
N    #define CY_SYS_CLK_WCO_SEL_CRYSTAL                  (1u)
N
N    /** Selects External clock input on wco_in pin as WCO’s clock source */
N    #define CY_SYS_CLK_WCO_SEL_PIN                      (0u)
N#endif /* (CY_IP_WCO) */
N
N/* CySysClkWcoClockOutSelect() - implementation definitions */
N#if (CY_IP_WCO)
X#if (((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)))
N    #define CY_SYS_CLK_WCO_SELECT_PIN_MASK              ((uint32)(( uint32 )0x01u << 2u))
N    #define CY_SYS_CLK_WCO_SELECT_PIN_OFFSET            ((uint32) 0x02u)
N#endif /* (CY_IP_WCO) */
N
N/* CySysClkIloRestoreFactoryTrim() - implementation definitions */
N#if (CY_IP_SRSSV2 && CY_IP_WCO && (!CY_IP_CPUSS))
X#if ((0 != 0) && ((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)) && (!(0 == 1)))
S    #define CY_SYS_CLK_ILO_TRIM_DEFAULT_VALUE           ((uint8 )(0xF0u))
S    #define CY_SYS_CLK_ILO_TRIM_DEFAULT_MASK            ((uint32)((uint32)0x01u << 3u))
S    #define CY_SYS_CLK_ILO_TRIM_MASK                    ((uint32)(0x0Fu))
N#endif /* (CY_IP_SRSSV2 && CY_IP_WCO && (!CY_IP_CPUSS)) */
N
N/* CySysIloTrim() - parameter definitions and macros*/
N#if (CY_IP_SRSSV2 && CY_IP_WCO && (!CY_IP_CPUSS))
X#if ((0 != 0) && ((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)) && (!(0 == 1)))
S    #define CY_SYS_CLK_BLOCKING                         (0u)
S    #define CY_SYS_CLK_NON_BLOCKING                     (1u)
S    #define CY_SYS_CLK_PERTHOUSAND                      ((uint32) 0x000003E8u )
S    #define CY_SYS_CLK_ABS_MACRO(x)                     ((0 > (x)) ? (-(x)) : (x))
S    #define CY_SYS_CLK_ERROR_RANGE                      ((uint32) 0x38u)
S    #define CY_SYS_CLK_TIMEOUT                          ((uint8 ) 0x05u)
S
S    /* ILO error step is 7,37 % error range */
S    #define CY_SYS_CLK_ERROR_STEP                       (( int32) 0x02E1u)
S    #define CY_SYS_CLK_ERROR_COEF                       ((uint32) 0x0Au)
N#endif /* (CY_IP_SRSSV2 && CY_IP_WCO && (!CY_IP_CPUSS)) */
N
N#if (CY_IP_WCO)
X#if (((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)))
N
N    /* WCO Configuration Register */
N    #define CY_SYS_CLK_WCO_CONFIG_LPM_EN                (( uint32 )(( uint32 )0x01u <<  0u))
N    #define CY_SYS_CLK_WCO_CONFIG_LPM_AUTO              (( uint32 )(( uint32 )0x01u <<  1u))
N    #define CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE            (( uint32 )(( uint32 )0x01u << 31u))
N
N    /* WCO Status Register */
N    #define CY_SYS_CLK_WCO_STATUS_OUT_BLNK_A            (( uint32 )(( uint32 )0x01u <<  0u))
N
N    /* WCO Trim Register */
N    #define CY_SYS_CLK_WCO_TRIM_XGM_MASK                (( uint32 ) 0x07u)
N    #define CY_SYS_CLK_WCO_TRIM_XGM_SHIFT               (( uint32 ) 0x00u)
N
N    #define CY_SYS_CLK_WCO_TRIM_XGM_3370NA              (( uint32 ) 0x00u)
N    #define CY_SYS_CLK_WCO_TRIM_XGM_2620NA              (( uint32 ) 0x01u)
N    #define CY_SYS_CLK_WCO_TRIM_XGM_2250NA              (( uint32 ) 0x02u)
N    #define CY_SYS_CLK_WCO_TRIM_XGM_1500NA              (( uint32 ) 0x03u)
N    #define CY_SYS_CLK_WCO_TRIM_XGM_1870NA              (( uint32 ) 0x04u)
N    #define CY_SYS_CLK_WCO_TRIM_XGM_1120NA              (( uint32 ) 0x05u)
N    #define CY_SYS_CLK_WCO_TRIM_XGM_750NA               (( uint32 ) 0x06u)
N    #define CY_SYS_CLK_WCO_TRIM_XGM_0NA                 (( uint32 ) 0x07u)
N
N    #define CY_SYS_CLK_WCO_TRIM_GM_MASK                 (( uint32 )(( uint32 )0x03u << 4u))
N    #define CY_SYS_CLK_WCO_TRIM_GM_SHIFT                (( uint32 ) 0x04u)
N    #define CY_SYS_CLK_WCO_TRIM_GM_HPM                  (( uint32 ) 0x01u)
N    #define CY_SYS_CLK_WCO_TRIM_GM_LPM                  (( uint32 ) 0x02u)
N#endif  /* (CY_IP_WCO) */
N
N
N/*******************************************************************************
N* WDT API Constants
N*******************************************************************************/
N#if(CY_IP_SRSSV2)
X#if((0 != 0))
S
S    #define CY_SYS_WDT_MODE_NONE                (0u)
S    #define CY_SYS_WDT_MODE_INT                 (1u)
S    #define CY_SYS_WDT_MODE_RESET               (2u)
S    #define CY_SYS_WDT_MODE_INT_RESET           (3u)
S
S    #define CY_SYS_WDT_COUNTER0_MASK            ((uint32)((uint32)0x01u))           /**< Counter 0 */
S    #define CY_SYS_WDT_COUNTER1_MASK            ((uint32)((uint32)0x01u << 8u))     /**< Counter 1 */
S    #define CY_SYS_WDT_COUNTER2_MASK            ((uint32)((uint32)0x01u << 16u))    /**< Counter 2 */
S
S    #define CY_SYS_WDT_CASCADE_NONE             ((uint32)0x00u)             /**< Neither */
S    #define CY_SYS_WDT_CASCADE_01               ((uint32)0x01u << 3u)       /**< Cascade 01 */
S    #define CY_SYS_WDT_CASCADE_12               ((uint32)0x01u << 11u)      /**< Cascade 12 */
S
S    #define CY_SYS_WDT_COUNTER0_INT             ((uint32)0x01u << 2u)
S    #define CY_SYS_WDT_COUNTER1_INT             ((uint32)0x01u << 10u)
S    #define CY_SYS_WDT_COUNTER2_INT             ((uint32)0x01u << 18u)
S
S    #define CY_SYS_WDT_COUNTER0_RESET           ((uint32)0x01u << 3u)       /**< Counter 0 */
S    #define CY_SYS_WDT_COUNTER1_RESET           ((uint32)0x01u << 11u)      /**< Counter 1 */
S    #define CY_SYS_WDT_COUNTER2_RESET           ((uint32)0x01u << 19u)      /**< Counter 2 */
S
S    #define CY_SYS_WDT_COUNTERS_RESET           (CY_SYS_WDT_COUNTER0_RESET |\
S                                                 CY_SYS_WDT_COUNTER1_RESET |\
S                                                 CY_SYS_WDT_COUNTER2_RESET)
X    #define CY_SYS_WDT_COUNTERS_RESET           (CY_SYS_WDT_COUNTER0_RESET |                                                 CY_SYS_WDT_COUNTER1_RESET |                                                 CY_SYS_WDT_COUNTER2_RESET)
S
S    #define CY_SYS_WDT_COUNTER0                 (0x00u)
S    #define CY_SYS_WDT_COUNTER1                 (0x01u)
S    #define CY_SYS_WDT_COUNTER2                 (0x02u)
S
S    #define CY_SYS_WDT_COUNTER0_OFFSET          (0x00u)
S    #define CY_SYS_WDT_COUNTER1_OFFSET          (0x02u)
S    #define CY_SYS_WDT_COUNTER2_OFFSET          (0x04u)
S
S    #define CY_SYS_WDT_MODE_MASK                ((uint32)(0x03u))
S
S    #define CY_SYS_WDT_CONFIG_BITS2_MASK        (uint32)(0x1Fu)
S    #define CY_SYS_WDT_CONFIG_BITS2_POS         (uint32)(24u)
S    #define CY_SYS_WDT_LOWER_16BITS_MASK        (uint32)(0x0000FFFFu)
S    #define CY_SYS_WDT_HIGHER_16BITS_MASK       (uint32)(0xFFFF0000u)
S    #define CY_SYS_WDT_COUNTERS_MAX             (0x03u)
S    #define CY_SYS_WDT_CNT_SHIFT                (0x08u)
S    #define CY_SYS_WDT_CNT_MATCH_CLR_SHIFT      (0x02u)
S    #define CY_SYS_WDT_CNT_STTS_SHIFT           (0x01u)
S    #define CY_SYS_WDT_CNT_MATCH_SHIFT          (0x10u)
S
S    #define CY_SYS_WDT_CLK_LOCK_BITS_MASK       ((uint32)0x03u << 14u)
S    #define CY_SYS_WDT_CLK_LOCK_BIT0            ((uint32)0x01u << 14u)
S    #define CY_SYS_WDT_CLK_LOCK_BIT1            ((uint32)0x01u << 15u)
S
S    #define CY_WDT_NUM_OF_WDT                   (3u)
S    #define CY_WDT_NUM_OF_CALLBACKS             (3u)
S
N    #else
N        #define CY_WDT_NUM_OF_WDT               (1u)
N        #define CY_WDT_NUM_OF_CALLBACKS         (3u)
N        #define CY_SYS_WDT_KEY                  ((uint32)(0xACED8865u))
N        #define CY_SYS_WDT_MATCH_MASK           ((uint32)(0x0000FFFFu))
N        #define CY_SYS_WDT_IGNORE_BITS_MASK     ((uint32)(0x000F0000u))
N        #define CY_SYS_WDT_IGNORE_BITS_SHIFT    ((uint32)(16u))
N        #define CY_SYS_WDT_LOWER_BIT_MASK       ((uint32)(0x00000001u))
N
N        #define CY_SYS_WDT_COUNTER0             (0x00u)
N
N#endif /* (CY_IP_SRSSV2) */
N
N#if (CY_IP_SRSSV2 && CY_IP_WCO)
X#if ((0 != 0) && ((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)))
S    #define CY_SYS_WDT_1LFCLK_ILO_DELAY_US    ((uint16)( 67u))
S    #define CY_SYS_WDT_3LFCLK_ILO_DELAY_US    ((uint16)(201u))
S    #define CY_SYS_WDT_1LFCLK_WCO_DELAY_US    ((uint16)( 31u))
S    #define CY_SYS_WDT_3LFCLK_WCO_DELAY_US    ((uint16)( 93u))
S
S    #define CY_SYS_WDT_1LFCLK_DELAY_US      \
S        ((CY_SYS_CLK_LFCLK_SRC_ILO == (CY_SYS_WDT_CONFIG_REG & CY_SYS_CLK_LFCLK_SEL_MASK)) ? \
S                                            (CY_SYS_WDT_1LFCLK_ILO_DELAY_US) : \
S                                            (CY_SYS_WDT_1LFCLK_WCO_DELAY_US))
X    #define CY_SYS_WDT_1LFCLK_DELAY_US              ((CY_SYS_CLK_LFCLK_SRC_ILO == (CY_SYS_WDT_CONFIG_REG & CY_SYS_CLK_LFCLK_SEL_MASK)) ?                                             (CY_SYS_WDT_1LFCLK_ILO_DELAY_US) :                                             (CY_SYS_WDT_1LFCLK_WCO_DELAY_US))
S
S    #define CY_SYS_WDT_3LFCLK_DELAY_US      \
S        ((CY_SYS_CLK_LFCLK_SRC_ILO == (CY_SYS_WDT_CONFIG_REG & CY_SYS_CLK_LFCLK_SEL_MASK)) ? \
S                                            (CY_SYS_WDT_3LFCLK_ILO_DELAY_US) : \
S                                            (CY_SYS_WDT_3LFCLK_WCO_DELAY_US))
X    #define CY_SYS_WDT_3LFCLK_DELAY_US              ((CY_SYS_CLK_LFCLK_SRC_ILO == (CY_SYS_WDT_CONFIG_REG & CY_SYS_CLK_LFCLK_SEL_MASK)) ?                                             (CY_SYS_WDT_3LFCLK_ILO_DELAY_US) :                                             (CY_SYS_WDT_3LFCLK_WCO_DELAY_US))
N    #else
N        #define CY_SYS_WDT_1LFCLK_DELAY_US      ((uint16)  (67u))
N        #define CY_SYS_WDT_3LFCLK_DELAY_US      ((uint16) (201u))
N#endif /* (CY_IP_SRSSV2 && CY_IP_WCO) */
N
N#if (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN)
X#if ((!(0 != 0)) && ((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)) && (1 == 1))
N
N    #define CY_SYS_TIMER_MODE_NONE              (0u)
N    #define CY_SYS_TIMER_MODE_INT               (1u)
N
N    #define CY_SYS_TIMER0_MASK                  ((uint32)((uint32)0x01u))           /**< Counter 0 */
N    #define CY_SYS_TIMER1_MASK                  ((uint32)((uint32)0x01u << 8u))     /**< Counter 1 */
N    #define CY_SYS_TIMER2_MASK                  ((uint32)((uint32)0x01u << 16u))    /**< Counter 2 */
N
N    #define CY_SYS_TIMER0_RESET                 ((uint32)0x01u << 3u)       /**< Counter 0 */
N    #define CY_SYS_TIMER1_RESET                 ((uint32)0x01u << 11u)      /**< Counter 1 */
N    #define CY_SYS_TIMER2_RESET                 ((uint32)0x01u << 19u)      /**< Counter 2 */
N
N    #define CY_SYS_TIMER_RESET                  (CY_SYS_TIMER0_RESET |\
N                                                 CY_SYS_TIMER1_RESET |\
N                                                 CY_SYS_TIMER2_RESET)
X    #define CY_SYS_TIMER_RESET                  (CY_SYS_TIMER0_RESET |                                                 CY_SYS_TIMER1_RESET |                                                 CY_SYS_TIMER2_RESET)
N
N    #define CY_SYS_TIMER_CASCADE_NONE           ((uint32)0x00u)             /**< Neither */
N    #define CY_SYS_TIMER_CASCADE_01             ((uint32)0x01u << 3u)       /**< Cascade 01 */
N    #define CY_SYS_TIMER_CASCADE_12             ((uint32)0x01u << 11u)      /**< Cascade 12 */
N
N    #define CY_SYS_TIMER0_INT                   ((uint32)0x01u << 2u)
N    #define CY_SYS_TIMER1_INT                   ((uint32)0x01u << 10u)
N    #define CY_SYS_TIMER2_INT                   ((uint32)0x01u << 18u)
N
N    #define CY_SYS_TIMER0                       (0x00u)
N    #define CY_SYS_TIMER1                       (0x01u)
N    #define CY_SYS_TIMER2                       (0x02u)
N
N    #define CY_SYS_TIMER_MODE_MASK              ((uint32)(0x01u))
N
N    #define CY_SYS_TIMER_CONFIG_BITS2_MASK      (uint32)(0x1Fu)
N    #define CY_SYS_TIMER_CONFIG_BITS2_POS       (uint32)(24u)
N    #define CY_SYS_TIMER_LOWER_16BITS_MASK      (uint32)(0x0000FFFFu)
N    #define CY_SYS_TIMER_HIGHER_16BITS_MASK     (uint32)(0xFFFF0000u)
N    #define CY_SYS_TIMER_COUNTERS_MAX           (0x03u)
N    #define CY_SYS_TIMER_CNT_SHIFT              (0x08u)
N    #define CY_SYS_TIMER_CNT_MATCH_CLR_SHIFT    (0x02u)
N    #define CY_SYS_TIMER_CNT_STTS_SHIFT         (0x01u)
N    #define CY_SYS_TIMER_CNT_MATCH_SHIFT        (0x10u)
N
N    #define CY_SYS_NUM_OF_TIMERS                (3u)
N
N    #define CY_SYS_SET_NEW_TIMER_SOURCE_ILO     ((uint16)(0x02u))
N    #define CY_SYS_SET_NEW_TIMER_SOURCE_WCO     ((uint16)(0x01u))
N    #define CY_SYS_WCO_WDT_CLKEN_RESET_MASK     ((uint32)(0x03u))
N
N    #define CY_SYS_TIMER_1ILO_DELAY_US          ((uint16)( 67u))
N    #define CY_SYS_TIMER_4ILO_DELAY_US          ((uint16)(268u))
N    #define CY_SYS_TIMER_3ILO_DELAY_US          ((uint16)(201u))
N
N    #define CY_SYS_TIMER_1WCO_DELAY_US          ((uint16)( 31u))
N    #define CY_SYS_TIMER_4WCO_DELAY_US          ((uint16)(124u))
N    #define CY_SYS_TIMER_3WCO_DELAY_US          ((uint16)( 93u))
N
N    #define CY_SYS_1TIMER_DELAY_US      \
N        ((CY_SYS_CLK_TIMER_SRC_ILO == (CY_SYS_WCO_WDT_CONFIG_REG & CY_SYS_CLK_TIMER_SEL_MASK)) ? \
N                                            (CY_SYS_TIMER_1ILO_DELAY_US) : \
N                                            (CY_SYS_TIMER_1WCO_DELAY_US))
X    #define CY_SYS_1TIMER_DELAY_US              ((CY_SYS_CLK_TIMER_SRC_ILO == (CY_SYS_WCO_WDT_CONFIG_REG & CY_SYS_CLK_TIMER_SEL_MASK)) ?                                             (CY_SYS_TIMER_1ILO_DELAY_US) :                                             (CY_SYS_TIMER_1WCO_DELAY_US))
N
N    #define CY_SYS_4TIMER_DELAY_US      \
N        ((CY_SYS_CLK_TIMER_SRC_ILO == (CY_SYS_WCO_WDT_CONFIG_REG & CY_SYS_CLK_TIMER_SEL_MASK)) ? \
N                                            (CY_SYS_TIMER_4WCO_DELAY_US) : \
N                                            (CY_SYS_TIMER_4ILO_DELAY_US))
X    #define CY_SYS_4TIMER_DELAY_US              ((CY_SYS_CLK_TIMER_SRC_ILO == (CY_SYS_WCO_WDT_CONFIG_REG & CY_SYS_CLK_TIMER_SEL_MASK)) ?                                             (CY_SYS_TIMER_4WCO_DELAY_US) :                                             (CY_SYS_TIMER_4ILO_DELAY_US))
N
N    #define CY_SYS_3TIMER_DELAY_US      \
N        ((CY_SYS_CLK_TIMER_SRC_ILO == (CY_SYS_WCO_WDT_CONFIG_REG & CY_SYS_CLK_TIMER_SEL_MASK)) ? \
N                                            (CY_SYS_TIMER_3ILO_DELAY_US) : \
N                                            (CY_SYS_TIMER_3WCO_DELAY_US))
X    #define CY_SYS_3TIMER_DELAY_US              ((CY_SYS_CLK_TIMER_SRC_ILO == (CY_SYS_WCO_WDT_CONFIG_REG & CY_SYS_CLK_TIMER_SEL_MASK)) ?                                             (CY_SYS_TIMER_3ILO_DELAY_US) :                                             (CY_SYS_TIMER_3WCO_DELAY_US))
N
N    #define CY_SYS_SET_CURRENT_TIMER_SOURCE_BIT      \
N        ((CY_SYS_CLK_TIMER_SRC_ILO == (CY_SYS_WCO_WDT_CONFIG_REG & CY_SYS_CLK_TIMER_SEL_MASK)) ? \
N                                            (CY_SYS_SET_NEW_TIMER_SOURCE_ILO) : \
N                                            (CY_SYS_SET_NEW_TIMER_SOURCE_WCO))
X    #define CY_SYS_SET_CURRENT_TIMER_SOURCE_BIT              ((CY_SYS_CLK_TIMER_SRC_ILO == (CY_SYS_WCO_WDT_CONFIG_REG & CY_SYS_CLK_TIMER_SEL_MASK)) ?                                             (CY_SYS_SET_NEW_TIMER_SOURCE_ILO) :                                             (CY_SYS_SET_NEW_TIMER_SOURCE_WCO))
N
N#endif /* (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN) */
N
N/* CySysClkWcoSetPowerMode() */
N#define CY_SYS_CLK_WCO_HPM                              (0x0u)     /**< WCO High power mode */
N
N#if(CY_IP_BLESS)
X#if((0 != 0))
S    #define CY_SYS_CLK_WCO_LPM                          (0x1u)     /**< WCO Low power mode */
N#endif /* (CY_IP_BLESS) */
N
N
N/*******************************************************************************
N*       Trim Registers Constants 
N********************************************************************************/
N#define CY_SYS_CLK_SYS_CLK_DEVIDER                  ((uint32)0x0Au)
N#define CY_SYS_CLK_SEL_ILO_DFT_SOURCE               ((uint32)0x00000100u)
N#define CY_SYS_CLK_FOURBITS_MAX                     (( int32)0x0f)
N#define CY_SYS_CLK_HALF_OF_STEP                     (( int32)((uint32) CY_SYS_CLK_ERROR_STEP >> 1u))
N
N#if(CY_IP_SRSSV2)
X#if((0 != 0))
S    #define CY_SYS_CLK_ILO_DESIRED_FREQ_HZ          (32000u)
S    #define CY_SYS_CLK_DFT_SELSIZE                  ((uint32) 0x3F)
N#else
N    #define CY_SYS_CLK_ILO_DESIRED_FREQ_HZ          (40000u)
N    #define CY_SYS_CLK_DFT_SELSIZE                  ((uint32) 0x0F)
N#endif /* (CY_IP_SRSSV2) */
N
N#define CY_SYS_TST_DDFT_CTRL_REG_DEFAULT_MASK    ((uint32)((CY_SYS_CLK_DFT_SELSIZE << 8u) | (CY_SYS_CLK_DFT_SELSIZE )))
N#define CY_SYS_TST_DDFT_SELECT_CLK1              ((uint32) ((uint32) CYDEV_DFT_SELECT_CLK1 << 8u))
N#define CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1       ((uint32) (CY_SYS_TST_DDFT_SELECT_CLK1 | CYDEV_DFT_SELECT_CLK0))
N
N
N/*******************************************************************************
N*       Trim Registers 
N********************************************************************************/
N/* DFT TST Control Register*/
N#define CY_SYS_TST_DDFT_CTRL_REG                         (*(reg32*) CYREG_TST_DDFT_CTRL)
N#define CY_SYS_CNT_CTRL_PTR                              ( (reg32*) CYREG_TST_DDFT_CTRL)
N
N/* DFT TST Counter 1 Register*/
N#define CY_SYS_CNT_REG1_REG                              (*(reg32*) CYREG_TST_TRIM_CNTR1)
N#define CY_SYS_CNT_REG1_PTR                              ( (reg32*) CYREG_TST_TRIM_CNTR1)
N
N/* DFT TST Counter 2 Register*/
N#define CY_SYS_CNT_REG2_REG                              (*(reg32*) CYREG_TST_TRIM_CNTR2)
N#define CY_SYS_CNT_REG2_PTR                              ( (reg32*) CYREG_TST_TRIM_CNTR2)
N
N/* DFT Muxes Configuration Register*/
N#define CY_SYS_CLK_DFT_REG                               (*(reg32*) CYREG_CLK_DFT_SELECT)
N#define CY_SYS_CLK_DFT_PTR                               ( (reg32*) CYREG_CLK_DFT_SELECT)
N
N/* ILO Configuration Register*/
N#define CY_SYS_CLK_ILO_CONFIG_REG                        (*(reg32 *) CYREG_CLK_ILO_CONFIG)
N#define CY_SYS_CLK_ILO_CONFIG_PTR                        ( (reg32 *) CYREG_CLK_ILO_CONFIG)
N
N/* ILO Trim Register*/
N#if(CY_IP_SRSSV2 && CY_IP_WCO)
X#if((0 != 0) && ((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)))
S    #define CY_SYS_CLK_ILO_TRIM_REG                      (*(reg32 *) CYREG_CLK_ILO_TRIM)
S    #define CY_SYS_CLK_ILO_TRIM_PTR                      ( (reg32 *) CYREG_CLK_ILO_TRIM)
N#endif  /* (CY_IP_SRSSV2) && CY_IP_WCO*/
N
N#if (CY_IP_WCO)
X#if (((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)))
N    #if (CY_IP_BLESS)
X    #if ((0 != 0))
S
S        /* WCO Status Register */
S        #define CY_SYS_CLK_WCO_STATUS_REG               (*(reg32 *) CYREG_BLE_BLESS_WCO_STATUS)
S        #define CY_SYS_CLK_WCO_STATUS_PTR               ( (reg32 *) CYREG_BLE_BLESS_WCO_STATUS)
S
S        /* WCO Configuration Register */
S        #define CY_SYS_CLK_WCO_CONFIG_REG               (*(reg32 *) CYREG_BLE_BLESS_WCO_CONFIG)
S        #define CY_SYS_CLK_WCO_CONFIG_PTR               ( (reg32 *) CYREG_BLE_BLESS_WCO_CONFIG)
S
S        /* WCO Trim Register */
S        #define CY_SYS_CLK_WCO_TRIM_REG                 (*(reg32 *) CYREG_BLE_BLESS_WCO_TRIM)
S        #define CY_SYS_CLK_WCO_TRIM_PTR                 ( (reg32 *) CYREG_BLE_BLESS_WCO_TRIM)
N    #else
N
N        /* WCO Status Register */
N        #define CY_SYS_CLK_WCO_STATUS_REG               (*(reg32 *) CYREG_WCO_STATUS)
N        #define CY_SYS_CLK_WCO_STATUS_PTR               ( (reg32 *) CYREG_WCO_STATUS)
N
N        /* WCO Configuration Register */
N        #define CY_SYS_CLK_WCO_CONFIG_REG               (*(reg32 *) CYREG_WCO_CONFIG)
N        #define CY_SYS_CLK_WCO_CONFIG_PTR               ( (reg32 *) CYREG_WCO_CONFIG)
N
N        /* WCO Trim Register */
N        #define CY_SYS_CLK_WCO_TRIM_REG                 (*(reg32 *) CYREG_WCO_TRIM)
N        #define CY_SYS_CLK_WCO_TRIM_PTR                 ( (reg32 *) CYREG_WCO_TRIM)
N    #endif /* (CY_IP_BLESS) */
N#endif  /* (CY_IP_WCO) */
N
N
N/*******************************************************************************
N* WDT API Registers
N*******************************************************************************/
N#if(CY_IP_SRSSV2)
X#if((0 != 0))
S    #define CY_SYS_WDT_CTRLOW_REG               (*(reg32 *) CYREG_WDT_CTRLOW)
S    #define CY_SYS_WDT_CTRLOW_PTR               ( (reg32 *) CYREG_WDT_CTRLOW)
S
S    #define CY_SYS_WDT_CTRHIGH_REG              (*(reg32 *) CYREG_WDT_CTRHIGH)
S    #define CY_SYS_WDT_CTRHIGH_PTR              ( (reg32 *) CYREG_WDT_CTRHIGH)
S
S    #define CY_SYS_WDT_MATCH_REG                (*(reg32 *) CYREG_WDT_MATCH)
S    #define CY_SYS_WDT_MATCH_PTR                ( (reg32 *) CYREG_WDT_MATCH)
S
S    #define CY_SYS_WDT_CONFIG_REG               (*(reg32 *) CYREG_WDT_CONFIG)
S    #define CY_SYS_WDT_CONFIG_PTR               ( (reg32 *) CYREG_WDT_CONFIG)
S
S    #define CY_SYS_WDT_CONTROL_REG              (*(reg32 *) CYREG_WDT_CONTROL)
S    #define CY_SYS_WDT_CONTROL_PTR              ( (reg32 *) CYREG_WDT_CONTROL)
N#else
N    #define CY_SYS_WDT_DISABLE_KEY_REG          (*(reg32 *) CYREG_WDT_DISABLE_KEY)
N    #define CY_SYS_WDT_DISABLE_KEY_PTR          ( (reg32 *) CYREG_WDT_DISABLE_KEY)
N
N    #define CY_SYS_WDT_MATCH_REG                (*(reg32 *) CYREG_WDT_MATCH)
N    #define CY_SYS_WDT_MATCH_PTR                ( (reg32 *) CYREG_WDT_MATCH)
N
N    #define CY_SYS_WDT_COUNTER_REG              (*(reg32 *) CYREG_WDT_COUNTER)
N    #define CY_SYS_WDT_COUNTER_PTR              ( (reg32 *) CYREG_WDT_COUNTER)
N
N    #define CY_SYS_SRSS_INTR_REG                (*(reg32 *) CYREG_SRSS_INTR)
N    #define CY_SYS_SRSS_INTR_PTR                ( (reg32 *) CYREG_SRSS_INTR)
N
N    #define CY_SYS_SRSS_INTR_MASK_REG           (*(reg32 *) CYREG_SRSS_INTR_MASK)
N    #define CY_SYS_SRSS_INTR_MASK_PTR           ( (reg32 *) CYREG_SRSS_INTR_MASK)
N#endif  /* (CY_IP_SRSSV2) */
N
N#if (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN)
X#if ((!(0 != 0)) && ((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)) && (1 == 1))
N    #define CY_SYS_WCO_WDT_CTRLOW_REG           (*(reg32 *) CYREG_WCO_WDT_CTRLOW)
N    #define CY_SYS_WCO_WDT_CTRLOW_PTR           ( (reg32 *) CYREG_WCO_WDT_CTRLOW)
N
N    #define CY_SYS_WCO_WDT_CTRHIGH_REG          (*(reg32 *) CYREG_WCO_WDT_CTRHIGH)
N    #define CY_SYS_WCO_WDT_CTRHIGH_PTR          ( (reg32 *) CYREG_WCO_WDT_CTRHIGH)
N
N    #define CY_SYS_WCO_WDT_MATCH_REG            (*(reg32 *) CYREG_WCO_WDT_MATCH)
N    #define CY_SYS_WCO_WDT_MATCH_PTR            ( (reg32 *) CYREG_WCO_WDT_MATCH)
N
N    #define CY_SYS_WCO_WDT_CONFIG_REG           (*(reg32 *) CYREG_WCO_WDT_CONFIG)
N    #define CY_SYS_WCO_WDT_CONFIG_PTR           ( (reg32 *) CYREG_WCO_WDT_CONFIG)
N
N    #define CY_SYS_WCO_WDT_CONTROL_REG          (*(reg32 *) CYREG_WCO_WDT_CONTROL)
N    #define CY_SYS_WCO_WDT_CONTROL_PTR          ( (reg32 *) CYREG_WCO_WDT_CONTROL)
N
N    #define CY_SYS_WCO_WDT_CLKEN_REG            (*(reg32 *) CYREG_WCO_WDT_CLKEN)
N    #define CY_SYS_WCO_WDT_CLKEN_PTR            ( (reg32 *) CYREG_WCO_WDT_CLKEN)
N#endif /* (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN) */
N
N#if (CY_IP_WCO)
X#if (((0 != 0) || (1 == 1) || (0 != 0) || (-1 == 1)))
N
N    /*******************************************************************************
N    * Function Name: CySysClkWcoSetHighPowerMode
N    ********************************************************************************
N    *
N    * Summary:
N    *  Sets the high power mode for the 32 KHz WCO.
N    *
N    *******************************************************************************/
N    static CY_INLINE void CySysClkWcoSetHighPowerMode(void)
X    static __inline void CySysClkWcoSetHighPowerMode(void)
N    {
N        /* Switch off low power mode for WCO */
N        CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_LPM_EN;
X        (*(reg32 *) 0x40220000u) &= (uint32) ~(( uint32 )(( uint32 )0x01u << 0u));
N
N        /* Switch off auto low power mode in WCO */
N        CY_SYS_CLK_WCO_CONFIG_REG &= ((uint32)~CY_SYS_CLK_WCO_CONFIG_LPM_AUTO);
X        (*(reg32 *) 0x40220000u) &= ((uint32)~(( uint32 )(( uint32 )0x01u << 1u)));
N
N        /* Restore WCO trim register HPM settings */
N        CY_SYS_CLK_WCO_TRIM_REG = (CY_SYS_CLK_WCO_TRIM_REG & (uint32)(~CY_SYS_CLK_WCO_TRIM_GM_MASK)) \
N                    | (uint32)(CY_SYS_CLK_WCO_TRIM_GM_HPM << CY_SYS_CLK_WCO_TRIM_GM_SHIFT);
X        (*(reg32 *) 0x40220f00u) = ((*(reg32 *) 0x40220f00u) & (uint32)(~(( uint32 )(( uint32 )0x03u << 4u))))                     | (uint32)((( uint32 ) 0x01u) << (( uint32 ) 0x04u));
N        CY_SYS_CLK_WCO_TRIM_REG = (CY_SYS_CLK_WCO_TRIM_REG & (uint32)(~CY_SYS_CLK_WCO_TRIM_XGM_MASK)) \
N                    | (uint32)(CY_SYS_CLK_WCO_TRIM_XGM_2620NA << CY_SYS_CLK_WCO_TRIM_XGM_SHIFT);
X        (*(reg32 *) 0x40220f00u) = ((*(reg32 *) 0x40220f00u) & (uint32)(~(( uint32 ) 0x07u)))                     | (uint32)((( uint32 ) 0x01u) << (( uint32 ) 0x00u));
N    }
N
N    #if(CY_IP_BLESS)
X    #if((0 != 0))
S        /*******************************************************************************
S        * Function Name: CySysClkWcoSetLowPowerMode
S        ********************************************************************************
S        *
S        * Summary:
S        *  Sets the low power mode for the 32 KHz WCO.
S        *
S        *  Note LPM available only for PSoC 4100 BLE / PSoC4 4200 BLE
S        *******************************************************************************/
S        static CY_INLINE void CySysClkWcoSetLowPowerMode(void)
S        {
S            /* Switch off auto low power mode in WCO */
S            CY_SYS_CLK_WCO_CONFIG_REG &= ((uint32)~CY_SYS_CLK_WCO_CONFIG_LPM_AUTO);
S
S            /* Change WCO trim register settings to LPM */
S            CY_SYS_CLK_WCO_TRIM_REG = (CY_SYS_CLK_WCO_TRIM_REG & (uint32)(~CY_SYS_CLK_WCO_TRIM_XGM_MASK)) \
S                        | (uint32)(CY_SYS_CLK_WCO_TRIM_XGM_2250NA << CY_SYS_CLK_WCO_TRIM_XGM_SHIFT);
X            CY_SYS_CLK_WCO_TRIM_REG = (CY_SYS_CLK_WCO_TRIM_REG & (uint32)(~CY_SYS_CLK_WCO_TRIM_XGM_MASK))                         | (uint32)(CY_SYS_CLK_WCO_TRIM_XGM_2250NA << CY_SYS_CLK_WCO_TRIM_XGM_SHIFT);
S            CY_SYS_CLK_WCO_TRIM_REG = (CY_SYS_CLK_WCO_TRIM_REG & (uint32)(~CY_SYS_CLK_WCO_TRIM_GM_MASK)) \
S                        | (uint32)(CY_SYS_CLK_WCO_TRIM_GM_LPM << CY_SYS_CLK_WCO_TRIM_GM_SHIFT);
X            CY_SYS_CLK_WCO_TRIM_REG = (CY_SYS_CLK_WCO_TRIM_REG & (uint32)(~CY_SYS_CLK_WCO_TRIM_GM_MASK))                         | (uint32)(CY_SYS_CLK_WCO_TRIM_GM_LPM << CY_SYS_CLK_WCO_TRIM_GM_SHIFT);
S
S            /* Switch on low power mode for WCO */
S            CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_LPM_EN;
S        }
N    #endif /* (CY_IP_BLESS) */
N
N#endif /* (CY_IP_WCO) */
N
N
N/* These defines are intended to maintain the backward compatibility for
N * projects which use cy_boot_v4_20 or earlier.
N*/
N#define CySysWdtWriteMode           CySysWdtSetMode
N#define CySysWdtReadMode            CySysWdtGetMode
N#define CySysWdtWriteClearOnMatch   CySysWdtSetClearOnMatch
N#define CySysWdtReadClearOnMatch    CySysWdtGetClearOnMatch
N#define CySysWdtReadEnabledStatus   CySysWdtGetEnabledStatus
N#define CySysWdtWriteCascade        CySysWdtSetCascade
N#define CySysWdtReadCascade         CySysWdtGetCascade
N#define CySysWdtWriteMatch          CySysWdtSetMatch
N#define CySysWdtWriteToggleBit      CySysWdtSetToggleBit
N#define CySysWdtReadToggleBit       CySysWdtGetToggleBit
N#define CySysWdtReadMatch           CySysWdtGetMatch
N#define CySysWdtReadCount           CySysWdtGetCount
N#define CySysWdtWriteIgnoreBits     CySysWdtSetIgnoreBits
N#define CySysWdtReadIgnoreBits      CySysWdtGetIgnoreBits
N#define CySysWdtSetIsrCallback      CySysWdtSetInterruptCallback
N#define CySysWdtGetIsrCallback      CySysWdtGetInterruptCallback
N
N#endif /* (CY_LFCLK_CYLIB_H) */
N
N/* [] END OF FILE */
L 24 "Generated_Source\PSoC4\CyLib.h" 2
N
N#include <string.h>
L 1 "D:\Keil_v5\ARM\ARMCC\bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060019
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 26 "Generated_Source\PSoC4\CyLib.h" 2
N#include <limits.h>
L 1 "D:\Keil_v5\ARM\ARMCC\bin\..\include\limits.h" 1
N/* limits.h: ANSI 'C' (X3J11 Oct 88) library header, section 2.2.4.2 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991-1997 ARM Limited. All rights reserved         */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __limits_h
N#define __limits_h
N#define __ARMCLIB_VERSION 5060019
N
N#define CHAR_BIT 8
N    /* max number of bits for smallest object that is not a bit-field (byte) */
N#define SCHAR_MIN (-128)
N    /* mimimum value for an object of type signed char */
N#define SCHAR_MAX 127
N    /* maximum value for an object of type signed char */
N#define UCHAR_MAX 255
N    /* maximum value for an object of type unsigned char */
N#ifdef __FEATURE_SIGNED_CHAR
N  #define CHAR_MIN (-128)
N      /* minimum value for an object of type char */
N  #define CHAR_MAX 127
N      /* maximum value for an object of type char */
N#else
S  #define CHAR_MIN 0
S      /* minimum value for an object of type char */
S  #define CHAR_MAX 255
S      /* maximum value for an object of type char */
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X#if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S  #define _AEABI_PORTABLE
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
Sextern const int __aeabi_MB_LEN_MAX;
S#define MB_LEN_MAX (__aeabi_MB_LEN_MAX)
N#else
N#define MB_LEN_MAX 6
N#endif
N    /* maximum number of bytes in a multibyte character, */
N    /* for any supported locale */
N
N#define SHRT_MIN  (-0x8000)
N    /* minimum value for an object of type short int */
N#define SHRT_MAX  0x7fff
N    /* maximum value for an object of type short int */
N#define USHRT_MAX 65535
N    /* maximum value for an object of type unsigned short int */
N#define INT_MIN   (~0x7fffffff)  /* -2147483648 and 0x80000000 are unsigned */
N    /* minimum value for an object of type int */
N#define INT_MAX   0x7fffffff
N    /* maximum value for an object of type int */
N#define UINT_MAX  0xffffffffU
N    /* maximum value for an object of type unsigned int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define LONG_MIN  (~0x7fffffffffffffffL)
N#else
N  #define LONG_MIN  (~0x7fffffffL)
N#endif
N    /* minimum value for an object of type long int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define LONG_MAX  0x7fffffffffffffffL
N#else
N  #define LONG_MAX  0x7fffffffL
N#endif
N    /* maximum value for an object of type long int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define ULONG_MAX 0xffffffffffffffffUL
N#else
N  #define ULONG_MAX 0xffffffffUL
N#endif
N    /* maximum value for an object of type unsigned long int */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N  #define LLONG_MIN  (~0x7fffffffffffffffLL)
N      /* minimum value for an object of type long long int */
N  #define LLONG_MAX    0x7fffffffffffffffLL
N      /* maximum value for an object of type long long int */
N  #define ULLONG_MAX   0xffffffffffffffffULL
N      /* maximum value for an object of type unsigned long int */
N#endif
N
N#endif
N
N/* end of limits.h */
N
L 27 "Generated_Source\PSoC4\CyLib.h" 2
N#include <ctype.h>
L 1 "D:\Keil_v5\ARM\ARMCC\bin\..\include\ctype.h" 1
N/* ctype.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.3 */
N/* Copyright (C) Codemist Ltd. 1988-1993.                       */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.        */
N/* version 0.03 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/*
N * ctype.h declares several functions useful for testing and mapping
N * characters. In all cases the argument is an int, the value of which shall
N * be representable as an unsigned char or shall equal the value of the
N * macro EOF. If the argument has any other value, the behaviour is undefined.
N */
N
N#ifndef __ctype_h
N#define __ctype_h
N#define __ARMCLIB_VERSION 5060019
N
N#define _ARMABI __declspec(__nothrow)
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N
N#ifdef __cplusplus
S#define _ARMABI_INLINE_DEF inline
N#elif defined(__GNUC__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#elif 0L || (1L && 199901L <= 199901L)
N#define _ARMABI_INLINE_DEF static inline
N#elif defined(_USE_STATIC_INLINE)
S#define _ARMABI_INLINE_DEF static __inline
S#else
S#define _ARMABI_INLINE_DEF __inline
N#endif
N
N  #ifndef __CTYPE_DECLS
N  #define __CTYPE_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N/* AEABI portable ctype flag bits */
N#define _ABI_A    1       /* alphabetic        */
N#define _ABI_X    2       /* A-F, a-f and 0-9  */
N#define _ABI_P    4       /* punctuation       */
N#define _ABI_B    8       /* blank             */
N#define _ABI_S   16       /* white space       */
N#define _ABI_L   32       /* lower case letter */
N#define _ABI_U   64       /* upper case letter */
N#define _ABI_C  128       /* control chars     */
N
N/* ARM internal ctype flag bits */
N/* N.B. - keep in step with <ctype.c> */
N
N/*
N * __ARM_CT_A (alphabetic) is required because characters in some locales
N * (e.g. Japanese) can be alphabetic but neither uppercase nor
N * lowercase. Unfortunately there wasn't a bit free for this, so
N * instead we've defined __ARM_CT_A as __ARM_CT_N+__ARM_CT_X (on the grounds that this
N * was a previously unused combination). Hence some of the ctype
N * predicates below are slightly less than obvious in
N * implementation.
N */
N#define __ARM_CT_S 1            /* whitespace           */
N#define __ARM_CT_P 2            /* punctuation          */
N#define __ARM_CT_B 4            /* blank                */
N#define __ARM_CT_L 8            /* lower case letter    */
N#define __ARM_CT_U 16           /* upper case letter    */
N#define __ARM_CT_N 32           /* (decimal) digit      */
N#define __ARM_CT_C 64           /* control chars        */
N#define __ARM_CT_X 128          /* A-F and a-f          */
N#define __ARM_CT_A (__ARM_CT_N+__ARM_CT_X)    /* alphabetic           */
N
N#if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X#if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S  #define _AEABI_PORTABLE
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S
Sextern int (isalnum)(int /*c*/);
Sextern int (isalpha)(int /*c*/);
Sextern int (isblank)(int /*c*/);
Sextern int (iscntrl)(int /*c*/);
Sextern int (isdigit)(int /*c*/);
Sextern int (isgraph)(int /*c*/);
Sextern int (islower)(int /*c*/);
Sextern int (isprint)(int /*c*/);
Sextern int (ispunct)(int /*c*/);
Sextern int (isspace)(int /*c*/);
Sextern int (isupper)(int /*c*/);
Sextern int (isxdigit)(int /*c*/);
S
S/* Mandatory character attribute arrays indexed from 0 to 256 */
Sextern unsigned char const __aeabi_ctype_table_C[257];  /* "C" locale */
Sextern unsigned char const __aeabi_ctype_table_[257];   /* default locale */
S         /* The default locale might be the C locale */
S/* Optional character attribute arrays indexed from 0 to 256.        */
S/* These do not have to be provided by every execution environment   */
S/* but, if provided, shall be provided with these names and meaning. */
Sextern unsigned char const __aeabi_ctype_table_ISO8859_1[257];
Sextern unsigned char const __aeabi_ctype_table_SJIS[257];
Sextern unsigned char const __aeabi_ctype_table_BIG5[257];
Sextern unsigned char const __aeabi_ctype_table_UTF8[257];
S#ifdef _AEABI_LC_CTYPE
S# define _AEABI_CTYPE_TABLE(_X) __aeabi_ctype_table_ ## _X
S# define _AEABI_CTYPE(_X) _AEABI_CTYPE_TABLE(_X)
S# define __aeabi_ctype_table _AEABI_CTYPE(_AEABI_LC_CTYPE)
S#else
S# define __aeabi_ctype_table __aeabi_ctype_table_
S#endif
S
S#define isspace(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_S)
S#define isalpha(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_A)
S#define isalnum(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] << 30) /* test for _ABI_A and _ABI_X */
S#define isprint(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] << 28) /* test for _ABI_A, _ABI_X, _ABI_P and _ABI_B */
S#define isupper(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_U)
S#define islower(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_L)
S#define isxdigit(x) ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_X)
S#define isgraph(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] << 29) /* test for _ABI_A, _ABI_X and _ABI_P */
S#define iscntrl(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_C)
S#define ispunct(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_P)
S#define isdigit(c)  (((unsigned)(c) - '0') < 10)
S
N#else /* __AEABI_PORTABILITY_LEVEL */
N
Nextern _ARMABI_PURE unsigned char **__rt_ctype_table(void);
Xextern __declspec(__nothrow) __attribute__((const)) unsigned char **__rt_ctype_table(void);
N
N#define __arm_ctype (*__CLIBNS __rt_ctype_table())
N
N#ifdef __cplusplus
S    inline int isalnum(int __c) { return (__arm_ctype[__c] & (__ARM_CT_U+__ARM_CT_L+__ARM_CT_N)); }
N#else
N    #define isalnum(c) (__arm_ctype[c] & (__ARM_CT_U+__ARM_CT_L+__ARM_CT_N))
N    extern int (isalnum)(int /*c*/);
N#endif
N    /* non-0 iff c is alphabetic or numeric */
N
N#ifdef __cplusplus
S    inline int isalpha(int __c) { return (__arm_ctype[__c] & (__ARM_CT_U+__ARM_CT_L+__ARM_CT_X)); }
N#else
N    #define isalpha(c) (__arm_ctype[c] & (__ARM_CT_U+__ARM_CT_L+__ARM_CT_X))
N    extern int (isalpha)(int /*c*/);
N#endif
N    /* non-0 iff c is alphabetic */
N
N#ifdef __cplusplus
S    inline int iscntrl(int __c) { return (__arm_ctype[__c] & __ARM_CT_C); }
N#else
N    #define iscntrl(c) (__arm_ctype[c] & __ARM_CT_C)
N    extern int (iscntrl)(int /*c*/);
N#endif
N    /* non-0 iff c is a control character - in the "C" locale */
N    /*       this means (c < ' ') || (c > '~')                */
N
N/* isdigit must test for the presence of _only_ __ARM_CT_N, not just __ARM_CT_N at all. */
N#ifdef __cplusplus
S    inline int isdigit(int __c) { return (__arm_ctype[__c] == __ARM_CT_N); }
N#else
N    #define isdigit(c) (__arm_ctype[c] == __ARM_CT_N)
N    extern int (isdigit)(int /*c*/);
N#endif
N    /* non-0 iff c is a decimal digit */
N
N    extern int (isblank)(int /*c*/);
N    /* non-0 iff c is ' ', '\t' or some other locale-specific, */
N    /* word-separating character (there are no others in "C"   */
N    /* locale) */
N
N#ifdef __cplusplus
S    inline int isgraph(int __c) {return(__arm_ctype[__c] & (__ARM_CT_L+__ARM_CT_U+__ARM_CT_N+__ARM_CT_X+__ARM_CT_P));}
N#else
N    #define isgraph(c) (__arm_ctype[c]&(__ARM_CT_L+__ARM_CT_U+__ARM_CT_N+__ARM_CT_X+__ARM_CT_P))
N    extern int (isgraph)(int /*c*/);
N#endif
N    /* non-0 iff c is any printing character other than ' ' */
N
N#ifdef __cplusplus
S    inline int islower(int __c) { return (__arm_ctype[__c] & __ARM_CT_L); }
N#else
N    #define islower(c) (__arm_ctype[c] & __ARM_CT_L)
N    extern int (islower)(int /*c*/);
N#endif
N    /* non-0 iff c is a lower-case letter */
N
N#ifdef __cplusplus
S    inline int isprint(int __c) { return (__arm_ctype[__c] & (__ARM_CT_L+__ARM_CT_U+__ARM_CT_N+__ARM_CT_P+__ARM_CT_B)); }
N#else
N    #define isprint(c) (__arm_ctype[c] & (__ARM_CT_L+__ARM_CT_U+__ARM_CT_N+__ARM_CT_P+__ARM_CT_B))
N    extern int (isprint)(int /*c*/);
N#endif
N    /* non-0 iff c is a printing character - in the "C" locale */
N    /*       this means 0x20 (space) -> 0x7E (tilde)           */
N
N#ifdef __cplusplus
S    inline int ispunct(int __c) { return (__arm_ctype[__c] & __ARM_CT_P); }
N#else
N    #define ispunct(c) (__arm_ctype[c] & __ARM_CT_P)
N    extern int (ispunct)(int /*c*/);
N#endif
N    /* non-0 iff c is a non-space, non-alpha-numeric, printing character */
N
N#ifdef __cplusplus
S    inline int isspace(int __c) { return (__arm_ctype[__c] & __ARM_CT_S); }
N#else
N    #define isspace(c) (__arm_ctype[c] & __ARM_CT_S)
N    extern int (isspace)(int /*c*/);
N#endif
N    /* non-0 iff c is a white-space char: ' ', '\f', '\n', '\r', '\t', '\v'. */
N
N#ifdef __cplusplus
S    inline int isupper(int __c) { return (__arm_ctype[__c] & __ARM_CT_U); }
N#else
N    #define isupper(c) (__arm_ctype[c] & __ARM_CT_U)
N    extern int (isupper)(int /*c*/);
N#endif
N    /* non-0 iff c is an upper-case letter */
N
N/* isxdigit must test for the presence of __ARM_CT_N or __ARM_CT_X but not both. */
N/* This helper function avoids needing to evaluate c twice. */
N
N_ARMABI_INLINE_DEF int __isxdigit_helper(int __t) { return (__t ^ (__t << 2)); }
Xstatic inline int __isxdigit_helper(int __t) { return (__t ^ (__t << 2)); }
N#ifdef __cplusplus
S    inline int isxdigit(int __c){return __isxdigit_helper(__arm_ctype[__c]) & __ARM_CT_X;}
N#else
N    #define isxdigit(c) (__isxdigit_helper(__arm_ctype[c]) & __ARM_CT_X)
N    extern int (isxdigit)(int /*c*/);
N#endif
N    /* non-0 iff c is a digit, in 'a'..'f', or in 'A'..'F' */
N
N#endif /* __AEABI_PORTABILITY_LEVEL */
N
Nextern int tolower(int /*c*/);
N    /* if c is an upper-case letter then return the corresponding */
N    /* lower-case letter, otherwise return c.                     */
N
Nextern int toupper(int /*c*/);
N    /* if c is an lower-case letter then return the corresponding */
N    /* upper-case letter, otherwise return c.                     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __CTYPE_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __CTYPE_NO_EXPORTS
S      using ::std::isalnum;
S      using ::std::isalpha;
S      using ::std::iscntrl;
S      using ::std::isdigit;
S      using ::std::isblank;
S      using ::std::isgraph;
S      using ::std::islower;
S      using ::std::isprint;
S      using ::std::ispunct;
S      using ::std::isspace;
S      using ::std::isupper;
S      using ::std::isxdigit;
S      using ::std::tolower;
S      using ::std::toupper;
S    #endif /* __CTYPE_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of ctype.h */
N
L 28 "Generated_Source\PSoC4\CyLib.h" 2
N
N
N/**
N* \addtogroup group_clocking
N
NPSoC devices supported by PSoC Creator have flexible clocking capabilities. These clocking capabilities are
Ncontrolled in PSoC Creator by selections within the Design-Wide Resources settings, connectivity of clocking signals on
Nthe design schematic, and API calls that can modify the clocking at runtime. The clocking API is provided in the CyLib.c
Nand CyLib.h files.
N
NThis section describes how PSoC Creator maps clocks onto the device and provides guidance on clocking methodologies that
Nare optimized for the PSoC architecture.
N
N
N\section section_clocking_modes Power Modes
NThe IMO is available in Active and Sleep modes. It is automatically disabled/enabled for the proper Deep Sleep and
NHibernate mode entry/exit. The IMO is disabled during Deep Sleep and Hibernate modes.
N
NThe EXTCLK is available in Active and Sleep modes. The system will enter/exit Deep Sleep and Hibernate using external
Nclock. The device will re-enable the IMO if it was enabled before entering Deep Sleep or Hibernate, but it does not wait
Nfor the IMO before starting the CPU. After entering Active mode, the IMO may take an additional 2 us to begin toggling.
NThe IMO will startup cleanly without glitches, but any dependency should account for this extra startup time. If
Ndesired, firmware may increase wakeup hold-off using \ref CySysPmSetWakeupHoldoff() function to include this 2 us and
Nensure the IMO is toggling by the time Active mode is reached.
N
NThe ILO is available in all modes except Hibernate and Stop.
N
N
N
N\section section_clocking_connectivity Clock Connectivity
NThe PSoC architecture includes flexible clock generation logic. Refer to the Technical Reference Manual for a detailed
Ndescription of all the clocking sources available in a particular device. The usage of these various clocking sources
Ncan be categorized by how those clocks are connected to elements of a design.
N
N\section section_clocking_runtime_changing Changing Clocks in Run-time
N
N\subsection section_clocking_runtime_changing_impact Impact on Components Operation
NThe components with internal clocks are directly impacted by the change of the system clock frequencies or sources. The
Ncomponents clock frequencies obtained using design-time dividers. The run-time change of components clock source will
Ncorrespondingly change the internal component clock.  Refer to the component datasheet for the details.
N
N\subsection section_clocking_runtime_adjust CyDelay APIs
NThe CyDelay APIs implement simple software-based delay loops. The loops compensate for system clock frequency. The
N\ref CyDelayFreq() function must be called in order to adjust \ref CyDelay(), \ref CyDelayUs() and \ref CyDelayCycles()
Nfunctions to the new system clock value.
N
N\subsection section_clocking_runtime_cache Cache Configuration
NIf the CPU clock frequency increases during device operation, the number of clock cycles cache will wait before sampling
Ndata coming back from Flash should be adjusted. If the CPU clock frequency decreases, the number of clock cycles can be
Nalso adjusted to improve CPU performance. See “CySysFlashSetWaitCycles()” for PSoC 4 for more information.
N
N*/
N
N
N/**
N* \addtogroup group_clocking_hfclk High-Frequency Clocking API
N* \ingroup group_clocking
N* @{
N*/
Nvoid CySysClkImoStart(void);
Nvoid CySysClkImoStop(void);
Nvoid CySysClkWriteHfclkDirect(uint32 clkSelect);
N
N#if (CY_IP_IMO_TRIMMABLE_BY_WCO)
X#if ((0 == 0))
N    void CySysClkImoEnableWcoLock(void);
N    void CySysClkImoDisableWcoLock(void);
N    uint32 CySysClkImoGetWcoLock(void);
N#endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
N
N#if (CY_IP_IMO_TRIMMABLE_BY_USB)
X#if ((0 != 0))
S    void CySysClkImoEnableUsbLock(void);
S    void CySysClkImoDisableUsbLock(void);
S    uint32 CySysClkImoGetUsbLock(void);
N#endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
N
N#if (CY_IP_SRSSLT)
X#if ((!(0 != 0)))
N    void CySysClkWriteHfclkDiv(uint32 divider);
N#endif /* (CY_IP_SRSSLT) */
N
Nvoid CySysClkWriteSysclkDiv(uint32 divider);
Nvoid CySysClkWriteImoFreq(uint32 freq);
Nuint32 CySysClkGetSysclkSource(void);
Nvoid CySysEnablePumpClock(uint32 enable);
N
N/** @} group_clocking_hfclk */
N
N
N/**
N* \addtogroup group_clocking_lfclk Low-Frequency Clocking API
N* \ingroup group_clocking
N* \detailed For PSoC 4 devices, the CyLFClk (low-frequency clock) APIs are located in separate files
N* (CyLFClk.h/CyLFClk.c). See the CyLFClk Component Datasheet available from the System Reference Guides item of the
N* PSoC Creator Help menu.
N* @{
N*/
N/** @} group_clocking_lfclk */
N
N
N/**
N* \addtogroup group_clocking_eco External Crystal Oscillator (ECO) API
N* \ingroup group_clocking
N* @{
N*/
N#if (CY_IP_ECO)
X#if (((0 != 0) || (-1 == 1) || (0 != 0) || ((1 != 0) && (1 != 0))))
N    cystatus CySysClkEcoStart(uint32 timeoutUs);
N    void     CySysClkEcoStop(void);
N    uint32   CySysClkEcoReadStatus(void);
N
N    #if (CY_IP_ECO_BLESS || CY_IP_ECO_BLESSV3)
X    #if ((0 != 0) || (0 != 0))
S        void CySysClkWriteEcoDiv(uint32 divider);
N    #endif /* (CY_IP_ECO_BLESS || CY_IP_ECO_BLESSV3) */
N
N    #if (CY_IP_ECO_SRSSV2 || CY_IP_ECO_SRSSLT)
X    #if ((-1 == 1) || ((1 != 0) && (1 != 0)))
N        void CySysClkConfigureEcoTrim(uint32 wDTrim, uint32 aTrim, uint32 fTrim, uint32 rTrim, uint32 gTrim);
N        cystatus CySysClkConfigureEcoDrive(uint32 freq, uint32 cLoad, uint32 esr, uint32 maxAmplitude);
N    #endif /* (CY_IP_ECO_SRSSV2 || CY_IP_ECO_SRSSLT) */
N#endif  /* (CY_IP_ECO) */
N/** @} group_clocking_eco */
N
N
N/**
N* \addtogroup group_clocking_pll Phase-Locked Loop (PLL) API
N* \ingroup group_clocking
N* @{
N*/
N#if (CY_IP_PLL)
X#if ((1 == 1))
N    cystatus CySysClkPllStart(uint32 pll, uint32 wait);
N    void     CySysClkPllStop(uint32 pll);
N    cystatus CySysClkPllSetPQ(uint32 pll, uint32 feedback, uint32 reference, uint32 current);
N    cystatus CySysClkPllSetFrequency(uint32 pll, uint32 inputFreq, uint32 pllFreq, uint32 divider, uint32 freqTol);
N    void     CySysClkPllSetSource(uint32 pll, uint32 source);
N    cystatus CySysClkPllSetOutputDivider(uint32 pll, uint32 divider);
N    void CySysClkPllSetBypassMode(uint32 pll, uint32 bypass);
N    uint32 CySysClkPllGetUnlockStatus(uint32 pll);
N    uint32 CySysClkPllGetLockStatus(uint32 pll);
N#endif /* (CY_IP_PLL) */
N/** @} group_clocking_pll */
N
N
N/**
N* \addtogroup group_api_lvd_functions Low Voltage Detection API
N* @{
N*/
N#if(CY_IP_SRSSV2)
X#if((0 != 0))
S    void   CySysLvdEnable(uint32 threshold);
S    void   CySysLvdDisable(void);
S    uint32 CySysLvdGetInterruptSource(void);
S    void   CySysLvdClearInterrupt(void);
N#endif  /* (CY_IP_SRSSV2) */
N/** @} group_api_lvd_functions */
N
N
N/**
N* \addtogroup group_interrupts Interrupt API
N* \brief The APIs in this chapter apply to all architectures except as noted. The Interrupts API is provided in the
N* CyLib.c and CyLib.h files. Refer also to the Interrupt component datasheet for more information about interrupts.
N* @{
N*/
Ncyisraddress CyIntSetSysVector(uint8 number, cyisraddress address);
Ncyisraddress CyIntGetSysVector(uint8 number);
N
Ncyisraddress CyIntSetVector(uint8 number, cyisraddress address);
Ncyisraddress CyIntGetVector(uint8 number);
N
Nvoid   CyIntSetPriority(uint8 number, uint8 priority);
Nuint8  CyIntGetPriority(uint8 number);
N
Nvoid   CyIntEnable(uint8 number);
Nuint8  CyIntGetState(uint8 number);
Nvoid   CyIntDisable(uint8 number);
N
Nvoid   CyIntSetPending(uint8 number);
Nvoid   CyIntClearPending(uint8 number);
N
Nuint32 CyDisableInts(void);
Nvoid   CyEnableInts(uint32 mask);
N/** @} group_interrupts */
N
N
N/**
N* \addtogroup group_api_delay_functions Delay API
N* @{
N*/
N/* Do not use these definitions directly in your application */
Nextern uint32 cydelayFreqHz;
Nextern uint32 cydelayFreqKhz;
Nextern uint8  cydelayFreqMhz;
Nextern uint32 cydelay32kMs;
N
Nvoid  CyDelay(uint32 milliseconds);
Nvoid  CyDelayUs(uint16 microseconds);
Nvoid  CyDelayFreq(uint32 freq);
Nvoid  CyDelayCycles(uint32 cycles);
N/** @} group_api_delay_functions */
N
N
N/**
N* \addtogroup group_api_system_functions System API
N* @{
N*/
Nvoid  CySoftwareReset(void);
Nuint8 CyEnterCriticalSection(void);
Nvoid  CyExitCriticalSection(uint8 savedIntrStatus);
Nvoid  CyHalt(uint8 reason);
Nuint32 CySysGetResetReason(uint32 reason);
Nvoid CyGetUniqueId(uint32* uniqueId);
N
N/* Default interrupt handler */
NCY_ISR_PROTO(IntDefaultHandler);
Xvoid IntDefaultHandler (void);
N/** @} group_api_system_functions */
N
N
N/**
N* \addtogroup group_api_systick_functions System Timer (SysTick) API
N* @{
N*/
N
Ntypedef void (*cySysTickCallback)(void);
N
Nvoid CySysTickStart(void);
Nvoid CySysTickInit(void);
Nvoid CySysTickEnable(void);
Nvoid CySysTickStop(void);
Nvoid CySysTickEnableInterrupt(void);
Nvoid CySysTickDisableInterrupt(void);
Nvoid CySysTickSetReload(uint32 value);
Nuint32 CySysTickGetReload(void);
Nuint32 CySysTickGetValue(void);
NcySysTickCallback CySysTickSetCallback(uint32 number, cySysTickCallback function);
NcySysTickCallback CySysTickGetCallback(uint32 number);
N
N#if(CY_SYSTICK_LFCLK_SOURCE)
X#if((1 != 0))
N    void CySysTickSetClockSource(uint32 clockSource);
N    uint32 CySysTickGetClockSource(void);
N#endif /* (CY_SYSTICK_LFCLK_SOURCE) */
N
Nuint32 CySysTickGetCountFlag(void);
Nvoid CySysTickClear(void);
Nextern uint32 CySysTickInitVar;
N/** @} group_api_systick_functions */
N
N
N#if (CY_IP_DMAC_PRESENT)
X#if ((1 == 1))
N    void CySysSetRamAccessArbPriority(uint32 source);
N    void CySysSetFlashAccessArbPriority(uint32 source);
N    void CySysSetDmacAccessArbPriority(uint32 source);
N    void CySysSetPeripheralAccessArbPriority(uint32 interfaceNumber, uint32 source);
N#endif /* (CY_IP_DMAC_PRESENT) */
N
N
N/**
N* \addtogroup group_api_pvb_functions Programmable Voltage Block (PVB) API
N* @{
N*/
N#if (CY_IP_PASS)
X#if ((0 == 1))
S    void CySysPrbSetGlobalVrefSource(uint32 source);
S    void CySysPrbSetBgGain(uint32 gain);
S    void CySysPrbSetGlobalVrefVoltage(uint32 voltageTap);
S    void CySysPrbEnableDeepsleepVddaRef(void);
S    void CySysPrbDisableDeepsleepVddaRef(void);
S    void CySysPrbEnableVddaRef(void);
S    void CySysPrbDisableVddaRef(void);
S    void CySysPrbSetBgBufferTrim(int32 bgTrim);
S    int32 CySysPrbGetBgBufferTrim(void);
N#endif /* (CY_IP_PASS) */
N/** @} group_api_pvb_functions */
N
N
N/***************************************
N* API Constants
N***************************************/
N
N
N/*******************************************************************************
N* Clock API Constants
N*******************************************************************************/
N
N/* CySysClkWriteHfclkDirect() - implementation definitions */
N#if(CY_IP_SRSSV2)
X#if((0 != 0))
S    #define CY_SYS_CLK_SELECT_DIRECT_SEL_MASK           (( uint32 ) 0x07u)
S    #define CY_SYS_CLK_SELECT_DIRECT_SEL_PARAM_MASK     (( uint32 ) 0x07u)
S
S    #define CY_SYS_CLK_SELECT_HFCLK_SEL_SHIFT           (( uint32 ) 16u)
S
S    #if (CY_IP_PLL)
S        #define CY_SYS_CLK_SELECT_HFCLK_SEL_MASK        (( uint32 ) 3u << CY_SYS_CLK_SELECT_HFCLK_SEL_SHIFT)
S    #else
S        #define CY_SYS_CLK_SELECT_HFCLK_SEL_MASK        (( uint32 ) 0u )
S    #endif /* (CY_IP_PLL) */
S
N#else
N    #if (CY_IP_PLL && CY_IP_SRSSLT)    
X    #if ((1 == 1) && (!(0 != 0)))    
N        #define CY_SYS_ECO_CLK_SELECT_ECO_PLL_MASK      (( uint32 ) 0x01u )
N        #define CY_SYS_CLK_SELECT_HFCLK_SEL_PLL_MASK    (( uint32 ) 0x04u )
N        #define CY_SYS_CLK_SELECT_HFCLK_PLL_SHIFT       (( uint32 ) 2u) 
N       
N        #define CY_SYS_EXCO_PGM_CLK_ENABLE_MASK         (( uint32 ) 0x80000000u)
N        #define CY_SYS_EXCO_PGM_CLK_CLK_ECO_MASK        (( uint32 ) 0x2u)
N        #define CY_SYS_EXCO_PGM_CLK_SEQ_GENERATOR       (( uint8 ) 0x5u)
N    #endif /* (CY_IP_PLL && CY_IP_SRSSLT) */
N
N    #define CY_SYS_CLK_SELECT_HFCLK_SEL_MASK            (( uint32 ) 0u )  
N    #define CY_SYS_CLK_SELECT_DIRECT_SEL_MASK           (( uint32 ) 0x03u)
N    #define CY_SYS_CLK_SELECT_DIRECT_SEL_PARAM_MASK     (CY_SYS_CLK_SELECT_DIRECT_SEL_MASK)
N#endif  /* (CY_IP_SRSSV2) */
N
N/* CySysClkWriteHfclkDirect() - parameter definitions */
N#define CY_SYS_CLK_HFCLK_IMO                            (0u)
N#define CY_SYS_CLK_HFCLK_EXTCLK                         (1u)
N#if (CY_IP_ECO)
X#if (((0 != 0) || (-1 == 1) || (0 != 0) || ((1 != 0) && (1 != 0))))
N    #define CY_SYS_CLK_HFCLK_ECO                        (2u)
N#endif  /* (CY_IP_ECO) */
N
N#if (CY_IP_PLL)
X#if ((1 == 1))
N    #if (CY_IP_SRSSV2)
X    #if ((0 != 0))
S        #define CY_SYS_CLK_HFCLK_PLL0                   ((uint32) ((uint32) 2u << CY_SYS_CLK_SELECT_HFCLK_SEL_SHIFT))
S        #define CY_SYS_CLK_HFCLK_PLL1                   ((uint32) ((uint32) 1u << CY_SYS_CLK_SELECT_HFCLK_SEL_SHIFT))
N    #else
N        #define CY_SYS_CLK_HFCLK_PLL0                   (6u)
N    #endif /* (CY_IP_SRSSV2) */
N#endif  /* (CY_IP_PLL) */
N
N/* CySysClkWriteSysclkDiv() - parameter definitions */
N#define CY_SYS_CLK_SYSCLK_DIV1                          (0u)
N#define CY_SYS_CLK_SYSCLK_DIV2                          (1u)
N#define CY_SYS_CLK_SYSCLK_DIV4                          (2u)
N#define CY_SYS_CLK_SYSCLK_DIV8                          (3u)
N#if(CY_IP_SRSSV2)
X#if((0 != 0))
S    #define CY_SYS_CLK_SYSCLK_DIV16                     (4u)
S    #define CY_SYS_CLK_SYSCLK_DIV32                     (5u)
S    #define CY_SYS_CLK_SYSCLK_DIV64                     (6u)
S    #define CY_SYS_CLK_SYSCLK_DIV128                    (7u)
N#endif  /* (CY_IP_SRSSV2) */
N
N
N/* CySysClkWriteSysclkDiv() - implementation definitions */
N#if(CY_IP_SRSSV2)
X#if((0 != 0))
S    #define CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT          (19u)
S    #define CY_SYS_CLK_SELECT_SYSCLK_DIV_MASK           (( uint32 )0x07u)
N#else
N    #define CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT          (6u)
N    #define CY_SYS_CLK_SELECT_SYSCLK_DIV_MASK           (( uint32 )0x03u)
N#endif  /* (CY_IP_SRSSV2) */
N
N
N/* CySysClkPllSetSource() - implementation definitions */
N#if (CY_IP_PLL)
X#if ((1 == 1))
N    #if(CY_IP_SRSSV2)
X    #if((0 != 0))
S        #define CY_SYS_CLK_SELECT_PLL_SHIFT(x)          (3u + (3u * (x)))
S        #define CY_SYS_CLK_SELECT_PLL_MASK(x)           ((uint32) ((uint32) 0x07u << CY_SYS_CLK_SELECT_PLL_SHIFT((x))))
N    #else
N        #define CY_SYS_ECO_CLK_SELECT_PLL0_SHIFT        (1u)
N        #define CY_SYS_ECO_CLK_SELECT_PLL0_MASK         ((uint32) ((uint32) 0x01u << CY_SYS_ECO_CLK_SELECT_PLL0_SHIFT))
N    #endif  /* (CY_IP_SRSSV2) */
N#endif /* (CY_IP_PLL) */
N
N/* CySysClkPllSetSource() - parameter definitions */
N#if (CY_IP_PLL)
X#if ((1 == 1))
N    #if(CY_IP_SRSSV2)
X    #if((0 != 0))
S        #define CY_SYS_PLL_SOURCE_IMO                   (0u)
S        #define CY_SYS_PLL_SOURCE_EXTCLK                (1u)
S        #define CY_SYS_PLL_SOURCE_ECO                   (2u)
S        #define CY_SYS_PLL_SOURCE_DSI0                  (4u)
S        #define CY_SYS_PLL_SOURCE_DSI1                  (5u)
S        #define CY_SYS_PLL_SOURCE_DSI2                  (6u)
S        #define CY_SYS_PLL_SOURCE_DSI3                  (7u)
N    #else
N        #define CY_SYS_PLL_SOURCE_ECO                   (0u)
N        #define CY_SYS_PLL_SOURCE_IMO                   (1u)
N    #endif  /* (CY_IP_SRSSV2) */
N#endif /* (CY_IP_PLL) */
N
N/* CySysClkPllSetBypassMode() - parameter definitions */
N#if(CY_IP_SRSSV2 || CY_IP_SRSSLT)
X#if((0 != 0) || (!(0 != 0)))
N    #if (CY_IP_PLL)
X    #if ((1 == 1))
N        #define CY_SYS_PLL_BYPASS_AUTO         (0u)
N        #define CY_SYS_PLL_BYPASS_PLL_REF      (2u)
N        #define CY_SYS_PLL_BYPASS_PLL_OUT      (3u)
N    #endif /* (CY_IP_PLL) */
N#endif  /* (CY_IP_SRSSV2 || CY_IP_SRSSLT)) */
N
N/* CySysClkPllSetOutputDivider()/CySysClkPllSetFrequency() - parameters */
N#if(CY_IP_SRSSV2 || CY_IP_SRSSLT)
X#if((0 != 0) || (!(0 != 0)))
N    #if (CY_IP_PLL)
X    #if ((1 == 1))
N        #define CY_SYS_PLL_OUTPUT_DIVPASS               (0u)
N        #define CY_SYS_PLL_OUTPUT_DIV2                  (1u)
N        #define CY_SYS_PLL_OUTPUT_DIV4                  (2u)
N        #define CY_SYS_PLL_OUTPUT_DIV8                  (3u)
N    #endif /* (CY_IP_PLL) */
N#endif  /* (CY_IP_SRSSV2 || CY_IP_SRSSLT) */
N
N/* CySysPumpClock() */
N#define CY_SYS_CLK_PUMP_DISABLE                         ((uint32) 0u)
N#define CY_SYS_CLK_PUMP_ENABLE                          ((uint32) 1u)
N
N#if (CY_IP_PLL)
X#if ((1 == 1))
N
N    /* Set of the PLL registers */
N    typedef struct
N    {
N        uint32 config;
N        uint32 status;
N        uint32 test;
N    } cy_sys_clk_pll_regs_struct;
N
N    /* Array of the PLL registers */
N    typedef struct
N    {
N        cy_sys_clk_pll_regs_struct pll[2u];
N    } cy_sys_clk_pll_struct;
N
N
N    /* CySysClkPllSetPQ() - implementation definitions */
N    #define CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_SHIFT     (0u)
N    #define CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_SHIFT    (8u)
N    #define CY_SYS_CLK_PLL_CONFIG_OUTPUT_DIV_SHIFT       (14u)
N    #define CY_SYS_CLK_PLL_CONFIG_ICP_SEL_SHIFT          (16u)
N    #define CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT       (20u)
N
N    #define CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_MASK     ((uint32) ((uint32) 0xFFu << CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_SHIFT))
N    #define CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_MASK    ((uint32) ((uint32) 0x3Fu << CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_SHIFT))
N    #define CY_SYS_CLK_PLL_CONFIG_OUTPUT_DIV_MASK       ((uint32) ((uint32) 0x03u << CY_SYS_CLK_PLL_CONFIG_OUTPUT_DIV_SHIFT))
N    #define CY_SYS_CLK_PLL_CONFIG_ICP_SEL_MASK          ((uint32) ((uint32) 0x07u << CY_SYS_CLK_PLL_CONFIG_ICP_SEL_SHIFT))
N    #define CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_MASK       ((uint32) ((uint32) 0x03u << CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT))
N
N    #define CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_PLL_REF    ((uint32) ((uint32) 2u << CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT))
N
N    #define CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_MIN      (4u)
N    #define CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_MAX      (259u)
N    #define CY_SYS_CLK_PLL_CONFIG_ICP_SEL_MIN           (2u)
N    #define CY_SYS_CLK_PLL_CONFIG_ICP_SEL_MAX           (3u)
N    #define CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_MIN     (1u)
N    #define CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_MAX     (64u)
N
N    /* CySysClkPllGetUnlockStatus() - implementation definitions */
N    #define CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_SHIFT   (4u)
N    #define CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK    (( uint32 )(( uint32 )0x01u << CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_SHIFT))
N
N    /* CySysClkPllSetFrequency() - implementation definitions */
N    #define CY_SYS_CLK_PLL_QMINIP                       (1u)
N    #define CY_SYS_CLK_PLL_FPFDMAX                      (3000u)
N
N    #define CY_SYS_CLK_PLL_QMAXIP                       (64u)
N    #define CY_SYS_CLK_PLL_FPFDMIN                      (1000u)
N
N    #define CY_SYS_CLK_PLL_INVALID                      (0u)
N    #define CY_SYS_CLK_PLL_CURRENT_DEFAULT              (2u)
N
N    #define CY_SYS_CLK_PLL_INPUT_FREQ_MIN               (1000u)
N    #define CY_SYS_CLK_PLL_INPUT_FREQ_MAX               (49152u)
N
N    #define CY_SYS_CLK_PLL_OUTPUT_FREQ_MIN              (22500u)
N    #define CY_SYS_CLK_PLL_OUTPUT_FREQ_MAX              (49152u)
N
N    /* CySysClkPllStart() / CySysClkPllStop() - implementation definitions */
N    #define CY_SYS_CLK_PLL_STATUS_LOCKED                (1u)
N    #define CY_SYS_CLK_PLL_MIN_STARTUP_US               (5u)
N    #define CY_SYS_CLK_PLL_MAX_STARTUP_US               (255u)
N
N    #define CY_SYS_CLK_PLL_CONFIG_ENABLE                ((uint32) ((uint32) 1u << 31u))
N    #define CY_SYS_CLK_PLL_CONFIG_ISOLATE               ((uint32) ((uint32) 1u << 30u))
N
N#endif /* (CY_IP_PLL) */
N
N/* CySysClkWriteImoFreq() - implementation definitions */
N#if(CY_IP_SRSSV2)
X#if((0 != 0))
S    #define CY_SYS_CLK_IMO_MAX_FREQ_MHZ                 (48u)
S    #define CY_SYS_CLK_IMO_MIN_FREQ_MHZ                 (3u)
S
S    #define CY_SYS_CLK_IMO_TEMP_FREQ_MHZ                (24u)
S    #define CY_SYS_CLK_IMO_TEMP_FREQ_TRIM2              (0x19u)     /* Corresponds to 24 MHz */
S
S    #define CY_SYS_CLK_IMO_BOUNDARY_FREQ_MHZ            (43u)
S    #define CY_SYS_CLK_IMO_BOUNDARY_FREQ_TRIM2          (0x30u)     /* Corresponds to 43 MHz */
S
S    #define CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES          (5u)
S    #define CY_SYS_CLK_IMO_TRIM_TIMEOUT_US              (5u)
S    #define CY_SYS_CLK_IMO_FREQ_TABLE_SIZE              (46u)
S    #define CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET            (3u)
S    #define CY_SYS_CLK_IMO_FREQ_BITS_MASK               (( uint32 )0x3Fu)
S    #define CY_SYS_CLK_IMO_FREQ_CLEAR                   (( uint32 )(CY_SYS_CLK_IMO_FREQ_BITS_MASK << 8u))
S    #define CY_SYS_CLK_IMO_TRIM4_GAIN_MASK				(( uint32 )0x1Fu)
S	#define CY_SYS_CLK_IMO_TRIM4_WCO_GAIN               (( uint32 ) 12u)
S    #define CY_SYS_CLK_IMO_TRIM4_USB_GAIN               (( uint32 ) 8u)
S
S    #if(CY_IP_IMO_TRIMMABLE_BY_USB)
S        #define CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK     (( uint32 )0x02u)
S        #define CY_SFLASH_S1_TESTPGM_REV_MASK           (( uint32 )0x3Fu)
S        #define CY_SFLASH_S1_TESTPGM_OLD_REV            (( uint32 )4u)
S    #endif /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
S
N#else
N    #define CY_SYS_CLK_IMO_MIN_FREQ_MHZ                 (24u)
N    #define CY_SYS_CLK_IMO_MAX_FREQ_MHZ                 (48u)
N    #define CY_SYS_CLK_IMO_STEP_SIZE_MASK               (0x03u)
N    #define CY_SYS_CLK_IMO_TRIM1_OFFSET_MASK            (( uint32 )(0xFFu))
N    #define CY_SYS_CLK_IMO_TRIM2_FSOFFSET_MASK          (( uint32 )(0x07u))
N    #define CY_SYS_CLK_IMO_TRIM3_VALUES_MASK            (( uint32 )(0x7Fu))
N    #define CY_SYS_CLK_IMO_SELECT_FREQ_MASK             (( uint32 )(0x07u))
N    #define CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT            (( uint32 )(0x02u))
N    #define CY_SYS_CLK_IMO_SELECT_24MHZ                 (( uint32 )(0x00u))
N
N    #define CY_SYS_CLK_IMO_TRIM_DELAY_US                (( uint32 )(50u))
N    #define CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES            (( uint32 )(50u))    
N#endif  /* (CY_IP_SRSSV2) */
N
N/* CySysClkImoEnableUsbLock(void) -  - implementation definitions */
N#if(CY_IP_IMO_TRIMMABLE_BY_USB)
X#if((0 != 0))
S    #define CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK         (( uint32 )0x02u)
N#endif /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
N
N#if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
X#if ((0 == 0) && (0 != 0))
S    #define CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_MASK        (( uint32 )0x01u)
S    #define CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_USB         (( uint32 )0x00u)
S    #define CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_WCO         (( uint32 )0x01u)
N#endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
N
N
N#if(CY_IP_SRSSV2)
X#if((0 != 0))
S        /* Conversion between CySysClkWriteImoFreq() parameter and register's value */
S        extern const uint8 cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_FREQ_TABLE_SIZE];
N#endif /* (CY_IP_SRSSV2) */
N
N
N/* CySysClkImoStart()/CySysClkImoStop() - implementation definitions */
N#define CY_SYS_CLK_IMO_CONFIG_ENABLE                    (( uint32 )(( uint32 )0x01u << 31u))
N
N
N#if(CY_IP_SRSSLT)
X#if((!(0 != 0)))
N    /* CySysClkWriteHfclkDiv() - parameter definitions */
N    #define CY_SYS_CLK_HFCLK_DIV_NODIV                  (0u)
N    #define CY_SYS_CLK_HFCLK_DIV_2                      (1u)
N    #define CY_SYS_CLK_HFCLK_DIV_4                      (2u)
N    #define CY_SYS_CLK_HFCLK_DIV_8                      (3u)
N
N    /* CySysClkWriteHfclkDiv() - implementation definitions */
N    #define CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT           (2u)
N    #define CY_SYS_CLK_SELECT_HFCLK_DIV_MASK            (( uint32 )0x03u)
N#endif  /* (CY_IP_SRSSLT) */
N
N
N/* Operating source for Pump clock */
N#if(CY_IP_SRSSV2)
X#if((0 != 0))
S    #define CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_SHIFT        (25u)
S    #define CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK         ((uint32) 0x07u)
S    #define CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_IMO          (1u)
S
S	#define CY_SYS_CLK_IMO_CONFIG_PUMP_OSC              (( uint32 )(( uint32 )0x01u << 22u))
N#else /* CY_IP_SRSSLT */
N    #define CY_SYS_CLK_SELECT_PUMP_SEL_SHIFT            (4u)
N    #define CY_SYS_CLK_SELECT_PUMP_SEL_MASK             ((uint32) 0x03u)
N    #define CY_SYS_CLK_SELECT_PUMP_SEL_IMO              (1u)
N#endif  /* (CY_IP_SRSSLT) */
N
N
N#if (CY_IP_ECO_BLESS)
X#if ((0 != 0))
S    /* Radio configuration register */
S    #define CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE       (( uint32 )0x01u)
S
S    /* RFCTRL mode transition control */
S    #define CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE          (( uint32 )(( uint32 )0x01u << 15u))
S
S    /* XO is oscillating status */
S    #define CY_SYS_XTAL_BLERD_FSM_XO_AMP_DETECT         (( uint32 )0x01u)
S
S    /* BB bump configuration 2 */
S    #define CY_SYS_XTAL_BLERD_BB_XO_CAPTRIM_X1_MASK     (( uint32 )(( uint32 )0x7Fu <<  8u))
S    #define CY_SYS_XTAL_BLERD_BB_XO_CAPTRIM_X2_MASK     (( uint32 )(( uint32 )0x7Fu <<  0u))
S    #define CY_SYS_XTAL_BLERD_BB_XO_CAPTRIM_X1_ADD_CAP  (( uint32 )(( uint32 )0x01u << 15u))
S    #define CY_SYS_XTAL_BLERD_BB_XO_CAPTRIM_X2_ADD_CAP  (( uint32 )(( uint32 )0x01u <<  7u))
S
S    /* BB bump configuration 1 */
S    #define CY_SYS_XTAL_BLERD_BB_XO_TRIM                ((uint32) 0x2002u)
S
S
S    /**
S    * \addtogroup group_api_eco
S    * @{
S    */
S     #define CY_SYS_CLK_ECO_DIV1    ((uint32) 0x00)     /**< CySysClkWriteEcoDiv(): HFCLK = ECO / 1 */
S     #define CY_SYS_CLK_ECO_DIV2    ((uint32) 0x01)     /**< CySysClkWriteEcoDiv(): HFCLK = ECO / 2 */
S     #define CY_SYS_CLK_ECO_DIV4    ((uint32) 0x02)     /**< CySysClkWriteEcoDiv(): HFCLK = ECO / 4 */
S     #define CY_SYS_CLK_ECO_DIV8    ((uint32) 0x03)     /**< CySysClkWriteEcoDiv(): HFCLK = ECO / 8 */
S    /** @} group_api_eco */
S
S    /* CySysClkWriteEcoDiv() - implementation definitions */
S    #define CY_SYS_CLK_XTAL_CLK_DIV_MASK                ((uint32) 0x03)
N#endif  /* (CY_IP_ECO_BLESS) */
N
N#if (CY_IP_ECO_BLESSV3)
X#if ((0 != 0))
S     #define CY_SYS_CLK_ECO_DIV1    ((uint32) 0x00)     /**< CySysClkWriteEcoDiv(): HFCLK = ECO / 1 */
S     #define CY_SYS_CLK_ECO_DIV2    ((uint32) 0x01)     /**< CySysClkWriteEcoDiv(): HFCLK = ECO / 2 */
S     #define CY_SYS_CLK_ECO_DIV4    ((uint32) 0x02)     /**< CySysClkWriteEcoDiv(): HFCLK = ECO / 4 */
S     #define CY_SYS_CLK_ECO_DIV8    ((uint32) 0x03)     /**< CySysClkWriteEcoDiv(): HFCLK = ECO / 8 */
S    /** @} group_api_eco */
S
S    #define CY_SYS_BLESS_HVLDO_STARTUP_DELAY                ((uint32) 2u)
S    #define CY_SYS_BLESS_ISOLATE_DEASSERT_DELAY             ((uint32) 1u)
S    #define CY_SYS_BLESS_ACT_TO_SWITCH_DELAY                ((uint32) 1u)
S    #define CY_SYS_BLESS_HVLDO_DISABLE_DELAY                ((uint32) 1u)
S
S    #define CY_SYS_BLESS_OSC_STARTUP_DELAY_LF               ((uint32) 80u)
S    #define CY_SYS_BLESS_DSM_OFFSET_TO_WAKEUP_INST_LF       ((uint32) 4u)
S    #define CY_SYS_BLESS_ACT_STARTUP_DELAY                  ((uint32) 1u)
S    #define CY_SYS_BLESS_DIG_LDO_STARTUP_DELAY              ((uint32) 1u)
S
S    #define CY_SYS_BLESS_XTAL_DISABLE_DELAY                 ((uint32) 1u)
S    #define CY_SYS_BLESS_DIG_LDO_DISABLE_DELAY              ((uint32) 1u)
S
S    #define CY_SYS_BLESS_MT_CFG_ACT_LDO                     ((uint32) 1u)
S    #define CY_SYS_BLESS_MT_CFG_ENABLE_BLERD                ((uint32) 1u)
S    #define CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON                ((uint32) 1u)
S    
S    #define CY_SYS_BLESS_MT_STATUS_BLERD_IDLE               ((uint32) 4u)
S    #define CY_SYS_BLESS_MT_STATUS_SWITCH_EN                ((uint32) 5u)
S    #define CY_SYS_BLESS_MT_STATUS_ACTIVE                   ((uint32) 6u)
S    #define CY_SYS_BLESS_MT_STATUS_ISOLATE                  ((uint32) 7u)
S    
S    #define CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK             ((uint32) 0x20u)
S    #define CY_SYS_BLESS_BLERD_ACTIVE_INTR_STAT             ((uint32) 0x8u)
S
S    #define CY_SYS_BLESS_MT_STATUS_CURR_STATE_MASK          ((uint32) 0x1Eu)
S    
S    #define CY_SYS_RCB_CTRL_ENABLED                         ((uint32) 1u)
S    #define CY_SYS_RCB_CTRL_DIV_ENABLED                     ((uint32) 1u)
S    #define CY_SYS_RCB_CTRL_DIV                             ((uint32) 2u)
S    #define CY_SYS_RCB_CTRL_LEAD                            ((uint32) 3u)
S    #define CY_SYS_RCB_CTRL_LAG                             ((uint32) 3u)
S    
S    #define CY_SYS_RCB_INTR_RCB_DONE                        ((uint32) 1u)
S    #define CY_SYS_RCB_INTR_RCB_RX_FIFO_NOT_EMPTY           ((uint32) ((uint32)0x1u << 17u))
S    #define CY_SYS_RCB_INTR_CLEAR                           ((uint32) 0xFFFFFFFFu)
S    #define CY_SYS_RCB_RBUS_RD_CMD                          ((uint32) ((uint32)0x1u << 31u))
S    #define CY_SYS_RCB_RBUS_DIG_CLK_SET                     ((uint32) 0x1e030400u)
S    #define CY_SYS_RCB_RBUS_FREQ_NRST_SET                   ((uint32) 0x1e021800u)
S    #define CY_SYS_RCB_RBUS_FREQ_XTAL_DIV_SET               ((uint32) 0x1e090040u)
S    #define CY_SYS_RCB_RBUS_FREQ_XTAL_NODIV_SET             ((uint32) 0x1e090000u)
S    #define CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET                 ((uint32) 0x1e080000u)
S    #define CY_SYS_RCB_RBUS_IB_VAL                          ((uint32) ((uint32)0x1u << 9u))
S    #define CY_SYS_RCB_RBUS_IB_MASK                         ((uint32) ((uint32)0x3u << 9u))
S    #define CY_SYS_RCB_RBUS_TRIM_VAL                        ((uint32) (CYDEV_RCB_RBUS_RF_DCXO_CAP_TRIM << 1u))
S    #define CY_SYS_RCB_RBUS_TRIM_MASK                       ((uint32) ((uint32)0xFFu << 1u))
S    #define CY_SYS_RCB_RBUS_VAL_MASK                        ((uint32) 0xFFFFu)
S
S    #define CY_SYS_RCBLL_CPU_ACCESS                         ((uint32) 0u)
S    #define CY_SYS_RCBLL_BLELL_ACCESS                       ((uint32) 1u)
S
S    #define CY_SYS_BLELL_CMD_ENTER_DSM                      ((uint32) 0x50u)
S    
S    #define CY_SYS_BLESS_MT_DELAY_CFG_INIT \
S           ((CY_SYS_BLESS_HVLDO_STARTUP_DELAY    <<  CYFLD_BLE_BLESS_HVLDO_STARTUP_DELAY__OFFSET) | \
S            (CY_SYS_BLESS_ISOLATE_DEASSERT_DELAY <<  CYFLD_BLE_BLESS_ISOLATE_DEASSERT_DELAY__OFFSET) | \
S            (CY_SYS_BLESS_ACT_TO_SWITCH_DELAY    <<  CYFLD_BLE_BLESS_ACT_TO_SWITCH_DELAY__OFFSET) | \
S            (CY_SYS_BLESS_HVLDO_DISABLE_DELAY    <<  CYFLD_BLE_BLESS_HVLDO_DISABLE_DELAY__OFFSET))
X    #define CY_SYS_BLESS_MT_DELAY_CFG_INIT            ((CY_SYS_BLESS_HVLDO_STARTUP_DELAY    <<  CYFLD_BLE_BLESS_HVLDO_STARTUP_DELAY__OFFSET) |             (CY_SYS_BLESS_ISOLATE_DEASSERT_DELAY <<  CYFLD_BLE_BLESS_ISOLATE_DEASSERT_DELAY__OFFSET) |             (CY_SYS_BLESS_ACT_TO_SWITCH_DELAY    <<  CYFLD_BLE_BLESS_ACT_TO_SWITCH_DELAY__OFFSET) |             (CY_SYS_BLESS_HVLDO_DISABLE_DELAY    <<  CYFLD_BLE_BLESS_HVLDO_DISABLE_DELAY__OFFSET))
S
S    #define CY_SYS_BLESS_MT_DELAY_CFG2_INIT \
S           ((CY_SYS_BLESS_OSC_STARTUP_DELAY_LF          << CYFLD_BLE_BLESS_OSC_STARTUP_DELAY_LF__OFFSET) | \
S            (CY_SYS_BLESS_DSM_OFFSET_TO_WAKEUP_INST_LF  << CYFLD_BLE_BLESS_DSM_OFFSET_TO_WAKEUP_INSTANT_LF__OFFSET) | \
S            (CY_SYS_BLESS_ACT_STARTUP_DELAY             << CYFLD_BLE_BLESS_ACT_STARTUP_DELAY__OFFSET) | \
S            (CY_SYS_BLESS_DIG_LDO_STARTUP_DELAY         << CYFLD_BLE_BLESS_DIG_LDO_STARTUP_DELAY__OFFSET))
X    #define CY_SYS_BLESS_MT_DELAY_CFG2_INIT            ((CY_SYS_BLESS_OSC_STARTUP_DELAY_LF          << CYFLD_BLE_BLESS_OSC_STARTUP_DELAY_LF__OFFSET) |             (CY_SYS_BLESS_DSM_OFFSET_TO_WAKEUP_INST_LF  << CYFLD_BLE_BLESS_DSM_OFFSET_TO_WAKEUP_INSTANT_LF__OFFSET) |             (CY_SYS_BLESS_ACT_STARTUP_DELAY             << CYFLD_BLE_BLESS_ACT_STARTUP_DELAY__OFFSET) |             (CY_SYS_BLESS_DIG_LDO_STARTUP_DELAY         << CYFLD_BLE_BLESS_DIG_LDO_STARTUP_DELAY__OFFSET))
S    
S    #define CY_SYS_BLESS_MT_DELAY_CFG3_INIT \
S           ((CY_SYS_BLESS_XTAL_DISABLE_DELAY    << CYFLD_BLE_BLESS_XTAL_DISABLE_DELAY__OFFSET) | \
S            (CY_SYS_BLESS_DIG_LDO_DISABLE_DELAY << CYFLD_BLE_BLESS_DIG_LDO_DISABLE_DELAY__OFFSET))
X    #define CY_SYS_BLESS_MT_DELAY_CFG3_INIT            ((CY_SYS_BLESS_XTAL_DISABLE_DELAY    << CYFLD_BLE_BLESS_XTAL_DISABLE_DELAY__OFFSET) |             (CY_SYS_BLESS_DIG_LDO_DISABLE_DELAY << CYFLD_BLE_BLESS_DIG_LDO_DISABLE_DELAY__OFFSET))
S    
S    #define CY_SYS_BLESS_MT_CFG_CLEAR \
S                                                  ~(CY_GET_FIELD_MASK(32, CYFLD_BLE_BLESS_ENABLE_BLERD) | \
S                                                    CY_GET_FIELD_MASK(32, CYFLD_BLE_BLESS_DPSLP_ECO_ON) | \
S                                                    CY_GET_FIELD_MASK(32, CYFLD_BLE_BLESS_ACT_LDO_NOT_BUCK))
X    #define CY_SYS_BLESS_MT_CFG_CLEAR                                                   ~(CY_GET_FIELD_MASK(32, CYFLD_BLE_BLESS_ENABLE_BLERD) |                                                     CY_GET_FIELD_MASK(32, CYFLD_BLE_BLESS_DPSLP_ECO_ON) |                                                     CY_GET_FIELD_MASK(32, CYFLD_BLE_BLESS_ACT_LDO_NOT_BUCK))
S    
S    #define CY_SYS_BLESS_MT_CFG_INIT \
S           ((CY_SYS_BLESS_MT_CFG_ENABLE_BLERD           <<  CYFLD_BLE_BLESS_ENABLE_BLERD__OFFSET) | \
S            (CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON           <<  CYFLD_BLE_BLESS_DPSLP_ECO_ON__OFFSET) | \
S            (CY_SYS_BLESS_MT_CFG_ACT_LDO                <<  CYFLD_BLE_BLESS_ACT_LDO_NOT_BUCK__OFFSET))
X    #define CY_SYS_BLESS_MT_CFG_INIT            ((CY_SYS_BLESS_MT_CFG_ENABLE_BLERD           <<  CYFLD_BLE_BLESS_ENABLE_BLERD__OFFSET) |             (CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON           <<  CYFLD_BLE_BLESS_DPSLP_ECO_ON__OFFSET) |             (CY_SYS_BLESS_MT_CFG_ACT_LDO                <<  CYFLD_BLE_BLESS_ACT_LDO_NOT_BUCK__OFFSET))
S    
S    #define CY_SYS_RCB_CTRL_CLEAR \
S                                                  ~(CY_GET_FIELD_MASK(32, CYFLD_BLE_RCB_ENABLED) | \
S                                                    CY_GET_FIELD_MASK(32, CYFLD_BLE_RCB_DIV_ENABLED) | \
S                                                    CY_GET_FIELD_MASK(32, CYFLD_BLE_RCB_DIV) | \
S                                                    CY_GET_FIELD_MASK(32, CYFLD_BLE_RCB_LEAD) | \
S                                                    CY_GET_FIELD_MASK(32, CYFLD_BLE_RCB_LAG))
X    #define CY_SYS_RCB_CTRL_CLEAR                                                   ~(CY_GET_FIELD_MASK(32, CYFLD_BLE_RCB_ENABLED) |                                                     CY_GET_FIELD_MASK(32, CYFLD_BLE_RCB_DIV_ENABLED) |                                                     CY_GET_FIELD_MASK(32, CYFLD_BLE_RCB_DIV) |                                                     CY_GET_FIELD_MASK(32, CYFLD_BLE_RCB_LEAD) |                                                     CY_GET_FIELD_MASK(32, CYFLD_BLE_RCB_LAG))
S    
S    #define CY_SYS_RCB_CTRL_INIT \
S           ((CY_SYS_RCB_CTRL_ENABLED            <<  CYFLD_BLE_RCB_ENABLED__OFFSET) | \
S            (CY_SYS_RCB_CTRL_DIV_ENABLED        <<  CYFLD_BLE_RCB_DIV_ENABLED__OFFSET) | \
S            (CY_SYS_RCB_CTRL_DIV                <<  CYFLD_BLE_RCB_DIV__OFFSET) | \
S            (CY_SYS_RCB_CTRL_LEAD               <<  CYFLD_BLE_RCB_LEAD__OFFSET) | \
S            (CY_SYS_RCB_CTRL_LAG                <<  CYFLD_BLE_RCB_LAG__OFFSET))
X    #define CY_SYS_RCB_CTRL_INIT            ((CY_SYS_RCB_CTRL_ENABLED            <<  CYFLD_BLE_RCB_ENABLED__OFFSET) |             (CY_SYS_RCB_CTRL_DIV_ENABLED        <<  CYFLD_BLE_RCB_DIV_ENABLED__OFFSET) |             (CY_SYS_RCB_CTRL_DIV                <<  CYFLD_BLE_RCB_DIV__OFFSET) |             (CY_SYS_RCB_CTRL_LEAD               <<  CYFLD_BLE_RCB_LEAD__OFFSET) |             (CY_SYS_RCB_CTRL_LAG                <<  CYFLD_BLE_RCB_LAG__OFFSET))
S
S    /* CySysClkWriteEcoDiv() - implementation definitions */
S    #define CY_SYS_CLK_XTAL_CLK_DIV_MASK                    ((uint32) 0x03)
S    
S    #define CY_SYS_BLE_CLK_ECO_FREQ_32MHZ                   (32)
S
N#endif  /* (CY_IP_ECO_BLESSV3) */
N
N
N/* CySysClkImoEnableWcoLock() / CySysClkImoDisableWcoLock() constants */
N#if (CY_IP_IMO_TRIMMABLE_BY_WCO)
X#if ((0 == 0))
N    /* Fimo = DPLL_MULT  * Fwco */
N
N    #define CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE               (( uint32 )(( uint32 )0x01u << 30u))
N
N    /* Rounding integer division: DPLL_MULT = (Fimo_in_khz + Fwco_in_khz / 2) / Fwco_in_khz */
N    #define CY_SYS_CLK_WCO_DPLL_MULT_VALUE(frequencyMhz)    ((uint32) (((((frequencyMhz) * 1000000u) + 16384u) / 32768u) - 1u))
N    #define CY_SYS_CLK_WCO_DPLL_MULT_MASK                   ((uint32) 0x7FFu)
N
N    #define CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN_SHIFT       (16u)
N    #define CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN_SHIFT       (19u)
N    #define CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_SHIFT       (22u)
N
N    #define CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN_MASK        (( uint32 )(( uint32 )0x07u << CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN_SHIFT))
N    #define CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN_MASK        (( uint32 )(( uint32 )0x07u << CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN_SHIFT))
N    #define CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MASK        (( uint32 )(( uint32 )0xFFu << CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_SHIFT))
N
N    #define CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN             (( uint32 )(( uint32 ) 4u << CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN_SHIFT))
N    #define CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN             (( uint32 )(( uint32 ) 2u << CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN_SHIFT))
N
N    #define CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX         ((uint32) 0xFFu)
N    #define CY_SYS_CLK_WCO_IMO_TIMEOUT_MS                   ((uint32) 20u)
N
N    #define CY_SYS_CLK_IMO_FREQ_WCO_DPLL_SAFE_POINT         (26u)
N    #define CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_SIZE         (23u)
N    #define CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_OFFSET       (26u)
N
N#endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
N
N
N/*******************************************************************************
N* System API Constants
N*******************************************************************************/
N
N/* CySysGetResetReason() */
N#define CY_SYS_RESET_WDT_SHIFT          (0u)
N#define CY_SYS_RESET_PROTFAULT_SHIFT    (3u)
N#define CY_SYS_RESET_SW_SHIFT           (4u)
N
N#define CY_SYS_RESET_WDT                ((uint32)1u << CY_SYS_RESET_WDT_SHIFT      )
N#define CY_SYS_RESET_PROTFAULT          ((uint32)1u << CY_SYS_RESET_PROTFAULT_SHIFT)
N#define CY_SYS_RESET_SW                 ((uint32)1u << CY_SYS_RESET_SW_SHIFT       )
N
N
N/* CySoftwareReset() - implementation definitions */
N
N/* Vector Key */
N#define CY_SYS_AIRCR_VECTKEY_SHIFT      (16u)
N#define CY_SYS_AIRCR_VECTKEY            ((uint32)((uint32)0x05FAu << CY_SYS_AIRCR_VECTKEY_SHIFT))
N#define CY_SYS_AIRCR_VECTKEY_MASK       ((uint32)((uint32)0xFFFFu << CY_SYS_AIRCR_VECTKEY_SHIFT))
N
N/* System Reset Request */
N#define CY_SYS_AIRCR_SYSRESETREQ_SHIFT  (2u)
N#define CY_SYS_AIRCR_SYSRESETREQ        ((uint32)((uint32)1u << CY_SYS_AIRCR_SYSRESETREQ_SHIFT))
N
N
N#if defined(__ARMCC_VERSION)
X#if 1L
N
N    #define CyGlobalIntEnable           do                      \
N                                        {                       \
N                                            __enable_irq();     \
N                                        } while ( 0 )
X    #define CyGlobalIntEnable           do                                                              {                                                                   __enable_irq();                                             } while ( 0 )
N
N    #define CyGlobalIntDisable          do                      \
N                                        {                       \
N                                            __disable_irq();    \
N                                        } while ( 0 )
X    #define CyGlobalIntDisable          do                                                              {                                                                   __disable_irq();                                            } while ( 0 )
N
N#elif defined(__GNUC__) || defined (__ICCARM__)
S
S    #define CyGlobalIntEnable           do                      \
S                                        {                       \
S                                            __asm("CPSIE   i"); \
S                                        } while ( 0 )
X    #define CyGlobalIntEnable           do                                                              {                                                                   __asm("CPSIE   i");                                         } while ( 0 )
S
S    #define CyGlobalIntDisable          do                      \
S                                        {                       \
S                                            __asm("CPSID   i"); \
S                                        } while ( 0 )
X    #define CyGlobalIntDisable          do                                                              {                                                                   __asm("CPSID   i");                                         } while ( 0 )
S
S#else
S    #error No compiler toolchain defined
S    #define CyGlobalIntEnable
S    #define CyGlobalIntDisable
N#endif  /* (__ARMCC_VERSION) */
N
N/* System tick timer */
N#define CY_SYS_SYST_CSR_ENABLE               ((uint32) (0x01u))
N#define CY_SYS_SYST_CSR_ENABLE_INT           ((uint32) (0x02u))
N#define CY_SYS_SYST_CSR_CLK_SOURCE_SHIFT     (0x02u)
N#define CY_SYS_SYST_CSR_COUNTFLAG_SHIFT      (16u)
N#define CY_SYS_SYST_CSR_CLK_SRC_SYSCLK       ((uint32) (1u))
N#define CY_SYS_SYST_CSR_CLK_SRC_LFCLK        (0u)
N#define CY_SYS_SYST_RVR_CNT_MASK             (0x00FFFFFFu)
N#define CY_SYS_SYST_CVR_CNT_MASK             (0x00FFFFFFu)
N#define CY_SYS_SYST_NUM_OF_CALLBACKS         (5u)
N
N
N/*******************************************************************************
N* Macro Name: CyAssert
N********************************************************************************
N* Summary:
N*  Macro that evaluates the expression and, if it is false (evaluates to 0),
N*  the processor is halted.
N*
N*  This macro is evaluated unless NDEBUG is defined.
N*  If NDEBUG is defined, then no code is generated for this macro.
N*  NDEBUG is defined by default for a Release build setting and not defined for
N*  a Debug build setting.
N*
N* Parameters:
N*  expr: Logical expression.  Asserts if false.
N*
N* Return:
N*  None
N*
N*******************************************************************************/
N#if !defined(NDEBUG)
X#if !0L
N    #define CYASSERT(x)                 do                              \
N                                        {                               \
N                                            if(0u == (uint32)(x))               \
N                                            {                           \
N                                                CyHalt((uint8) 0u);     \
N                                            }                           \
N                                        } while ( 0u )
X    #define CYASSERT(x)                 do                                                                      {                                                                           if(0u == (uint32)(x))                                                           {                                                                           CyHalt((uint8) 0u);                                                 }                                                                   } while ( 0u )
N#else
S    #define CYASSERT(x)
N#endif  /* !defined(NDEBUG) */
N
N
N/*******************************************************************************
N* Interrupt API Constants
N*******************************************************************************/
N#define CY_NUM_INTERRUPTS                   (CY_IP_INT_NR)
N
N#define CY_MIN_PRIORITY                     (3u)
N
N#define CY_INT_IRQ_BASE                     (16u)
N#define CY_INT_CLEAR_DISABLE_ALL            (0xFFFFFFFFu)
N#define CY_INT_ENABLE_RANGE_MASK            (0x1Fu)
N
N/* Register n contains priorities for interrupts N=4n .. 4n+3 */
N#define CY_INT_PRIORITY_SHIFT(number)       (( uint32 )6u + (8u * (( uint32 )(number) % 4u)))
N
N/* Mask to get valid range of system priority 0-3 */
N#define CY_INT_PRIORITY_MASK                (( uint32 ) 0x03u)
N
N/* CyIntSetSysVector()/CyIntGetSysVector() - parameter definitions */
N#define CY_INT_NMI_IRQN                      ( 2u)      /* Non Maskable Interrupt      */
N#define CY_INT_HARD_FAULT_IRQN               ( 3u)      /* Hard Fault Interrupt        */
N#define CY_INT_SVCALL_IRQN                   (11u)      /* SV Call Interrupt           */
N#define CY_INT_PEND_SV_IRQN                  (14u)      /* Pend SV Interrupt           */
N#define CY_INT_SYSTICK_IRQN                  (15u)      /* System Tick Interrupt       */
N
N
N#if(CY_IP_SRSSV2)
X#if((0 != 0))
S
S
S    /*******************************************************************************
S    * Low Voltage Detection API Constants
S    *******************************************************************************/
S
S    /* CySysLvdEnable() - parameter definitions */
S    #define CY_LVD_THRESHOLD_1_75_V             (( uint32 )  0u)
S    #define CY_LVD_THRESHOLD_1_80_V             (( uint32 )  1u)
S    #define CY_LVD_THRESHOLD_1_90_V             (( uint32 )  2u)
S    #define CY_LVD_THRESHOLD_2_00_V             (( uint32 )  3u)
S    #define CY_LVD_THRESHOLD_2_10_V             (( uint32 )  4u)
S    #define CY_LVD_THRESHOLD_2_20_V             (( uint32 )  5u)
S    #define CY_LVD_THRESHOLD_2_30_V             (( uint32 )  6u)
S    #define CY_LVD_THRESHOLD_2_40_V             (( uint32 )  7u)
S    #define CY_LVD_THRESHOLD_2_50_V             (( uint32 )  8u)
S    #define CY_LVD_THRESHOLD_2_60_V             (( uint32 )  9u)
S    #define CY_LVD_THRESHOLD_2_70_V             (( uint32 ) 10u)
S    #define CY_LVD_THRESHOLD_2_80_V             (( uint32 ) 11u)
S    #define CY_LVD_THRESHOLD_2_90_V             (( uint32 ) 12u)
S    #define CY_LVD_THRESHOLD_3_00_V             (( uint32 ) 13u)
S    #define CY_LVD_THRESHOLD_3_20_V             (( uint32 ) 14u)
S    #define CY_LVD_THRESHOLD_4_50_V             (( uint32 ) 15u)
S
S    /* CySysLvdEnable()  - implementation definitions */
S    #define CY_LVD_PWR_VMON_CONFIG_LVD_EN           (( uint32 ) 0x01u)
S    #define CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT    (1u)
S    #define CY_LVD_PWR_VMON_CONFIG_LVD_SEL_MASK     (( uint32 ) (0x0F << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT))
S    #define CY_LVD_PROPAGATE_INT_TO_CPU             (( uint32 ) 0x02u)
S    #define CY_LVD_STABILIZE_TIMEOUT_US             (1000u)
S
S    /* CySysLvdGetInterruptSource()/ CySysLvdClearInterrupt()  - parameter definitions  */
S    #define CY_SYS_LVD_INT                          (( uint32 ) 0x02u)
N#endif  /* (CY_IP_SRSSV2) */
N
N/* CyDelay()/CyDelayFreq()  - implementation definitions */
N#define CY_DELAY_MS_OVERFLOW                    (0x8000u)
N#define CY_DELAY_1M_THRESHOLD                   (1000000u)
N#define CY_DELAY_1M_MINUS_1_THRESHOLD           (999999u)
N#define CY_DELAY_1K_THRESHOLD                   (1000u)
N#define CY_DELAY_1K_MINUS_1_THRESHOLD           (999u)
N
N
N/*******************************************************************************
N* ECO
N*******************************************************************************/
N#if (CY_IP_ECO)
X#if (((0 != 0) || (-1 == 1) || (0 != 0) || ((1 != 0) && (1 != 0))))
N    #if (CY_IP_ECO_SRSSV2 || CY_IP_ECO_SRSSLT)
X    #if ((-1 == 1) || ((1 != 0) && (1 != 0)))
N
N        /* CySysClkEcoStart() - implementation definitions */
N        #define CY_SYS_CLK_ECO_CONFIG_CLK_EN_SHIFT          (0u)
N        #define CY_SYS_CLK_ECO_CONFIG_CLK_EN                ((uint32) ((uint32) 1u << CY_SYS_CLK_ECO_CONFIG_CLK_EN_SHIFT))
N        #define CY_SYS_CLK_ECO_CONFIG_CLK_EN_TIMEOUT_US     (10u)
N
N        #define CY_SYS_CLK_ECO_CONFIG_ENABLE_SHIFT          (31u)
N        #define CY_SYS_CLK_ECO_CONFIG_ENABLE                ((uint32) ((uint32) 1u << CY_SYS_CLK_ECO_CONFIG_ENABLE_SHIFT))
N
N        #define CY_SYS_CLK_ECO_STATUS_WATCHDOG_ERROR_SHIFT  (0u)
N        #define CY_SYS_CLK_ECO_STATUS_WATCHDOG_ERROR        ((uint32) ((uint32) 1u << CY_SYS_CLK_ECO_STATUS_WATCHDOG_ERROR_SHIFT))
N
N        #define CY_SYS_CLK_ECO_CONFIG_AGC_EN_SHIFT          (1u)
N        #define CY_SYS_CLK_ECO_CONFIG_AGC_EN                ((uint32) ((uint32) 1u << CY_SYS_CLK_ECO_CONFIG_AGC_EN_SHIFT))
N
N
N        /**
N        * \addtogroup group_api_eco
N        * @{
N        */
N        #define CY_SYS_CLK_ECO_WDTRIM0  (0u)    /**< CySysClkWriteEcoDiv(): HFCLK = ECO / 1 */
N        #define CY_SYS_CLK_ECO_WDTRIM1  (1u)
N        #define CY_SYS_CLK_ECO_WDTRIM2  (2u)
N        #define CY_SYS_CLK_ECO_WDTRIM3  (3u)
N
N        #define CY_SYS_CLK_ECO_ATRIM0   (0u)
N        #define CY_SYS_CLK_ECO_ATRIM1   (1u)
N        #define CY_SYS_CLK_ECO_ATRIM2   (2u)
N        #define CY_SYS_CLK_ECO_ATRIM3   (3u)
N        #define CY_SYS_CLK_ECO_ATRIM4   (4u)
N        #define CY_SYS_CLK_ECO_ATRIM5   (5u)
N        #define CY_SYS_CLK_ECO_ATRIM6   (6u)
N        #define CY_SYS_CLK_ECO_ATRIM7   (7u)
N
N        #define CY_SYS_CLK_ECO_FTRIM0   (0u)
N        #define CY_SYS_CLK_ECO_FTRIM1   (1u)
N        #define CY_SYS_CLK_ECO_FTRIM2   (2u)
N        #define CY_SYS_CLK_ECO_FTRIM3   (3u)
N
N        #define CY_SYS_CLK_ECO_RTRIM0   (0u)
N        #define CY_SYS_CLK_ECO_RTRIM1   (1u)
N        #define CY_SYS_CLK_ECO_RTRIM2   (2u)
N        #define CY_SYS_CLK_ECO_RTRIM3   (3u)
N
N        #define CY_SYS_CLK_ECO_GTRIM0   (0u)
N        #define CY_SYS_CLK_ECO_GTRIM1   (1u)
N        #define CY_SYS_CLK_ECO_GTRIM2   (2u)
N        #define CY_SYS_CLK_ECO_GTRIM3   (3u)
N        /** @} group_api_eco */
N
N        
N        /* CySysClkConfigureEcoTrim() - implementation definitions */
N        #define CY_SYS_CLK_ECO_TRIM0_WDTRIM_SHIFT       (0u)
N        #define CY_SYS_CLK_ECO_TRIM0_WDTRIM_MASK        ((uint32) ((uint32) 3u << CY_SYS_CLK_ECO_TRIM0_WDTRIM_SHIFT))
N
N        #define CY_SYS_CLK_ECO_TRIM0_ATRIM_SHIFT        (2u)
N        #define CY_SYS_CLK_ECO_TRIM0_ATRIM_MASK         ((uint32) ((uint32) 7u << CY_SYS_CLK_ECO_TRIM0_ATRIM_SHIFT))
N
N        #define CY_SYS_CLK_ECO_TRIM1_FTRIM_SHIFT        (0u)
N        #define CY_SYS_CLK_ECO_TRIM1_FTRIM_MASK         ((uint32) ((uint32) 3u << CY_SYS_CLK_ECO_TRIM1_FTRIM_SHIFT))
N
N        #define CY_SYS_CLK_ECO_TRIM1_RTRIM_SHIFT        (2u)
N        #define CY_SYS_CLK_ECO_TRIM1_RTRIM_MASK         ((uint32) ((uint32) 3u << CY_SYS_CLK_ECO_TRIM1_RTRIM_SHIFT))
N
N        #define CY_SYS_CLK_ECO_TRIM1_GTRIM_SHIFT        (4u)
N        #define CY_SYS_CLK_ECO_TRIM1_GTRIM_MASK         ((uint32) ((uint32) 3u << CY_SYS_CLK_ECO_TRIM1_GTRIM_SHIFT))
N
N
N        /* CySysClkConfigureEcoDrive() - implementation definitions */
N        #define CY_SYS_CLK_ECO_FREQ_KHZ_MIN     (4000u)
N        #define CY_SYS_CLK_ECO_FREQ_KHZ_MAX     (33333u)
N
N        #define CY_SYS_CLK_ECO_MAX_AMPL_MIN_mV  (500u)
N        #define CY_SYS_CLK_ECO_TRIM_BOUNDARY    (1200u)
N
N        /* Constant coefficient: 5u * 4u * CY_M_PI * CY_M_PI * 4 / 10 */
N        #define CY_SYS_CLK_ECO_GMMIN_COEFFICIENT    (79u)
N
N        #define CY_SYS_CLK_ECO_FREQ_FOR_FTRIM0  (30000u)
N        #define CY_SYS_CLK_ECO_FREQ_FOR_FTRIM1  (24000u)
N        #define CY_SYS_CLK_ECO_FREQ_FOR_FTRIM2  (17000u)
N
N        #define CY_SYS_CLK_ECO_AMPL_FOR_ATRIM0  (600u)
N        #define CY_SYS_CLK_ECO_AMPL_FOR_ATRIM1  (700u)
N        #define CY_SYS_CLK_ECO_AMPL_FOR_ATRIM2  (800u)
N        #define CY_SYS_CLK_ECO_AMPL_FOR_ATRIM3  (900u)
N        #define CY_SYS_CLK_ECO_AMPL_FOR_ATRIM4  (1025u)
N        #define CY_SYS_CLK_ECO_AMPL_FOR_ATRIM5  (1150u)
N        #define CY_SYS_CLK_ECO_AMPL_FOR_ATRIM6  (1275u)
N
N    #endif  /* (CY_IP_ECO_SRSSV2 || CY_IP_ECO_SRSSLT) */
N#endif /* (CY_IP_ECO) */
N
N
N/*******************************************************************************
N* Access Arbitration API Constants
N*******************************************************************************/
N#if (CY_IP_DMAC_PRESENT)
X#if ((1 == 1))
N    #define CY_SYS_CPUSS_RAM_CTL_ARB_SHIFT          (17u)
N    #define CY_SYS_CPUSS_RAM_CTL_ARB_MASK           ((uint32) ((uint32) 3u << CY_SYS_CPUSS_RAM_CTL_ARB_SHIFT))
N
N    #define CY_SYS_CPUSS_FLASH_CTL_ARB_SHIFT        (17u)
N    #define CY_SYS_CPUSS_FLASH_CTL_ARB_MASK         ((uint32) ((uint32) 3u << CY_SYS_CPUSS_FLASH_CTL_ARB_SHIFT))
N
N    #define CY_SYS_CPUSS_DMAC_CTL_ARB_SHIFT         (17u)
N    #define CY_SYS_CPUSS_DMAC_CTL_ARB_MASK          ((uint32) ((uint32) 3u << CY_SYS_CPUSS_DMAC_CTL_ARB_SHIFT))
N
N    #define CY_SYS_CPUSS_SL_CTL_ARB_SHIFT           (17u)
N    #define CY_SYS_CPUSS_SL_CTL_ARB_MASK            ((uint32) ((uint32) 3u << CY_SYS_CPUSS_SL_CTL_ARB_SHIFT))
N
N#endif /* (CY_IP_DMAC_PRESENT) */
N
N
N#if (CY_IP_DMAC_PRESENT)
X#if ((1 == 1))
N    #define CY_SYS_RAM_ACCESS_ARB_PRIORITY_CPU              (0u)
N    #define CY_SYS_RAM_ACCESS_ARB_PRIORITY_DMA              (1u)
N    #define CY_SYS_RAM_ACCESS_ARB_PRIORITY_ROUND            (2u)
N    #define CY_SYS_RAM_ACCESS_ARB_PRIORITY_ROUND_STICKY     (3u)
N#endif /* (CY_IP_DMAC_PRESENT) */
N
N
N/*******************************************************************************
N* Programmable Voltage Reference API
N*******************************************************************************/
N#if (CY_IP_PASS)
X#if ((0 == 1))
S
S    #define CYFLD_PASS_VREF_ENABLE__OFFSET     (CYFLD_PASS_VREF0_ENABLE__OFFSET )
S    #define CYFLD_PASS_VREF_ENABLE__SIZE       (CYFLD_PASS_VREF0_ENABLE__SIZE   )
S    #define CYFLD_PASS_VREF_SUP_SEL__OFFSET    (CYFLD_PASS_VREF0_SUP_SEL__OFFSET)
S    #define CYFLD_PASS_VREF_SUP_SEL__SIZE      (CYFLD_PASS_VREF0_SUP_SEL__SIZE  )
S    #define CYFLD_PASS_VREF_SEL__OFFSET        (CYFLD_PASS_VREF0_SEL__OFFSET    )
S    #define CYFLD_PASS_VREF_SEL__SIZE          (CYFLD_PASS_VREF0_SEL__SIZE      )
S
S    /* CySysSetGlobalVrefSource() */
S    #define CY_SYS_VREF_SOURCE_BG           (0u)
S    #define CY_SYS_VREF_SOURCE_VDDA         (1u)
S
S    /* CySysSetGlobalVrefBgGain() */
S    #define CY_SYS_VREF_BG_GAINx1           (1u)
S    #define CY_SYS_VREF_BG_GAINx2           (2u)
S
S    #ifdef CyDesignWideVoltageReference_PRB_REF
S        #define CYREG_PASS_PRB_REF          (CyDesignWideVoltageReference_PRB_REF)
S    #endif
S
S    #define  CY_SYS_VREF_BG_BUFFER_TRIM_SIGN_BIT    (0x20u)
S
N#endif /* (CY_IP_PASS) */
N
N
N/***************************************
N* Registers
N***************************************/
N
N
N/*******************************************************************************
N* Clocks API Registers
N*******************************************************************************/
N#define CY_SYS_CLK_IMO_TRIM1_REG            (*(reg32 *) CYREG_CLK_IMO_TRIM1)
N#define CY_SYS_CLK_IMO_TRIM1_PTR            ( (reg32 *) CYREG_CLK_IMO_TRIM1)
N
N#define CY_SYS_CLK_IMO_TRIM2_REG            (*(reg32 *) CYREG_CLK_IMO_TRIM2)
N#define CY_SYS_CLK_IMO_TRIM2_PTR            ( (reg32 *) CYREG_CLK_IMO_TRIM2)
N
N#define CY_SYS_CLK_IMO_TRIM3_REG            (*(reg32 *) CYREG_CLK_IMO_TRIM3)
N#define CY_SYS_CLK_IMO_TRIM3_PTR            ( (reg32 *) CYREG_CLK_IMO_TRIM3)
N
N#if(CY_IP_SRSSV2)
X#if((0 != 0))
S    #define CY_SYS_CLK_IMO_TRIM4_REG            (*(reg32 *) CYREG_CLK_IMO_TRIM4)
S    #define CY_SYS_CLK_IMO_TRIM4_PTR            ( (reg32 *) CYREG_CLK_IMO_TRIM4)
N#endif /* (CY_IP_SRSSV2) */
N
N#define CY_SYS_CLK_IMO_CONFIG_REG           (*(reg32 *) CYREG_CLK_IMO_CONFIG)
N#define CY_SYS_CLK_IMO_CONFIG_PTR           ( (reg32 *) CYREG_CLK_IMO_CONFIG)
N
N
N#define CY_SYS_CLK_SELECT_REG               (*(reg32 *) CYREG_CLK_SELECT)
N#define CY_SYS_CLK_SELECT_PTR               ( (reg32 *) CYREG_CLK_SELECT)
N
N#if(CY_IP_SRSSV2)
X#if((0 != 0))
S
S    #if(CY_IP_HOBTO_DEVICE)
S        #define CY_SFLASH_IMO_TRIM_REG(number)      ( ((reg8 *) CYREG_SFLASH_IMO_TRIM0)[number])
S        #define CY_SFLASH_IMO_TRIM_PTR(number)      (&((reg8 *) CYREG_SFLASH_IMO_TRIM0)[number])
S    #else
S        #define CY_SFLASH_IMO_TRIM_REG(number)      ( ((reg8 *) CYREG_SFLASH_IMO_TRIM00)[number])
S        #define CY_SFLASH_IMO_TRIM_PTR(number)      (&((reg8 *) CYREG_SFLASH_IMO_TRIM00)[number])
S    #endif /* (CY_IP_HOBTO_DEVICE) */
S
S    #define CY_SFLASH_USBMODE_IMO_GAIN_TRIM_REG     (*(reg8 *) CYREG_SFLASH_USBMODE_IMO_GAIN_TRIM)
S    #define CY_SFLASH_USBMODE_IMO_GAIN_TRIM_PTR     ( (reg8 *) CYREG_SFLASH_USBMODE_IMO_GAIN_TRIM)
S    
S    #define CY_SFLASH_USBMODE_IMO_TEMPCO_REG        (*(reg8 *) CYREG_SFLASH_USBMODE_IMO_TEMPCO)
S    #define CY_SFLASH_USBMODE_IMO_TEMPCO_PTR        ( (reg8 *) CYREG_SFLASH_USBMODE_IMO_TEMPCO)
S    
S    #define CY_SFLASH_CU_IMO_TRIM_USBMODE_24_REG    (*(reg8 *) CYREG_SFLASH_CU_IMO_TRIM_USBMODE_24)
S    #define CY_SFLASH_CU_IMO_TRIM_USBMODE_24_PTR    ( (reg8 *) CYREG_SFLASH_CU_IMO_TRIM_USBMODE_24)
S
S    #define CY_SFLASH_CU_IMO_TRIM_USBMODE_48_REG    (*(reg8 *) CYREG_SFLASH_CU_IMO_TRIM_USBMODE_48)
S    #define CY_SFLASH_CU_IMO_TRIM_USBMODE_48_PTR    ( (reg8 *) CYREG_SFLASH_CU_IMO_TRIM_USBMODE_48)
S    
S    #define CY_SFLASH_S1_TESTPGM_REV_REG        (*(reg8 *) CYSFLASH_S1_testpgm_rev)
S    #define CY_SFLASH_S1_TESTPGM_REV_PTR        ( (reg8 *) CYSFLASH_S1_testpgm_rev)
S
S    #define CY_SFLASH_IMO_MAXF0_REG             (*(reg8 *) CYREG_SFLASH_IMO_MAXF0)
S    #define CY_SFLASH_IMO_MAXF0_PTR             ( (reg8 *) CYREG_SFLASH_IMO_MAXF0)
S
S    #define CY_SFLASH_IMO_ABS0_REG              (*(reg8 *) CYREG_SFLASH_IMO_ABS0)
S    #define CY_SFLASH_IMO_ABS0_PTR              ( (reg8 *) CYREG_SFLASH_IMO_ABS0)
S
S    #define CY_SFLASH_IMO_TMPCO0_REG            (*(reg8 *) CYREG_SFLASH_IMO_TMPCO0)
S    #define CY_SFLASH_IMO_TMPCO0_PTR            ( (reg8 *) CYREG_SFLASH_IMO_TMPCO0)
S
S    #define CY_SFLASH_IMO_MAXF1_REG             (*(reg8 *) CYREG_SFLASH_IMO_MAXF1)
S    #define CY_SFLASH_IMO_MAXF1_PTR             ( (reg8 *) CYREG_SFLASH_IMO_MAXF1)
S
S    #define CY_SFLASH_IMO_ABS1_REG              (*(reg8 *) CYREG_SFLASH_IMO_ABS1)
S    #define CY_SFLASH_IMO_ABS1_PTR              ( (reg8 *) CYREG_SFLASH_IMO_ABS1)
S
S    #define CY_SFLASH_IMO_TMPCO1_REG            (*(reg8 *) CYREG_SFLASH_IMO_TMPCO1)
S    #define CY_SFLASH_IMO_TMPCO1_PTR            ( (reg8 *) CYREG_SFLASH_IMO_TMPCO1)
S
S    #define CY_SFLASH_IMO_MAXF2_REG             (*(reg8 *) CYREG_SFLASH_IMO_MAXF2)
S    #define CY_SFLASH_IMO_MAXF2_PTR             ( (reg8 *) CYREG_SFLASH_IMO_MAXF2)
S
S    #define CY_SFLASH_IMO_ABS2_REG              (*(reg8 *) CYREG_SFLASH_IMO_ABS2)
S    #define CY_SFLASH_IMO_ABS2_PTR              ( (reg8 *) CYREG_SFLASH_IMO_ABS2)
S
S    #define CY_SFLASH_IMO_TMPCO2_REG            (*(reg8 *) CYREG_SFLASH_IMO_TMPCO2)
S    #define CY_SFLASH_IMO_TMPCO2_PTR            ( (reg8 *) CYREG_SFLASH_IMO_TMPCO2)
S
S    #define CY_SFLASH_IMO_MAXF3_REG             (*(reg8 *) CYREG_SFLASH_IMO_MAXF3)
S    #define CY_SFLASH_IMO_MAXF3_PTR             ( (reg8 *) CYREG_SFLASH_IMO_MAXF3)
S
S    #define CY_SFLASH_IMO_ABS3_REG              (*(reg8 *) CYREG_SFLASH_IMO_ABS3)
S    #define CY_SFLASH_IMO_ABS3_PTR              ( (reg8 *) CYREG_SFLASH_IMO_ABS3)
S
S    #define CY_SFLASH_IMO_TMPCO3_REG            (*(reg8 *) CYREG_SFLASH_IMO_TMPCO3)
S    #define CY_SFLASH_IMO_TMPCO3_PTR            ( (reg8 *) CYREG_SFLASH_IMO_TMPCO3)
S
S    #define CY_SFLASH_IMO_ABS4_REG              (*(reg8 *) CYREG_SFLASH_IMO_ABS4)
S    #define CY_SFLASH_IMO_ABS4_PTR              ( (reg8 *) CYREG_SFLASH_IMO_ABS4)
S
S    #define CY_SFLASH_IMO_TMPCO4_REG            (*(reg8 *) CYREG_SFLASH_IMO_TMPCO4)
S    #define CY_SFLASH_IMO_TMPCO4_PTR            ( (reg8 *) CYREG_SFLASH_IMO_TMPCO4)
S
S    #define CY_PWR_BG_TRIM4_REG                 (*(reg32 *) CYREG_PWR_BG_TRIM4)
S    #define CY_PWR_BG_TRIM4_PTR                 ( (reg32 *) CYREG_PWR_BG_TRIM4)
S
S    #define CY_PWR_BG_TRIM5_REG                 (*(reg32 *) CYREG_PWR_BG_TRIM5)
S    #define CY_PWR_BG_TRIM5_PTR                 ( (reg32 *) CYREG_PWR_BG_TRIM5)
S
S    #if (CY_IP_IMO_TRIMMABLE_BY_USB)
S
S        #define CY_SFLASH_IMO_TRIM_USBMODE_24_REG   (*(reg8 *) CYREG_SFLASH_IMO_TRIM_USBMODE_24)
S        #define CY_SFLASH_IMO_TRIM_USBMODE_24_PTR   ( (reg8 *) CYREG_SFLASH_IMO_TRIM_USBMODE_24)
S
S        #define CY_SFLASH_IMO_TRIM_USBMODE_48_REG   (*(reg8 *) CYREG_SFLASH_IMO_TRIM_USBMODE_48)
S        #define CY_SFLASH_IMO_TRIM_USBMODE_48_PTR   ( (reg8 *) CYREG_SFLASH_IMO_TRIM_USBMODE_48)
S
S    #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
S
N#else
N
N    #define CY_SYS_CLK_IMO_SELECT_REG           (*(reg32 *) CYREG_CLK_IMO_SELECT)
N    #define CY_SYS_CLK_IMO_SELECT_PTR           ( (reg32 *) CYREG_CLK_IMO_SELECT)
N
N    #define CY_SFLASH_IMO_TCTRIM_REG(number)    ( ((reg8 *) CYREG_SFLASH_IMO_TCTRIM_LT0)[number])
N    #define CY_SFLASH_IMO_TCTRIM_PTR(number)    (&((reg8 *) CYREG_SFLASH_IMO_TCTRIM_LT0)[number])
N
N    #define CY_SFLASH_IMO_TRIM_REG(number)      ( ((reg8 *) CYREG_SFLASH_IMO_TRIM_LT0)[number])
N    #define CY_SFLASH_IMO_TRIM_PTR(number)      (&((reg8 *) CYREG_SFLASH_IMO_TRIM_LT0)[number])
N
N    #if (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSLT)
X    #if ((0 != 0) && (!(0 != 0)))
S
S        #define CY_SFLASH_IMO_TRIM_USBMODE_24_REG   (*(reg8 *) CYREG_SFLASH_IMO_TRIM_USBMODE_24)
S        #define CY_SFLASH_IMO_TRIM_USBMODE_24_PTR   ( (reg8 *) CYREG_SFLASH_IMO_TRIM_USBMODE_24)
S
S        #define CY_SFLASH_IMO_TRIM_USBMODE_48_REG   (*(reg8 *) CYREG_SFLASH_IMO_TRIM_USBMODE_48)
S        #define CY_SFLASH_IMO_TRIM_USBMODE_48_PTR   ( (reg8 *) CYREG_SFLASH_IMO_TRIM_USBMODE_48)
S        
N    #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSLT) */
N
N#endif  /* (CY_IP_SRSSV2) */
N
N#if(CY_IP_IMO_TRIMMABLE_BY_USB)
X#if((0 != 0))
S    /* USB control 0 Register */
S    #define CY_SYS_CLK_USBDEVv2_CR1_REG           (*(reg32 *) CYREG_USBDEVv2_CR1)
S    #define CY_SYS_CLK_USBDEVv2_CR1_PTR           ( (reg32 *) CYREG_USBDEVv2_CR1)
N#endif /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
N
N
N/*******************************************************************************
N* ECO
N*******************************************************************************/
N#if (CY_IP_ECO)
X#if (((0 != 0) || (-1 == 1) || (0 != 0) || ((1 != 0) && (1 != 0))))
N    #if (CY_IP_ECO_BLESS)
X    #if ((0 != 0))
S
S        /* Radio configuration register */
S        #define CY_SYS_XTAL_BLESS_RF_CONFIG_REG         (*(reg32 *) CYREG_BLE_BLESS_RF_CONFIG)
S        #define CY_SYS_XTAL_BLESS_RF_CONFIG_PTR         ( (reg32 *) CYREG_BLE_BLESS_RF_CONFIG)
S
S        /* RFCTRL mode transition control */
S        #define CY_SYS_XTAL_BLERD_DBUS_REG              (*(reg32 *) CYREG_BLE_BLERD_DBUS)
S        #define CY_SYS_XTAL_BLERD_DBUS_PTR              ( (reg32 *) CYREG_BLE_BLERD_DBUS)
S
S        /* RFCTRL state information */
S        #define CY_SYS_XTAL_BLERD_FSM_REG              (*(reg32 *) CYREG_BLE_BLERD_FSM)
S        #define CY_SYS_XTAL_BLERD_FSM_PTR              ( (reg32 *) CYREG_BLE_BLERD_FSM)
S
S        /* BB bump configuration 1 */
S        #define CY_SYS_XTAL_BLERD_BB_XO_REG             (*(reg32 *) CYREG_BLE_BLERD_BB_XO)
S        #define CY_SYS_XTAL_BLERD_BB_XO_PTR             ( (reg32 *) CYREG_BLE_BLERD_BB_XO)
S
S        /* BB bump configuration 2 */
S        #define CY_SYS_XTAL_BLERD_BB_XO_CAPTRIM_REG     (*(reg32 *) CYREG_BLE_BLERD_BB_XO_CAPTRIM)
S        #define CY_SYS_XTAL_BLERD_BB_XO_CAPTRIM_PTR     ( (reg32 *) CYREG_BLE_BLERD_BB_XO_CAPTRIM)
S
S        /* Crystal clock divider configuration register */
S        #define CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG      (*(reg32 *) CYREG_BLE_BLESS_XTAL_CLK_DIV_CONFIG)
S        #define CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_PTR      ( (reg32 *) CYREG_BLE_BLESS_XTAL_CLK_DIV_CONFIG)
S
S    #elif (CY_IP_ECO_BLESSV3)
X    #elif ((0 != 0))
S        /* Crystal clock divider configuration register */
S        #define CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG      (*(reg32 *) CYREG_BLE_BLESS_XTAL_CLK_DIV_CONFIG)
S        #define CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_PTR      ( (reg32 *) CYREG_BLE_BLESS_XTAL_CLK_DIV_CONFIG)
S        
S        /* RCB registers */
S        #define CY_SYS_RCB_CTRL_REG                     (*(reg32 *) CYREG_BLE_RCB_CTRL)
S        #define CY_SYS_RCB_CTRL_PTR                     ( (reg32 *) CYREG_BLE_RCB_CTRL)
S        #define CY_SYS_RCB_TX_FIFO_WR_REG               (*(reg32 *) CYREG_BLE_RCB_TX_FIFO_WR)
S        #define CY_SYS_RCB_TX_FIFO_WR_PTR               ( (reg32 *) CYREG_BLE_RCB_TX_FIFO_WR)
S        #define CY_SYS_RCB_RX_FIFO_RD_REG               (*(reg32 *) CYREG_BLE_RCB_RX_FIFO_RD)
S        #define CY_SYS_RCB_RX_FIFO_RD_PTR               ( (reg32 *) CYREG_BLE_RCB_RX_FIFO_RD)
S        #define CY_SYS_RCB_INTR_REG                     (*(reg32 *) CYREG_BLE_RCB_INTR)
S        #define CY_SYS_RCB_INTR_PTR                     ( (reg32 *) CYREG_BLE_RCB_INTR)
S        #define CY_SYS_RCB_INTR_MASK_REG                (*(reg32 *) CYREG_BLE_RCB_INTR_MASK)
S        #define CY_SYS_RCB_INTR_MASK_PTR                ( (reg32 *) CYREG_BLE_RCB_INTR_MASK)
S        
S                                                            
S        /* BLESS registers */
S        #define CY_SYS_BLESS_MT_CFG_REG                 (*(reg32 *) CYREG_BLE_BLESS_MT_CFG)
S        #define CY_SYS_BLESS_MT_CFG_PTR                 ( (reg32 *) CYREG_BLE_BLESS_MT_CFG)
S        #define CY_SYS_BLESS_MT_STATUS_REG              (*(reg32 *) CYREG_BLE_BLESS_MT_STATUS)
S        #define CY_SYS_BLESS_MT_STATUS_PTR              ( (reg32 *) CYREG_BLE_BLESS_MT_STATUS)
S        #define CY_SYS_BLESS_INTR_STAT_REG              (*(reg32 *) CYREG_BLE_BLESS_INTR_STAT)
S        #define CY_SYS_BLESS_INTR_STAT_PTR              ( (reg32 *) CYREG_BLE_BLESS_INTR_STAT)
S        #define CY_SYS_BLESS_INTR_MASK_REG              (*(reg32 *) CYREG_BLE_BLESS_INTR_MASK)
S        #define CY_SYS_BLESS_INTR_MASK_PTR              ( (reg32 *) CYREG_BLE_BLESS_INTR_MASK)
S        #define CY_SYS_BLESS_MT_DELAY_CFG_REG           (*(reg32 *) CYREG_BLE_BLESS_MT_DELAY_CFG)
S        #define CY_SYS_BLESS_MT_DELAY_CFG_PTR           ( (reg32 *) CYREG_BLE_BLESS_MT_DELAY_CFG)
S        #define CY_SYS_BLESS_MT_DELAY_CFG2_REG          (*(reg32 *) CYREG_BLE_BLESS_MT_DELAY_CFG2)
S        #define CY_SYS_BLESS_MT_DELAY_CFG2_PTR          ( (reg32 *) CYREG_BLE_BLESS_MT_DELAY_CFG2)
S        #define CY_SYS_BLESS_MT_DELAY_CFG3_REG          (*(reg32 *) CYREG_BLE_BLESS_MT_DELAY_CFG3)
S        #define CY_SYS_BLESS_MT_DELAY_CFG3_PTR          ( (reg32 *) CYREG_BLE_BLESS_MT_DELAY_CFG3)
S        
S        /* BLELL registers */
S        #define CY_SYS_BLELL_COMMAND_REG                (*(reg32 *) CYREG_BLE_BLELL_COMMAND_REGISTER)
S        #define CY_SYS_BLELL_COMMAND_PTR                ( (reg32 *) CYREG_BLE_BLELL_COMMAND_REGISTER)        
S
N    #elif (CY_IP_ECO_SRSSLT)
X    #elif (((1 != 0) && (1 != 0)))
N
N        /* ECO Clock Select Register */
N        #define CY_SYS_ECO_CLK_SELECT_REG       (*(reg32 *) CYREG_EXCO_CLK_SELECT)
N        #define CY_SYS_ECO_CLK_SELECT_PTR       ( (reg32 *) CYREG_EXCO_CLK_SELECT)
N        
N        /* ECO Configuration Register */
N        #define CY_SYS_CLK_ECO_CONFIG_REG       (*(reg32 *) CYREG_EXCO_ECO_CONFIG)
N        #define CY_SYS_CLK_ECO_CONFIG_PTR       ( (reg32 *) CYREG_EXCO_ECO_CONFIG)
N
N        /* ECO Status Register */
N        #define CY_SYS_CLK_ECO_STATUS_REG       (*(reg32 *) CYREG_EXCO_ECO_STATUS)
N        #define CY_SYS_CLK_ECO_STATUS_PTR       ( (reg32 *) CYREG_EXCO_ECO_STATUS)
N
N        /* PLL Configuration Register */
N        #define CY_SYS_CLK_PLL0_CONFIG_REG      (*(reg32 *) CYREG_EXCO_PLL_CONFIG)
N        #define CY_SYS_CLK_PLL0_CONFIG_PTR      ( (reg32 *) CYREG_EXCO_PLL_CONFIG)
N        
N        /* PLL Status Register */
N        #define CY_SYS_CLK_PLL_STATUS_REG       (*(reg32 *) CYREG_EXCO_PLL_STATUS)
N        #define CY_SYS_CLK_PLL_STATUS_PTR       ( (reg32 *) CYREG_EXCO_PLL_STATUS)
N
N        #define CY_SYS_CLK_PLL_BASE             (*(volatile cy_sys_clk_pll_struct *) CYREG_EXCO_PLL_CONFIG)        
N        
N        /* ECO Trim0 Register */
N        #define CY_SYS_CLK_ECO_TRIM0_REG        (*(reg32 *) CYREG_EXCO_ECO_TRIM0)
N        #define CY_SYS_CLK_ECO_TRIM0_PTR        ( (reg32 *) CYREG_EXCO_ECO_TRIM0)
N
N        /* ECO Trim1 Register */
N        #define CY_SYS_CLK_ECO_TRIM1_REG        (*(reg32 *) CYREG_EXCO_ECO_TRIM1)
N        #define CY_SYS_CLK_ECO_TRIM1_PTR        ( (reg32 *) CYREG_EXCO_ECO_TRIM1)
N        
N        /* PLL Trim Register */
N        #define CY_SYS_CLK_PLL_TRIM_REG         (*(reg32 *) CYREG_EXCO_PLL_TRIM)
N        #define CY_SYS_CLK_PLL_TRIM_PTR         ( (reg32 *) CYREG_EXCO_PLL_TRIM)
N        
N        #define CY_SYS_EXCO_PGM_CLK_REG         (*(reg32 *) CYREG_EXCO_EXCO_PGM_CLK) 
N        #define CY_SYS_EXCO_PGM_CLK_PTR         ( (reg32 *) CYREG_EXCO_EXCO_PGM_CLK)
N        
N    #else
S        /* ECO Configuration Register */
S        #define CY_SYS_CLK_ECO_CONFIG_REG        (*(reg32 *) CYREG_CLK_ECO_CONFIG)
S        #define CY_SYS_CLK_ECO_CONFIG_PTR        ( (reg32 *) CYREG_CLK_ECO_CONFIG)
S
S        /* ECO Status Register */
S        #define CY_SYS_CLK_ECO_STATUS_REG        (*(reg32 *) CYREG_CLK_ECO_STATUS)
S        #define CY_SYS_CLK_ECO_STATUS_PTR        ( (reg32 *) CYREG_CLK_ECO_STATUS)
S
S        /* ECO Trim0 Register */
S        #define CY_SYS_CLK_ECO_TRIM0_REG         (*(reg32 *) CYREG_CLK_ECO_TRIM0)
S        #define CY_SYS_CLK_ECO_TRIM0_PTR         ( (reg32 *) CYREG_CLK_ECO_TRIM0)
S
S        /* ECO Trim1 Register */
S        #define CY_SYS_CLK_ECO_TRIM1_REG         (*(reg32 *) CYREG_CLK_ECO_TRIM1)
S        #define CY_SYS_CLK_ECO_TRIM1_PTR         ( (reg32 *) CYREG_CLK_ECO_TRIM1)
N    #endif  /* (CY_IP_ECO_BLESS) */
N#endif /* (CY_IP_ECO) */
N
N
N/* CySysClkImoEnableWcoLock() / CySysClkImoDisableWcoLock() registers */
N#if (CY_IP_IMO_TRIMMABLE_BY_WCO)
X#if ((0 == 0))
N    /* WCO DPLL Register */
N    #define CY_SYS_CLK_WCO_DPLL_REG                 (*(reg32 *) CYREG_WCO_DPLL)
N    #define CY_SYS_CLK_WCO_DPLL_PTR                 ( (reg32 *) CYREG_WCO_DPLL)
N#endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
N
N
N#if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
X#if ((0 == 0) && (0 != 0))
S    /* Oscillator Interface Control */
S    #define CY_SYS_CLK_OSCINTF_CTL_REG              (*(reg32 *) CYREG_CLK_OSCINTF_CTL)
S    #define CY_SYS_CLK_OSCINTF_CTL_PTR              ( (reg32 *) CYREG_CLK_OSCINTF_CTL)
N#endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
N
N
N/*******************************************************************************
N* PLL
N*******************************************************************************/
N#if (CY_IP_SRSSV2 && CY_IP_PLL)
X#if ((0 != 0) && (1 == 1))
S
S    /* PLL #0 Configuration Register */
S    #define CY_SYS_CLK_PLL0_CONFIG_REG      (*(reg32 *) CYREG_CLK_PLL0_CONFIG)
S    #define CY_SYS_CLK_PLL0_CONFIG_PTR      ( (reg32 *) CYREG_CLK_PLL0_CONFIG)
S
S    /* PLL #0 Status Register */
S    #define CY_SYS_CLK_PLL0_STATUS_REG      (*(reg32 *) CYREG_CLK_PLL0_STATUS)
S    #define CY_SYS_CLK_PLL0_STATUS_PTR      ( (reg32 *) CYREG_CLK_PLL0_STATUS)
S
S
S    /* PLL #1 Configuration Register */
S    #define CY_SYS_CLK_PLL1_CONFIG_REG      (*(reg32 *) CYREG_CLK_PLL1_CONFIG)
S    #define CY_SYS_CLK_PLL1_CONFIG_PTR      ( (reg32 *) CYREG_CLK_PLL1_CONFIG)
S
S    /* PLL #1 Status Register */
S    #define CY_SYS_CLK_PLL1_STATUS_REG      (*(reg32 *) CYREG_CLK_PLL1_STATUS)
S    #define CY_SYS_CLK_PLL1_STATUS_PTR      ( (reg32 *) CYREG_CLK_PLL1_STATUS)
S
S    #define CY_SYS_CLK_PLL_BASE     (*(volatile cy_sys_clk_pll_struct *) CYREG_CLK_PLL0_CONFIG)
S
N#endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
N
N
N/*******************************************************************************
N* System API Registers
N*******************************************************************************/
N#if (CY_IP_CPUSS_CM0)
X#if ((0 == 1))
S    #define CY_SYS_AIRCR_REG                (*(reg32 *) CYREG_CM0_AIRCR)
S    #define CY_SYS_AIRCR_PTR                ( (reg32 *) CYREG_CM0_AIRCR)
N#else /* CY_IP_CPUSS_CM0PLUS */
N    #define CY_SYS_AIRCR_REG                (*(reg32 *) CYREG_CM0P_AIRCR)
N    #define CY_SYS_AIRCR_PTR                ( (reg32 *) CYREG_CM0P_AIRCR)
N#endif /* (CY_IP_CPUSS_CM0) */
N
N/* Reset Cause Observation Register */
N#define CY_SYS_RES_CAUSE_REG                (*(reg32 *) CYREG_RES_CAUSE)
N#define CY_SYS_RES_CAUSE_PTR                ( (reg32 *) CYREG_RES_CAUSE)
N
N#if(CY_IP_SRSSV2)
X#if((0 != 0))
S
S    /*******************************************************************************
S    * Low Voltage Detection
S    *******************************************************************************/
S
S    /* Voltage Monitoring Trim and Configuration */
S    #define CY_LVD_PWR_VMON_CONFIG_REG          (*(reg32 *) CYREG_PWR_VMON_CONFIG)
S    #define CY_LVD_PWR_VMON_CONFIG_PTR          ( (reg32 *) CYREG_PWR_VMON_CONFIG)
S
S    /* Power System Interrupt Mask Register */
S    #define CY_LVD_PWR_INTR_MASK_REG            (*(reg32 *) CYREG_PWR_INTR_MASK)
S    #define CY_LVD_PWR_INTR_MASK_PTR            ( (reg32 *) CYREG_PWR_INTR_MASK)
S
S    /* Power System Interrupt Register */
S    #define CY_LVD_PWR_INTR_REG                 (*(reg32 *) CYREG_PWR_INTR)
S    #define CY_LVD_PWR_INTR_PTR                 ( (reg32 *) CYREG_PWR_INTR)
S
N#endif  /* (CY_IP_SRSSV2) */
N
N
N/*******************************************************************************
N* Interrupt API Registers
N*******************************************************************************/
N#define CY_INT_VECT_TABLE                   ( (cyisraddress **) CYDEV_SRAM_BASE)
N
N#if (CY_IP_CPUSS_CM0)
X#if ((0 == 1))
S    #define CY_INT_PRIORITY_REG(number)         ( ((reg32 *) CYREG_CM0_IPR0)[(number)/4u])
S    #define CY_INT_PRIORITY_PTR(number)         (&((reg32 *) CYREG_CM0_IPR0)[(number)/4u])
S
S    #define CY_INT_ENABLE_REG                   (*(reg32 *) CYREG_CM0_ISER)
S    #define CY_INT_ENABLE_PTR                   ( (reg32 *) CYREG_CM0_ISER)
S
S    #define CY_INT_CLEAR_REG                    (*(reg32 *) CYREG_CM0_ICER)
S    #define CY_INT_CLEAR_PTR                    ( (reg32 *) CYREG_CM0_ICER)
S
S    #define CY_INT_SET_PEND_REG                 (*(reg32 *) CYREG_CM0_ISPR)
S    #define CY_INT_SET_PEND_PTR                 ( (reg32 *) CYREG_CM0_ISPR)
S
S    #define CY_INT_CLR_PEND_REG                 (*(reg32 *) CYREG_CM0_ICPR)
S    #define CY_INT_CLR_PEND_PTR                 ( (reg32 *) CYREG_CM0_ICPR)
N#else /* CY_IP_CPUSS_CM0PLUS */
N    #define CY_INT_PRIORITY_REG(number)         ( ((reg32 *) CYREG_CM0P_IPR0)[(number)/4u])
N    #define CY_INT_PRIORITY_PTR(number)         (&((reg32 *) CYREG_CM0P_IPR0)[(number)/4u])
N
N    #define CY_INT_ENABLE_REG                   (*(reg32 *) CYREG_CM0P_ISER)
N    #define CY_INT_ENABLE_PTR                   ( (reg32 *) CYREG_CM0P_ISER)
N
N    #define CY_INT_CLEAR_REG                    (*(reg32 *) CYREG_CM0P_ICER)
N    #define CY_INT_CLEAR_PTR                    ( (reg32 *) CYREG_CM0P_ICER)
N
N    #define CY_INT_SET_PEND_REG                 (*(reg32 *) CYREG_CM0P_ISPR)
N    #define CY_INT_SET_PEND_PTR                 ( (reg32 *) CYREG_CM0P_ISPR)
N
N    #define CY_INT_CLR_PEND_REG                 (*(reg32 *) CYREG_CM0P_ICPR)
N    #define CY_INT_CLR_PEND_PTR                 ( (reg32 *) CYREG_CM0P_ICPR)
N#endif /* (CY_IP_CPUSS_CM0) */
N
N/*******************************************************************************
N* System tick API Registers
N*******************************************************************************/
N#if (CY_IP_CPUSS_CM0)
X#if ((0 == 1))
S    #define CY_SYS_SYST_CSR_REG                 (*(reg32 *) CYREG_CM0_SYST_CSR)
S    #define CY_SYS_SYST_CSR_PTR                 ( (reg32 *) CYREG_CM0_SYST_CSR)
S
S    #define CY_SYS_SYST_RVR_REG                 (*(reg32 *) CYREG_CM0_SYST_RVR)
S    #define CY_SYS_SYST_RVR_PTR                 ( (reg32 *) CYREG_CM0_SYST_RVR)
S
S    #define CY_SYS_SYST_CVR_REG                 (*(reg32 *) CYREG_CM0_SYST_CVR)
S    #define CY_SYS_SYST_CVR_PTR                 ( (reg32 *) CYREG_CM0_SYST_CVR)
S
S    #define CY_SYS_SYST_CALIB_REG               (*(reg32 *) CYREG_CM0_SYST_CALIB)
S    #define CY_SYS_SYST_CALIB_PTR               ( (reg32 *) CYREG_CM0_SYST_CALIB)
N#else /* CY_IP_CPUSS_CM0PLUS */
N    #define CY_SYS_SYST_CSR_REG                 (*(reg32 *) CYREG_CM0P_SYST_CSR)
N    #define CY_SYS_SYST_CSR_PTR                 ( (reg32 *) CYREG_CM0P_SYST_CSR)
N
N    #define CY_SYS_SYST_RVR_REG                 (*(reg32 *) CYREG_CM0P_SYST_RVR)
N    #define CY_SYS_SYST_RVR_PTR                 ( (reg32 *) CYREG_CM0P_SYST_RVR)
N
N    #define CY_SYS_SYST_CVR_REG                 (*(reg32 *) CYREG_CM0P_SYST_CVR)
N    #define CY_SYS_SYST_CVR_PTR                 ( (reg32 *) CYREG_CM0P_SYST_CVR)
N
N    #define CY_SYS_SYST_CALIB_REG               (*(reg32 *) CYREG_CM0P_SYST_CALIB)
N    #define CY_SYS_SYST_CALIB_PTR               ( (reg32 *) CYREG_CM0P_SYST_CALIB)
N#endif /* (CY_IP_CPUSS_CM0) */
N
N
N/*******************************************************************************
N* Access Arbitration API Registers
N*******************************************************************************/
N#if (CY_IP_DMAC_PRESENT)
X#if ((1 == 1))
N    /* RAM control register */
N    #define CY_SYS_CPUSS_RAM_CTL_REG            (*(reg32 *) CYREG_CPUSS_RAM_CTL)
N    #define CY_SYS_CPUSS_RAM_CTL_PTR            ( (reg32 *) CYREG_CPUSS_RAM_CTL)
N
N    /* FLASH control register */
N    #define CY_SYS_CPUSS_FLASH_CTL_REG          (*(reg32 *) CYREG_CPUSS_FLASH_CTL)
N    #define CY_SYS_CPUSS_FLASH_CTL_PTR          ( (reg32 *) CYREG_CPUSS_FLASH_CTL)
N
N    /* DMAC control register */
N    #define CY_SYS_CPUSS_DMAC_CTL_REG            (*(reg32 *) CYREG_CPUSS_DMAC_CTL)
N    #define CY_SYS_CPUSS_DMAC_CTL_PTR            ( (reg32 *) CYREG_CPUSS_DMAC_CTL)
N
N    #if (CY_IP_SL_NR >= 1)
X    #if ((3) >= 1)
N        /* Slave control register # 0 */
N        #if (CY_IP_SL_NR == 1)
X        #if ((3) == 1)
S            #define CY_SYS_CPUSS_SL_CTL0_REG            (*(reg32 *) CYREG_CPUSS_SL_CTL)
S            #define CY_SYS_CPUSS_SL_CTL0_PTR            ( (reg32 *) CYREG_CPUSS_SL_CTL)
N        #else
N            #define CY_SYS_CPUSS_SL_CTL0_REG            (*(reg32 *) CYREG_CPUSS_SL_CTL0)
N            #define CY_SYS_CPUSS_SL_CTL0_PTR            ( (reg32 *) CYREG_CPUSS_SL_CTL0)
N        #endif /* (CY_IP_SL_NR == 1) */
N    #endif /* (CY_IP_SL_NR > 0) */
N
N    #if (CY_IP_SL_NR >= 2)
X    #if ((3) >= 2)
N        /* Slave control register # 1 */
N        #define CY_SYS_CPUSS_SL_CTL1_REG            (*(reg32 *) CYREG_CPUSS_SL_CTL1)
N        #define CY_SYS_CPUSS_SL_CTL1_PTR            ( (reg32 *) CYREG_CPUSS_SL_CTL1)
N    #endif /* (CY_IP_SL_NR >= 1) */
N
N    #if (CY_IP_SL_NR >= 3)
X    #if ((3) >= 3)
N        /* Slave control register # 2 */
N        #define CY_SYS_CPUSS_SL_CTL2_REG            (*(reg32 *) CYREG_CPUSS_SL_CTL2)
N        #define CY_SYS_CPUSS_SL_CTL2_PTR            ( (reg32 *) CYREG_CPUSS_SL_CTL2)
N    #endif /* (CY_IP_SL_NR >= 2) */
N
N#endif /* (CY_IP_DMAC_PRESENT) */
N
N
N/*******************************************************************************
N* The following code is OBSOLETE and must not be used.
N*
N* If the obsoleted macro definitions are intended for use in the application,
N* use the following scheme, redefine your own versions of these definitions:
N*    #ifdef <OBSOLETED_DEFINE>
N*        #undef  <OBSOLETED_DEFINE>
N*        #define <OBSOLETED_DEFINE>      (<New Value>)
N*    #endif
N*
N* Note: Redefine obsoleted macro definitions with caution. They might still be
N*       used in the application and their modification might lead to unexpected
N*       consequences.
N*******************************************************************************/
N#define CYINT_IRQ_BASE                     (CY_INT_IRQ_BASE)
N#define CY_SYS_CLK_IMO_TRIM4_GAIN          (CY_SYS_CLK_IMO_TRIM4_USB_GAIN)
N
N/* SFLASH0 block has been renamed to SFLASH */
N#if (CY_PSOC4_4100 || CY_PSOC4_4200 || CY_PSOC4_4000U)
X#if ((16u == 18u) || (16u == 18u) || (16u == 5u))
S    #if !defined(CYREG_SFLASH_IMO_TRIM21)
S        #define CYREG_SFLASH_IMO_TRIM21         (CYREG_SFLASH0_IMO_TRIM21)
S    #endif  /* !defined(CYREG_SFLASH_IMO_TRIM21) */
N#endif /* (CY_PSOC4_4100 || CY_PSOC4_4200 || CY_PSOC4_4000U) */
N
N#if (CY_IP_CPUSS_CM0)
X#if ((0 == 1))
S
S    #define CY_SYS_CM0_AIRCR_REG                (CY_SYS_AIRCR_REG)
S    #define CY_SYS_CM0_AIRCR_PTR                (CY_SYS_AIRCR_PTR)
S
S    #define CY_SYS_CM0_AIRCR_VECTKEY_SHIFT      (CY_SYS_AIRCR_VECTKEY_SHIFT    )
S    #define CY_SYS_CM0_AIRCR_VECTKEY            (CY_SYS_AIRCR_VECTKEY          )
S    #define CY_SYS_CM0_AIRCR_VECTKEY_MASK       (CY_SYS_AIRCR_VECTKEY_MASK     )
S    #define CY_SYS_CM0_AIRCR_SYSRESETREQ_SHIFT  (CY_SYS_AIRCR_SYSRESETREQ_SHIFT)
S    #define CY_SYS_CM0_AIRCR_SYSRESETREQ        (CY_SYS_AIRCR_SYSRESETREQ      )
S
N#endif /* (CY_IP_CPUSS_CM0) */
N
N#endif  /* CY_BOOT_CYLIB_H */
N
N
N/* [] END OF FILE */
L 25 "Generated_Source\PSoC4\SPI_0_OLED_FLASH.h" 2
N
N/* SCB IP block v0 is available in PSoC 4100/PSoC 4200 */
N#define SPI_0_OLED_FLASH_CY_SCBIP_V0    (CYIPBLOCK_m0s8scb_VERSION == 0u)
N/* SCB IP block v1 is available in PSoC 4000 */
N#define SPI_0_OLED_FLASH_CY_SCBIP_V1    (CYIPBLOCK_m0s8scb_VERSION == 1u)
N/* SCB IP block v2 is available in all other devices */
N#define SPI_0_OLED_FLASH_CY_SCBIP_V2    (CYIPBLOCK_m0s8scb_VERSION >= 2u)
N
N/** Component version major.minor */
N#define SPI_0_OLED_FLASH_COMP_VERSION_MAJOR    (4)
N#define SPI_0_OLED_FLASH_COMP_VERSION_MINOR    (0)
N    
N#define SPI_0_OLED_FLASH_SCB_MODE           (2u)
N
N/* SCB modes enum */
N#define SPI_0_OLED_FLASH_SCB_MODE_I2C       (0x01u)
N#define SPI_0_OLED_FLASH_SCB_MODE_SPI       (0x02u)
N#define SPI_0_OLED_FLASH_SCB_MODE_UART      (0x04u)
N#define SPI_0_OLED_FLASH_SCB_MODE_EZI2C     (0x08u)
N#define SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG  (0xFFu)
N
N/* Condition compilation depends on operation mode: Unconfigured implies apply to all modes */
N#define SPI_0_OLED_FLASH_SCB_MODE_I2C_CONST_CFG       (SPI_0_OLED_FLASH_SCB_MODE_I2C       == SPI_0_OLED_FLASH_SCB_MODE)
N#define SPI_0_OLED_FLASH_SCB_MODE_SPI_CONST_CFG       (SPI_0_OLED_FLASH_SCB_MODE_SPI       == SPI_0_OLED_FLASH_SCB_MODE)
N#define SPI_0_OLED_FLASH_SCB_MODE_UART_CONST_CFG      (SPI_0_OLED_FLASH_SCB_MODE_UART      == SPI_0_OLED_FLASH_SCB_MODE)
N#define SPI_0_OLED_FLASH_SCB_MODE_EZI2C_CONST_CFG     (SPI_0_OLED_FLASH_SCB_MODE_EZI2C     == SPI_0_OLED_FLASH_SCB_MODE)
N#define SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG  (SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG  == SPI_0_OLED_FLASH_SCB_MODE)
N
N/* Condition compilation for includes */
N#define SPI_0_OLED_FLASH_SCB_MODE_I2C_INC      (0u !=(SPI_0_OLED_FLASH_SCB_MODE_I2C   & SPI_0_OLED_FLASH_SCB_MODE))
N#define SPI_0_OLED_FLASH_SCB_MODE_EZI2C_INC    (0u !=(SPI_0_OLED_FLASH_SCB_MODE_EZI2C & SPI_0_OLED_FLASH_SCB_MODE))
N#if (!SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if (!(2 == 1u))
N    #define SPI_0_OLED_FLASH_SCB_MODE_SPI_INC  (0u !=(SPI_0_OLED_FLASH_SCB_MODE_SPI   & SPI_0_OLED_FLASH_SCB_MODE))
N    #define SPI_0_OLED_FLASH_SCB_MODE_UART_INC (0u !=(SPI_0_OLED_FLASH_SCB_MODE_UART  & SPI_0_OLED_FLASH_SCB_MODE))
N#else
S    #define SPI_0_OLED_FLASH_SCB_MODE_SPI_INC  (0u)
S    #define SPI_0_OLED_FLASH_SCB_MODE_UART_INC (0u)
N#endif /* (!SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N/* Interrupts remove options */
N#define SPI_0_OLED_FLASH_REMOVE_SCB_IRQ             (1u)
N#define SPI_0_OLED_FLASH_SCB_IRQ_INTERNAL           (0u == SPI_0_OLED_FLASH_REMOVE_SCB_IRQ)
N
N#define SPI_0_OLED_FLASH_REMOVE_UART_RX_WAKEUP_IRQ  (1u)
N#define SPI_0_OLED_FLASH_UART_RX_WAKEUP_IRQ         (0u == SPI_0_OLED_FLASH_REMOVE_UART_RX_WAKEUP_IRQ)
N
N/* SCB interrupt enum */
N#define SPI_0_OLED_FLASH_SCB_INTR_MODE_NONE     (0u)
N#define SPI_0_OLED_FLASH_SCB_INTR_MODE_INTERNAL (1u)
N#define SPI_0_OLED_FLASH_SCB_INTR_MODE_EXTERNAL (2u)
N
N/* Internal clock remove option */
N#define SPI_0_OLED_FLASH_REMOVE_SCB_CLK     (0u)
N#define SPI_0_OLED_FLASH_SCB_CLK_INTERNAL   (0u == SPI_0_OLED_FLASH_REMOVE_SCB_CLK)
N
N
N/***************************************
N*       Includes
N****************************************/
N
N#include "SPI_0_OLED_FLASH_PINS.h"
L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_PINS.h" 1
N/***************************************************************************//**
N* \file SPI_0_OLED_FLASH_PINS.h
N* \version 4.0
N*
N* \brief
N*  This file provides constants and parameter values for the pin components
N*  buried into SCB Component.
N*
N* Note:
N*
N********************************************************************************
N* \copyright
N* Copyright 2013-2017, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_SCB_PINS_SPI_0_OLED_FLASH_H)
X#if !0L
N#define CY_SCB_PINS_SPI_0_OLED_FLASH_H
N
N#include "cydevice_trm.h"
N#include "cyfitter.h"
N#include "cytypes.h"
N
N
N/***************************************
N*   Conditional Compilation Parameters
N****************************************/
N
N/* Unconfigured pins */
N#define SPI_0_OLED_FLASH_REMOVE_RX_WAKE_SCL_MOSI_PIN  (1u)
N#define SPI_0_OLED_FLASH_REMOVE_RX_SCL_MOSI_PIN      (1u)
N#define SPI_0_OLED_FLASH_REMOVE_TX_SDA_MISO_PIN      (1u)
N#define SPI_0_OLED_FLASH_REMOVE_CTS_SCLK_PIN      (1u)
N#define SPI_0_OLED_FLASH_REMOVE_RTS_SS0_PIN      (1u)
N#define SPI_0_OLED_FLASH_REMOVE_SS1_PIN                 (1u)
N#define SPI_0_OLED_FLASH_REMOVE_SS2_PIN                 (1u)
N#define SPI_0_OLED_FLASH_REMOVE_SS3_PIN                 (1u)
N
N/* Mode defined pins */
N#define SPI_0_OLED_FLASH_REMOVE_I2C_PINS                (1u)
N#define SPI_0_OLED_FLASH_REMOVE_SPI_MASTER_PINS         (0u)
N#define SPI_0_OLED_FLASH_REMOVE_SPI_MASTER_SCLK_PIN     (0u)
N#define SPI_0_OLED_FLASH_REMOVE_SPI_MASTER_MOSI_PIN     (0u)
N#define SPI_0_OLED_FLASH_REMOVE_SPI_MASTER_MISO_PIN     (0u)
N#define SPI_0_OLED_FLASH_REMOVE_SPI_MASTER_SS0_PIN      (0u)
N#define SPI_0_OLED_FLASH_REMOVE_SPI_MASTER_SS1_PIN      (0u)
N#define SPI_0_OLED_FLASH_REMOVE_SPI_MASTER_SS2_PIN      (1u)
N#define SPI_0_OLED_FLASH_REMOVE_SPI_MASTER_SS3_PIN      (1u)
N#define SPI_0_OLED_FLASH_REMOVE_SPI_SLAVE_PINS          (1u)
N#define SPI_0_OLED_FLASH_REMOVE_SPI_SLAVE_MOSI_PIN      (1u)
N#define SPI_0_OLED_FLASH_REMOVE_SPI_SLAVE_MISO_PIN      (1u)
N#define SPI_0_OLED_FLASH_REMOVE_UART_TX_PIN             (1u)
N#define SPI_0_OLED_FLASH_REMOVE_UART_RX_TX_PIN          (1u)
N#define SPI_0_OLED_FLASH_REMOVE_UART_RX_PIN             (1u)
N#define SPI_0_OLED_FLASH_REMOVE_UART_RX_WAKE_PIN        (1u)
N#define SPI_0_OLED_FLASH_REMOVE_UART_RTS_PIN            (1u)
N#define SPI_0_OLED_FLASH_REMOVE_UART_CTS_PIN            (1u)
N
N/* Unconfigured pins */
N#define SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_PIN (0u == SPI_0_OLED_FLASH_REMOVE_RX_WAKE_SCL_MOSI_PIN)
N#define SPI_0_OLED_FLASH_RX_SCL_MOSI_PIN     (0u == SPI_0_OLED_FLASH_REMOVE_RX_SCL_MOSI_PIN)
N#define SPI_0_OLED_FLASH_TX_SDA_MISO_PIN     (0u == SPI_0_OLED_FLASH_REMOVE_TX_SDA_MISO_PIN)
N#define SPI_0_OLED_FLASH_CTS_SCLK_PIN     (0u == SPI_0_OLED_FLASH_REMOVE_CTS_SCLK_PIN)
N#define SPI_0_OLED_FLASH_RTS_SS0_PIN     (0u == SPI_0_OLED_FLASH_REMOVE_RTS_SS0_PIN)
N#define SPI_0_OLED_FLASH_SS1_PIN                (0u == SPI_0_OLED_FLASH_REMOVE_SS1_PIN)
N#define SPI_0_OLED_FLASH_SS2_PIN                (0u == SPI_0_OLED_FLASH_REMOVE_SS2_PIN)
N#define SPI_0_OLED_FLASH_SS3_PIN                (0u == SPI_0_OLED_FLASH_REMOVE_SS3_PIN)
N
N/* Mode defined pins */
N#define SPI_0_OLED_FLASH_I2C_PINS               (0u == SPI_0_OLED_FLASH_REMOVE_I2C_PINS)
N#define SPI_0_OLED_FLASH_SPI_MASTER_PINS        (0u == SPI_0_OLED_FLASH_REMOVE_SPI_MASTER_PINS)
N#define SPI_0_OLED_FLASH_SPI_MASTER_SCLK_PIN    (0u == SPI_0_OLED_FLASH_REMOVE_SPI_MASTER_SCLK_PIN)
N#define SPI_0_OLED_FLASH_SPI_MASTER_MOSI_PIN    (0u == SPI_0_OLED_FLASH_REMOVE_SPI_MASTER_MOSI_PIN)
N#define SPI_0_OLED_FLASH_SPI_MASTER_MISO_PIN    (0u == SPI_0_OLED_FLASH_REMOVE_SPI_MASTER_MISO_PIN)
N#define SPI_0_OLED_FLASH_SPI_MASTER_SS0_PIN     (0u == SPI_0_OLED_FLASH_REMOVE_SPI_MASTER_SS0_PIN)
N#define SPI_0_OLED_FLASH_SPI_MASTER_SS1_PIN     (0u == SPI_0_OLED_FLASH_REMOVE_SPI_MASTER_SS1_PIN)
N#define SPI_0_OLED_FLASH_SPI_MASTER_SS2_PIN     (0u == SPI_0_OLED_FLASH_REMOVE_SPI_MASTER_SS2_PIN)
N#define SPI_0_OLED_FLASH_SPI_MASTER_SS3_PIN     (0u == SPI_0_OLED_FLASH_REMOVE_SPI_MASTER_SS3_PIN)
N#define SPI_0_OLED_FLASH_SPI_SLAVE_PINS         (0u == SPI_0_OLED_FLASH_REMOVE_SPI_SLAVE_PINS)
N#define SPI_0_OLED_FLASH_SPI_SLAVE_MOSI_PIN     (0u == SPI_0_OLED_FLASH_REMOVE_SPI_SLAVE_MOSI_PIN)
N#define SPI_0_OLED_FLASH_SPI_SLAVE_MISO_PIN     (0u == SPI_0_OLED_FLASH_REMOVE_SPI_SLAVE_MISO_PIN)
N#define SPI_0_OLED_FLASH_UART_TX_PIN            (0u == SPI_0_OLED_FLASH_REMOVE_UART_TX_PIN)
N#define SPI_0_OLED_FLASH_UART_RX_TX_PIN         (0u == SPI_0_OLED_FLASH_REMOVE_UART_RX_TX_PIN)
N#define SPI_0_OLED_FLASH_UART_RX_PIN            (0u == SPI_0_OLED_FLASH_REMOVE_UART_RX_PIN)
N#define SPI_0_OLED_FLASH_UART_RX_WAKE_PIN       (0u == SPI_0_OLED_FLASH_REMOVE_UART_RX_WAKE_PIN)
N#define SPI_0_OLED_FLASH_UART_RTS_PIN           (0u == SPI_0_OLED_FLASH_REMOVE_UART_RTS_PIN)
N#define SPI_0_OLED_FLASH_UART_CTS_PIN           (0u == SPI_0_OLED_FLASH_REMOVE_UART_CTS_PIN)
N
N
N/***************************************
N*             Includes
N****************************************/
N
N#if (SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_PIN)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi.h"
N#endif /* (SPI_0_OLED_FLASH_RX_SCL_MOSI) */
N
N#if (SPI_0_OLED_FLASH_RX_SCL_MOSI_PIN)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_uart_rx_i2c_scl_spi_mosi.h"
N#endif /* (SPI_0_OLED_FLASH_RX_SCL_MOSI) */
N
N#if (SPI_0_OLED_FLASH_TX_SDA_MISO_PIN)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_uart_tx_i2c_sda_spi_miso.h"
N#endif /* (SPI_0_OLED_FLASH_TX_SDA_MISO) */
N
N#if (SPI_0_OLED_FLASH_CTS_SCLK_PIN)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_uart_cts_spi_sclk.h"
N#endif /* (SPI_0_OLED_FLASH_CTS_SCLK) */
N
N#if (SPI_0_OLED_FLASH_RTS_SS0_PIN)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_uart_rts_spi_ss0.h"
N#endif /* (SPI_0_OLED_FLASH_RTS_SS0_PIN) */
N
N#if (SPI_0_OLED_FLASH_SS1_PIN)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_spi_ss1.h"
N#endif /* (SPI_0_OLED_FLASH_SS1_PIN) */
N
N#if (SPI_0_OLED_FLASH_SS2_PIN)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_spi_ss2.h"
N#endif /* (SPI_0_OLED_FLASH_SS2_PIN) */
N
N#if (SPI_0_OLED_FLASH_SS3_PIN)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_spi_ss3.h"
N#endif /* (SPI_0_OLED_FLASH_SS3_PIN) */
N
N#if (SPI_0_OLED_FLASH_I2C_PINS)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_scl.h"
S    #include "SPI_0_OLED_FLASH_sda.h"
N#endif /* (SPI_0_OLED_FLASH_I2C_PINS) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_PINS)
X#if ((0u == (0u)))
N#if (SPI_0_OLED_FLASH_SPI_MASTER_SCLK_PIN)
X#if ((0u == (0u)))
N    #include "SPI_0_OLED_FLASH_sclk_m.h"
L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_sclk_m.h" 1
N/*******************************************************************************
N* File Name: SPI_0_OLED_FLASH_sclk_m.h  
N* Version 2.20
N*
N* Description:
N*  This file contains Pin function prototypes and register defines
N*
N********************************************************************************
N* Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_PINS_SPI_0_OLED_FLASH_sclk_m_H) /* Pins SPI_0_OLED_FLASH_sclk_m_H */
X#if !0L  
N#define CY_PINS_SPI_0_OLED_FLASH_sclk_m_H
N
N#include "cytypes.h"
N#include "cyfitter.h"
N#include "SPI_0_OLED_FLASH_sclk_m_aliases.h"
L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_sclk_m_aliases.h" 1
N/*******************************************************************************
N* File Name: SPI_0_OLED_FLASH_sclk_m.h  
N* Version 2.20
N*
N* Description:
N*  This file contains the Alias definitions for Per-Pin APIs in cypins.h. 
N*  Information on using these APIs can be found in the System Reference Guide.
N*
N* Note:
N*
N********************************************************************************
N* Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_PINS_SPI_0_OLED_FLASH_sclk_m_ALIASES_H) /* Pins SPI_0_OLED_FLASH_sclk_m_ALIASES_H */
X#if !0L  
N#define CY_PINS_SPI_0_OLED_FLASH_sclk_m_ALIASES_H
N
N#include "cytypes.h"
N#include "cyfitter.h"
N#include "cypins.h"
L 1 "Generated_Source\PSoC4\cypins.h" 1
N/*******************************************************************************
N* \file cypins.h
N* \version 5.70
N*
N* \brief This file contains the function prototypes and constants used for
N* port/pin in access and control.
N*
N* \note Documentation of the API's in this file is located in the System
N* Reference Guide provided with PSoC Creator.
N*
N********************************************************************************
N* \copyright
N* Copyright 2008-2018, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_BOOT_CYPINS_H)
X#if !0L
N#define CY_BOOT_CYPINS_H
N
N#include "cytypes.h"
N
N/**
N* \addtogroup group_pins Pins
N* \brief For PSoC 4, there are status registers, data output registers, and port
Nconfiguration registers only, so the macro takes two arguments: port register
Nand pin number. Each port has these registers addresses defined:
NCYREG_PRTx_DR
NCYREG_PRTx_PS
NCYREG_PRTx_PC
N
NThe x is the port number, and the second argument is the pin number.
N
N* @{
N*/
N
N/** @} group_pins */
N
N
N/**************************************
N*       Register Constants
N**************************************/
N
N
N#define CY_SYS_PINS_PC_DATAOUT                 ((uint32) 0x01u)
N#define CY_SYS_PINS_PC_DRIVE_MODE_BITS         ((uint32) 0x03u)
N#define CY_SYS_PINS_PC_DRIVE_MODE_MASK         ((uint32) 0x07u)
N
N
N/**************************************
N*        API Parameter Constants
N**************************************/
N
N/*  SetPinDriveMode */
N#define CY_SYS_PINS_DM_ALG_HIZ                ((uint32) 0x00u)
N#define CY_SYS_PINS_DM_DIG_HIZ                ((uint32) 0x01u)
N#define CY_SYS_PINS_DM_RES_UP                 ((uint32) 0x02u)
N#define CY_SYS_PINS_DM_RES_DWN                ((uint32) 0x03u)
N#define CY_SYS_PINS_DM_OD_LO                  ((uint32) 0x04u)
N#define CY_SYS_PINS_DM_OD_HI                  ((uint32) 0x05u)
N#define CY_SYS_PINS_DM_STRONG                 ((uint32) 0x06u)
N#define CY_SYS_PINS_DM_RES_UPDWN              ((uint32) 0x07u)
N
N
N/**************************************
N*        Compatibility Macros
N**************************************/
N
N#if(CY_IP_HOBTO_DEVICE)
X#if((!(0 == 1)))
N    #define CYREG_PRT0_DR                     (CYREG_GPIO_PRT0_DR)
N    #define CYREG_PRT0_PS                     (CYREG_GPIO_PRT0_PS)
N    #define CYREG_PRT0_PC                     (CYREG_GPIO_PRT0_PC)
N
N    #define CYREG_PRT1_DR                     (CYREG_GPIO_PRT1_DR)
N    #define CYREG_PRT1_PS                     (CYREG_GPIO_PRT1_PS)
N    #define CYREG_PRT1_PC                     (CYREG_GPIO_PRT1_PC)
N
N    #define CYREG_PRT2_DR                     (CYREG_GPIO_PRT2_DR)
N    #define CYREG_PRT2_PS                     (CYREG_GPIO_PRT2_PS)
N    #define CYREG_PRT2_PC                     (CYREG_GPIO_PRT2_PC)
N
N    #define CYREG_PRT3_DR                     (CYREG_GPIO_PRT3_DR)
N    #define CYREG_PRT3_PS                     (CYREG_GPIO_PRT3_PS)
N    #define CYREG_PRT3_PC                     (CYREG_GPIO_PRT3_PC)
N
N    #define CYREG_PRT4_DR                     (CYREG_GPIO_PRT4_DR)
N    #define CYREG_PRT4_PS                     (CYREG_GPIO_PRT4_PS)
N    #define CYREG_PRT4_PC                     (CYREG_GPIO_PRT4_PC)
N
N    #define CYREG_PRT5_DR                     (CYREG_GPIO_PRT5_DR)
N    #define CYREG_PRT5_PS                     (CYREG_GPIO_PRT5_PS)
N    #define CYREG_PRT5_PC                     (CYREG_GPIO_PRT5_PC)
N
N    #define CYREG_PRT6_DR                     (CYREG_GPIO_PRT6_DR)
N    #define CYREG_PRT6_PS                     (CYREG_GPIO_PRT6_PS)
N    #define CYREG_PRT6_PC                     (CYREG_GPIO_PRT6_PC)
N
N    #define CYREG_PRT7_DR                     (CYREG_GPIO_PRT7_DR)
N    #define CYREG_PRT7_PS                     (CYREG_GPIO_PRT7_PS)
N    #define CYREG_PRT7_PC                     (CYREG_GPIO_PRT7_PC)
N
N    #define CYREG_PRT8_DR                     (CYREG_GPIO_PRT8_DR)
N    #define CYREG_PRT8_PS                     (CYREG_GPIO_PRT8_PS)
N    #define CYREG_PRT8_PC                     (CYREG_GPIO_PRT8_PC)
N
N    #define CYREG_PRT9_DR                     (CYREG_GPIO_PRT9_DR)
N    #define CYREG_PRT9_PS                     (CYREG_GPIO_PRT9_PS)
N    #define CYREG_PRT9_PC                     (CYREG_GPIO_PRT9_PC)
N
N    #define CYREG_PRT10_DR                    (CYREG_GPIO_PRT10_DR)
N    #define CYREG_PRT10_PS                    (CYREG_GPIO_PRT10_PS)
N    #define CYREG_PRT10_PC                    (CYREG_GPIO_PRT10_PC)
N
N    #define CYREG_PRT11_DR                    (CYREG_GPIO_PRT11_DR)
N    #define CYREG_PRT11_PS                    (CYREG_GPIO_PRT11_PS)
N    #define CYREG_PRT11_PC                    (CYREG_GPIO_PRT11_PC)
N
N    #define CYREG_PRT12_DR                    (CYREG_GPIO_PRT12_DR)
N    #define CYREG_PRT12_PS                    (CYREG_GPIO_PRT12_PS)
N    #define CYREG_PRT12_PC                    (CYREG_GPIO_PRT12_PC)
N
N    #define CYREG_PRT13_DR                    (CYREG_GPIO_PRT13_DR)
N    #define CYREG_PRT13_PS                    (CYREG_GPIO_PRT13_PS)
N    #define CYREG_PRT13_PC                    (CYREG_GPIO_PRT13_PC)
N
N    #define CYREG_PRT14_DR                    (CYREG_GPIO_PRT14_DR)
N    #define CYREG_PRT14_PS                    (CYREG_GPIO_PRT14_PS)
N    #define CYREG_PRT14_PC                    (CYREG_GPIO_PRT14_PC)
N
N    #define CYREG_PRT15_DR                    (CYREG_GPIO_PRT15_DR)
N    #define CYREG_PRT15_PS                    (CYREG_GPIO_PRT15_PS)
N    #define CYREG_PRT15_PC                    (CYREG_GPIO_PRT15_PC)
N
N#else
S
S    #define CYREG_GPIO_PRT0_DR                (CYREG_PRT0_DR)
S    #define CYREG_GPIO_PRT0_PS                (CYREG_PRT0_PS)
S    #define CYREG_GPIO_PRT0_PC                (CYREG_PRT0_PC)
S
S    #define CYREG_GPIO_PRT1_DR                (CYREG_PRT1_DR)
S    #define CYREG_GPIO_PRT1_PS                (CYREG_PRT1_PS)
S    #define CYREG_GPIO_PRT1_PC                (CYREG_PRT1_PC)
S
S    #define CYREG_GPIO_PRT2_DR                (CYREG_PRT2_DR)
S    #define CYREG_GPIO_PRT2_PS                (CYREG_PRT2_PS)
S    #define CYREG_GPIO_PRT2_PC                (CYREG_PRT2_PC)
S
S    #define CYREG_GPIO_PRT3_DR                (CYREG_PRT3_DR)
S    #define CYREG_GPIO_PRT3_PS                (CYREG_PRT3_PS)
S    #define CYREG_GPIO_PRT3_PC                (CYREG_PRT3_PC)
S
S    #define CYREG_GPIO_PRT4_DR                (CYREG_PRT4_DR)
S    #define CYREG_GPIO_PRT4_PS                (CYREG_PRT4_PS)
S    #define CYREG_GPIO_PRT4_PC                (CYREG_PRT4_PC)
N#endif /* (CY_IP_HOBTO_DEVICE) */
N
N
N/**************************************
N*       Pin API Macros
N**************************************/
N
N/**
N* \defgroup group_pins Pins
N* @{
N*/
N
N/*******************************************************************************
N* Macro Name: CY_SYS_PINS_READ_PIN
N****************************************************************************//**
N*
N* Reads the current value on the pin (pin state, PS).
N*
N* \param portPS Address of the port pin status register (uint32). Definitions
N* for each port are provided in the cydevice_trm.h file  in the form:
N* CYREG_GPIO_PRTx_PS, where x is a port number. The actual number depends on the
N* selected device.
N*
N* \param pin The pin number 0 - 7. The actual number depends on the selected
N* device.
N*
N* \return Zero - logic low, non-zero - logic high.
N*
N*******************************************************************************/
N#define CY_SYS_PINS_READ_PIN(portPS, pin) \
N            (( *(reg32 *)(portPS) >> (pin)) & CY_SYS_PINS_PC_DATAOUT)
X#define CY_SYS_PINS_READ_PIN(portPS, pin)             (( *(reg32 *)(portPS) >> (pin)) & CY_SYS_PINS_PC_DATAOUT)
N
N
N/*******************************************************************************
N* Macro Name: CY_SYS_PINS_SET_PIN
N****************************************************************************//**
N*
N* Set the output value for the pin (data register, DR) to a logic high.
N* Note that this only has an effect for pins configured as software pins that
N* are not driven by hardware.
N*
N* The macro operation is not atomic. It is not guaranteed that shared register
N* will remain uncorrupted during simultaneous read-modify-write operations
N* performed by two threads (main and interrupt threads). To guarantee data
N* integrity in such cases, the macro should be invoked while the specific
N* interrupt is disabled or within critical section (all interrupts are
N* disabled).
N*
N* \param portDR Address of the port output pin data register (uint32).
N* Definitions for each port are provided in the cydevice_trm.h file  in the
N* form: CYREG_GPIO_PRTx_PS, where x is a port number. The actual number depends
N* on the selected device.
N*
N* \param pin The pin number 0 - 7. The actual number depends on the selected
N* device.
N*
N*******************************************************************************/
N#define CY_SYS_PINS_SET_PIN(portDR, pin)     \
N            ( *(reg32 *)(portDR) |= (CY_SYS_PINS_PC_DATAOUT << (pin)) )
X#define CY_SYS_PINS_SET_PIN(portDR, pin)                 ( *(reg32 *)(portDR) |= (CY_SYS_PINS_PC_DATAOUT << (pin)) )
N
N
N/*******************************************************************************
N* Macro Name: CY_SYS_PINS_CLEAR_PIN
N****************************************************************************//**
N*
N* This macro sets the state of the specified pin to zero.
N*
N* The macro operation is not atomic. It is not guaranteed that shared register
N* will remain uncorrupted during simultaneous read-modify-write operations
N* performed by two threads (main and interrupt threads). To guarantee data
N* integrity in such cases, the macro should be invoked while the specific
N* interrupt is disabled or within critical section (all interrupts are
N* disabled).
N*
N* \param portDR Address of the port output pin data register (uint32).
N* Definitions for each port are provided in the cydevice_trm.h file in the
N* form: CYREG_GPIO_PRTx_PS, where x is a port number. The actual number
N* depends on the selected device.
N*
N* \param pin The pin number 0 - 7. The actual number depends on the selected device.
N*
N*******************************************************************************/
N#define CY_SYS_PINS_CLEAR_PIN(portDR, pin)   \
N            ( *(reg32 *)(portDR) &= ~(CY_SYS_PINS_PC_DATAOUT << (pin)) )
X#define CY_SYS_PINS_CLEAR_PIN(portDR, pin)               ( *(reg32 *)(portDR) &= ~(CY_SYS_PINS_PC_DATAOUT << (pin)) )
N
N
N/*******************************************************************************
N* Macro Name: CY_SYS_PINS_SET_DRIVE_MODE
N****************************************************************************//**
N*
N* Sets the drive mode for the pin (DM).
N*
N* The macro operation is not atomic. It is not guaranteed that shared register
N* will remain uncorrupted during simultaneous read-modify-write operations
N* performed by two threads (main and interrupt threads). To guarantee data
N* integrity in such cases, the macro should be invoked while the specific
N* interrupt is disabled or within critical section (all interrupts are
N* disabled).
N*
N* \param portPC: Address of the port configuration register (uint32).
N* Definitions for each port are provided in the cydevice_trm.h file  in the
N* form: CYREG_GPIO_PRTx_PS, where x is a port number. The actual number
N* depends on the selected device.
N*
N* \param pin The pin number 0 - 7. The actual number depends on the selected device.
N*
N* \param mode Desired drive mode.
N*
N*        Define                        Source
N*   CY_SYS_PINS_DM_ALG_HIZ        Analog HiZ
N*   CY_SYS_PINS_DM_DIG_HIZ        Digital HiZ
N*   CY_SYS_PINS_DM_RES_UP         Resistive pull up
N*   CY_SYS_PINS_DM_RES_DWN        Resistive pull down
N*   CY_SYS_PINS_DM_OD_LO          Open drain - drive low
N*   CY_SYS_PINS_DM_OD_HI          Open drain - drive high
N*   CY_SYS_PINS_DM_STRONG         Strong CMOS Output
N*   CY_SYS_PINS_DM_RES_UPDWN      Resistive pull up/down
N*
N*******************************************************************************/
N#define CY_SYS_PINS_SET_DRIVE_MODE(portPC, pin, mode)    \
N            ( *(reg32 *)(portPC) = (*(reg32 *)(portPC) & \
N            ~(CY_SYS_PINS_PC_DRIVE_MODE_MASK << ((pin) * CY_SYS_PINS_PC_DRIVE_MODE_BITS))) | \
N            ((mode) << ((pin) * CY_SYS_PINS_PC_DRIVE_MODE_BITS)))
X#define CY_SYS_PINS_SET_DRIVE_MODE(portPC, pin, mode)                ( *(reg32 *)(portPC) = (*(reg32 *)(portPC) &             ~(CY_SYS_PINS_PC_DRIVE_MODE_MASK << ((pin) * CY_SYS_PINS_PC_DRIVE_MODE_BITS))) |             ((mode) << ((pin) * CY_SYS_PINS_PC_DRIVE_MODE_BITS)))
N
N
N/*******************************************************************************
N* Macro Name: CY_SYS_PINS_READ_DRIVE_MODE
N****************************************************************************//**
N*
N* Reads the drive mode for the pin (DM).
N*
N* \param portPC Address of the port configuration register (uint32). Definitions
N* for each port are provided in the cydevice_trm.h file in the form:
N* CYREG_GPIO_PRTx_PS, where x is a port number. The actual number depends on the
N* selected device.
N*
N* \param pin The pin number 0 - 7. The actual number depends on the selected
N* device.
N*
N* \return mode Current drive mode for the pin:
N* - CY_SYS_PINS_DM_ALG_HIZ        Analog HiZ
N* - CY_SYS_PINS_DM_DIG_HIZ        Digital HiZ
N* - CY_SYS_PINS_DM_RES_UP         Resistive pull up
N* - CY_SYS_PINS_DM_RES_DWN        Resistive pull down
N* - CY_SYS_PINS_DM_OD_LO          Open drain - drive low
N* - CY_SYS_PINS_DM_OD_HI          Open drain - drive high
N* - CY_SYS_PINS_DM_STRONG         Strong CMOS Output
N* - CY_SYS_PINS_DM_RES_UPDWN      Resistive pull up/down
N*
N*******************************************************************************/
N#define CY_SYS_PINS_READ_DRIVE_MODE(portPC, pin)     \
N        (( *(reg32 *)(portPC) & \
N        (CY_SYS_PINS_PC_DRIVE_MODE_MASK << ((pin) * CY_SYS_PINS_PC_DRIVE_MODE_BITS)) ) >> \
N        (pin) * CY_SYS_PINS_PC_DRIVE_MODE_BITS)
X#define CY_SYS_PINS_READ_DRIVE_MODE(portPC, pin)             (( *(reg32 *)(portPC) &         (CY_SYS_PINS_PC_DRIVE_MODE_MASK << ((pin) * CY_SYS_PINS_PC_DRIVE_MODE_BITS)) ) >>         (pin) * CY_SYS_PINS_PC_DRIVE_MODE_BITS)
N
N/** @} group_pins */
N
N/* Defines function macros for mapping PSoC 4 per-pin functions to PSoC 3/5LP style functions  */
N#define CyPins_ReadPin(name)                (CY_SYS_PINS_READ_PIN       (name ## _PS, name ## _SHIFT))
N#define CyPins_SetPin(name)                 (CY_SYS_PINS_SET_PIN        (name ## _DR, name ## _SHIFT))
N#define CyPins_ClearPin(name)               (CY_SYS_PINS_CLEAR_PIN      (name ## _DR, name ## _SHIFT))
N#define CyPins_SetPinDriveMode(name, mode)  (CY_SYS_PINS_SET_DRIVE_MODE (name ## _PC, name ## _SHIFT, mode))
N#define CyPins_ReadPinDriveMode(name)       (CY_SYS_PINS_READ_DRIVE_MODE(name ## _PC, name ## _SHIFT))
N
N
N#endif /* (CY_BOOT_CYPINS_H) */
N
N
N/* [] END OF FILE */
L 24 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_sclk_m_aliases.h" 2
N
N
N/***************************************
N*              Constants        
N***************************************/
N#define SPI_0_OLED_FLASH_sclk_m_0			(SPI_0_OLED_FLASH_sclk_m__0__PC)
N#define SPI_0_OLED_FLASH_sclk_m_0_PS		(SPI_0_OLED_FLASH_sclk_m__0__PS)
N#define SPI_0_OLED_FLASH_sclk_m_0_PC		(SPI_0_OLED_FLASH_sclk_m__0__PC)
N#define SPI_0_OLED_FLASH_sclk_m_0_DR		(SPI_0_OLED_FLASH_sclk_m__0__DR)
N#define SPI_0_OLED_FLASH_sclk_m_0_SHIFT	(SPI_0_OLED_FLASH_sclk_m__0__SHIFT)
N#define SPI_0_OLED_FLASH_sclk_m_0_INTR	((uint16)((uint16)0x0003u << (SPI_0_OLED_FLASH_sclk_m__0__SHIFT*2u)))
N
N#define SPI_0_OLED_FLASH_sclk_m_INTR_ALL	 ((uint16)(SPI_0_OLED_FLASH_sclk_m_0_INTR))
N
N
N#endif /* End Pins SPI_0_OLED_FLASH_sclk_m_ALIASES_H */
N
N
N/* [] END OF FILE */
L 21 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_sclk_m.h" 2
N
N
N/***************************************
N*     Data Struct Definitions
N***************************************/
N
N/**
N* \addtogroup group_structures
N* @{
N*/
N    
N/* Structure for sleep mode support */
Ntypedef struct
N{
N    uint32 pcState; /**< State of the port control register */
N    uint32 sioState; /**< State of the SIO configuration */
N    uint32 usbState; /**< State of the USBIO regulator */
N} SPI_0_OLED_FLASH_sclk_m_BACKUP_STRUCT;
N
N/** @} structures */
N
N
N/***************************************
N*        Function Prototypes             
N***************************************/
N/**
N* \addtogroup group_general
N* @{
N*/
Nuint8   SPI_0_OLED_FLASH_sclk_m_Read(void);
Nvoid    SPI_0_OLED_FLASH_sclk_m_Write(uint8 value);
Nuint8   SPI_0_OLED_FLASH_sclk_m_ReadDataReg(void);
N#if defined(SPI_0_OLED_FLASH_sclk_m__PC) || (CY_PSOC4_4200L) 
X#if 1L || ((16u == 22u)) 
N    void    SPI_0_OLED_FLASH_sclk_m_SetDriveMode(uint8 mode);
N#endif
Nvoid    SPI_0_OLED_FLASH_sclk_m_SetInterruptMode(uint16 position, uint16 mode);
Nuint8   SPI_0_OLED_FLASH_sclk_m_ClearInterrupt(void);
N/** @} general */
N
N/**
N* \addtogroup group_power
N* @{
N*/
Nvoid SPI_0_OLED_FLASH_sclk_m_Sleep(void); 
Nvoid SPI_0_OLED_FLASH_sclk_m_Wakeup(void);
N/** @} power */
N
N
N/***************************************
N*           API Constants        
N***************************************/
N#if defined(SPI_0_OLED_FLASH_sclk_m__PC) || (CY_PSOC4_4200L) 
X#if 1L || ((16u == 22u)) 
N    /* Drive Modes */
N    #define SPI_0_OLED_FLASH_sclk_m_DRIVE_MODE_BITS        (3)
N    #define SPI_0_OLED_FLASH_sclk_m_DRIVE_MODE_IND_MASK    (0xFFFFFFFFu >> (32 - SPI_0_OLED_FLASH_sclk_m_DRIVE_MODE_BITS))
N
N    /**
N    * \addtogroup group_constants
N    * @{
N    */
N        /** \addtogroup driveMode Drive mode constants
N         * \brief Constants to be passed as "mode" parameter in the SPI_0_OLED_FLASH_sclk_m_SetDriveMode() function.
N         *  @{
N         */
N        #define SPI_0_OLED_FLASH_sclk_m_DM_ALG_HIZ         (0x00u) /**< \brief High Impedance Analog   */
N        #define SPI_0_OLED_FLASH_sclk_m_DM_DIG_HIZ         (0x01u) /**< \brief High Impedance Digital  */
N        #define SPI_0_OLED_FLASH_sclk_m_DM_RES_UP          (0x02u) /**< \brief Resistive Pull Up       */
N        #define SPI_0_OLED_FLASH_sclk_m_DM_RES_DWN         (0x03u) /**< \brief Resistive Pull Down     */
N        #define SPI_0_OLED_FLASH_sclk_m_DM_OD_LO           (0x04u) /**< \brief Open Drain, Drives Low  */
N        #define SPI_0_OLED_FLASH_sclk_m_DM_OD_HI           (0x05u) /**< \brief Open Drain, Drives High */
N        #define SPI_0_OLED_FLASH_sclk_m_DM_STRONG          (0x06u) /**< \brief Strong Drive            */
N        #define SPI_0_OLED_FLASH_sclk_m_DM_RES_UPDWN       (0x07u) /**< \brief Resistive Pull Up/Down  */
N        /** @} driveMode */
N    /** @} group_constants */
N#endif
N
N/* Digital Port Constants */
N#define SPI_0_OLED_FLASH_sclk_m_MASK               SPI_0_OLED_FLASH_sclk_m__MASK
N#define SPI_0_OLED_FLASH_sclk_m_SHIFT              SPI_0_OLED_FLASH_sclk_m__SHIFT
N#define SPI_0_OLED_FLASH_sclk_m_WIDTH              1u
N
N/**
N* \addtogroup group_constants
N* @{
N*/
N    /** \addtogroup intrMode Interrupt constants
N     * \brief Constants to be passed as "mode" parameter in SPI_0_OLED_FLASH_sclk_m_SetInterruptMode() function.
N     *  @{
N     */
N        #define SPI_0_OLED_FLASH_sclk_m_INTR_NONE      ((uint16)(0x0000u)) /**< \brief Disabled             */
N        #define SPI_0_OLED_FLASH_sclk_m_INTR_RISING    ((uint16)(0x5555u)) /**< \brief Rising edge trigger  */
N        #define SPI_0_OLED_FLASH_sclk_m_INTR_FALLING   ((uint16)(0xaaaau)) /**< \brief Falling edge trigger */
N        #define SPI_0_OLED_FLASH_sclk_m_INTR_BOTH      ((uint16)(0xffffu)) /**< \brief Both edge trigger    */
N    /** @} intrMode */
N/** @} group_constants */
N
N/* SIO LPM definition */
N#if defined(SPI_0_OLED_FLASH_sclk_m__SIO)
X#if 0L
S    #define SPI_0_OLED_FLASH_sclk_m_SIO_LPM_MASK       (0x03u)
N#endif
N
N/* USBIO definitions */
N#if !defined(SPI_0_OLED_FLASH_sclk_m__PC) && (CY_PSOC4_4200L)
X#if !1L && ((16u == 22u))
S    #define SPI_0_OLED_FLASH_sclk_m_USBIO_ENABLE               ((uint32)0x80000000u)
S    #define SPI_0_OLED_FLASH_sclk_m_USBIO_DISABLE              ((uint32)(~SPI_0_OLED_FLASH_sclk_m_USBIO_ENABLE))
S    #define SPI_0_OLED_FLASH_sclk_m_USBIO_SUSPEND_SHIFT        CYFLD_USBDEVv2_USB_SUSPEND__OFFSET
S    #define SPI_0_OLED_FLASH_sclk_m_USBIO_SUSPEND_DEL_SHIFT    CYFLD_USBDEVv2_USB_SUSPEND_DEL__OFFSET
S    #define SPI_0_OLED_FLASH_sclk_m_USBIO_ENTER_SLEEP          ((uint32)((1u << SPI_0_OLED_FLASH_sclk_m_USBIO_SUSPEND_SHIFT) \
S                                                        | (1u << SPI_0_OLED_FLASH_sclk_m_USBIO_SUSPEND_DEL_SHIFT)))
X    #define SPI_0_OLED_FLASH_sclk_m_USBIO_ENTER_SLEEP          ((uint32)((1u << SPI_0_OLED_FLASH_sclk_m_USBIO_SUSPEND_SHIFT)                                                         | (1u << SPI_0_OLED_FLASH_sclk_m_USBIO_SUSPEND_DEL_SHIFT)))
S    #define SPI_0_OLED_FLASH_sclk_m_USBIO_EXIT_SLEEP_PH1       ((uint32)~((uint32)(1u << SPI_0_OLED_FLASH_sclk_m_USBIO_SUSPEND_SHIFT)))
S    #define SPI_0_OLED_FLASH_sclk_m_USBIO_EXIT_SLEEP_PH2       ((uint32)~((uint32)(1u << SPI_0_OLED_FLASH_sclk_m_USBIO_SUSPEND_DEL_SHIFT)))
S    #define SPI_0_OLED_FLASH_sclk_m_USBIO_CR1_OFF              ((uint32)0xfffffffeu)
N#endif
N
N
N/***************************************
N*             Registers        
N***************************************/
N/* Main Port Registers */
N#if defined(SPI_0_OLED_FLASH_sclk_m__PC)
X#if 1L
N    /* Port Configuration */
N    #define SPI_0_OLED_FLASH_sclk_m_PC                 (* (reg32 *) SPI_0_OLED_FLASH_sclk_m__PC)
N#endif
N/* Pin State */
N#define SPI_0_OLED_FLASH_sclk_m_PS                     (* (reg32 *) SPI_0_OLED_FLASH_sclk_m__PS)
N/* Data Register */
N#define SPI_0_OLED_FLASH_sclk_m_DR                     (* (reg32 *) SPI_0_OLED_FLASH_sclk_m__DR)
N/* Input Buffer Disable Override */
N#define SPI_0_OLED_FLASH_sclk_m_INP_DIS                (* (reg32 *) SPI_0_OLED_FLASH_sclk_m__PC2)
N
N/* Interrupt configuration Registers */
N#define SPI_0_OLED_FLASH_sclk_m_INTCFG                 (* (reg32 *) SPI_0_OLED_FLASH_sclk_m__INTCFG)
N#define SPI_0_OLED_FLASH_sclk_m_INTSTAT                (* (reg32 *) SPI_0_OLED_FLASH_sclk_m__INTSTAT)
N
N/* "Interrupt cause" register for Combined Port Interrupt (AllPortInt) in GSRef component */
N#if defined (CYREG_GPIO_INTR_CAUSE)
X#if 1L
N    #define SPI_0_OLED_FLASH_sclk_m_INTR_CAUSE         (* (reg32 *) CYREG_GPIO_INTR_CAUSE)
N#endif
N
N/* SIO register */
N#if defined(SPI_0_OLED_FLASH_sclk_m__SIO)
X#if 0L
S    #define SPI_0_OLED_FLASH_sclk_m_SIO_REG            (* (reg32 *) SPI_0_OLED_FLASH_sclk_m__SIO)
N#endif /* (SPI_0_OLED_FLASH_sclk_m__SIO_CFG) */
N
N/* USBIO registers */
N#if !defined(SPI_0_OLED_FLASH_sclk_m__PC) && (CY_PSOC4_4200L)
X#if !1L && ((16u == 22u))
S    #define SPI_0_OLED_FLASH_sclk_m_USB_POWER_REG       (* (reg32 *) CYREG_USBDEVv2_USB_POWER_CTRL)
S    #define SPI_0_OLED_FLASH_sclk_m_CR1_REG             (* (reg32 *) CYREG_USBDEVv2_CR1)
S    #define SPI_0_OLED_FLASH_sclk_m_USBIO_CTRL_REG      (* (reg32 *) CYREG_USBDEVv2_USB_USBIO_CTRL)
N#endif    
N    
N    
N/***************************************
N* The following code is DEPRECATED and 
N* must not be used in new designs.
N***************************************/
N/**
N* \addtogroup group_deprecated
N* @{
N*/
N#define SPI_0_OLED_FLASH_sclk_m_DRIVE_MODE_SHIFT       (0x00u)
N#define SPI_0_OLED_FLASH_sclk_m_DRIVE_MODE_MASK        (0x07u << SPI_0_OLED_FLASH_sclk_m_DRIVE_MODE_SHIFT)
N/** @} deprecated */
N
N#endif /* End Pins SPI_0_OLED_FLASH_sclk_m_H */
N
N
N/* [] END OF FILE */
L 136 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_PINS.h" 2
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SCLK_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_MOSI_PIN)
X#if ((0u == (0u)))
N    #include "SPI_0_OLED_FLASH_mosi_m.h"
L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_mosi_m.h" 1
N/*******************************************************************************
N* File Name: SPI_0_OLED_FLASH_mosi_m.h  
N* Version 2.20
N*
N* Description:
N*  This file contains Pin function prototypes and register defines
N*
N********************************************************************************
N* Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_PINS_SPI_0_OLED_FLASH_mosi_m_H) /* Pins SPI_0_OLED_FLASH_mosi_m_H */
X#if !0L  
N#define CY_PINS_SPI_0_OLED_FLASH_mosi_m_H
N
N#include "cytypes.h"
N#include "cyfitter.h"
N#include "SPI_0_OLED_FLASH_mosi_m_aliases.h"
L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_mosi_m_aliases.h" 1
N/*******************************************************************************
N* File Name: SPI_0_OLED_FLASH_mosi_m.h  
N* Version 2.20
N*
N* Description:
N*  This file contains the Alias definitions for Per-Pin APIs in cypins.h. 
N*  Information on using these APIs can be found in the System Reference Guide.
N*
N* Note:
N*
N********************************************************************************
N* Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_PINS_SPI_0_OLED_FLASH_mosi_m_ALIASES_H) /* Pins SPI_0_OLED_FLASH_mosi_m_ALIASES_H */
X#if !0L  
N#define CY_PINS_SPI_0_OLED_FLASH_mosi_m_ALIASES_H
N
N#include "cytypes.h"
N#include "cyfitter.h"
N#include "cypins.h"
N
N
N/***************************************
N*              Constants        
N***************************************/
N#define SPI_0_OLED_FLASH_mosi_m_0			(SPI_0_OLED_FLASH_mosi_m__0__PC)
N#define SPI_0_OLED_FLASH_mosi_m_0_PS		(SPI_0_OLED_FLASH_mosi_m__0__PS)
N#define SPI_0_OLED_FLASH_mosi_m_0_PC		(SPI_0_OLED_FLASH_mosi_m__0__PC)
N#define SPI_0_OLED_FLASH_mosi_m_0_DR		(SPI_0_OLED_FLASH_mosi_m__0__DR)
N#define SPI_0_OLED_FLASH_mosi_m_0_SHIFT	(SPI_0_OLED_FLASH_mosi_m__0__SHIFT)
N#define SPI_0_OLED_FLASH_mosi_m_0_INTR	((uint16)((uint16)0x0003u << (SPI_0_OLED_FLASH_mosi_m__0__SHIFT*2u)))
N
N#define SPI_0_OLED_FLASH_mosi_m_INTR_ALL	 ((uint16)(SPI_0_OLED_FLASH_mosi_m_0_INTR))
N
N
N#endif /* End Pins SPI_0_OLED_FLASH_mosi_m_ALIASES_H */
N
N
N/* [] END OF FILE */
L 21 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_mosi_m.h" 2
N
N
N/***************************************
N*     Data Struct Definitions
N***************************************/
N
N/**
N* \addtogroup group_structures
N* @{
N*/
N    
N/* Structure for sleep mode support */
Ntypedef struct
N{
N    uint32 pcState; /**< State of the port control register */
N    uint32 sioState; /**< State of the SIO configuration */
N    uint32 usbState; /**< State of the USBIO regulator */
N} SPI_0_OLED_FLASH_mosi_m_BACKUP_STRUCT;
N
N/** @} structures */
N
N
N/***************************************
N*        Function Prototypes             
N***************************************/
N/**
N* \addtogroup group_general
N* @{
N*/
Nuint8   SPI_0_OLED_FLASH_mosi_m_Read(void);
Nvoid    SPI_0_OLED_FLASH_mosi_m_Write(uint8 value);
Nuint8   SPI_0_OLED_FLASH_mosi_m_ReadDataReg(void);
N#if defined(SPI_0_OLED_FLASH_mosi_m__PC) || (CY_PSOC4_4200L) 
X#if 1L || ((16u == 22u)) 
N    void    SPI_0_OLED_FLASH_mosi_m_SetDriveMode(uint8 mode);
N#endif
Nvoid    SPI_0_OLED_FLASH_mosi_m_SetInterruptMode(uint16 position, uint16 mode);
Nuint8   SPI_0_OLED_FLASH_mosi_m_ClearInterrupt(void);
N/** @} general */
N
N/**
N* \addtogroup group_power
N* @{
N*/
Nvoid SPI_0_OLED_FLASH_mosi_m_Sleep(void); 
Nvoid SPI_0_OLED_FLASH_mosi_m_Wakeup(void);
N/** @} power */
N
N
N/***************************************
N*           API Constants        
N***************************************/
N#if defined(SPI_0_OLED_FLASH_mosi_m__PC) || (CY_PSOC4_4200L) 
X#if 1L || ((16u == 22u)) 
N    /* Drive Modes */
N    #define SPI_0_OLED_FLASH_mosi_m_DRIVE_MODE_BITS        (3)
N    #define SPI_0_OLED_FLASH_mosi_m_DRIVE_MODE_IND_MASK    (0xFFFFFFFFu >> (32 - SPI_0_OLED_FLASH_mosi_m_DRIVE_MODE_BITS))
N
N    /**
N    * \addtogroup group_constants
N    * @{
N    */
N        /** \addtogroup driveMode Drive mode constants
N         * \brief Constants to be passed as "mode" parameter in the SPI_0_OLED_FLASH_mosi_m_SetDriveMode() function.
N         *  @{
N         */
N        #define SPI_0_OLED_FLASH_mosi_m_DM_ALG_HIZ         (0x00u) /**< \brief High Impedance Analog   */
N        #define SPI_0_OLED_FLASH_mosi_m_DM_DIG_HIZ         (0x01u) /**< \brief High Impedance Digital  */
N        #define SPI_0_OLED_FLASH_mosi_m_DM_RES_UP          (0x02u) /**< \brief Resistive Pull Up       */
N        #define SPI_0_OLED_FLASH_mosi_m_DM_RES_DWN         (0x03u) /**< \brief Resistive Pull Down     */
N        #define SPI_0_OLED_FLASH_mosi_m_DM_OD_LO           (0x04u) /**< \brief Open Drain, Drives Low  */
N        #define SPI_0_OLED_FLASH_mosi_m_DM_OD_HI           (0x05u) /**< \brief Open Drain, Drives High */
N        #define SPI_0_OLED_FLASH_mosi_m_DM_STRONG          (0x06u) /**< \brief Strong Drive            */
N        #define SPI_0_OLED_FLASH_mosi_m_DM_RES_UPDWN       (0x07u) /**< \brief Resistive Pull Up/Down  */
N        /** @} driveMode */
N    /** @} group_constants */
N#endif
N
N/* Digital Port Constants */
N#define SPI_0_OLED_FLASH_mosi_m_MASK               SPI_0_OLED_FLASH_mosi_m__MASK
N#define SPI_0_OLED_FLASH_mosi_m_SHIFT              SPI_0_OLED_FLASH_mosi_m__SHIFT
N#define SPI_0_OLED_FLASH_mosi_m_WIDTH              1u
N
N/**
N* \addtogroup group_constants
N* @{
N*/
N    /** \addtogroup intrMode Interrupt constants
N     * \brief Constants to be passed as "mode" parameter in SPI_0_OLED_FLASH_mosi_m_SetInterruptMode() function.
N     *  @{
N     */
N        #define SPI_0_OLED_FLASH_mosi_m_INTR_NONE      ((uint16)(0x0000u)) /**< \brief Disabled             */
N        #define SPI_0_OLED_FLASH_mosi_m_INTR_RISING    ((uint16)(0x5555u)) /**< \brief Rising edge trigger  */
N        #define SPI_0_OLED_FLASH_mosi_m_INTR_FALLING   ((uint16)(0xaaaau)) /**< \brief Falling edge trigger */
N        #define SPI_0_OLED_FLASH_mosi_m_INTR_BOTH      ((uint16)(0xffffu)) /**< \brief Both edge trigger    */
N    /** @} intrMode */
N/** @} group_constants */
N
N/* SIO LPM definition */
N#if defined(SPI_0_OLED_FLASH_mosi_m__SIO)
X#if 0L
S    #define SPI_0_OLED_FLASH_mosi_m_SIO_LPM_MASK       (0x03u)
N#endif
N
N/* USBIO definitions */
N#if !defined(SPI_0_OLED_FLASH_mosi_m__PC) && (CY_PSOC4_4200L)
X#if !1L && ((16u == 22u))
S    #define SPI_0_OLED_FLASH_mosi_m_USBIO_ENABLE               ((uint32)0x80000000u)
S    #define SPI_0_OLED_FLASH_mosi_m_USBIO_DISABLE              ((uint32)(~SPI_0_OLED_FLASH_mosi_m_USBIO_ENABLE))
S    #define SPI_0_OLED_FLASH_mosi_m_USBIO_SUSPEND_SHIFT        CYFLD_USBDEVv2_USB_SUSPEND__OFFSET
S    #define SPI_0_OLED_FLASH_mosi_m_USBIO_SUSPEND_DEL_SHIFT    CYFLD_USBDEVv2_USB_SUSPEND_DEL__OFFSET
S    #define SPI_0_OLED_FLASH_mosi_m_USBIO_ENTER_SLEEP          ((uint32)((1u << SPI_0_OLED_FLASH_mosi_m_USBIO_SUSPEND_SHIFT) \
S                                                        | (1u << SPI_0_OLED_FLASH_mosi_m_USBIO_SUSPEND_DEL_SHIFT)))
X    #define SPI_0_OLED_FLASH_mosi_m_USBIO_ENTER_SLEEP          ((uint32)((1u << SPI_0_OLED_FLASH_mosi_m_USBIO_SUSPEND_SHIFT)                                                         | (1u << SPI_0_OLED_FLASH_mosi_m_USBIO_SUSPEND_DEL_SHIFT)))
S    #define SPI_0_OLED_FLASH_mosi_m_USBIO_EXIT_SLEEP_PH1       ((uint32)~((uint32)(1u << SPI_0_OLED_FLASH_mosi_m_USBIO_SUSPEND_SHIFT)))
S    #define SPI_0_OLED_FLASH_mosi_m_USBIO_EXIT_SLEEP_PH2       ((uint32)~((uint32)(1u << SPI_0_OLED_FLASH_mosi_m_USBIO_SUSPEND_DEL_SHIFT)))
S    #define SPI_0_OLED_FLASH_mosi_m_USBIO_CR1_OFF              ((uint32)0xfffffffeu)
N#endif
N
N
N/***************************************
N*             Registers        
N***************************************/
N/* Main Port Registers */
N#if defined(SPI_0_OLED_FLASH_mosi_m__PC)
X#if 1L
N    /* Port Configuration */
N    #define SPI_0_OLED_FLASH_mosi_m_PC                 (* (reg32 *) SPI_0_OLED_FLASH_mosi_m__PC)
N#endif
N/* Pin State */
N#define SPI_0_OLED_FLASH_mosi_m_PS                     (* (reg32 *) SPI_0_OLED_FLASH_mosi_m__PS)
N/* Data Register */
N#define SPI_0_OLED_FLASH_mosi_m_DR                     (* (reg32 *) SPI_0_OLED_FLASH_mosi_m__DR)
N/* Input Buffer Disable Override */
N#define SPI_0_OLED_FLASH_mosi_m_INP_DIS                (* (reg32 *) SPI_0_OLED_FLASH_mosi_m__PC2)
N
N/* Interrupt configuration Registers */
N#define SPI_0_OLED_FLASH_mosi_m_INTCFG                 (* (reg32 *) SPI_0_OLED_FLASH_mosi_m__INTCFG)
N#define SPI_0_OLED_FLASH_mosi_m_INTSTAT                (* (reg32 *) SPI_0_OLED_FLASH_mosi_m__INTSTAT)
N
N/* "Interrupt cause" register for Combined Port Interrupt (AllPortInt) in GSRef component */
N#if defined (CYREG_GPIO_INTR_CAUSE)
X#if 1L
N    #define SPI_0_OLED_FLASH_mosi_m_INTR_CAUSE         (* (reg32 *) CYREG_GPIO_INTR_CAUSE)
N#endif
N
N/* SIO register */
N#if defined(SPI_0_OLED_FLASH_mosi_m__SIO)
X#if 0L
S    #define SPI_0_OLED_FLASH_mosi_m_SIO_REG            (* (reg32 *) SPI_0_OLED_FLASH_mosi_m__SIO)
N#endif /* (SPI_0_OLED_FLASH_mosi_m__SIO_CFG) */
N
N/* USBIO registers */
N#if !defined(SPI_0_OLED_FLASH_mosi_m__PC) && (CY_PSOC4_4200L)
X#if !1L && ((16u == 22u))
S    #define SPI_0_OLED_FLASH_mosi_m_USB_POWER_REG       (* (reg32 *) CYREG_USBDEVv2_USB_POWER_CTRL)
S    #define SPI_0_OLED_FLASH_mosi_m_CR1_REG             (* (reg32 *) CYREG_USBDEVv2_CR1)
S    #define SPI_0_OLED_FLASH_mosi_m_USBIO_CTRL_REG      (* (reg32 *) CYREG_USBDEVv2_USB_USBIO_CTRL)
N#endif    
N    
N    
N/***************************************
N* The following code is DEPRECATED and 
N* must not be used in new designs.
N***************************************/
N/**
N* \addtogroup group_deprecated
N* @{
N*/
N#define SPI_0_OLED_FLASH_mosi_m_DRIVE_MODE_SHIFT       (0x00u)
N#define SPI_0_OLED_FLASH_mosi_m_DRIVE_MODE_MASK        (0x07u << SPI_0_OLED_FLASH_mosi_m_DRIVE_MODE_SHIFT)
N/** @} deprecated */
N
N#endif /* End Pins SPI_0_OLED_FLASH_mosi_m_H */
N
N
N/* [] END OF FILE */
L 140 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_PINS.h" 2
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_MOSI_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_MISO_PIN)
X#if ((0u == (0u)))
N    #include "SPI_0_OLED_FLASH_miso_m.h"
L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_miso_m.h" 1
N/*******************************************************************************
N* File Name: SPI_0_OLED_FLASH_miso_m.h  
N* Version 2.20
N*
N* Description:
N*  This file contains Pin function prototypes and register defines
N*
N********************************************************************************
N* Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_PINS_SPI_0_OLED_FLASH_miso_m_H) /* Pins SPI_0_OLED_FLASH_miso_m_H */
X#if !0L  
N#define CY_PINS_SPI_0_OLED_FLASH_miso_m_H
N
N#include "cytypes.h"
N#include "cyfitter.h"
N#include "SPI_0_OLED_FLASH_miso_m_aliases.h"
L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_miso_m_aliases.h" 1
N/*******************************************************************************
N* File Name: SPI_0_OLED_FLASH_miso_m.h  
N* Version 2.20
N*
N* Description:
N*  This file contains the Alias definitions for Per-Pin APIs in cypins.h. 
N*  Information on using these APIs can be found in the System Reference Guide.
N*
N* Note:
N*
N********************************************************************************
N* Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_PINS_SPI_0_OLED_FLASH_miso_m_ALIASES_H) /* Pins SPI_0_OLED_FLASH_miso_m_ALIASES_H */
X#if !0L  
N#define CY_PINS_SPI_0_OLED_FLASH_miso_m_ALIASES_H
N
N#include "cytypes.h"
N#include "cyfitter.h"
N#include "cypins.h"
N
N
N/***************************************
N*              Constants        
N***************************************/
N#define SPI_0_OLED_FLASH_miso_m_0			(SPI_0_OLED_FLASH_miso_m__0__PC)
N#define SPI_0_OLED_FLASH_miso_m_0_PS		(SPI_0_OLED_FLASH_miso_m__0__PS)
N#define SPI_0_OLED_FLASH_miso_m_0_PC		(SPI_0_OLED_FLASH_miso_m__0__PC)
N#define SPI_0_OLED_FLASH_miso_m_0_DR		(SPI_0_OLED_FLASH_miso_m__0__DR)
N#define SPI_0_OLED_FLASH_miso_m_0_SHIFT	(SPI_0_OLED_FLASH_miso_m__0__SHIFT)
N#define SPI_0_OLED_FLASH_miso_m_0_INTR	((uint16)((uint16)0x0003u << (SPI_0_OLED_FLASH_miso_m__0__SHIFT*2u)))
N
N#define SPI_0_OLED_FLASH_miso_m_INTR_ALL	 ((uint16)(SPI_0_OLED_FLASH_miso_m_0_INTR))
N
N
N#endif /* End Pins SPI_0_OLED_FLASH_miso_m_ALIASES_H */
N
N
N/* [] END OF FILE */
L 21 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_miso_m.h" 2
N
N
N/***************************************
N*     Data Struct Definitions
N***************************************/
N
N/**
N* \addtogroup group_structures
N* @{
N*/
N    
N/* Structure for sleep mode support */
Ntypedef struct
N{
N    uint32 pcState; /**< State of the port control register */
N    uint32 sioState; /**< State of the SIO configuration */
N    uint32 usbState; /**< State of the USBIO regulator */
N} SPI_0_OLED_FLASH_miso_m_BACKUP_STRUCT;
N
N/** @} structures */
N
N
N/***************************************
N*        Function Prototypes             
N***************************************/
N/**
N* \addtogroup group_general
N* @{
N*/
Nuint8   SPI_0_OLED_FLASH_miso_m_Read(void);
Nvoid    SPI_0_OLED_FLASH_miso_m_Write(uint8 value);
Nuint8   SPI_0_OLED_FLASH_miso_m_ReadDataReg(void);
N#if defined(SPI_0_OLED_FLASH_miso_m__PC) || (CY_PSOC4_4200L) 
X#if 1L || ((16u == 22u)) 
N    void    SPI_0_OLED_FLASH_miso_m_SetDriveMode(uint8 mode);
N#endif
Nvoid    SPI_0_OLED_FLASH_miso_m_SetInterruptMode(uint16 position, uint16 mode);
Nuint8   SPI_0_OLED_FLASH_miso_m_ClearInterrupt(void);
N/** @} general */
N
N/**
N* \addtogroup group_power
N* @{
N*/
Nvoid SPI_0_OLED_FLASH_miso_m_Sleep(void); 
Nvoid SPI_0_OLED_FLASH_miso_m_Wakeup(void);
N/** @} power */
N
N
N/***************************************
N*           API Constants        
N***************************************/
N#if defined(SPI_0_OLED_FLASH_miso_m__PC) || (CY_PSOC4_4200L) 
X#if 1L || ((16u == 22u)) 
N    /* Drive Modes */
N    #define SPI_0_OLED_FLASH_miso_m_DRIVE_MODE_BITS        (3)
N    #define SPI_0_OLED_FLASH_miso_m_DRIVE_MODE_IND_MASK    (0xFFFFFFFFu >> (32 - SPI_0_OLED_FLASH_miso_m_DRIVE_MODE_BITS))
N
N    /**
N    * \addtogroup group_constants
N    * @{
N    */
N        /** \addtogroup driveMode Drive mode constants
N         * \brief Constants to be passed as "mode" parameter in the SPI_0_OLED_FLASH_miso_m_SetDriveMode() function.
N         *  @{
N         */
N        #define SPI_0_OLED_FLASH_miso_m_DM_ALG_HIZ         (0x00u) /**< \brief High Impedance Analog   */
N        #define SPI_0_OLED_FLASH_miso_m_DM_DIG_HIZ         (0x01u) /**< \brief High Impedance Digital  */
N        #define SPI_0_OLED_FLASH_miso_m_DM_RES_UP          (0x02u) /**< \brief Resistive Pull Up       */
N        #define SPI_0_OLED_FLASH_miso_m_DM_RES_DWN         (0x03u) /**< \brief Resistive Pull Down     */
N        #define SPI_0_OLED_FLASH_miso_m_DM_OD_LO           (0x04u) /**< \brief Open Drain, Drives Low  */
N        #define SPI_0_OLED_FLASH_miso_m_DM_OD_HI           (0x05u) /**< \brief Open Drain, Drives High */
N        #define SPI_0_OLED_FLASH_miso_m_DM_STRONG          (0x06u) /**< \brief Strong Drive            */
N        #define SPI_0_OLED_FLASH_miso_m_DM_RES_UPDWN       (0x07u) /**< \brief Resistive Pull Up/Down  */
N        /** @} driveMode */
N    /** @} group_constants */
N#endif
N
N/* Digital Port Constants */
N#define SPI_0_OLED_FLASH_miso_m_MASK               SPI_0_OLED_FLASH_miso_m__MASK
N#define SPI_0_OLED_FLASH_miso_m_SHIFT              SPI_0_OLED_FLASH_miso_m__SHIFT
N#define SPI_0_OLED_FLASH_miso_m_WIDTH              1u
N
N/**
N* \addtogroup group_constants
N* @{
N*/
N    /** \addtogroup intrMode Interrupt constants
N     * \brief Constants to be passed as "mode" parameter in SPI_0_OLED_FLASH_miso_m_SetInterruptMode() function.
N     *  @{
N     */
N        #define SPI_0_OLED_FLASH_miso_m_INTR_NONE      ((uint16)(0x0000u)) /**< \brief Disabled             */
N        #define SPI_0_OLED_FLASH_miso_m_INTR_RISING    ((uint16)(0x5555u)) /**< \brief Rising edge trigger  */
N        #define SPI_0_OLED_FLASH_miso_m_INTR_FALLING   ((uint16)(0xaaaau)) /**< \brief Falling edge trigger */
N        #define SPI_0_OLED_FLASH_miso_m_INTR_BOTH      ((uint16)(0xffffu)) /**< \brief Both edge trigger    */
N    /** @} intrMode */
N/** @} group_constants */
N
N/* SIO LPM definition */
N#if defined(SPI_0_OLED_FLASH_miso_m__SIO)
X#if 0L
S    #define SPI_0_OLED_FLASH_miso_m_SIO_LPM_MASK       (0x03u)
N#endif
N
N/* USBIO definitions */
N#if !defined(SPI_0_OLED_FLASH_miso_m__PC) && (CY_PSOC4_4200L)
X#if !1L && ((16u == 22u))
S    #define SPI_0_OLED_FLASH_miso_m_USBIO_ENABLE               ((uint32)0x80000000u)
S    #define SPI_0_OLED_FLASH_miso_m_USBIO_DISABLE              ((uint32)(~SPI_0_OLED_FLASH_miso_m_USBIO_ENABLE))
S    #define SPI_0_OLED_FLASH_miso_m_USBIO_SUSPEND_SHIFT        CYFLD_USBDEVv2_USB_SUSPEND__OFFSET
S    #define SPI_0_OLED_FLASH_miso_m_USBIO_SUSPEND_DEL_SHIFT    CYFLD_USBDEVv2_USB_SUSPEND_DEL__OFFSET
S    #define SPI_0_OLED_FLASH_miso_m_USBIO_ENTER_SLEEP          ((uint32)((1u << SPI_0_OLED_FLASH_miso_m_USBIO_SUSPEND_SHIFT) \
S                                                        | (1u << SPI_0_OLED_FLASH_miso_m_USBIO_SUSPEND_DEL_SHIFT)))
X    #define SPI_0_OLED_FLASH_miso_m_USBIO_ENTER_SLEEP          ((uint32)((1u << SPI_0_OLED_FLASH_miso_m_USBIO_SUSPEND_SHIFT)                                                         | (1u << SPI_0_OLED_FLASH_miso_m_USBIO_SUSPEND_DEL_SHIFT)))
S    #define SPI_0_OLED_FLASH_miso_m_USBIO_EXIT_SLEEP_PH1       ((uint32)~((uint32)(1u << SPI_0_OLED_FLASH_miso_m_USBIO_SUSPEND_SHIFT)))
S    #define SPI_0_OLED_FLASH_miso_m_USBIO_EXIT_SLEEP_PH2       ((uint32)~((uint32)(1u << SPI_0_OLED_FLASH_miso_m_USBIO_SUSPEND_DEL_SHIFT)))
S    #define SPI_0_OLED_FLASH_miso_m_USBIO_CR1_OFF              ((uint32)0xfffffffeu)
N#endif
N
N
N/***************************************
N*             Registers        
N***************************************/
N/* Main Port Registers */
N#if defined(SPI_0_OLED_FLASH_miso_m__PC)
X#if 1L
N    /* Port Configuration */
N    #define SPI_0_OLED_FLASH_miso_m_PC                 (* (reg32 *) SPI_0_OLED_FLASH_miso_m__PC)
N#endif
N/* Pin State */
N#define SPI_0_OLED_FLASH_miso_m_PS                     (* (reg32 *) SPI_0_OLED_FLASH_miso_m__PS)
N/* Data Register */
N#define SPI_0_OLED_FLASH_miso_m_DR                     (* (reg32 *) SPI_0_OLED_FLASH_miso_m__DR)
N/* Input Buffer Disable Override */
N#define SPI_0_OLED_FLASH_miso_m_INP_DIS                (* (reg32 *) SPI_0_OLED_FLASH_miso_m__PC2)
N
N/* Interrupt configuration Registers */
N#define SPI_0_OLED_FLASH_miso_m_INTCFG                 (* (reg32 *) SPI_0_OLED_FLASH_miso_m__INTCFG)
N#define SPI_0_OLED_FLASH_miso_m_INTSTAT                (* (reg32 *) SPI_0_OLED_FLASH_miso_m__INTSTAT)
N
N/* "Interrupt cause" register for Combined Port Interrupt (AllPortInt) in GSRef component */
N#if defined (CYREG_GPIO_INTR_CAUSE)
X#if 1L
N    #define SPI_0_OLED_FLASH_miso_m_INTR_CAUSE         (* (reg32 *) CYREG_GPIO_INTR_CAUSE)
N#endif
N
N/* SIO register */
N#if defined(SPI_0_OLED_FLASH_miso_m__SIO)
X#if 0L
S    #define SPI_0_OLED_FLASH_miso_m_SIO_REG            (* (reg32 *) SPI_0_OLED_FLASH_miso_m__SIO)
N#endif /* (SPI_0_OLED_FLASH_miso_m__SIO_CFG) */
N
N/* USBIO registers */
N#if !defined(SPI_0_OLED_FLASH_miso_m__PC) && (CY_PSOC4_4200L)
X#if !1L && ((16u == 22u))
S    #define SPI_0_OLED_FLASH_miso_m_USB_POWER_REG       (* (reg32 *) CYREG_USBDEVv2_USB_POWER_CTRL)
S    #define SPI_0_OLED_FLASH_miso_m_CR1_REG             (* (reg32 *) CYREG_USBDEVv2_CR1)
S    #define SPI_0_OLED_FLASH_miso_m_USBIO_CTRL_REG      (* (reg32 *) CYREG_USBDEVv2_USB_USBIO_CTRL)
N#endif    
N    
N    
N/***************************************
N* The following code is DEPRECATED and 
N* must not be used in new designs.
N***************************************/
N/**
N* \addtogroup group_deprecated
N* @{
N*/
N#define SPI_0_OLED_FLASH_miso_m_DRIVE_MODE_SHIFT       (0x00u)
N#define SPI_0_OLED_FLASH_miso_m_DRIVE_MODE_MASK        (0x07u << SPI_0_OLED_FLASH_miso_m_DRIVE_MODE_SHIFT)
N/** @} deprecated */
N
N#endif /* End Pins SPI_0_OLED_FLASH_miso_m_H */
N
N
N/* [] END OF FILE */
L 144 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_PINS.h" 2
N#endif /*(SPI_0_OLED_FLASH_SPI_MASTER_MISO_PIN) */
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_PINS) */
N
N#if (SPI_0_OLED_FLASH_SPI_SLAVE_PINS)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_sclk_s.h"
S    #include "SPI_0_OLED_FLASH_ss_s.h"
S
S#if (SPI_0_OLED_FLASH_SPI_SLAVE_MOSI_PIN)
S    #include "SPI_0_OLED_FLASH_mosi_s.h"
S#endif /* (SPI_0_OLED_FLASH_SPI_SLAVE_MOSI_PIN) */
S
S#if (SPI_0_OLED_FLASH_SPI_SLAVE_MISO_PIN)
S    #include "SPI_0_OLED_FLASH_miso_s.h"
S#endif /*(SPI_0_OLED_FLASH_SPI_SLAVE_MISO_PIN) */
N#endif /* (SPI_0_OLED_FLASH_SPI_SLAVE_PINS) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_SS0_PIN)
X#if ((0u == (0u)))
N    #include "SPI_0_OLED_FLASH_ss0_m.h"
L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_ss0_m.h" 1
N/*******************************************************************************
N* File Name: SPI_0_OLED_FLASH_ss0_m.h  
N* Version 2.20
N*
N* Description:
N*  This file contains Pin function prototypes and register defines
N*
N********************************************************************************
N* Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_PINS_SPI_0_OLED_FLASH_ss0_m_H) /* Pins SPI_0_OLED_FLASH_ss0_m_H */
X#if !0L  
N#define CY_PINS_SPI_0_OLED_FLASH_ss0_m_H
N
N#include "cytypes.h"
N#include "cyfitter.h"
N#include "SPI_0_OLED_FLASH_ss0_m_aliases.h"
L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_ss0_m_aliases.h" 1
N/*******************************************************************************
N* File Name: SPI_0_OLED_FLASH_ss0_m.h  
N* Version 2.20
N*
N* Description:
N*  This file contains the Alias definitions for Per-Pin APIs in cypins.h. 
N*  Information on using these APIs can be found in the System Reference Guide.
N*
N* Note:
N*
N********************************************************************************
N* Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_PINS_SPI_0_OLED_FLASH_ss0_m_ALIASES_H) /* Pins SPI_0_OLED_FLASH_ss0_m_ALIASES_H */
X#if !0L  
N#define CY_PINS_SPI_0_OLED_FLASH_ss0_m_ALIASES_H
N
N#include "cytypes.h"
N#include "cyfitter.h"
N#include "cypins.h"
N
N
N/***************************************
N*              Constants        
N***************************************/
N#define SPI_0_OLED_FLASH_ss0_m_0			(SPI_0_OLED_FLASH_ss0_m__0__PC)
N#define SPI_0_OLED_FLASH_ss0_m_0_PS		(SPI_0_OLED_FLASH_ss0_m__0__PS)
N#define SPI_0_OLED_FLASH_ss0_m_0_PC		(SPI_0_OLED_FLASH_ss0_m__0__PC)
N#define SPI_0_OLED_FLASH_ss0_m_0_DR		(SPI_0_OLED_FLASH_ss0_m__0__DR)
N#define SPI_0_OLED_FLASH_ss0_m_0_SHIFT	(SPI_0_OLED_FLASH_ss0_m__0__SHIFT)
N#define SPI_0_OLED_FLASH_ss0_m_0_INTR	((uint16)((uint16)0x0003u << (SPI_0_OLED_FLASH_ss0_m__0__SHIFT*2u)))
N
N#define SPI_0_OLED_FLASH_ss0_m_INTR_ALL	 ((uint16)(SPI_0_OLED_FLASH_ss0_m_0_INTR))
N
N
N#endif /* End Pins SPI_0_OLED_FLASH_ss0_m_ALIASES_H */
N
N
N/* [] END OF FILE */
L 21 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_ss0_m.h" 2
N
N
N/***************************************
N*     Data Struct Definitions
N***************************************/
N
N/**
N* \addtogroup group_structures
N* @{
N*/
N    
N/* Structure for sleep mode support */
Ntypedef struct
N{
N    uint32 pcState; /**< State of the port control register */
N    uint32 sioState; /**< State of the SIO configuration */
N    uint32 usbState; /**< State of the USBIO regulator */
N} SPI_0_OLED_FLASH_ss0_m_BACKUP_STRUCT;
N
N/** @} structures */
N
N
N/***************************************
N*        Function Prototypes             
N***************************************/
N/**
N* \addtogroup group_general
N* @{
N*/
Nuint8   SPI_0_OLED_FLASH_ss0_m_Read(void);
Nvoid    SPI_0_OLED_FLASH_ss0_m_Write(uint8 value);
Nuint8   SPI_0_OLED_FLASH_ss0_m_ReadDataReg(void);
N#if defined(SPI_0_OLED_FLASH_ss0_m__PC) || (CY_PSOC4_4200L) 
X#if 1L || ((16u == 22u)) 
N    void    SPI_0_OLED_FLASH_ss0_m_SetDriveMode(uint8 mode);
N#endif
Nvoid    SPI_0_OLED_FLASH_ss0_m_SetInterruptMode(uint16 position, uint16 mode);
Nuint8   SPI_0_OLED_FLASH_ss0_m_ClearInterrupt(void);
N/** @} general */
N
N/**
N* \addtogroup group_power
N* @{
N*/
Nvoid SPI_0_OLED_FLASH_ss0_m_Sleep(void); 
Nvoid SPI_0_OLED_FLASH_ss0_m_Wakeup(void);
N/** @} power */
N
N
N/***************************************
N*           API Constants        
N***************************************/
N#if defined(SPI_0_OLED_FLASH_ss0_m__PC) || (CY_PSOC4_4200L) 
X#if 1L || ((16u == 22u)) 
N    /* Drive Modes */
N    #define SPI_0_OLED_FLASH_ss0_m_DRIVE_MODE_BITS        (3)
N    #define SPI_0_OLED_FLASH_ss0_m_DRIVE_MODE_IND_MASK    (0xFFFFFFFFu >> (32 - SPI_0_OLED_FLASH_ss0_m_DRIVE_MODE_BITS))
N
N    /**
N    * \addtogroup group_constants
N    * @{
N    */
N        /** \addtogroup driveMode Drive mode constants
N         * \brief Constants to be passed as "mode" parameter in the SPI_0_OLED_FLASH_ss0_m_SetDriveMode() function.
N         *  @{
N         */
N        #define SPI_0_OLED_FLASH_ss0_m_DM_ALG_HIZ         (0x00u) /**< \brief High Impedance Analog   */
N        #define SPI_0_OLED_FLASH_ss0_m_DM_DIG_HIZ         (0x01u) /**< \brief High Impedance Digital  */
N        #define SPI_0_OLED_FLASH_ss0_m_DM_RES_UP          (0x02u) /**< \brief Resistive Pull Up       */
N        #define SPI_0_OLED_FLASH_ss0_m_DM_RES_DWN         (0x03u) /**< \brief Resistive Pull Down     */
N        #define SPI_0_OLED_FLASH_ss0_m_DM_OD_LO           (0x04u) /**< \brief Open Drain, Drives Low  */
N        #define SPI_0_OLED_FLASH_ss0_m_DM_OD_HI           (0x05u) /**< \brief Open Drain, Drives High */
N        #define SPI_0_OLED_FLASH_ss0_m_DM_STRONG          (0x06u) /**< \brief Strong Drive            */
N        #define SPI_0_OLED_FLASH_ss0_m_DM_RES_UPDWN       (0x07u) /**< \brief Resistive Pull Up/Down  */
N        /** @} driveMode */
N    /** @} group_constants */
N#endif
N
N/* Digital Port Constants */
N#define SPI_0_OLED_FLASH_ss0_m_MASK               SPI_0_OLED_FLASH_ss0_m__MASK
N#define SPI_0_OLED_FLASH_ss0_m_SHIFT              SPI_0_OLED_FLASH_ss0_m__SHIFT
N#define SPI_0_OLED_FLASH_ss0_m_WIDTH              1u
N
N/**
N* \addtogroup group_constants
N* @{
N*/
N    /** \addtogroup intrMode Interrupt constants
N     * \brief Constants to be passed as "mode" parameter in SPI_0_OLED_FLASH_ss0_m_SetInterruptMode() function.
N     *  @{
N     */
N        #define SPI_0_OLED_FLASH_ss0_m_INTR_NONE      ((uint16)(0x0000u)) /**< \brief Disabled             */
N        #define SPI_0_OLED_FLASH_ss0_m_INTR_RISING    ((uint16)(0x5555u)) /**< \brief Rising edge trigger  */
N        #define SPI_0_OLED_FLASH_ss0_m_INTR_FALLING   ((uint16)(0xaaaau)) /**< \brief Falling edge trigger */
N        #define SPI_0_OLED_FLASH_ss0_m_INTR_BOTH      ((uint16)(0xffffu)) /**< \brief Both edge trigger    */
N    /** @} intrMode */
N/** @} group_constants */
N
N/* SIO LPM definition */
N#if defined(SPI_0_OLED_FLASH_ss0_m__SIO)
X#if 0L
S    #define SPI_0_OLED_FLASH_ss0_m_SIO_LPM_MASK       (0x03u)
N#endif
N
N/* USBIO definitions */
N#if !defined(SPI_0_OLED_FLASH_ss0_m__PC) && (CY_PSOC4_4200L)
X#if !1L && ((16u == 22u))
S    #define SPI_0_OLED_FLASH_ss0_m_USBIO_ENABLE               ((uint32)0x80000000u)
S    #define SPI_0_OLED_FLASH_ss0_m_USBIO_DISABLE              ((uint32)(~SPI_0_OLED_FLASH_ss0_m_USBIO_ENABLE))
S    #define SPI_0_OLED_FLASH_ss0_m_USBIO_SUSPEND_SHIFT        CYFLD_USBDEVv2_USB_SUSPEND__OFFSET
S    #define SPI_0_OLED_FLASH_ss0_m_USBIO_SUSPEND_DEL_SHIFT    CYFLD_USBDEVv2_USB_SUSPEND_DEL__OFFSET
S    #define SPI_0_OLED_FLASH_ss0_m_USBIO_ENTER_SLEEP          ((uint32)((1u << SPI_0_OLED_FLASH_ss0_m_USBIO_SUSPEND_SHIFT) \
S                                                        | (1u << SPI_0_OLED_FLASH_ss0_m_USBIO_SUSPEND_DEL_SHIFT)))
X    #define SPI_0_OLED_FLASH_ss0_m_USBIO_ENTER_SLEEP          ((uint32)((1u << SPI_0_OLED_FLASH_ss0_m_USBIO_SUSPEND_SHIFT)                                                         | (1u << SPI_0_OLED_FLASH_ss0_m_USBIO_SUSPEND_DEL_SHIFT)))
S    #define SPI_0_OLED_FLASH_ss0_m_USBIO_EXIT_SLEEP_PH1       ((uint32)~((uint32)(1u << SPI_0_OLED_FLASH_ss0_m_USBIO_SUSPEND_SHIFT)))
S    #define SPI_0_OLED_FLASH_ss0_m_USBIO_EXIT_SLEEP_PH2       ((uint32)~((uint32)(1u << SPI_0_OLED_FLASH_ss0_m_USBIO_SUSPEND_DEL_SHIFT)))
S    #define SPI_0_OLED_FLASH_ss0_m_USBIO_CR1_OFF              ((uint32)0xfffffffeu)
N#endif
N
N
N/***************************************
N*             Registers        
N***************************************/
N/* Main Port Registers */
N#if defined(SPI_0_OLED_FLASH_ss0_m__PC)
X#if 1L
N    /* Port Configuration */
N    #define SPI_0_OLED_FLASH_ss0_m_PC                 (* (reg32 *) SPI_0_OLED_FLASH_ss0_m__PC)
N#endif
N/* Pin State */
N#define SPI_0_OLED_FLASH_ss0_m_PS                     (* (reg32 *) SPI_0_OLED_FLASH_ss0_m__PS)
N/* Data Register */
N#define SPI_0_OLED_FLASH_ss0_m_DR                     (* (reg32 *) SPI_0_OLED_FLASH_ss0_m__DR)
N/* Input Buffer Disable Override */
N#define SPI_0_OLED_FLASH_ss0_m_INP_DIS                (* (reg32 *) SPI_0_OLED_FLASH_ss0_m__PC2)
N
N/* Interrupt configuration Registers */
N#define SPI_0_OLED_FLASH_ss0_m_INTCFG                 (* (reg32 *) SPI_0_OLED_FLASH_ss0_m__INTCFG)
N#define SPI_0_OLED_FLASH_ss0_m_INTSTAT                (* (reg32 *) SPI_0_OLED_FLASH_ss0_m__INTSTAT)
N
N/* "Interrupt cause" register for Combined Port Interrupt (AllPortInt) in GSRef component */
N#if defined (CYREG_GPIO_INTR_CAUSE)
X#if 1L
N    #define SPI_0_OLED_FLASH_ss0_m_INTR_CAUSE         (* (reg32 *) CYREG_GPIO_INTR_CAUSE)
N#endif
N
N/* SIO register */
N#if defined(SPI_0_OLED_FLASH_ss0_m__SIO)
X#if 0L
S    #define SPI_0_OLED_FLASH_ss0_m_SIO_REG            (* (reg32 *) SPI_0_OLED_FLASH_ss0_m__SIO)
N#endif /* (SPI_0_OLED_FLASH_ss0_m__SIO_CFG) */
N
N/* USBIO registers */
N#if !defined(SPI_0_OLED_FLASH_ss0_m__PC) && (CY_PSOC4_4200L)
X#if !1L && ((16u == 22u))
S    #define SPI_0_OLED_FLASH_ss0_m_USB_POWER_REG       (* (reg32 *) CYREG_USBDEVv2_USB_POWER_CTRL)
S    #define SPI_0_OLED_FLASH_ss0_m_CR1_REG             (* (reg32 *) CYREG_USBDEVv2_CR1)
S    #define SPI_0_OLED_FLASH_ss0_m_USBIO_CTRL_REG      (* (reg32 *) CYREG_USBDEVv2_USB_USBIO_CTRL)
N#endif    
N    
N    
N/***************************************
N* The following code is DEPRECATED and 
N* must not be used in new designs.
N***************************************/
N/**
N* \addtogroup group_deprecated
N* @{
N*/
N#define SPI_0_OLED_FLASH_ss0_m_DRIVE_MODE_SHIFT       (0x00u)
N#define SPI_0_OLED_FLASH_ss0_m_DRIVE_MODE_MASK        (0x07u << SPI_0_OLED_FLASH_ss0_m_DRIVE_MODE_SHIFT)
N/** @} deprecated */
N
N#endif /* End Pins SPI_0_OLED_FLASH_ss0_m_H */
N
N
N/* [] END OF FILE */
L 162 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_PINS.h" 2
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SS0_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_SS1_PIN)
X#if ((0u == (0u)))
N    #include "SPI_0_OLED_FLASH_ss1_m.h"
L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_ss1_m.h" 1
N/*******************************************************************************
N* File Name: SPI_0_OLED_FLASH_ss1_m.h  
N* Version 2.20
N*
N* Description:
N*  This file contains Pin function prototypes and register defines
N*
N********************************************************************************
N* Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_PINS_SPI_0_OLED_FLASH_ss1_m_H) /* Pins SPI_0_OLED_FLASH_ss1_m_H */
X#if !0L  
N#define CY_PINS_SPI_0_OLED_FLASH_ss1_m_H
N
N#include "cytypes.h"
N#include "cyfitter.h"
N#include "SPI_0_OLED_FLASH_ss1_m_aliases.h"
L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_ss1_m_aliases.h" 1
N/*******************************************************************************
N* File Name: SPI_0_OLED_FLASH_ss1_m.h  
N* Version 2.20
N*
N* Description:
N*  This file contains the Alias definitions for Per-Pin APIs in cypins.h. 
N*  Information on using these APIs can be found in the System Reference Guide.
N*
N* Note:
N*
N********************************************************************************
N* Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_PINS_SPI_0_OLED_FLASH_ss1_m_ALIASES_H) /* Pins SPI_0_OLED_FLASH_ss1_m_ALIASES_H */
X#if !0L  
N#define CY_PINS_SPI_0_OLED_FLASH_ss1_m_ALIASES_H
N
N#include "cytypes.h"
N#include "cyfitter.h"
N#include "cypins.h"
N
N
N/***************************************
N*              Constants        
N***************************************/
N#define SPI_0_OLED_FLASH_ss1_m_0			(SPI_0_OLED_FLASH_ss1_m__0__PC)
N#define SPI_0_OLED_FLASH_ss1_m_0_PS		(SPI_0_OLED_FLASH_ss1_m__0__PS)
N#define SPI_0_OLED_FLASH_ss1_m_0_PC		(SPI_0_OLED_FLASH_ss1_m__0__PC)
N#define SPI_0_OLED_FLASH_ss1_m_0_DR		(SPI_0_OLED_FLASH_ss1_m__0__DR)
N#define SPI_0_OLED_FLASH_ss1_m_0_SHIFT	(SPI_0_OLED_FLASH_ss1_m__0__SHIFT)
N#define SPI_0_OLED_FLASH_ss1_m_0_INTR	((uint16)((uint16)0x0003u << (SPI_0_OLED_FLASH_ss1_m__0__SHIFT*2u)))
N
N#define SPI_0_OLED_FLASH_ss1_m_INTR_ALL	 ((uint16)(SPI_0_OLED_FLASH_ss1_m_0_INTR))
N
N
N#endif /* End Pins SPI_0_OLED_FLASH_ss1_m_ALIASES_H */
N
N
N/* [] END OF FILE */
L 21 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_ss1_m.h" 2
N
N
N/***************************************
N*     Data Struct Definitions
N***************************************/
N
N/**
N* \addtogroup group_structures
N* @{
N*/
N    
N/* Structure for sleep mode support */
Ntypedef struct
N{
N    uint32 pcState; /**< State of the port control register */
N    uint32 sioState; /**< State of the SIO configuration */
N    uint32 usbState; /**< State of the USBIO regulator */
N} SPI_0_OLED_FLASH_ss1_m_BACKUP_STRUCT;
N
N/** @} structures */
N
N
N/***************************************
N*        Function Prototypes             
N***************************************/
N/**
N* \addtogroup group_general
N* @{
N*/
Nuint8   SPI_0_OLED_FLASH_ss1_m_Read(void);
Nvoid    SPI_0_OLED_FLASH_ss1_m_Write(uint8 value);
Nuint8   SPI_0_OLED_FLASH_ss1_m_ReadDataReg(void);
N#if defined(SPI_0_OLED_FLASH_ss1_m__PC) || (CY_PSOC4_4200L) 
X#if 1L || ((16u == 22u)) 
N    void    SPI_0_OLED_FLASH_ss1_m_SetDriveMode(uint8 mode);
N#endif
Nvoid    SPI_0_OLED_FLASH_ss1_m_SetInterruptMode(uint16 position, uint16 mode);
Nuint8   SPI_0_OLED_FLASH_ss1_m_ClearInterrupt(void);
N/** @} general */
N
N/**
N* \addtogroup group_power
N* @{
N*/
Nvoid SPI_0_OLED_FLASH_ss1_m_Sleep(void); 
Nvoid SPI_0_OLED_FLASH_ss1_m_Wakeup(void);
N/** @} power */
N
N
N/***************************************
N*           API Constants        
N***************************************/
N#if defined(SPI_0_OLED_FLASH_ss1_m__PC) || (CY_PSOC4_4200L) 
X#if 1L || ((16u == 22u)) 
N    /* Drive Modes */
N    #define SPI_0_OLED_FLASH_ss1_m_DRIVE_MODE_BITS        (3)
N    #define SPI_0_OLED_FLASH_ss1_m_DRIVE_MODE_IND_MASK    (0xFFFFFFFFu >> (32 - SPI_0_OLED_FLASH_ss1_m_DRIVE_MODE_BITS))
N
N    /**
N    * \addtogroup group_constants
N    * @{
N    */
N        /** \addtogroup driveMode Drive mode constants
N         * \brief Constants to be passed as "mode" parameter in the SPI_0_OLED_FLASH_ss1_m_SetDriveMode() function.
N         *  @{
N         */
N        #define SPI_0_OLED_FLASH_ss1_m_DM_ALG_HIZ         (0x00u) /**< \brief High Impedance Analog   */
N        #define SPI_0_OLED_FLASH_ss1_m_DM_DIG_HIZ         (0x01u) /**< \brief High Impedance Digital  */
N        #define SPI_0_OLED_FLASH_ss1_m_DM_RES_UP          (0x02u) /**< \brief Resistive Pull Up       */
N        #define SPI_0_OLED_FLASH_ss1_m_DM_RES_DWN         (0x03u) /**< \brief Resistive Pull Down     */
N        #define SPI_0_OLED_FLASH_ss1_m_DM_OD_LO           (0x04u) /**< \brief Open Drain, Drives Low  */
N        #define SPI_0_OLED_FLASH_ss1_m_DM_OD_HI           (0x05u) /**< \brief Open Drain, Drives High */
N        #define SPI_0_OLED_FLASH_ss1_m_DM_STRONG          (0x06u) /**< \brief Strong Drive            */
N        #define SPI_0_OLED_FLASH_ss1_m_DM_RES_UPDWN       (0x07u) /**< \brief Resistive Pull Up/Down  */
N        /** @} driveMode */
N    /** @} group_constants */
N#endif
N
N/* Digital Port Constants */
N#define SPI_0_OLED_FLASH_ss1_m_MASK               SPI_0_OLED_FLASH_ss1_m__MASK
N#define SPI_0_OLED_FLASH_ss1_m_SHIFT              SPI_0_OLED_FLASH_ss1_m__SHIFT
N#define SPI_0_OLED_FLASH_ss1_m_WIDTH              1u
N
N/**
N* \addtogroup group_constants
N* @{
N*/
N    /** \addtogroup intrMode Interrupt constants
N     * \brief Constants to be passed as "mode" parameter in SPI_0_OLED_FLASH_ss1_m_SetInterruptMode() function.
N     *  @{
N     */
N        #define SPI_0_OLED_FLASH_ss1_m_INTR_NONE      ((uint16)(0x0000u)) /**< \brief Disabled             */
N        #define SPI_0_OLED_FLASH_ss1_m_INTR_RISING    ((uint16)(0x5555u)) /**< \brief Rising edge trigger  */
N        #define SPI_0_OLED_FLASH_ss1_m_INTR_FALLING   ((uint16)(0xaaaau)) /**< \brief Falling edge trigger */
N        #define SPI_0_OLED_FLASH_ss1_m_INTR_BOTH      ((uint16)(0xffffu)) /**< \brief Both edge trigger    */
N    /** @} intrMode */
N/** @} group_constants */
N
N/* SIO LPM definition */
N#if defined(SPI_0_OLED_FLASH_ss1_m__SIO)
X#if 0L
S    #define SPI_0_OLED_FLASH_ss1_m_SIO_LPM_MASK       (0x03u)
N#endif
N
N/* USBIO definitions */
N#if !defined(SPI_0_OLED_FLASH_ss1_m__PC) && (CY_PSOC4_4200L)
X#if !1L && ((16u == 22u))
S    #define SPI_0_OLED_FLASH_ss1_m_USBIO_ENABLE               ((uint32)0x80000000u)
S    #define SPI_0_OLED_FLASH_ss1_m_USBIO_DISABLE              ((uint32)(~SPI_0_OLED_FLASH_ss1_m_USBIO_ENABLE))
S    #define SPI_0_OLED_FLASH_ss1_m_USBIO_SUSPEND_SHIFT        CYFLD_USBDEVv2_USB_SUSPEND__OFFSET
S    #define SPI_0_OLED_FLASH_ss1_m_USBIO_SUSPEND_DEL_SHIFT    CYFLD_USBDEVv2_USB_SUSPEND_DEL__OFFSET
S    #define SPI_0_OLED_FLASH_ss1_m_USBIO_ENTER_SLEEP          ((uint32)((1u << SPI_0_OLED_FLASH_ss1_m_USBIO_SUSPEND_SHIFT) \
S                                                        | (1u << SPI_0_OLED_FLASH_ss1_m_USBIO_SUSPEND_DEL_SHIFT)))
X    #define SPI_0_OLED_FLASH_ss1_m_USBIO_ENTER_SLEEP          ((uint32)((1u << SPI_0_OLED_FLASH_ss1_m_USBIO_SUSPEND_SHIFT)                                                         | (1u << SPI_0_OLED_FLASH_ss1_m_USBIO_SUSPEND_DEL_SHIFT)))
S    #define SPI_0_OLED_FLASH_ss1_m_USBIO_EXIT_SLEEP_PH1       ((uint32)~((uint32)(1u << SPI_0_OLED_FLASH_ss1_m_USBIO_SUSPEND_SHIFT)))
S    #define SPI_0_OLED_FLASH_ss1_m_USBIO_EXIT_SLEEP_PH2       ((uint32)~((uint32)(1u << SPI_0_OLED_FLASH_ss1_m_USBIO_SUSPEND_DEL_SHIFT)))
S    #define SPI_0_OLED_FLASH_ss1_m_USBIO_CR1_OFF              ((uint32)0xfffffffeu)
N#endif
N
N
N/***************************************
N*             Registers        
N***************************************/
N/* Main Port Registers */
N#if defined(SPI_0_OLED_FLASH_ss1_m__PC)
X#if 1L
N    /* Port Configuration */
N    #define SPI_0_OLED_FLASH_ss1_m_PC                 (* (reg32 *) SPI_0_OLED_FLASH_ss1_m__PC)
N#endif
N/* Pin State */
N#define SPI_0_OLED_FLASH_ss1_m_PS                     (* (reg32 *) SPI_0_OLED_FLASH_ss1_m__PS)
N/* Data Register */
N#define SPI_0_OLED_FLASH_ss1_m_DR                     (* (reg32 *) SPI_0_OLED_FLASH_ss1_m__DR)
N/* Input Buffer Disable Override */
N#define SPI_0_OLED_FLASH_ss1_m_INP_DIS                (* (reg32 *) SPI_0_OLED_FLASH_ss1_m__PC2)
N
N/* Interrupt configuration Registers */
N#define SPI_0_OLED_FLASH_ss1_m_INTCFG                 (* (reg32 *) SPI_0_OLED_FLASH_ss1_m__INTCFG)
N#define SPI_0_OLED_FLASH_ss1_m_INTSTAT                (* (reg32 *) SPI_0_OLED_FLASH_ss1_m__INTSTAT)
N
N/* "Interrupt cause" register for Combined Port Interrupt (AllPortInt) in GSRef component */
N#if defined (CYREG_GPIO_INTR_CAUSE)
X#if 1L
N    #define SPI_0_OLED_FLASH_ss1_m_INTR_CAUSE         (* (reg32 *) CYREG_GPIO_INTR_CAUSE)
N#endif
N
N/* SIO register */
N#if defined(SPI_0_OLED_FLASH_ss1_m__SIO)
X#if 0L
S    #define SPI_0_OLED_FLASH_ss1_m_SIO_REG            (* (reg32 *) SPI_0_OLED_FLASH_ss1_m__SIO)
N#endif /* (SPI_0_OLED_FLASH_ss1_m__SIO_CFG) */
N
N/* USBIO registers */
N#if !defined(SPI_0_OLED_FLASH_ss1_m__PC) && (CY_PSOC4_4200L)
X#if !1L && ((16u == 22u))
S    #define SPI_0_OLED_FLASH_ss1_m_USB_POWER_REG       (* (reg32 *) CYREG_USBDEVv2_USB_POWER_CTRL)
S    #define SPI_0_OLED_FLASH_ss1_m_CR1_REG             (* (reg32 *) CYREG_USBDEVv2_CR1)
S    #define SPI_0_OLED_FLASH_ss1_m_USBIO_CTRL_REG      (* (reg32 *) CYREG_USBDEVv2_USB_USBIO_CTRL)
N#endif    
N    
N    
N/***************************************
N* The following code is DEPRECATED and 
N* must not be used in new designs.
N***************************************/
N/**
N* \addtogroup group_deprecated
N* @{
N*/
N#define SPI_0_OLED_FLASH_ss1_m_DRIVE_MODE_SHIFT       (0x00u)
N#define SPI_0_OLED_FLASH_ss1_m_DRIVE_MODE_MASK        (0x07u << SPI_0_OLED_FLASH_ss1_m_DRIVE_MODE_SHIFT)
N/** @} deprecated */
N
N#endif /* End Pins SPI_0_OLED_FLASH_ss1_m_H */
N
N
N/* [] END OF FILE */
L 166 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_PINS.h" 2
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SS1_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_SS2_PIN)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_ss2_m.h"
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SS2_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_SS3_PIN)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_ss3_m.h"
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SS3_PIN) */
N
N#if (SPI_0_OLED_FLASH_UART_TX_PIN)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_tx.h"
N#endif /* (SPI_0_OLED_FLASH_UART_TX_PIN) */
N
N#if (SPI_0_OLED_FLASH_UART_RX_TX_PIN)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_rx_tx.h"
N#endif /* (SPI_0_OLED_FLASH_UART_RX_TX_PIN) */
N
N#if (SPI_0_OLED_FLASH_UART_RX_PIN)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_rx.h"
N#endif /* (SPI_0_OLED_FLASH_UART_RX_PIN) */
N
N#if (SPI_0_OLED_FLASH_UART_RX_WAKE_PIN)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_rx_wake.h"
N#endif /* (SPI_0_OLED_FLASH_UART_RX_WAKE_PIN) */
N
N#if (SPI_0_OLED_FLASH_UART_RTS_PIN)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_rts.h"
N#endif /* (SPI_0_OLED_FLASH_UART_RTS_PIN) */
N
N#if (SPI_0_OLED_FLASH_UART_CTS_PIN)
X#if ((0u == (1u)))
S    #include "SPI_0_OLED_FLASH_cts.h"
N#endif /* (SPI_0_OLED_FLASH_UART_CTS_PIN) */
N
N
N/***************************************
N*              Registers
N***************************************/
N
N#if (SPI_0_OLED_FLASH_RX_SCL_MOSI_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_REG   (*(reg32 *) SPI_0_OLED_FLASH_uart_rx_i2c_scl_spi_mosi__0__HSIOM)
S    #define SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_PTR   ( (reg32 *) SPI_0_OLED_FLASH_uart_rx_i2c_scl_spi_mosi__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_MASK      (SPI_0_OLED_FLASH_uart_rx_i2c_scl_spi_mosi__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_POS       (SPI_0_OLED_FLASH_uart_rx_i2c_scl_spi_mosi__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_uart_rx_i2c_scl_spi_mosi__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_SEL_I2C   (SPI_0_OLED_FLASH_uart_rx_i2c_scl_spi_mosi__0__HSIOM_I2C)
S    #define SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_SEL_SPI   (SPI_0_OLED_FLASH_uart_rx_i2c_scl_spi_mosi__0__HSIOM_SPI)
S    #define SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_SEL_UART  (SPI_0_OLED_FLASH_uart_rx_i2c_scl_spi_mosi__0__HSIOM_UART)
S    
S#elif (SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_PIN)
X#elif ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_REG   (*(reg32 *) SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi__0__HSIOM)
S    #define SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_PTR   ( (reg32 *) SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_MASK      (SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_POS       (SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_SEL_I2C   (SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi__0__HSIOM_I2C)
S    #define SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_SEL_SPI   (SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi__0__HSIOM_SPI)
S    #define SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_SEL_UART  (SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi__0__HSIOM_UART)    
S   
S    #define SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_INTCFG_REG (*(reg32 *) SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi__0__INTCFG)
S    #define SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_INTCFG_PTR ( (reg32 *) SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi__0__INTCFG)
S    #define SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_INTCFG_TYPE_POS  (SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi__SHIFT)
S    #define SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_INTCFG_TYPE_MASK ((uint32) SPI_0_OLED_FLASH_INTCFG_TYPE_MASK << \
S                                                                           SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_INTCFG_TYPE_POS)
X    #define SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_INTCFG_TYPE_MASK ((uint32) SPI_0_OLED_FLASH_INTCFG_TYPE_MASK <<                                                                            SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_INTCFG_TYPE_POS)
N#else
N    /* None of pins SPI_0_OLED_FLASH_RX_SCL_MOSI_PIN or SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_PIN present.*/
N#endif /* (SPI_0_OLED_FLASH_RX_SCL_MOSI_PIN) */
N
N#if (SPI_0_OLED_FLASH_TX_SDA_MISO_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_TX_SDA_MISO_HSIOM_REG   (*(reg32 *) SPI_0_OLED_FLASH_uart_tx_i2c_sda_spi_miso__0__HSIOM)
S    #define SPI_0_OLED_FLASH_TX_SDA_MISO_HSIOM_PTR   ( (reg32 *) SPI_0_OLED_FLASH_uart_tx_i2c_sda_spi_miso__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_TX_SDA_MISO_HSIOM_MASK      (SPI_0_OLED_FLASH_uart_tx_i2c_sda_spi_miso__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_TX_SDA_MISO_HSIOM_POS       (SPI_0_OLED_FLASH_uart_tx_i2c_sda_spi_miso__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_TX_SDA_MISO_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_uart_tx_i2c_sda_spi_miso__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_TX_SDA_MISO_HSIOM_SEL_I2C   (SPI_0_OLED_FLASH_uart_tx_i2c_sda_spi_miso__0__HSIOM_I2C)
S    #define SPI_0_OLED_FLASH_TX_SDA_MISO_HSIOM_SEL_SPI   (SPI_0_OLED_FLASH_uart_tx_i2c_sda_spi_miso__0__HSIOM_SPI)
S    #define SPI_0_OLED_FLASH_TX_SDA_MISO_HSIOM_SEL_UART  (SPI_0_OLED_FLASH_uart_tx_i2c_sda_spi_miso__0__HSIOM_UART)
N#endif /* (SPI_0_OLED_FLASH_TX_SDA_MISO_PIN) */
N
N#if (SPI_0_OLED_FLASH_CTS_SCLK_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_REG   (*(reg32 *) SPI_0_OLED_FLASH_uart_cts_spi_sclk__0__HSIOM)
S    #define SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_PTR   ( (reg32 *) SPI_0_OLED_FLASH_uart_cts_spi_sclk__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_MASK      (SPI_0_OLED_FLASH_uart_cts_spi_sclk__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_POS       (SPI_0_OLED_FLASH_uart_cts_spi_sclk__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_uart_cts_spi_sclk__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_SEL_I2C   (SPI_0_OLED_FLASH_uart_cts_spi_sclk__0__HSIOM_I2C)
S    #define SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_SEL_SPI   (SPI_0_OLED_FLASH_uart_cts_spi_sclk__0__HSIOM_SPI)
S    #define SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_SEL_UART  (SPI_0_OLED_FLASH_uart_cts_spi_sclk__0__HSIOM_UART)
N#endif /* (SPI_0_OLED_FLASH_CTS_SCLK_PIN) */
N
N#if (SPI_0_OLED_FLASH_RTS_SS0_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_RTS_SS0_HSIOM_REG   (*(reg32 *) SPI_0_OLED_FLASH_uart_rts_spi_ss0__0__HSIOM)
S    #define SPI_0_OLED_FLASH_RTS_SS0_HSIOM_PTR   ( (reg32 *) SPI_0_OLED_FLASH_uart_rts_spi_ss0__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_RTS_SS0_HSIOM_MASK      (SPI_0_OLED_FLASH_uart_rts_spi_ss0__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_RTS_SS0_HSIOM_POS       (SPI_0_OLED_FLASH_uart_rts_spi_ss0__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_RTS_SS0_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_uart_rts_spi_ss0__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_RTS_SS0_HSIOM_SEL_I2C   (SPI_0_OLED_FLASH_uart_rts_spi_ss0__0__HSIOM_I2C)
S    #define SPI_0_OLED_FLASH_RTS_SS0_HSIOM_SEL_SPI   (SPI_0_OLED_FLASH_uart_rts_spi_ss0__0__HSIOM_SPI)
S#if !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
S    #define SPI_0_OLED_FLASH_RTS_SS0_HSIOM_SEL_UART  (SPI_0_OLED_FLASH_uart_rts_spi_ss0__0__HSIOM_UART)
S#endif /* !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N#endif /* (SPI_0_OLED_FLASH_RTS_SS0_PIN) */
N
N#if (SPI_0_OLED_FLASH_SS1_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_SS1_HSIOM_REG  (*(reg32 *) SPI_0_OLED_FLASH_spi_ss1__0__HSIOM)
S    #define SPI_0_OLED_FLASH_SS1_HSIOM_PTR  ( (reg32 *) SPI_0_OLED_FLASH_spi_ss1__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_SS1_HSIOM_MASK     (SPI_0_OLED_FLASH_spi_ss1__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_SS1_HSIOM_POS      (SPI_0_OLED_FLASH_spi_ss1__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_SS1_HSIOM_SEL_GPIO (SPI_0_OLED_FLASH_spi_ss1__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_SS1_HSIOM_SEL_I2C  (SPI_0_OLED_FLASH_spi_ss1__0__HSIOM_I2C)
S    #define SPI_0_OLED_FLASH_SS1_HSIOM_SEL_SPI  (SPI_0_OLED_FLASH_spi_ss1__0__HSIOM_SPI)
N#endif /* (SPI_0_OLED_FLASH_SS1_PIN) */
N
N#if (SPI_0_OLED_FLASH_SS2_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_SS2_HSIOM_REG     (*(reg32 *) SPI_0_OLED_FLASH_spi_ss2__0__HSIOM)
S    #define SPI_0_OLED_FLASH_SS2_HSIOM_PTR     ( (reg32 *) SPI_0_OLED_FLASH_spi_ss2__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_SS2_HSIOM_MASK     (SPI_0_OLED_FLASH_spi_ss2__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_SS2_HSIOM_POS      (SPI_0_OLED_FLASH_spi_ss2__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_SS2_HSIOM_SEL_GPIO (SPI_0_OLED_FLASH_spi_ss2__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_SS2_HSIOM_SEL_I2C  (SPI_0_OLED_FLASH_spi_ss2__0__HSIOM_I2C)
S    #define SPI_0_OLED_FLASH_SS2_HSIOM_SEL_SPI  (SPI_0_OLED_FLASH_spi_ss2__0__HSIOM_SPI)
N#endif /* (SPI_0_OLED_FLASH_SS2_PIN) */
N
N#if (SPI_0_OLED_FLASH_SS3_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_SS3_HSIOM_REG     (*(reg32 *) SPI_0_OLED_FLASH_spi_ss3__0__HSIOM)
S    #define SPI_0_OLED_FLASH_SS3_HSIOM_PTR     ( (reg32 *) SPI_0_OLED_FLASH_spi_ss3__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_SS3_HSIOM_MASK     (SPI_0_OLED_FLASH_spi_ss3__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_SS3_HSIOM_POS      (SPI_0_OLED_FLASH_spi_ss3__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_SS3_HSIOM_SEL_GPIO (SPI_0_OLED_FLASH_spi_ss3__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_SS3_HSIOM_SEL_I2C  (SPI_0_OLED_FLASH_spi_ss3__0__HSIOM_I2C)
S    #define SPI_0_OLED_FLASH_SS3_HSIOM_SEL_SPI  (SPI_0_OLED_FLASH_spi_ss3__0__HSIOM_SPI)
N#endif /* (SPI_0_OLED_FLASH_SS3_PIN) */
N
N#if (SPI_0_OLED_FLASH_I2C_PINS)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_SCL_HSIOM_REG  (*(reg32 *) SPI_0_OLED_FLASH_scl__0__HSIOM)
S    #define SPI_0_OLED_FLASH_SCL_HSIOM_PTR  ( (reg32 *) SPI_0_OLED_FLASH_scl__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_SCL_HSIOM_MASK     (SPI_0_OLED_FLASH_scl__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_SCL_HSIOM_POS      (SPI_0_OLED_FLASH_scl__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_SCL_HSIOM_SEL_GPIO (SPI_0_OLED_FLASH_sda__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_SCL_HSIOM_SEL_I2C  (SPI_0_OLED_FLASH_sda__0__HSIOM_I2C)
S    
S    #define SPI_0_OLED_FLASH_SDA_HSIOM_REG  (*(reg32 *) SPI_0_OLED_FLASH_sda__0__HSIOM)
S    #define SPI_0_OLED_FLASH_SDA_HSIOM_PTR  ( (reg32 *) SPI_0_OLED_FLASH_sda__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_SDA_HSIOM_MASK     (SPI_0_OLED_FLASH_sda__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_SDA_HSIOM_POS      (SPI_0_OLED_FLASH_sda__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_SDA_HSIOM_SEL_GPIO (SPI_0_OLED_FLASH_sda__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_SDA_HSIOM_SEL_I2C  (SPI_0_OLED_FLASH_sda__0__HSIOM_I2C)
N#endif /* (SPI_0_OLED_FLASH_I2C_PINS) */
N
N#if (SPI_0_OLED_FLASH_SPI_SLAVE_PINS)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_SCLK_S_HSIOM_REG   (*(reg32 *) SPI_0_OLED_FLASH_sclk_s__0__HSIOM)
S    #define SPI_0_OLED_FLASH_SCLK_S_HSIOM_PTR   ( (reg32 *) SPI_0_OLED_FLASH_sclk_s__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_SCLK_S_HSIOM_MASK      (SPI_0_OLED_FLASH_sclk_s__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_SCLK_S_HSIOM_POS       (SPI_0_OLED_FLASH_sclk_s__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_SCLK_S_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_sclk_s__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_SCLK_S_HSIOM_SEL_SPI   (SPI_0_OLED_FLASH_sclk_s__0__HSIOM_SPI)
S    
S    #define SPI_0_OLED_FLASH_SS0_S_HSIOM_REG    (*(reg32 *) SPI_0_OLED_FLASH_ss0_s__0__HSIOM)
S    #define SPI_0_OLED_FLASH_SS0_S_HSIOM_PTR    ( (reg32 *) SPI_0_OLED_FLASH_ss0_s__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_SS0_S_HSIOM_MASK       (SPI_0_OLED_FLASH_ss0_s__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_SS0_S_HSIOM_POS        (SPI_0_OLED_FLASH_ss0_s__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_SS0_S_HSIOM_SEL_GPIO   (SPI_0_OLED_FLASH_ss0_s__0__HSIOM_GPIO)  
S    #define SPI_0_OLED_FLASH_SS0_S_HSIOM_SEL_SPI    (SPI_0_OLED_FLASH_ss0_s__0__HSIOM_SPI)
N#endif /* (SPI_0_OLED_FLASH_SPI_SLAVE_PINS) */
N
N#if (SPI_0_OLED_FLASH_SPI_SLAVE_MOSI_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_MOSI_S_HSIOM_REG   (*(reg32 *) SPI_0_OLED_FLASH_mosi_s__0__HSIOM)
S    #define SPI_0_OLED_FLASH_MOSI_S_HSIOM_PTR   ( (reg32 *) SPI_0_OLED_FLASH_mosi_s__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_MOSI_S_HSIOM_MASK      (SPI_0_OLED_FLASH_mosi_s__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_MOSI_S_HSIOM_POS       (SPI_0_OLED_FLASH_mosi_s__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_MOSI_S_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_mosi_s__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_MOSI_S_HSIOM_SEL_SPI   (SPI_0_OLED_FLASH_mosi_s__0__HSIOM_SPI)
N#endif /* (SPI_0_OLED_FLASH_SPI_SLAVE_MOSI_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_SLAVE_MISO_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_MISO_S_HSIOM_REG   (*(reg32 *) SPI_0_OLED_FLASH_miso_s__0__HSIOM)
S    #define SPI_0_OLED_FLASH_MISO_S_HSIOM_PTR   ( (reg32 *) SPI_0_OLED_FLASH_miso_s__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_MISO_S_HSIOM_MASK      (SPI_0_OLED_FLASH_miso_s__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_MISO_S_HSIOM_POS       (SPI_0_OLED_FLASH_miso_s__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_MISO_S_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_miso_s__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_MISO_S_HSIOM_SEL_SPI   (SPI_0_OLED_FLASH_miso_s__0__HSIOM_SPI)
N#endif /* (SPI_0_OLED_FLASH_SPI_SLAVE_MISO_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_MISO_PIN)
X#if ((0u == (0u)))
N    #define SPI_0_OLED_FLASH_MISO_M_HSIOM_REG   (*(reg32 *) SPI_0_OLED_FLASH_miso_m__0__HSIOM)
N    #define SPI_0_OLED_FLASH_MISO_M_HSIOM_PTR   ( (reg32 *) SPI_0_OLED_FLASH_miso_m__0__HSIOM)
N    
N    #define SPI_0_OLED_FLASH_MISO_M_HSIOM_MASK      (SPI_0_OLED_FLASH_miso_m__0__HSIOM_MASK)
N    #define SPI_0_OLED_FLASH_MISO_M_HSIOM_POS       (SPI_0_OLED_FLASH_miso_m__0__HSIOM_SHIFT)
N    #define SPI_0_OLED_FLASH_MISO_M_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_miso_m__0__HSIOM_GPIO)
N    #define SPI_0_OLED_FLASH_MISO_M_HSIOM_SEL_SPI   (SPI_0_OLED_FLASH_miso_m__0__HSIOM_SPI)
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_MISO_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_MOSI_PIN)
X#if ((0u == (0u)))
N    #define SPI_0_OLED_FLASH_MOSI_M_HSIOM_REG   (*(reg32 *) SPI_0_OLED_FLASH_mosi_m__0__HSIOM)
N    #define SPI_0_OLED_FLASH_MOSI_M_HSIOM_PTR   ( (reg32 *) SPI_0_OLED_FLASH_mosi_m__0__HSIOM)
N    
N    #define SPI_0_OLED_FLASH_MOSI_M_HSIOM_MASK      (SPI_0_OLED_FLASH_mosi_m__0__HSIOM_MASK)
N    #define SPI_0_OLED_FLASH_MOSI_M_HSIOM_POS       (SPI_0_OLED_FLASH_mosi_m__0__HSIOM_SHIFT)
N    #define SPI_0_OLED_FLASH_MOSI_M_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_mosi_m__0__HSIOM_GPIO)
N    #define SPI_0_OLED_FLASH_MOSI_M_HSIOM_SEL_SPI   (SPI_0_OLED_FLASH_mosi_m__0__HSIOM_SPI)
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_MOSI_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_SCLK_PIN)
X#if ((0u == (0u)))
N    #define SPI_0_OLED_FLASH_SCLK_M_HSIOM_REG   (*(reg32 *) SPI_0_OLED_FLASH_sclk_m__0__HSIOM)
N    #define SPI_0_OLED_FLASH_SCLK_M_HSIOM_PTR   ( (reg32 *) SPI_0_OLED_FLASH_sclk_m__0__HSIOM)
N    
N    #define SPI_0_OLED_FLASH_SCLK_M_HSIOM_MASK      (SPI_0_OLED_FLASH_sclk_m__0__HSIOM_MASK)
N    #define SPI_0_OLED_FLASH_SCLK_M_HSIOM_POS       (SPI_0_OLED_FLASH_sclk_m__0__HSIOM_SHIFT)
N    #define SPI_0_OLED_FLASH_SCLK_M_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_sclk_m__0__HSIOM_GPIO)
N    #define SPI_0_OLED_FLASH_SCLK_M_HSIOM_SEL_SPI   (SPI_0_OLED_FLASH_sclk_m__0__HSIOM_SPI)
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SCLK_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_SS0_PIN)
X#if ((0u == (0u)))
N    #define SPI_0_OLED_FLASH_SS0_M_HSIOM_REG    (*(reg32 *) SPI_0_OLED_FLASH_ss0_m__0__HSIOM)
N    #define SPI_0_OLED_FLASH_SS0_M_HSIOM_PTR    ( (reg32 *) SPI_0_OLED_FLASH_ss0_m__0__HSIOM)
N    
N    #define SPI_0_OLED_FLASH_SS0_M_HSIOM_MASK       (SPI_0_OLED_FLASH_ss0_m__0__HSIOM_MASK)
N    #define SPI_0_OLED_FLASH_SS0_M_HSIOM_POS        (SPI_0_OLED_FLASH_ss0_m__0__HSIOM_SHIFT)
N    #define SPI_0_OLED_FLASH_SS0_M_HSIOM_SEL_GPIO   (SPI_0_OLED_FLASH_ss0_m__0__HSIOM_GPIO)
N    #define SPI_0_OLED_FLASH_SS0_M_HSIOM_SEL_SPI    (SPI_0_OLED_FLASH_ss0_m__0__HSIOM_SPI)
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SS0_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_SS1_PIN)
X#if ((0u == (0u)))
N    #define SPI_0_OLED_FLASH_SS1_M_HSIOM_REG    (*(reg32 *) SPI_0_OLED_FLASH_ss1_m__0__HSIOM)
N    #define SPI_0_OLED_FLASH_SS1_M_HSIOM_PTR    ( (reg32 *) SPI_0_OLED_FLASH_ss1_m__0__HSIOM)
N    
N    #define SPI_0_OLED_FLASH_SS1_M_HSIOM_MASK       (SPI_0_OLED_FLASH_ss1_m__0__HSIOM_MASK)
N    #define SPI_0_OLED_FLASH_SS1_M_HSIOM_POS        (SPI_0_OLED_FLASH_ss1_m__0__HSIOM_SHIFT)
N    #define SPI_0_OLED_FLASH_SS1_M_HSIOM_SEL_GPIO   (SPI_0_OLED_FLASH_ss1_m__0__HSIOM_GPIO)
N    #define SPI_0_OLED_FLASH_SS1_M_HSIOM_SEL_SPI    (SPI_0_OLED_FLASH_ss1_m__0__HSIOM_SPI)
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SS1_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_SS2_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_SS2_M_HSIOM_REG    (*(reg32 *) SPI_0_OLED_FLASH_ss2_m__0__HSIOM)
S    #define SPI_0_OLED_FLASH_SS2_M_HSIOM_PTR    ( (reg32 *) SPI_0_OLED_FLASH_ss2_m__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_SS2_M_HSIOM_MASK       (SPI_0_OLED_FLASH_ss2_m__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_SS2_M_HSIOM_POS        (SPI_0_OLED_FLASH_ss2_m__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_SS2_M_HSIOM_SEL_GPIO   (SPI_0_OLED_FLASH_ss2_m__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_SS2_M_HSIOM_SEL_SPI    (SPI_0_OLED_FLASH_ss2_m__0__HSIOM_SPI)
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SS2_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_SS3_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_SS3_M_HSIOM_REG    (*(reg32 *) SPI_0_OLED_FLASH_ss3_m__0__HSIOM)
S    #define SPI_0_OLED_FLASH_SS3_M_HSIOM_PTR    ( (reg32 *) SPI_0_OLED_FLASH_ss3_m__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_SS3_M_HSIOM_MASK      (SPI_0_OLED_FLASH_ss3_m__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_SS3_M_HSIOM_POS       (SPI_0_OLED_FLASH_ss3_m__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_SS3_M_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_ss3_m__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_SS3_M_HSIOM_SEL_SPI   (SPI_0_OLED_FLASH_ss3_m__0__HSIOM_SPI)
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SS3_PIN) */
N
N#if (SPI_0_OLED_FLASH_UART_RX_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_RX_HSIOM_REG   (*(reg32 *) SPI_0_OLED_FLASH_rx__0__HSIOM)
S    #define SPI_0_OLED_FLASH_RX_HSIOM_PTR   ( (reg32 *) SPI_0_OLED_FLASH_rx__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_RX_HSIOM_MASK      (SPI_0_OLED_FLASH_rx__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_RX_HSIOM_POS       (SPI_0_OLED_FLASH_rx__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_RX_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_rx__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_RX_HSIOM_SEL_UART  (SPI_0_OLED_FLASH_rx__0__HSIOM_UART)
N#endif /* (SPI_0_OLED_FLASH_UART_RX_PIN) */
N
N#if (SPI_0_OLED_FLASH_UART_RX_WAKE_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_RX_WAKE_HSIOM_REG   (*(reg32 *) SPI_0_OLED_FLASH_rx_wake__0__HSIOM)
S    #define SPI_0_OLED_FLASH_RX_WAKE_HSIOM_PTR   ( (reg32 *) SPI_0_OLED_FLASH_rx_wake__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_RX_WAKE_HSIOM_MASK      (SPI_0_OLED_FLASH_rx_wake__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_RX_WAKE_HSIOM_POS       (SPI_0_OLED_FLASH_rx_wake__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_RX_WAKE_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_rx_wake__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_RX_WAKE_HSIOM_SEL_UART  (SPI_0_OLED_FLASH_rx_wake__0__HSIOM_UART)
N#endif /* (SPI_0_OLED_FLASH_UART_WAKE_RX_PIN) */
N
N#if (SPI_0_OLED_FLASH_UART_CTS_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_CTS_HSIOM_REG   (*(reg32 *) SPI_0_OLED_FLASH_cts__0__HSIOM)
S    #define SPI_0_OLED_FLASH_CTS_HSIOM_PTR   ( (reg32 *) SPI_0_OLED_FLASH_cts__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_CTS_HSIOM_MASK      (SPI_0_OLED_FLASH_cts__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_CTS_HSIOM_POS       (SPI_0_OLED_FLASH_cts__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_CTS_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_cts__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_CTS_HSIOM_SEL_UART  (SPI_0_OLED_FLASH_cts__0__HSIOM_UART)
N#endif /* (SPI_0_OLED_FLASH_UART_CTS_PIN) */
N
N#if (SPI_0_OLED_FLASH_UART_TX_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_TX_HSIOM_REG   (*(reg32 *) SPI_0_OLED_FLASH_tx__0__HSIOM)
S    #define SPI_0_OLED_FLASH_TX_HSIOM_PTR   ( (reg32 *) SPI_0_OLED_FLASH_tx__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_TX_HSIOM_MASK      (SPI_0_OLED_FLASH_tx__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_TX_HSIOM_POS       (SPI_0_OLED_FLASH_tx__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_TX_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_tx__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_TX_HSIOM_SEL_UART  (SPI_0_OLED_FLASH_tx__0__HSIOM_UART)
N#endif /* (SPI_0_OLED_FLASH_UART_TX_PIN) */
N
N#if (SPI_0_OLED_FLASH_UART_RX_TX_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_RX_TX_HSIOM_REG   (*(reg32 *) SPI_0_OLED_FLASH_rx_tx__0__HSIOM)
S    #define SPI_0_OLED_FLASH_RX_TX_HSIOM_PTR   ( (reg32 *) SPI_0_OLED_FLASH_rx_tx__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_RX_TX_HSIOM_MASK      (SPI_0_OLED_FLASH_rx_tx__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_RX_TX_HSIOM_POS       (SPI_0_OLED_FLASH_rx_tx__0__HSIOM_SHIFT)
S    #define SPI_0_OLED_FLASH_RX_TX_HSIOM_SEL_GPIO  (SPI_0_OLED_FLASH_rx_tx__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_RX_TX_HSIOM_SEL_UART  (SPI_0_OLED_FLASH_rx_tx__0__HSIOM_UART)
N#endif /* (SPI_0_OLED_FLASH_UART_RX_TX_PIN) */
N
N#if (SPI_0_OLED_FLASH_UART_RTS_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_RTS_HSIOM_REG      (*(reg32 *) SPI_0_OLED_FLASH_rts__0__HSIOM)
S    #define SPI_0_OLED_FLASH_RTS_HSIOM_PTR      ( (reg32 *) SPI_0_OLED_FLASH_rts__0__HSIOM)
S    
S    #define SPI_0_OLED_FLASH_RTS_HSIOM_MASK     (SPI_0_OLED_FLASH_rts__0__HSIOM_MASK)
S    #define SPI_0_OLED_FLASH_RTS_HSIOM_POS      (SPI_0_OLED_FLASH_rts__0__HSIOM_SHIFT)    
S    #define SPI_0_OLED_FLASH_RTS_HSIOM_SEL_GPIO (SPI_0_OLED_FLASH_rts__0__HSIOM_GPIO)
S    #define SPI_0_OLED_FLASH_RTS_HSIOM_SEL_UART (SPI_0_OLED_FLASH_rts__0__HSIOM_UART)    
N#endif /* (SPI_0_OLED_FLASH_UART_RTS_PIN) */
N
N
N/***************************************
N*        Registers Constants
N***************************************/
N
N/* HSIOM switch values. */ 
N#define SPI_0_OLED_FLASH_HSIOM_DEF_SEL      (0x00u)
N#define SPI_0_OLED_FLASH_HSIOM_GPIO_SEL     (0x00u)
N/* The HSIOM values provided below are valid only for SPI_0_OLED_FLASH_CY_SCBIP_V0 
N* and SPI_0_OLED_FLASH_CY_SCBIP_V1. It is not recommended to use them for 
N* SPI_0_OLED_FLASH_CY_SCBIP_V2. Use pin name specific HSIOM constants provided 
N* above instead for any SCB IP block version.
N*/
N#define SPI_0_OLED_FLASH_HSIOM_UART_SEL     (0x09u)
N#define SPI_0_OLED_FLASH_HSIOM_I2C_SEL      (0x0Eu)
N#define SPI_0_OLED_FLASH_HSIOM_SPI_SEL      (0x0Fu)
N
N/* Pins settings index. */
N#define SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_PIN_INDEX   (0u)
N#define SPI_0_OLED_FLASH_RX_SCL_MOSI_PIN_INDEX       (0u)
N#define SPI_0_OLED_FLASH_TX_SDA_MISO_PIN_INDEX       (1u)
N#define SPI_0_OLED_FLASH_CTS_SCLK_PIN_INDEX       (2u)
N#define SPI_0_OLED_FLASH_RTS_SS0_PIN_INDEX       (3u)
N#define SPI_0_OLED_FLASH_SS1_PIN_INDEX                  (4u)
N#define SPI_0_OLED_FLASH_SS2_PIN_INDEX                  (5u)
N#define SPI_0_OLED_FLASH_SS3_PIN_INDEX                  (6u)
N
N/* Pins settings mask. */
N#define SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_PIN_MASK ((uint32) 0x01u << SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_PIN_INDEX)
N#define SPI_0_OLED_FLASH_RX_SCL_MOSI_PIN_MASK     ((uint32) 0x01u << SPI_0_OLED_FLASH_RX_SCL_MOSI_PIN_INDEX)
N#define SPI_0_OLED_FLASH_TX_SDA_MISO_PIN_MASK     ((uint32) 0x01u << SPI_0_OLED_FLASH_TX_SDA_MISO_PIN_INDEX)
N#define SPI_0_OLED_FLASH_CTS_SCLK_PIN_MASK     ((uint32) 0x01u << SPI_0_OLED_FLASH_CTS_SCLK_PIN_INDEX)
N#define SPI_0_OLED_FLASH_RTS_SS0_PIN_MASK     ((uint32) 0x01u << SPI_0_OLED_FLASH_RTS_SS0_PIN_INDEX)
N#define SPI_0_OLED_FLASH_SS1_PIN_MASK                ((uint32) 0x01u << SPI_0_OLED_FLASH_SS1_PIN_INDEX)
N#define SPI_0_OLED_FLASH_SS2_PIN_MASK                ((uint32) 0x01u << SPI_0_OLED_FLASH_SS2_PIN_INDEX)
N#define SPI_0_OLED_FLASH_SS3_PIN_MASK                ((uint32) 0x01u << SPI_0_OLED_FLASH_SS3_PIN_INDEX)
N
N/* Pin interrupt constants. */
N#define SPI_0_OLED_FLASH_INTCFG_TYPE_MASK           (0x03u)
N#define SPI_0_OLED_FLASH_INTCFG_TYPE_FALLING_EDGE   (0x02u)
N
N/* Pin Drive Mode constants. */
N#define SPI_0_OLED_FLASH_PIN_DM_ALG_HIZ  (0u)
N#define SPI_0_OLED_FLASH_PIN_DM_DIG_HIZ  (1u)
N#define SPI_0_OLED_FLASH_PIN_DM_OD_LO    (4u)
N#define SPI_0_OLED_FLASH_PIN_DM_STRONG   (6u)
N
N
N/***************************************
N*          Macro Definitions
N***************************************/
N
N/* Return drive mode of the pin */
N#define SPI_0_OLED_FLASH_DM_MASK    (0x7u)
N#define SPI_0_OLED_FLASH_DM_SIZE    (3u)
N#define SPI_0_OLED_FLASH_GET_P4_PIN_DM(reg, pos) \
N    ( ((reg) & (uint32) ((uint32) SPI_0_OLED_FLASH_DM_MASK << (SPI_0_OLED_FLASH_DM_SIZE * (pos)))) >> \
N                                                              (SPI_0_OLED_FLASH_DM_SIZE * (pos)) )
X#define SPI_0_OLED_FLASH_GET_P4_PIN_DM(reg, pos)     ( ((reg) & (uint32) ((uint32) SPI_0_OLED_FLASH_DM_MASK << (SPI_0_OLED_FLASH_DM_SIZE * (pos)))) >>                                                               (SPI_0_OLED_FLASH_DM_SIZE * (pos)) )
N
N#if (SPI_0_OLED_FLASH_TX_SDA_MISO_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_CHECK_TX_SDA_MISO_PIN_USED \
S                (SPI_0_OLED_FLASH_PIN_DM_ALG_HIZ != \
S                    SPI_0_OLED_FLASH_GET_P4_PIN_DM(SPI_0_OLED_FLASH_uart_tx_i2c_sda_spi_miso_PC, \
S                                                   SPI_0_OLED_FLASH_uart_tx_i2c_sda_spi_miso_SHIFT))
X    #define SPI_0_OLED_FLASH_CHECK_TX_SDA_MISO_PIN_USED                 (SPI_0_OLED_FLASH_PIN_DM_ALG_HIZ !=                     SPI_0_OLED_FLASH_GET_P4_PIN_DM(SPI_0_OLED_FLASH_uart_tx_i2c_sda_spi_miso_PC,                                                    SPI_0_OLED_FLASH_uart_tx_i2c_sda_spi_miso_SHIFT))
N#endif /* (SPI_0_OLED_FLASH_TX_SDA_MISO_PIN) */
N
N#if (SPI_0_OLED_FLASH_RTS_SS0_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_CHECK_RTS_SS0_PIN_USED \
S                (SPI_0_OLED_FLASH_PIN_DM_ALG_HIZ != \
S                    SPI_0_OLED_FLASH_GET_P4_PIN_DM(SPI_0_OLED_FLASH_uart_rts_spi_ss0_PC, \
S                                                   SPI_0_OLED_FLASH_uart_rts_spi_ss0_SHIFT))
X    #define SPI_0_OLED_FLASH_CHECK_RTS_SS0_PIN_USED                 (SPI_0_OLED_FLASH_PIN_DM_ALG_HIZ !=                     SPI_0_OLED_FLASH_GET_P4_PIN_DM(SPI_0_OLED_FLASH_uart_rts_spi_ss0_PC,                                                    SPI_0_OLED_FLASH_uart_rts_spi_ss0_SHIFT))
N#endif /* (SPI_0_OLED_FLASH_RTS_SS0_PIN) */
N
N/* Set bits-mask in register */
N#define SPI_0_OLED_FLASH_SET_REGISTER_BITS(reg, mask, pos, mode) \
N                    do                                           \
N                    {                                            \
N                        (reg) = (((reg) & ((uint32) ~(uint32) (mask))) | ((uint32) ((uint32) (mode) << (pos)))); \
N                    }while(0)
X#define SPI_0_OLED_FLASH_SET_REGISTER_BITS(reg, mask, pos, mode)                     do                                                               {                                                                    (reg) = (((reg) & ((uint32) ~(uint32) (mask))) | ((uint32) ((uint32) (mode) << (pos))));                     }while(0)
N
N/* Set bit in the register */
N#define SPI_0_OLED_FLASH_SET_REGISTER_BIT(reg, mask, val) \
N                    ((val) ? ((reg) |= (mask)) : ((reg) &= ((uint32) ~((uint32) (mask)))))
X#define SPI_0_OLED_FLASH_SET_REGISTER_BIT(reg, mask, val)                     ((val) ? ((reg) |= (mask)) : ((reg) &= ((uint32) ~((uint32) (mask)))))
N
N#define SPI_0_OLED_FLASH_SET_HSIOM_SEL(reg, mask, pos, sel) SPI_0_OLED_FLASH_SET_REGISTER_BITS(reg, mask, pos, sel)
N#define SPI_0_OLED_FLASH_SET_INCFG_TYPE(reg, mask, pos, intType) \
N                                                        SPI_0_OLED_FLASH_SET_REGISTER_BITS(reg, mask, pos, intType)
X#define SPI_0_OLED_FLASH_SET_INCFG_TYPE(reg, mask, pos, intType)                                                         SPI_0_OLED_FLASH_SET_REGISTER_BITS(reg, mask, pos, intType)
N#define SPI_0_OLED_FLASH_SET_INP_DIS(reg, mask, val) SPI_0_OLED_FLASH_SET_REGISTER_BIT(reg, mask, val)
N
N/* SPI_0_OLED_FLASH_SET_I2C_SCL_DR(val) - Sets I2C SCL DR register.
N*  SPI_0_OLED_FLASH_SET_I2C_SCL_HSIOM_SEL(sel) - Sets I2C SCL HSIOM settings.
N*/
N/* SCB I2C: scl signal */
N#if (SPI_0_OLED_FLASH_CY_SCBIP_V0)
X#if ((2 == 0u))
S#if (SPI_0_OLED_FLASH_I2C_PINS)
S    #define SPI_0_OLED_FLASH_SET_I2C_SCL_DR(val) SPI_0_OLED_FLASH_scl_Write(val)
S
S    #define SPI_0_OLED_FLASH_SET_I2C_SCL_HSIOM_SEL(sel) \
S                          SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SCL_HSIOM_REG,  \
S                                                         SPI_0_OLED_FLASH_SCL_HSIOM_MASK, \
S                                                         SPI_0_OLED_FLASH_SCL_HSIOM_POS,  \
S                                                         (sel))
X    #define SPI_0_OLED_FLASH_SET_I2C_SCL_HSIOM_SEL(sel)                           SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SCL_HSIOM_REG,                                                           SPI_0_OLED_FLASH_SCL_HSIOM_MASK,                                                          SPI_0_OLED_FLASH_SCL_HSIOM_POS,                                                           (sel))
S    #define SPI_0_OLED_FLASH_WAIT_SCL_SET_HIGH  (0u == SPI_0_OLED_FLASH_scl_Read())
S
S/* Unconfigured SCB: scl signal */
S#elif (SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_PIN)
S    #define SPI_0_OLED_FLASH_SET_I2C_SCL_DR(val) \
S                            SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi_Write(val)
X    #define SPI_0_OLED_FLASH_SET_I2C_SCL_DR(val)                             SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi_Write(val)
S
S    #define SPI_0_OLED_FLASH_SET_I2C_SCL_HSIOM_SEL(sel) \
S                    SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_REG,  \
S                                                   SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_MASK, \
S                                                   SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_POS,  \
S                                                   (sel))
X    #define SPI_0_OLED_FLASH_SET_I2C_SCL_HSIOM_SEL(sel)                     SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_REG,                                                     SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_MASK,                                                    SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_POS,                                                     (sel))
S
S    #define SPI_0_OLED_FLASH_WAIT_SCL_SET_HIGH  (0u == SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi_Read())
S
S#elif (SPI_0_OLED_FLASH_RX_SCL_MOSI_PIN)
S    #define SPI_0_OLED_FLASH_SET_I2C_SCL_DR(val) \
S                            SPI_0_OLED_FLASH_uart_rx_i2c_scl_spi_mosi_Write(val)
X    #define SPI_0_OLED_FLASH_SET_I2C_SCL_DR(val)                             SPI_0_OLED_FLASH_uart_rx_i2c_scl_spi_mosi_Write(val)
S
S
S    #define SPI_0_OLED_FLASH_SET_I2C_SCL_HSIOM_SEL(sel) \
S                            SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_REG,  \
S                                                           SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_MASK, \
S                                                           SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_POS,  \
S                                                           (sel))
X    #define SPI_0_OLED_FLASH_SET_I2C_SCL_HSIOM_SEL(sel)                             SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_REG,                                                             SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_MASK,                                                            SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_POS,                                                             (sel))
S
S    #define SPI_0_OLED_FLASH_WAIT_SCL_SET_HIGH  (0u == SPI_0_OLED_FLASH_uart_rx_i2c_scl_spi_mosi_Read())
S
S#else
S    #define SPI_0_OLED_FLASH_SET_I2C_SCL_DR(val)        do{ /* Does nothing */ }while(0)
S    #define SPI_0_OLED_FLASH_SET_I2C_SCL_HSIOM_SEL(sel) do{ /* Does nothing */ }while(0)
S
S    #define SPI_0_OLED_FLASH_WAIT_SCL_SET_HIGH  (0u)
S#endif /* (SPI_0_OLED_FLASH_I2C_PINS) */
S
S/* SCB I2C: sda signal */
S#if (SPI_0_OLED_FLASH_I2C_PINS)
S    #define SPI_0_OLED_FLASH_WAIT_SDA_SET_HIGH  (0u == SPI_0_OLED_FLASH_sda_Read())
S/* Unconfigured SCB: sda signal */
S#elif (SPI_0_OLED_FLASH_TX_SDA_MISO_PIN)
S    #define SPI_0_OLED_FLASH_WAIT_SDA_SET_HIGH  (0u == SPI_0_OLED_FLASH_uart_tx_i2c_sda_spi_miso_Read())
S#else
S    #define SPI_0_OLED_FLASH_WAIT_SDA_SET_HIGH  (0u)
S#endif /* (SPI_0_OLED_FLASH_MOSI_SCL_RX_PIN) */
N#endif /* (SPI_0_OLED_FLASH_CY_SCBIP_V0) */
N
N/* Clear UART wakeup source */
N#if (SPI_0_OLED_FLASH_RX_SCL_MOSI_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_CLEAR_UART_RX_WAKE_INTR        do{ /* Does nothing */ }while(0)
S    
S#elif (SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_PIN)
X#elif ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_CLEAR_UART_RX_WAKE_INTR \
S            do{                                      \
S                (void) SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi_ClearInterrupt(); \
S            }while(0)
X    #define SPI_0_OLED_FLASH_CLEAR_UART_RX_WAKE_INTR             do{                                                      (void) SPI_0_OLED_FLASH_uart_rx_wake_i2c_scl_spi_mosi_ClearInterrupt();             }while(0)
S
S#elif(SPI_0_OLED_FLASH_UART_RX_WAKE_PIN)
X#elif((0u == (1u)))
S    #define SPI_0_OLED_FLASH_CLEAR_UART_RX_WAKE_INTR \
S            do{                                      \
S                (void) SPI_0_OLED_FLASH_rx_wake_ClearInterrupt(); \
S            }while(0)
X    #define SPI_0_OLED_FLASH_CLEAR_UART_RX_WAKE_INTR             do{                                                      (void) SPI_0_OLED_FLASH_rx_wake_ClearInterrupt();             }while(0)
N#else
N#endif /* (SPI_0_OLED_FLASH_RX_SCL_MOSI_PIN) */
N
N
N/***************************************
N* The following code is DEPRECATED and
N* must not be used.
N***************************************/
N
N/* Unconfigured pins */
N#define SPI_0_OLED_FLASH_REMOVE_MOSI_SCL_RX_WAKE_PIN    SPI_0_OLED_FLASH_REMOVE_RX_WAKE_SCL_MOSI_PIN
N#define SPI_0_OLED_FLASH_REMOVE_MOSI_SCL_RX_PIN         SPI_0_OLED_FLASH_REMOVE_RX_SCL_MOSI_PIN
N#define SPI_0_OLED_FLASH_REMOVE_MISO_SDA_TX_PIN         SPI_0_OLED_FLASH_REMOVE_TX_SDA_MISO_PIN
N#ifndef SPI_0_OLED_FLASH_REMOVE_SCLK_PIN
N#define SPI_0_OLED_FLASH_REMOVE_SCLK_PIN                SPI_0_OLED_FLASH_REMOVE_CTS_SCLK_PIN
N#endif /* SPI_0_OLED_FLASH_REMOVE_SCLK_PIN */
N#ifndef SPI_0_OLED_FLASH_REMOVE_SS0_PIN
N#define SPI_0_OLED_FLASH_REMOVE_SS0_PIN                 SPI_0_OLED_FLASH_REMOVE_RTS_SS0_PIN
N#endif /* SPI_0_OLED_FLASH_REMOVE_SS0_PIN */
N
N/* Unconfigured pins */
N#define SPI_0_OLED_FLASH_MOSI_SCL_RX_WAKE_PIN   SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_PIN
N#define SPI_0_OLED_FLASH_MOSI_SCL_RX_PIN        SPI_0_OLED_FLASH_RX_SCL_MOSI_PIN
N#define SPI_0_OLED_FLASH_MISO_SDA_TX_PIN        SPI_0_OLED_FLASH_TX_SDA_MISO_PIN
N#ifndef SPI_0_OLED_FLASH_SCLK_PIN
N#define SPI_0_OLED_FLASH_SCLK_PIN               SPI_0_OLED_FLASH_CTS_SCLK_PIN
N#endif /* SPI_0_OLED_FLASH_SCLK_PIN */
N#ifndef SPI_0_OLED_FLASH_SS0_PIN
N#define SPI_0_OLED_FLASH_SS0_PIN                SPI_0_OLED_FLASH_RTS_SS0_PIN
N#endif /* SPI_0_OLED_FLASH_SS0_PIN */
N
N#if (SPI_0_OLED_FLASH_MOSI_SCL_RX_WAKE_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_MOSI_SCL_RX_WAKE_HSIOM_REG     SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_REG
S    #define SPI_0_OLED_FLASH_MOSI_SCL_RX_WAKE_HSIOM_PTR     SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_REG
S    #define SPI_0_OLED_FLASH_MOSI_SCL_RX_WAKE_HSIOM_MASK    SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_REG
S    #define SPI_0_OLED_FLASH_MOSI_SCL_RX_WAKE_HSIOM_POS     SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_REG
S
S    #define SPI_0_OLED_FLASH_MOSI_SCL_RX_WAKE_INTCFG_REG    SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_REG
S    #define SPI_0_OLED_FLASH_MOSI_SCL_RX_WAKE_INTCFG_PTR    SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_REG
S
S    #define SPI_0_OLED_FLASH_MOSI_SCL_RX_WAKE_INTCFG_TYPE_POS   SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_REG
S    #define SPI_0_OLED_FLASH_MOSI_SCL_RX_WAKE_INTCFG_TYPE_MASK  SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_HSIOM_REG
N#endif /* (SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_PIN) */
N
N#if (SPI_0_OLED_FLASH_MOSI_SCL_RX_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_MOSI_SCL_RX_HSIOM_REG      SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_REG
S    #define SPI_0_OLED_FLASH_MOSI_SCL_RX_HSIOM_PTR      SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_PTR
S    #define SPI_0_OLED_FLASH_MOSI_SCL_RX_HSIOM_MASK     SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_MASK
S    #define SPI_0_OLED_FLASH_MOSI_SCL_RX_HSIOM_POS      SPI_0_OLED_FLASH_RX_SCL_MOSI_HSIOM_POS
N#endif /* (SPI_0_OLED_FLASH_MOSI_SCL_RX_PIN) */
N
N#if (SPI_0_OLED_FLASH_MISO_SDA_TX_PIN)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_MISO_SDA_TX_HSIOM_REG      SPI_0_OLED_FLASH_TX_SDA_MISO_HSIOM_REG
S    #define SPI_0_OLED_FLASH_MISO_SDA_TX_HSIOM_PTR      SPI_0_OLED_FLASH_TX_SDA_MISO_HSIOM_REG
S    #define SPI_0_OLED_FLASH_MISO_SDA_TX_HSIOM_MASK     SPI_0_OLED_FLASH_TX_SDA_MISO_HSIOM_REG
S    #define SPI_0_OLED_FLASH_MISO_SDA_TX_HSIOM_POS      SPI_0_OLED_FLASH_TX_SDA_MISO_HSIOM_REG
N#endif /* (SPI_0_OLED_FLASH_MISO_SDA_TX_PIN_PIN) */
N
N#if (SPI_0_OLED_FLASH_SCLK_PIN)
X#if ((0u == (1u)))
S    #ifndef SPI_0_OLED_FLASH_SCLK_HSIOM_REG
S    #define SPI_0_OLED_FLASH_SCLK_HSIOM_REG     SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_REG
S    #define SPI_0_OLED_FLASH_SCLK_HSIOM_PTR     SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_PTR
S    #define SPI_0_OLED_FLASH_SCLK_HSIOM_MASK    SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_MASK
S    #define SPI_0_OLED_FLASH_SCLK_HSIOM_POS     SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_POS
S    #endif /* SPI_0_OLED_FLASH_SCLK_HSIOM_REG */
N#endif /* (SPI_0_OLED_FLASH_SCLK_PIN) */
N
N#if (SPI_0_OLED_FLASH_SS0_PIN)
X#if ((0u == (1u)))
S    #ifndef SPI_0_OLED_FLASH_SS0_HSIOM_REG
S    #define SPI_0_OLED_FLASH_SS0_HSIOM_REG      SPI_0_OLED_FLASH_RTS_SS0_HSIOM_REG
S    #define SPI_0_OLED_FLASH_SS0_HSIOM_PTR      SPI_0_OLED_FLASH_RTS_SS0_HSIOM_PTR
S    #define SPI_0_OLED_FLASH_SS0_HSIOM_MASK     SPI_0_OLED_FLASH_RTS_SS0_HSIOM_MASK
S    #define SPI_0_OLED_FLASH_SS0_HSIOM_POS      SPI_0_OLED_FLASH_RTS_SS0_HSIOM_POS
S    #endif /* SPI_0_OLED_FLASH_SS0_HSIOM_REG */
N#endif /* (SPI_0_OLED_FLASH_SS0_PIN) */
N
N#define SPI_0_OLED_FLASH_MOSI_SCL_RX_WAKE_PIN_INDEX SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_PIN_INDEX
N#define SPI_0_OLED_FLASH_MOSI_SCL_RX_PIN_INDEX      SPI_0_OLED_FLASH_RX_SCL_MOSI_PIN_INDEX
N#define SPI_0_OLED_FLASH_MISO_SDA_TX_PIN_INDEX      SPI_0_OLED_FLASH_TX_SDA_MISO_PIN_INDEX
N#ifndef SPI_0_OLED_FLASH_SCLK_PIN_INDEX
N#define SPI_0_OLED_FLASH_SCLK_PIN_INDEX             SPI_0_OLED_FLASH_CTS_SCLK_PIN_INDEX
N#endif /* SPI_0_OLED_FLASH_SCLK_PIN_INDEX */
N#ifndef SPI_0_OLED_FLASH_SS0_PIN_INDEX
N#define SPI_0_OLED_FLASH_SS0_PIN_INDEX              SPI_0_OLED_FLASH_RTS_SS0_PIN_INDEX
N#endif /* SPI_0_OLED_FLASH_SS0_PIN_INDEX */
N
N#define SPI_0_OLED_FLASH_MOSI_SCL_RX_WAKE_PIN_MASK SPI_0_OLED_FLASH_RX_WAKE_SCL_MOSI_PIN_MASK
N#define SPI_0_OLED_FLASH_MOSI_SCL_RX_PIN_MASK      SPI_0_OLED_FLASH_RX_SCL_MOSI_PIN_MASK
N#define SPI_0_OLED_FLASH_MISO_SDA_TX_PIN_MASK      SPI_0_OLED_FLASH_TX_SDA_MISO_PIN_MASK
N#ifndef SPI_0_OLED_FLASH_SCLK_PIN_MASK
N#define SPI_0_OLED_FLASH_SCLK_PIN_MASK             SPI_0_OLED_FLASH_CTS_SCLK_PIN_MASK
N#endif /* SPI_0_OLED_FLASH_SCLK_PIN_MASK */
N#ifndef SPI_0_OLED_FLASH_SS0_PIN_MASK
N#define SPI_0_OLED_FLASH_SS0_PIN_MASK              SPI_0_OLED_FLASH_RTS_SS0_PIN_MASK
N#endif /* SPI_0_OLED_FLASH_SS0_PIN_MASK */
N
N#endif /* (CY_SCB_PINS_SPI_0_OLED_FLASH_H) */
N
N
N/* [] END OF FILE */
L 86 "Generated_Source\PSoC4\SPI_0_OLED_FLASH.h" 2
N
N#if (SPI_0_OLED_FLASH_SCB_CLK_INTERNAL)
X#if ((0u == (0u)))
N    #include "SPI_0_OLED_FLASH_SCBCLK.h"
L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_SCBCLK.h" 1
N/*******************************************************************************
N* File Name: SPI_0_OLED_FLASH_SCBCLK.h
N* Version 2.20
N*
N*  Description:
N*   Provides the function and constant definitions for the clock component.
N*
N*  Note:
N*
N********************************************************************************
N* Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions, 
N* disclaimers, and limitations in the end user license agreement accompanying 
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_CLOCK_SPI_0_OLED_FLASH_SCBCLK_H)
X#if !0L
N#define CY_CLOCK_SPI_0_OLED_FLASH_SCBCLK_H
N
N#include <cytypes.h>
N#include <cyfitter.h>
N
N
N/***************************************
N*        Function Prototypes
N***************************************/
N#if defined CYREG_PERI_DIV_CMD
X#if 1L
N
Nvoid SPI_0_OLED_FLASH_SCBCLK_StartEx(uint32 alignClkDiv);
N#define SPI_0_OLED_FLASH_SCBCLK_Start() \
N    SPI_0_OLED_FLASH_SCBCLK_StartEx(SPI_0_OLED_FLASH_SCBCLK__PA_DIV_ID)
X#define SPI_0_OLED_FLASH_SCBCLK_Start()     SPI_0_OLED_FLASH_SCBCLK_StartEx(SPI_0_OLED_FLASH_SCBCLK__PA_DIV_ID)
N
N#else
S
Svoid SPI_0_OLED_FLASH_SCBCLK_Start(void);
S
N#endif/* CYREG_PERI_DIV_CMD */
N
Nvoid SPI_0_OLED_FLASH_SCBCLK_Stop(void);
N
Nvoid SPI_0_OLED_FLASH_SCBCLK_SetFractionalDividerRegister(uint16 clkDivider, uint8 clkFractional);
N
Nuint16 SPI_0_OLED_FLASH_SCBCLK_GetDividerRegister(void);
Nuint8  SPI_0_OLED_FLASH_SCBCLK_GetFractionalDividerRegister(void);
N
N#define SPI_0_OLED_FLASH_SCBCLK_Enable()                         SPI_0_OLED_FLASH_SCBCLK_Start()
N#define SPI_0_OLED_FLASH_SCBCLK_Disable()                        SPI_0_OLED_FLASH_SCBCLK_Stop()
N#define SPI_0_OLED_FLASH_SCBCLK_SetDividerRegister(clkDivider, reset)  \
N    SPI_0_OLED_FLASH_SCBCLK_SetFractionalDividerRegister((clkDivider), 0u)
X#define SPI_0_OLED_FLASH_SCBCLK_SetDividerRegister(clkDivider, reset)      SPI_0_OLED_FLASH_SCBCLK_SetFractionalDividerRegister((clkDivider), 0u)
N#define SPI_0_OLED_FLASH_SCBCLK_SetDivider(clkDivider)           SPI_0_OLED_FLASH_SCBCLK_SetDividerRegister((clkDivider), 1u)
N#define SPI_0_OLED_FLASH_SCBCLK_SetDividerValue(clkDivider)      SPI_0_OLED_FLASH_SCBCLK_SetDividerRegister((clkDivider) - 1u, 1u)
N
N
N/***************************************
N*             Registers
N***************************************/
N#if defined CYREG_PERI_DIV_CMD
X#if 1L
N
N#define SPI_0_OLED_FLASH_SCBCLK_DIV_ID     SPI_0_OLED_FLASH_SCBCLK__DIV_ID
N
N#define SPI_0_OLED_FLASH_SCBCLK_CMD_REG    (*(reg32 *)CYREG_PERI_DIV_CMD)
N#define SPI_0_OLED_FLASH_SCBCLK_CTRL_REG   (*(reg32 *)SPI_0_OLED_FLASH_SCBCLK__CTRL_REGISTER)
N#define SPI_0_OLED_FLASH_SCBCLK_DIV_REG    (*(reg32 *)SPI_0_OLED_FLASH_SCBCLK__DIV_REGISTER)
N
N#define SPI_0_OLED_FLASH_SCBCLK_CMD_DIV_SHIFT          (0u)
N#define SPI_0_OLED_FLASH_SCBCLK_CMD_PA_DIV_SHIFT       (8u)
N#define SPI_0_OLED_FLASH_SCBCLK_CMD_DISABLE_SHIFT      (30u)
N#define SPI_0_OLED_FLASH_SCBCLK_CMD_ENABLE_SHIFT       (31u)
N
N#define SPI_0_OLED_FLASH_SCBCLK_CMD_DISABLE_MASK       ((uint32)((uint32)1u << SPI_0_OLED_FLASH_SCBCLK_CMD_DISABLE_SHIFT))
N#define SPI_0_OLED_FLASH_SCBCLK_CMD_ENABLE_MASK        ((uint32)((uint32)1u << SPI_0_OLED_FLASH_SCBCLK_CMD_ENABLE_SHIFT))
N
N#define SPI_0_OLED_FLASH_SCBCLK_DIV_FRAC_MASK  (0x000000F8u)
N#define SPI_0_OLED_FLASH_SCBCLK_DIV_FRAC_SHIFT (3u)
N#define SPI_0_OLED_FLASH_SCBCLK_DIV_INT_MASK   (0xFFFFFF00u)
N#define SPI_0_OLED_FLASH_SCBCLK_DIV_INT_SHIFT  (8u)
N
N#else 
S
S#define SPI_0_OLED_FLASH_SCBCLK_DIV_REG        (*(reg32 *)SPI_0_OLED_FLASH_SCBCLK__REGISTER)
S#define SPI_0_OLED_FLASH_SCBCLK_ENABLE_REG     SPI_0_OLED_FLASH_SCBCLK_DIV_REG
S#define SPI_0_OLED_FLASH_SCBCLK_DIV_FRAC_MASK  SPI_0_OLED_FLASH_SCBCLK__FRAC_MASK
S#define SPI_0_OLED_FLASH_SCBCLK_DIV_FRAC_SHIFT (16u)
S#define SPI_0_OLED_FLASH_SCBCLK_DIV_INT_MASK   SPI_0_OLED_FLASH_SCBCLK__DIVIDER_MASK
S#define SPI_0_OLED_FLASH_SCBCLK_DIV_INT_SHIFT  (0u)
S
N#endif/* CYREG_PERI_DIV_CMD */
N
N#endif /* !defined(CY_CLOCK_SPI_0_OLED_FLASH_SCBCLK_H) */
N
N/* [] END OF FILE */
L 89 "Generated_Source\PSoC4\SPI_0_OLED_FLASH.h" 2
N#endif /* (SPI_0_OLED_FLASH_SCB_CLK_INTERNAL) */
N
N
N/***************************************
N*       Type Definitions
N***************************************/
N
Ntypedef struct
N{
N    uint8 enableState;
N} SPI_0_OLED_FLASH_BACKUP_STRUCT;
N
N
N/***************************************
N*        Function Prototypes
N***************************************/
N
N/**
N* \addtogroup group_general
N* @{
N*/
N
N/* Start and Stop APIs */
Nvoid SPI_0_OLED_FLASH_Init(void);
Nvoid SPI_0_OLED_FLASH_Enable(void);
Nvoid SPI_0_OLED_FLASH_Start(void);
Nvoid SPI_0_OLED_FLASH_Stop(void);
N
N/** @} general */
N
N/**
N* \addtogroup group_power
N* @{
N*/
N/* Sleep and Wakeup APis */
Nvoid SPI_0_OLED_FLASH_Sleep(void);
Nvoid SPI_0_OLED_FLASH_Wakeup(void);
N/** @} power */ 
N
N/**
N* \addtogroup group_interrupt
N* @{
N*/
N#if (SPI_0_OLED_FLASH_SCB_IRQ_INTERNAL)
X#if ((0u == (1u)))
S    /* Custom interrupt handler */
S    void SPI_0_OLED_FLASH_SetCustomInterruptHandler(void (*func)(void));
N#endif /* (SPI_0_OLED_FLASH_SCB_IRQ_INTERNAL) */
N/** @} interrupt */
N
N/* Interface to internal interrupt component */
N#if (SPI_0_OLED_FLASH_SCB_IRQ_INTERNAL)
X#if ((0u == (1u)))
S    /**
S    * \addtogroup group_interrupt
S    * @{
S    */    
S    /*******************************************************************************
S    * Function Name: SPI_0_OLED_FLASH_EnableInt
S    ****************************************************************************//**
S    *
S    *  When using an Internal interrupt, this enables the interrupt in the NVIC. 
S    *  When using an external interrupt the API for the interrupt component must 
S    *  be used to enable the interrupt.
S    *
S    *******************************************************************************/
S    #define SPI_0_OLED_FLASH_EnableInt()    CyIntEnable(SPI_0_OLED_FLASH_ISR_NUMBER)
S    
S    
S    /*******************************************************************************
S    * Function Name: SPI_0_OLED_FLASH_DisableInt
S    ****************************************************************************//**
S    *
S    *  When using an Internal interrupt, this disables the interrupt in the NVIC. 
S    *  When using an external interrupt the API for the interrupt component must 
S    *  be used to disable the interrupt.
S    *
S    *******************************************************************************/    
S    #define SPI_0_OLED_FLASH_DisableInt()   CyIntDisable(SPI_0_OLED_FLASH_ISR_NUMBER)
S    /** @} interrupt */
S
S    /*******************************************************************************
S    * Function Name: SPI_0_OLED_FLASH_ClearPendingInt
S    ****************************************************************************//**
S    *
S    *  This function clears the interrupt pending status in the NVIC. 
S    *
S    *******************************************************************************/
S    #define SPI_0_OLED_FLASH_ClearPendingInt()  CyIntClearPending(SPI_0_OLED_FLASH_ISR_NUMBER)
N#endif /* (SPI_0_OLED_FLASH_SCB_IRQ_INTERNAL) */
N
N#if (SPI_0_OLED_FLASH_UART_RX_WAKEUP_IRQ)
X#if ((0u == (1u)))
S    /*******************************************************************************
S    * Function Name: SPI_0_OLED_FLASH_RxWakeEnableInt
S    ****************************************************************************//**
S    *
S    *  This function enables the interrupt (RX_WAKE) pending status in the NVIC. 
S    *
S    *******************************************************************************/    
S    #define SPI_0_OLED_FLASH_RxWakeEnableInt()  CyIntEnable(SPI_0_OLED_FLASH_RX_WAKE_ISR_NUMBER)
S    
S
S    /*******************************************************************************
S    * Function Name: SPI_0_OLED_FLASH_RxWakeDisableInt
S    ****************************************************************************//**
S    *
S    *  This function disables the interrupt (RX_WAKE) pending status in the NVIC.  
S    *
S    *******************************************************************************/
S    #define SPI_0_OLED_FLASH_RxWakeDisableInt() CyIntDisable(SPI_0_OLED_FLASH_RX_WAKE_ISR_NUMBER)
S    
S    
S    /*******************************************************************************
S    * Function Name: SPI_0_OLED_FLASH_RxWakeClearPendingInt
S    ****************************************************************************//**
S    *
S    *  This function clears the interrupt (RX_WAKE) pending status in the NVIC. 
S    *
S    *******************************************************************************/    
S    #define SPI_0_OLED_FLASH_RxWakeClearPendingInt()  CyIntClearPending(SPI_0_OLED_FLASH_RX_WAKE_ISR_NUMBER)
N#endif /* (SPI_0_OLED_FLASH_UART_RX_WAKEUP_IRQ) */
N
N/**
N* \addtogroup group_interrupt
N* @{
N*/
N/* Get interrupt cause */
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_GetInterruptCause
N****************************************************************************//**
N*
N*  Returns a mask of bits showing the source of the current triggered interrupt. 
N*  This is useful for modes of operation where an interrupt can be generated by 
N*  conditions in multiple interrupt source registers.
N*
N*  \return
N*   Mask with the OR of the following conditions that have been triggered.
N*    - SPI_0_OLED_FLASH_INTR_CAUSE_MASTER - Interrupt from Master
N*    - SPI_0_OLED_FLASH_INTR_CAUSE_SLAVE - Interrupt from Slave
N*    - SPI_0_OLED_FLASH_INTR_CAUSE_TX - Interrupt from TX
N*    - SPI_0_OLED_FLASH_INTR_CAUSE_RX - Interrupt from RX
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_GetInterruptCause()    (SPI_0_OLED_FLASH_INTR_CAUSE_REG)
N
N
N/* APIs to service INTR_RX register */
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_GetRxInterruptSource
N****************************************************************************//**
N*
N*  Returns RX interrupt request register. This register contains current status 
N*  of RX interrupt sources.
N*
N*  \return
N*   Current status of RX interrupt sources.
N*   Each constant is a bit field value. The value returned may have multiple 
N*   bits set to indicate the current status.
N*   - SPI_0_OLED_FLASH_INTR_RX_FIFO_LEVEL - The number of data elements in the 
N      RX FIFO is greater than the value of RX FIFO level.
N*   - SPI_0_OLED_FLASH_INTR_RX_NOT_EMPTY - Receiver FIFO is not empty.
N*   - SPI_0_OLED_FLASH_INTR_RX_FULL - Receiver FIFO is full.
N*   - SPI_0_OLED_FLASH_INTR_RX_OVERFLOW - Attempt to write to a full 
N*     receiver FIFO.
N*   - SPI_0_OLED_FLASH_INTR_RX_UNDERFLOW - Attempt to read from an empty 
N*     receiver FIFO.
N*   - SPI_0_OLED_FLASH_INTR_RX_FRAME_ERROR - UART framing error detected.
N*   - SPI_0_OLED_FLASH_INTR_RX_PARITY_ERROR - UART parity error detected.
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_GetRxInterruptSource() (SPI_0_OLED_FLASH_INTR_RX_REG)
N
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_SetRxInterruptMode
N****************************************************************************//**
N*
N*  Writes RX interrupt mask register. This register configures which bits from 
N*  RX interrupt request register will trigger an interrupt event.
N*
N*  \param interruptMask: RX interrupt sources to be enabled (refer to 
N*   SPI_0_OLED_FLASH_GetRxInterruptSource() function for bit fields values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_SetRxInterruptMode(interruptMask)     SPI_0_OLED_FLASH_WRITE_INTR_RX_MASK(interruptMask)
N
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_GetRxInterruptMode
N****************************************************************************//**
N*
N*  Returns RX interrupt mask register This register specifies which bits from 
N*  RX interrupt request register will trigger an interrupt event.
N*
N*  \return 
N*   RX interrupt sources to be enabled (refer to 
N*   SPI_0_OLED_FLASH_GetRxInterruptSource() function for bit fields values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_GetRxInterruptMode()   (SPI_0_OLED_FLASH_INTR_RX_MASK_REG)
N
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_GetRxInterruptSourceMasked
N****************************************************************************//**
N*
N*  Returns RX interrupt masked request register. This register contains logical
N*  AND of corresponding bits from RX interrupt request and mask registers.
N*  This function is intended to be used in the interrupt service routine to 
N*  identify which of enabled RX interrupt sources cause interrupt event.
N*
N*  \return 
N*   Current status of enabled RX interrupt sources (refer to 
N*   SPI_0_OLED_FLASH_GetRxInterruptSource() function for bit fields values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_GetRxInterruptSourceMasked()   (SPI_0_OLED_FLASH_INTR_RX_MASKED_REG)
N
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_ClearRxInterruptSource
N****************************************************************************//**
N*
N*  Clears RX interrupt sources in the interrupt request register.
N*
N*  \param interruptMask: RX interrupt sources to be cleared (refer to 
N*   SPI_0_OLED_FLASH_GetRxInterruptSource() function for bit fields values).
N*
N*  \sideeffects 
N*   The side effects are listed in the table below for each 
N*   affected interrupt source. Refer to section RX FIFO interrupt sources for 
N*   detailed description.
N*   - SPI_0_OLED_FLASH_INTR_RX_FIFO_LEVEL Interrupt source is not cleared when 
N*     the receiver FIFO has more entries than level.
N*   - SPI_0_OLED_FLASH_INTR_RX_NOT_EMPTY Interrupt source is not cleared when
N*     receiver FIFO is not empty.
N*   - SPI_0_OLED_FLASH_INTR_RX_FULL Interrupt source is not cleared when 
N*      receiver FIFO is full.
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_ClearRxInterruptSource(interruptMask)  SPI_0_OLED_FLASH_CLEAR_INTR_RX(interruptMask)
N
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_SetRxInterrupt
N****************************************************************************//**
N*
N*  Sets RX interrupt sources in the interrupt request register.
N*
N*  \param interruptMask: RX interrupt sources to set in the RX interrupt request 
N*   register (refer to SPI_0_OLED_FLASH_GetRxInterruptSource() function for bit 
N*   fields values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_SetRxInterrupt(interruptMask)  SPI_0_OLED_FLASH_SET_INTR_RX(interruptMask)
N
Nvoid SPI_0_OLED_FLASH_SetRxFifoLevel(uint32 level);
N
N
N/* APIs to service INTR_TX register */
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_GetTxInterruptSource
N****************************************************************************//**
N*
N*  Returns TX interrupt request register. This register contains current status 
N*  of TX interrupt sources.
N* 
N*  \return 
N*   Current status of TX interrupt sources.
N*   Each constant is a bit field value. The value returned may have multiple 
N*   bits set to indicate the current status.
N*   - SPI_0_OLED_FLASH_INTR_TX_FIFO_LEVEL - The number of data elements in the 
N*     TX FIFO is less than the value of TX FIFO level.
N*   - SPI_0_OLED_FLASH_INTR_TX_NOT_FULL - Transmitter FIFO is not full.
N*   - SPI_0_OLED_FLASH_INTR_TX_EMPTY - Transmitter FIFO is empty.
N*   - SPI_0_OLED_FLASH_INTR_TX_OVERFLOW - Attempt to write to a full 
N*     transmitter FIFO.
N*   - SPI_0_OLED_FLASH_INTR_TX_UNDERFLOW - Attempt to read from an empty 
N*     transmitter FIFO.
N*   - SPI_0_OLED_FLASH_INTR_TX_UART_NACK - UART received a NACK in SmartCard 
N*   mode.
N*   - SPI_0_OLED_FLASH_INTR_TX_UART_DONE - UART transfer is complete. 
N*     All data elements from the TX FIFO are sent.
N*   - SPI_0_OLED_FLASH_INTR_TX_UART_ARB_LOST - Value on the TX line of the UART
N*     does not match the value on the RX line.
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_GetTxInterruptSource() (SPI_0_OLED_FLASH_INTR_TX_REG)
N
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_SetTxInterruptMode
N****************************************************************************//**
N*
N*  Writes TX interrupt mask register. This register configures which bits from 
N*  TX interrupt request register will trigger an interrupt event.
N*
N*  \param interruptMask: TX interrupt sources to be enabled (refer to 
N*   SPI_0_OLED_FLASH_GetTxInterruptSource() function for bit field values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_SetTxInterruptMode(interruptMask)  SPI_0_OLED_FLASH_WRITE_INTR_TX_MASK(interruptMask)
N
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_GetTxInterruptMode
N****************************************************************************//**
N*
N*  Returns TX interrupt mask register This register specifies which bits from 
N*  TX interrupt request register will trigger an interrupt event.
N*
N*  \return 
N*   Enabled TX interrupt sources (refer to 
N*   SPI_0_OLED_FLASH_GetTxInterruptSource() function for bit field values).
N*   
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_GetTxInterruptMode()   (SPI_0_OLED_FLASH_INTR_TX_MASK_REG)
N
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_GetTxInterruptSourceMasked
N****************************************************************************//**
N*
N*  Returns TX interrupt masked request register. This register contains logical
N*  AND of corresponding bits from TX interrupt request and mask registers.
N*  This function is intended to be used in the interrupt service routine to identify 
N*  which of enabled TX interrupt sources cause interrupt event.
N*
N*  \return 
N*   Current status of enabled TX interrupt sources (refer to 
N*   SPI_0_OLED_FLASH_GetTxInterruptSource() function for bit field values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_GetTxInterruptSourceMasked()   (SPI_0_OLED_FLASH_INTR_TX_MASKED_REG)
N
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_ClearTxInterruptSource
N****************************************************************************//**
N*
N*  Clears TX interrupt sources in the interrupt request register.
N*
N*  \param interruptMask: TX interrupt sources to be cleared (refer to 
N*   SPI_0_OLED_FLASH_GetTxInterruptSource() function for bit field values).
N*
N*  \sideeffects 
N*   The side effects are listed in the table below for each affected interrupt 
N*   source. Refer to section TX FIFO interrupt sources for detailed description.
N*   - SPI_0_OLED_FLASH_INTR_TX_FIFO_LEVEL - Interrupt source is not cleared when 
N*     transmitter FIFO has less entries than level.
N*   - SPI_0_OLED_FLASH_INTR_TX_NOT_FULL - Interrupt source is not cleared when
N*     transmitter FIFO has empty entries.
N*   - SPI_0_OLED_FLASH_INTR_TX_EMPTY - Interrupt source is not cleared when 
N*     transmitter FIFO is empty.
N*   - SPI_0_OLED_FLASH_INTR_TX_UNDERFLOW - Interrupt source is not cleared when 
N*     transmitter FIFO is empty and I2C mode with clock stretching is selected. 
N*     Put data into the transmitter FIFO before clearing it. This behavior only 
N*     applicable for PSoC 4100/PSoC 4200 devices.
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_ClearTxInterruptSource(interruptMask)  SPI_0_OLED_FLASH_CLEAR_INTR_TX(interruptMask)
N
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_SetTxInterrupt
N****************************************************************************//**
N*
N*  Sets RX interrupt sources in the interrupt request register.
N*
N*  \param interruptMask: RX interrupt sources to set in the RX interrupt request 
N*   register (refer to SPI_0_OLED_FLASH_GetRxInterruptSource() function for bit 
N*   fields values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_SetTxInterrupt(interruptMask)  SPI_0_OLED_FLASH_SET_INTR_TX(interruptMask)
N
Nvoid SPI_0_OLED_FLASH_SetTxFifoLevel(uint32 level);
N
N
N/* APIs to service INTR_MASTER register */
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_GetMasterInterruptSource
N****************************************************************************//**
N*
N*  Returns Master interrupt request register. This register contains current 
N*  status of Master interrupt sources.
N*
N*  \return 
N*   Current status of Master interrupt sources. 
N*   Each constant is a bit field value. The value returned may have multiple 
N*   bits set to indicate the current status.
N*   - SPI_0_OLED_FLASH_INTR_MASTER_SPI_DONE - SPI master transfer is complete.
N*     Refer to Interrupt sources section for detailed description.
N*   - SPI_0_OLED_FLASH_INTR_MASTER_I2C_ARB_LOST - I2C master lost arbitration.
N*   - SPI_0_OLED_FLASH_INTR_MASTER_I2C_NACK - I2C master received negative 
N*    acknowledgement (NAK).
N*   - SPI_0_OLED_FLASH_INTR_MASTER_I2C_ACK - I2C master received acknowledgement.
N*   - SPI_0_OLED_FLASH_INTR_MASTER_I2C_STOP - I2C master generated STOP.
N*   - SPI_0_OLED_FLASH_INTR_MASTER_I2C_BUS_ERROR - I2C master bus error 
N*     (detection of unexpected START or STOP condition).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_GetMasterInterruptSource() (SPI_0_OLED_FLASH_INTR_MASTER_REG)
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_SetMasterInterruptMode
N****************************************************************************//**
N*
N*  Writes Master interrupt mask register. This register configures which bits 
N*  from Master interrupt request register will trigger an interrupt event.
N*
N*  \param interruptMask: Master interrupt sources to be enabled (refer to 
N*   SPI_0_OLED_FLASH_GetMasterInterruptSource() function for bit field values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_SetMasterInterruptMode(interruptMask)  SPI_0_OLED_FLASH_WRITE_INTR_MASTER_MASK(interruptMask)
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_GetMasterInterruptMode
N****************************************************************************//**
N*
N*  Returns Master interrupt mask register This register specifies which bits 
N*  from Master interrupt request register will trigger an interrupt event.
N*
N*  \return 
N*   Enabled Master interrupt sources (refer to 
N*   SPI_0_OLED_FLASH_GetMasterInterruptSource() function for return values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_GetMasterInterruptMode()   (SPI_0_OLED_FLASH_INTR_MASTER_MASK_REG)
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_GetMasterInterruptSourceMasked
N****************************************************************************//**
N*
N*  Returns Master interrupt masked request register. This register contains 
N*  logical AND of corresponding bits from Master interrupt request and mask 
N*  registers.
N*  This function is intended to be used in the interrupt service routine to 
N*  identify which of enabled Master interrupt sources cause interrupt event.
N*
N*  \return 
N*   Current status of enabled Master interrupt sources (refer to 
N*   SPI_0_OLED_FLASH_GetMasterInterruptSource() function for return values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_GetMasterInterruptSourceMasked()   (SPI_0_OLED_FLASH_INTR_MASTER_MASKED_REG)
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_ClearMasterInterruptSource
N****************************************************************************//**
N*
N*  Clears Master interrupt sources in the interrupt request register.
N*
N*  \param interruptMask: Master interrupt sources to be cleared (refer to 
N*   SPI_0_OLED_FLASH_GetMasterInterruptSource() function for bit field values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_ClearMasterInterruptSource(interruptMask)  SPI_0_OLED_FLASH_CLEAR_INTR_MASTER(interruptMask)
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_SetMasterInterrupt
N****************************************************************************//**
N*
N*  Sets Master interrupt sources in the interrupt request register.
N*
N*  \param interruptMask: Master interrupt sources to set in the Master interrupt
N*   request register (refer to SPI_0_OLED_FLASH_GetMasterInterruptSource() 
N*   function for bit field values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_SetMasterInterrupt(interruptMask)  SPI_0_OLED_FLASH_SET_INTR_MASTER(interruptMask)
N
N
N/* APIs to service INTR_SLAVE register */
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_GetSlaveInterruptSource
N****************************************************************************//**
N*
N*  Returns Slave interrupt request register. This register contains current 
N*  status of Slave interrupt sources.
N*
N*  \return 
N*   Current status of Slave interrupt sources.
N*   Each constant is a bit field value. The value returned may have multiple 
N*   bits set to indicate the current status.
N*   - SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ARB_LOST - I2C slave lost arbitration: 
N*     the value driven on the SDA line is not the same as the value observed 
N*     on the SDA line.
N*   - SPI_0_OLED_FLASH_INTR_SLAVE_I2C_NACK - I2C slave received negative 
N*     acknowledgement (NAK).
N*   - SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ACK - I2C slave received 
N*     acknowledgement (ACK).
N*   - SPI_0_OLED_FLASH_INTR_SLAVE_I2C_WRITE_STOP - Stop or Repeated Start 
N*     event for write transfer intended for this slave (address matching 
N*     is performed).
N*   - SPI_0_OLED_FLASH_INTR_SLAVE_I2C_STOP - Stop or Repeated Start event 
N*     for (read or write) transfer intended for this slave (address matching 
N*     is performed).
N*   - SPI_0_OLED_FLASH_INTR_SLAVE_I2C_START - I2C slave received Start 
N*     condition.
N*   - SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ADDR_MATCH - I2C slave received matching 
N*     address.
N*   - SPI_0_OLED_FLASH_INTR_SLAVE_I2C_GENERAL - I2C Slave received general 
N*     call address.
N*   - SPI_0_OLED_FLASH_INTR_SLAVE_I2C_BUS_ERROR - I2C slave bus error (detection 
N*      of unexpected Start or Stop condition).
N*   - SPI_0_OLED_FLASH_INTR_SLAVE_SPI_BUS_ERROR - SPI slave select line is 
N*      deselected at an expected time while the SPI transfer.
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_GetSlaveInterruptSource()  (SPI_0_OLED_FLASH_INTR_SLAVE_REG)
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_SetSlaveInterruptMode
N****************************************************************************//**
N*
N*  Writes Slave interrupt mask register. 
N*  This register configures which bits from Slave interrupt request register 
N*  will trigger an interrupt event.
N*
N*  \param interruptMask: Slave interrupt sources to be enabled (refer to 
N*   SPI_0_OLED_FLASH_GetSlaveInterruptSource() function for bit field values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_SetSlaveInterruptMode(interruptMask)   SPI_0_OLED_FLASH_WRITE_INTR_SLAVE_MASK(interruptMask)
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_GetSlaveInterruptMode
N****************************************************************************//**
N*
N*  Returns Slave interrupt mask register.
N*  This register specifies which bits from Slave interrupt request register 
N*  will trigger an interrupt event.
N*
N*  \return 
N*   Enabled Slave interrupt sources(refer to 
N*   SPI_0_OLED_FLASH_GetSlaveInterruptSource() function for bit field values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_GetSlaveInterruptMode()    (SPI_0_OLED_FLASH_INTR_SLAVE_MASK_REG)
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_GetSlaveInterruptSourceMasked
N****************************************************************************//**
N*
N*  Returns Slave interrupt masked request register. This register contains 
N*  logical AND of corresponding bits from Slave interrupt request and mask 
N*  registers.
N*  This function is intended to be used in the interrupt service routine to 
N*  identify which of enabled Slave interrupt sources cause interrupt event.
N*
N*  \return 
N*   Current status of enabled Slave interrupt sources (refer to 
N*   SPI_0_OLED_FLASH_GetSlaveInterruptSource() function for return values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_GetSlaveInterruptSourceMasked()    (SPI_0_OLED_FLASH_INTR_SLAVE_MASKED_REG)
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_ClearSlaveInterruptSource
N****************************************************************************//**
N*
N*  Clears Slave interrupt sources in the interrupt request register.
N*
N*  \param interruptMask: Slave interrupt sources to be cleared (refer to 
N*   SPI_0_OLED_FLASH_GetSlaveInterruptSource() function for return values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_ClearSlaveInterruptSource(interruptMask)   SPI_0_OLED_FLASH_CLEAR_INTR_SLAVE(interruptMask)
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_SetSlaveInterrupt
N****************************************************************************//**
N*
N*  Sets Slave interrupt sources in the interrupt request register.
N*
N*  \param interruptMask: Slave interrupt sources to set in the Slave interrupt 
N*   request register (refer to SPI_0_OLED_FLASH_GetSlaveInterruptSource() 
N*   function for return values).
N*
N*******************************************************************************/
N#define SPI_0_OLED_FLASH_SetSlaveInterrupt(interruptMask)   SPI_0_OLED_FLASH_SET_INTR_SLAVE(interruptMask)
N
N/** @} interrupt */ 
N
N
N/***************************************
N*     Vars with External Linkage
N***************************************/
N
N/**
N* \addtogroup group_globals
N* @{
N*/
N
N/** SPI_0_OLED_FLASH_initVar indicates whether the SPI_0_OLED_FLASH 
N*  component has been initialized. The variable is initialized to 0 
N*  and set to 1 the first time SCB_Start() is called. This allows 
N*  the component to restart without reinitialization after the first 
N*  call to the SPI_0_OLED_FLASH_Start() routine.
N*
N*  If re-initialization of the component is required, then the 
N*  SPI_0_OLED_FLASH_Init() function can be called before the 
N*  SPI_0_OLED_FLASH_Start() or SPI_0_OLED_FLASH_Enable() function.
N*/
Nextern uint8 SPI_0_OLED_FLASH_initVar;
N/** @} globals */
N
N/***************************************
N*              Registers
N***************************************/
N
N#define SPI_0_OLED_FLASH_CTRL_REG               (*(reg32 *) SPI_0_OLED_FLASH_SCB__CTRL)
N#define SPI_0_OLED_FLASH_CTRL_PTR               ( (reg32 *) SPI_0_OLED_FLASH_SCB__CTRL)
N
N#define SPI_0_OLED_FLASH_STATUS_REG             (*(reg32 *) SPI_0_OLED_FLASH_SCB__STATUS)
N#define SPI_0_OLED_FLASH_STATUS_PTR             ( (reg32 *) SPI_0_OLED_FLASH_SCB__STATUS)
N
N#if (!SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if (!(2 == 1u))
N    #define SPI_0_OLED_FLASH_SPI_CTRL_REG           (*(reg32 *) SPI_0_OLED_FLASH_SCB__SPI_CTRL)
N    #define SPI_0_OLED_FLASH_SPI_CTRL_PTR           ( (reg32 *) SPI_0_OLED_FLASH_SCB__SPI_CTRL)
N
N    #define SPI_0_OLED_FLASH_SPI_STATUS_REG         (*(reg32 *) SPI_0_OLED_FLASH_SCB__SPI_STATUS)
N    #define SPI_0_OLED_FLASH_SPI_STATUS_PTR         ( (reg32 *) SPI_0_OLED_FLASH_SCB__SPI_STATUS)
N
N    #define SPI_0_OLED_FLASH_UART_CTRL_REG          (*(reg32 *) SPI_0_OLED_FLASH_SCB__UART_CTRL)
N    #define SPI_0_OLED_FLASH_UART_CTRL_PTR          ( (reg32 *) SPI_0_OLED_FLASH_SCB__UART_CTRL)
N
N    #define SPI_0_OLED_FLASH_UART_TX_CTRL_REG       (*(reg32 *) SPI_0_OLED_FLASH_SCB__UART_TX_CTRL)
N    #define SPI_0_OLED_FLASH_UART_TX_CTRL_PTR       ( (reg32 *) SPI_0_OLED_FLASH_SCB__UART_TX_CTRL)
N
N    #define SPI_0_OLED_FLASH_UART_RX_CTRL_REG       (*(reg32 *) SPI_0_OLED_FLASH_SCB__UART_RX_CTRL)
N    #define SPI_0_OLED_FLASH_UART_RX_CTRL_PTR       ( (reg32 *) SPI_0_OLED_FLASH_SCB__UART_RX_CTRL)
N
N    #define SPI_0_OLED_FLASH_UART_RX_STATUS_REG     (*(reg32 *) SPI_0_OLED_FLASH_SCB__UART_RX_STATUS)
N    #define SPI_0_OLED_FLASH_UART_RX_STATUS_PTR     ( (reg32 *) SPI_0_OLED_FLASH_SCB__UART_RX_STATUS)
N#endif /* (!SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N#if !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if !((2 == 0u) || (2 == 1u))
N    #define SPI_0_OLED_FLASH_UART_FLOW_CTRL_REG     (*(reg32 *) SPI_0_OLED_FLASH_SCB__UART_FLOW_CTRL)
N    #define SPI_0_OLED_FLASH_UART_FLOW_CTRL_PTR     ( (reg32 *) SPI_0_OLED_FLASH_SCB__UART_FLOW_CTRL)
N#endif /* !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N#define SPI_0_OLED_FLASH_I2C_CTRL_REG           (*(reg32 *) SPI_0_OLED_FLASH_SCB__I2C_CTRL)
N#define SPI_0_OLED_FLASH_I2C_CTRL_PTR           ( (reg32 *) SPI_0_OLED_FLASH_SCB__I2C_CTRL)
N
N#define SPI_0_OLED_FLASH_I2C_STATUS_REG         (*(reg32 *) SPI_0_OLED_FLASH_SCB__I2C_STATUS)
N#define SPI_0_OLED_FLASH_I2C_STATUS_PTR         ( (reg32 *) SPI_0_OLED_FLASH_SCB__I2C_STATUS)
N
N#define SPI_0_OLED_FLASH_I2C_MASTER_CMD_REG     (*(reg32 *) SPI_0_OLED_FLASH_SCB__I2C_M_CMD)
N#define SPI_0_OLED_FLASH_I2C_MASTER_CMD_PTR     ( (reg32 *) SPI_0_OLED_FLASH_SCB__I2C_M_CMD)
N
N#define SPI_0_OLED_FLASH_I2C_SLAVE_CMD_REG      (*(reg32 *) SPI_0_OLED_FLASH_SCB__I2C_S_CMD)
N#define SPI_0_OLED_FLASH_I2C_SLAVE_CMD_PTR      ( (reg32 *) SPI_0_OLED_FLASH_SCB__I2C_S_CMD)
N
N#define SPI_0_OLED_FLASH_I2C_CFG_REG            (*(reg32 *) SPI_0_OLED_FLASH_SCB__I2C_CFG)
N#define SPI_0_OLED_FLASH_I2C_CFG_PTR            ( (reg32 *) SPI_0_OLED_FLASH_SCB__I2C_CFG)
N
N#define SPI_0_OLED_FLASH_TX_CTRL_REG            (*(reg32 *) SPI_0_OLED_FLASH_SCB__TX_CTRL)
N#define SPI_0_OLED_FLASH_TX_CTRL_PTR            ( (reg32 *) SPI_0_OLED_FLASH_SCB__TX_CTRL)
N
N#define SPI_0_OLED_FLASH_TX_FIFO_CTRL_REG       (*(reg32 *) SPI_0_OLED_FLASH_SCB__TX_FIFO_CTRL)
N#define SPI_0_OLED_FLASH_TX_FIFO_CTRL_PTR       ( (reg32 *) SPI_0_OLED_FLASH_SCB__TX_FIFO_CTRL)
N
N#define SPI_0_OLED_FLASH_TX_FIFO_STATUS_REG     (*(reg32 *) SPI_0_OLED_FLASH_SCB__TX_FIFO_STATUS)
N#define SPI_0_OLED_FLASH_TX_FIFO_STATUS_PTR     ( (reg32 *) SPI_0_OLED_FLASH_SCB__TX_FIFO_STATUS)
N
N#define SPI_0_OLED_FLASH_TX_FIFO_WR_REG         (*(reg32 *) SPI_0_OLED_FLASH_SCB__TX_FIFO_WR)
N#define SPI_0_OLED_FLASH_TX_FIFO_WR_PTR         ( (reg32 *) SPI_0_OLED_FLASH_SCB__TX_FIFO_WR)
N
N#define SPI_0_OLED_FLASH_RX_CTRL_REG            (*(reg32 *) SPI_0_OLED_FLASH_SCB__RX_CTRL)
N#define SPI_0_OLED_FLASH_RX_CTRL_PTR            ( (reg32 *) SPI_0_OLED_FLASH_SCB__RX_CTRL)
N
N#define SPI_0_OLED_FLASH_RX_FIFO_CTRL_REG       (*(reg32 *) SPI_0_OLED_FLASH_SCB__RX_FIFO_CTRL)
N#define SPI_0_OLED_FLASH_RX_FIFO_CTRL_PTR       ( (reg32 *) SPI_0_OLED_FLASH_SCB__RX_FIFO_CTRL)
N
N#define SPI_0_OLED_FLASH_RX_FIFO_STATUS_REG     (*(reg32 *) SPI_0_OLED_FLASH_SCB__RX_FIFO_STATUS)
N#define SPI_0_OLED_FLASH_RX_FIFO_STATUS_PTR     ( (reg32 *) SPI_0_OLED_FLASH_SCB__RX_FIFO_STATUS)
N
N#define SPI_0_OLED_FLASH_RX_MATCH_REG           (*(reg32 *) SPI_0_OLED_FLASH_SCB__RX_MATCH)
N#define SPI_0_OLED_FLASH_RX_MATCH_PTR           ( (reg32 *) SPI_0_OLED_FLASH_SCB__RX_MATCH)
N
N#define SPI_0_OLED_FLASH_RX_FIFO_RD_REG         (*(reg32 *) SPI_0_OLED_FLASH_SCB__RX_FIFO_RD)
N#define SPI_0_OLED_FLASH_RX_FIFO_RD_PTR         ( (reg32 *) SPI_0_OLED_FLASH_SCB__RX_FIFO_RD)
N
N#define SPI_0_OLED_FLASH_RX_FIFO_RD_SILENT_REG  (*(reg32 *) SPI_0_OLED_FLASH_SCB__RX_FIFO_RD_SILENT)
N#define SPI_0_OLED_FLASH_RX_FIFO_RD_SILENT_PTR  ( (reg32 *) SPI_0_OLED_FLASH_SCB__RX_FIFO_RD_SILENT)
N
N#ifdef SPI_0_OLED_FLASH_SCB__EZ_DATA0
N    #define SPI_0_OLED_FLASH_EZBUF_DATA0_REG    (*(reg32 *) SPI_0_OLED_FLASH_SCB__EZ_DATA0)
N    #define SPI_0_OLED_FLASH_EZBUF_DATA0_PTR    ( (reg32 *) SPI_0_OLED_FLASH_SCB__EZ_DATA0)
N#else
S    #define SPI_0_OLED_FLASH_EZBUF_DATA0_REG    (*(reg32 *) SPI_0_OLED_FLASH_SCB__EZ_DATA00)
S    #define SPI_0_OLED_FLASH_EZBUF_DATA0_PTR    ( (reg32 *) SPI_0_OLED_FLASH_SCB__EZ_DATA00)
N#endif /* SPI_0_OLED_FLASH_SCB__EZ_DATA00 */
N
N#define SPI_0_OLED_FLASH_INTR_CAUSE_REG         (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_CAUSE)
N#define SPI_0_OLED_FLASH_INTR_CAUSE_PTR         ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_CAUSE)
N
N#define SPI_0_OLED_FLASH_INTR_I2C_EC_REG        (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_I2C_EC)
N#define SPI_0_OLED_FLASH_INTR_I2C_EC_PTR        ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_I2C_EC)
N
N#define SPI_0_OLED_FLASH_INTR_I2C_EC_MASK_REG   (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_I2C_EC_MASK)
N#define SPI_0_OLED_FLASH_INTR_I2C_EC_MASK_PTR   ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_I2C_EC_MASK)
N
N#define SPI_0_OLED_FLASH_INTR_I2C_EC_MASKED_REG (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_I2C_EC_MASKED)
N#define SPI_0_OLED_FLASH_INTR_I2C_EC_MASKED_PTR ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_I2C_EC_MASKED)
N
N#if (!SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if (!(2 == 1u))
N    #define SPI_0_OLED_FLASH_INTR_SPI_EC_REG        (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_SPI_EC)
N    #define SPI_0_OLED_FLASH_INTR_SPI_EC_PTR        ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_SPI_EC)
N
N    #define SPI_0_OLED_FLASH_INTR_SPI_EC_MASK_REG   (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_SPI_EC_MASK)
N    #define SPI_0_OLED_FLASH_INTR_SPI_EC_MASK_PTR   ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_SPI_EC_MASK)
N
N    #define SPI_0_OLED_FLASH_INTR_SPI_EC_MASKED_REG (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_SPI_EC_MASKED)
N    #define SPI_0_OLED_FLASH_INTR_SPI_EC_MASKED_PTR ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_SPI_EC_MASKED)
N#endif /* (!SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N#define SPI_0_OLED_FLASH_INTR_MASTER_REG        (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_M)
N#define SPI_0_OLED_FLASH_INTR_MASTER_PTR        ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_M)
N
N#define SPI_0_OLED_FLASH_INTR_MASTER_SET_REG    (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_M_SET)
N#define SPI_0_OLED_FLASH_INTR_MASTER_SET_PTR    ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_M_SET)
N
N#define SPI_0_OLED_FLASH_INTR_MASTER_MASK_REG   (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_M_MASK)
N#define SPI_0_OLED_FLASH_INTR_MASTER_MASK_PTR   ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_M_MASK)
N
N#define SPI_0_OLED_FLASH_INTR_MASTER_MASKED_REG (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_M_MASKED)
N#define SPI_0_OLED_FLASH_INTR_MASTER_MASKED_PTR ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_M_MASKED)
N
N#define SPI_0_OLED_FLASH_INTR_SLAVE_REG         (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_S)
N#define SPI_0_OLED_FLASH_INTR_SLAVE_PTR         ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_S)
N
N#define SPI_0_OLED_FLASH_INTR_SLAVE_SET_REG     (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_S_SET)
N#define SPI_0_OLED_FLASH_INTR_SLAVE_SET_PTR     ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_S_SET)
N
N#define SPI_0_OLED_FLASH_INTR_SLAVE_MASK_REG    (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_S_MASK)
N#define SPI_0_OLED_FLASH_INTR_SLAVE_MASK_PTR    ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_S_MASK)
N
N#define SPI_0_OLED_FLASH_INTR_SLAVE_MASKED_REG  (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_S_MASKED)
N#define SPI_0_OLED_FLASH_INTR_SLAVE_MASKED_PTR  ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_S_MASKED)
N
N#define SPI_0_OLED_FLASH_INTR_TX_REG            (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_TX)
N#define SPI_0_OLED_FLASH_INTR_TX_PTR            ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_TX)
N
N#define SPI_0_OLED_FLASH_INTR_TX_SET_REG        (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_TX_SET)
N#define SPI_0_OLED_FLASH_INTR_TX_SET_PTR        ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_TX_SET)
N
N#define SPI_0_OLED_FLASH_INTR_TX_MASK_REG       (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_TX_MASK)
N#define SPI_0_OLED_FLASH_INTR_TX_MASK_PTR       ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_TX_MASK)
N
N#define SPI_0_OLED_FLASH_INTR_TX_MASKED_REG     (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_TX_MASKED)
N#define SPI_0_OLED_FLASH_INTR_TX_MASKED_PTR     ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_TX_MASKED)
N
N#define SPI_0_OLED_FLASH_INTR_RX_REG            (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_RX)
N#define SPI_0_OLED_FLASH_INTR_RX_PTR            ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_RX)
N
N#define SPI_0_OLED_FLASH_INTR_RX_SET_REG        (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_RX_SET)
N#define SPI_0_OLED_FLASH_INTR_RX_SET_PTR        ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_RX_SET)
N
N#define SPI_0_OLED_FLASH_INTR_RX_MASK_REG       (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_RX_MASK)
N#define SPI_0_OLED_FLASH_INTR_RX_MASK_PTR       ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_RX_MASK)
N
N#define SPI_0_OLED_FLASH_INTR_RX_MASKED_REG     (*(reg32 *) SPI_0_OLED_FLASH_SCB__INTR_RX_MASKED)
N#define SPI_0_OLED_FLASH_INTR_RX_MASKED_PTR     ( (reg32 *) SPI_0_OLED_FLASH_SCB__INTR_RX_MASKED)
N
N/* Defines get from SCB IP parameters. */
N#define SPI_0_OLED_FLASH_FIFO_SIZE      (8u)  /* TX or RX FIFO size. */
N#define SPI_0_OLED_FLASH_EZ_DATA_NR     (32u)  /* Number of words in EZ memory. */ 
N#define SPI_0_OLED_FLASH_ONE_BYTE_WIDTH (8u)            /* Number of bits in one byte. */
N#define SPI_0_OLED_FLASH_FF_DATA_NR_LOG2_MASK       (0x0Fu)      /* Number of bits to represent a FIFO address. */
N#define SPI_0_OLED_FLASH_FF_DATA_NR_LOG2_PLUS1_MASK (0x1Fu) /* Number of bits to represent #bytes in FIFO. */
N
N
N/***************************************
N*        Registers Constants
N***************************************/
N
N#if (SPI_0_OLED_FLASH_SCB_IRQ_INTERNAL)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_ISR_NUMBER     ((uint8) SPI_0_OLED_FLASH_SCB_IRQ__INTC_NUMBER)
S    #define SPI_0_OLED_FLASH_ISR_PRIORITY   ((uint8) SPI_0_OLED_FLASH_SCB_IRQ__INTC_PRIOR_NUM)
N#endif /* (SPI_0_OLED_FLASH_SCB_IRQ_INTERNAL) */
N
N#if (SPI_0_OLED_FLASH_UART_RX_WAKEUP_IRQ)
X#if ((0u == (1u)))
S    #define SPI_0_OLED_FLASH_RX_WAKE_ISR_NUMBER     ((uint8) SPI_0_OLED_FLASH_RX_WAKEUP_IRQ__INTC_NUMBER)
S    #define SPI_0_OLED_FLASH_RX_WAKE_ISR_PRIORITY   ((uint8) SPI_0_OLED_FLASH_RX_WAKEUP_IRQ__INTC_PRIOR_NUM)
N#endif /* (SPI_0_OLED_FLASH_UART_RX_WAKEUP_IRQ) */
N
N/* SPI_0_OLED_FLASH_CTRL_REG */
N#define SPI_0_OLED_FLASH_CTRL_OVS_POS           (0u)  /* [3:0]   Oversampling factor                 */
N#define SPI_0_OLED_FLASH_CTRL_EC_AM_MODE_POS    (8u)  /* [8]     Externally clocked address match    */
N#define SPI_0_OLED_FLASH_CTRL_EC_OP_MODE_POS    (9u)  /* [9]     Externally clocked operation mode   */
N#define SPI_0_OLED_FLASH_CTRL_EZBUF_MODE_POS    (10u) /* [10]    EZ buffer is enabled                */
N#if !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if !((2 == 0u) || (2 == 1u))
N    #define SPI_0_OLED_FLASH_CTRL_BYTE_MODE_POS (11u) /* [11]    Determines the number of bits per FIFO data element */
N#endif /* !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N#define SPI_0_OLED_FLASH_CTRL_ADDR_ACCEPT_POS   (16u) /* [16]    Put matched address in RX FIFO       */
N#define SPI_0_OLED_FLASH_CTRL_BLOCK_POS         (17u) /* [17]    Ext and Int logic to resolve collide */
N#define SPI_0_OLED_FLASH_CTRL_MODE_POS          (24u) /* [25:24] Operation mode                       */
N#define SPI_0_OLED_FLASH_CTRL_ENABLED_POS       (31u) /* [31]    Enable SCB block                     */
N#define SPI_0_OLED_FLASH_CTRL_OVS_MASK          ((uint32) 0x0Fu)
N#define SPI_0_OLED_FLASH_CTRL_EC_AM_MODE        ((uint32) 0x01u << SPI_0_OLED_FLASH_CTRL_EC_AM_MODE_POS)
N#define SPI_0_OLED_FLASH_CTRL_EC_OP_MODE        ((uint32) 0x01u << SPI_0_OLED_FLASH_CTRL_EC_OP_MODE_POS)
N#define SPI_0_OLED_FLASH_CTRL_EZBUF_MODE        ((uint32) 0x01u << SPI_0_OLED_FLASH_CTRL_EZBUF_MODE_POS)
N#if !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if !((2 == 0u) || (2 == 1u))
N    #define SPI_0_OLED_FLASH_CTRL_BYTE_MODE ((uint32) 0x01u << SPI_0_OLED_FLASH_CTRL_BYTE_MODE_POS)
N#endif /* !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N#define SPI_0_OLED_FLASH_CTRL_ADDR_ACCEPT       ((uint32) 0x01u << SPI_0_OLED_FLASH_CTRL_ADDR_ACCEPT_POS)
N#define SPI_0_OLED_FLASH_CTRL_BLOCK             ((uint32) 0x01u << SPI_0_OLED_FLASH_CTRL_BLOCK_POS)
N#define SPI_0_OLED_FLASH_CTRL_MODE_MASK         ((uint32) 0x03u << SPI_0_OLED_FLASH_CTRL_MODE_POS)
N#define SPI_0_OLED_FLASH_CTRL_MODE_I2C          ((uint32) 0x00u)
N#define SPI_0_OLED_FLASH_CTRL_MODE_SPI          ((uint32) 0x01u << SPI_0_OLED_FLASH_CTRL_MODE_POS)
N#define SPI_0_OLED_FLASH_CTRL_MODE_UART         ((uint32) 0x02u << SPI_0_OLED_FLASH_CTRL_MODE_POS)
N#define SPI_0_OLED_FLASH_CTRL_ENABLED           ((uint32) 0x01u << SPI_0_OLED_FLASH_CTRL_ENABLED_POS)
N
N/* SPI_0_OLED_FLASH_STATUS_REG */
N#define SPI_0_OLED_FLASH_STATUS_EC_BUSY_POS     (0u)  /* [0] Bus busy. Externally clocked logic access to EZ memory */
N#define SPI_0_OLED_FLASH_STATUS_EC_BUSY         ((uint32) 0x0Fu)
N
N/* SPI_0_OLED_FLASH_SPI_CTRL_REG  */
N#define SPI_0_OLED_FLASH_SPI_CTRL_CONTINUOUS_POS        (0u)  /* [0]     Continuous or Separated SPI data transfers */
N#define SPI_0_OLED_FLASH_SPI_CTRL_SELECT_PRECEDE_POS    (1u)  /* [1]     Precedes or coincides start of data frame  */
N#define SPI_0_OLED_FLASH_SPI_CTRL_CPHA_POS              (2u)  /* [2]     SCLK phase                                 */
N#define SPI_0_OLED_FLASH_SPI_CTRL_CPOL_POS              (3u)  /* [3]     SCLK polarity                              */
N#define SPI_0_OLED_FLASH_SPI_CTRL_LATE_MISO_SAMPLE_POS  (4u)  /* [4]     Late MISO sample enabled                   */
N#if !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if !((2 == 0u) || (2 == 1u))
N    #define SPI_0_OLED_FLASH_SPI_CTRL_SCLK_CONTINUOUS_POS   (5u)  /* [5]     Enable continuous SCLK generation */
N    #define SPI_0_OLED_FLASH_SPI_CTRL_SSEL0_POLARITY_POS    (8u)  /* [8]     SS0 polarity                      */
N    #define SPI_0_OLED_FLASH_SPI_CTRL_SSEL1_POLARITY_POS    (9u)  /* [9]     SS1 polarity                      */
N    #define SPI_0_OLED_FLASH_SPI_CTRL_SSEL2_POLARITY_POS    (10u) /* [10]    SS2 polarity                      */
N    #define SPI_0_OLED_FLASH_SPI_CTRL_SSEL3_POLARITY_POS    (11u) /* [11]    SS3 polarity                      */
N#endif /* !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N#define SPI_0_OLED_FLASH_SPI_CTRL_LOOPBACK_POS          (16u) /* [16]    Local loop-back control enabled            */
N#define SPI_0_OLED_FLASH_SPI_CTRL_MODE_POS              (24u) /* [25:24] Submode of SPI operation                   */
N#define SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT_POS      (26u) /* [27:26] Selects SPI SS signal                      */
N#define SPI_0_OLED_FLASH_SPI_CTRL_MASTER_MODE_POS       (31u) /* [31]    Master mode enabled                        */
N#define SPI_0_OLED_FLASH_SPI_CTRL_CONTINUOUS            ((uint32) 0x01u)
N#define SPI_0_OLED_FLASH_SPI_CTRL_SELECT_PRECEDE        ((uint32) 0x01u << SPI_0_OLED_FLASH_SPI_CTRL_SELECT_PRECEDE_POS)
N#define SPI_0_OLED_FLASH_SPI_CTRL_SCLK_MODE_MASK        ((uint32) 0x03u << SPI_0_OLED_FLASH_SPI_CTRL_CPHA_POS)
N#define SPI_0_OLED_FLASH_SPI_CTRL_CPHA                  ((uint32) 0x01u << SPI_0_OLED_FLASH_SPI_CTRL_CPHA_POS)
N#define SPI_0_OLED_FLASH_SPI_CTRL_CPOL                  ((uint32) 0x01u << SPI_0_OLED_FLASH_SPI_CTRL_CPOL_POS)
N#define SPI_0_OLED_FLASH_SPI_CTRL_LATE_MISO_SAMPLE      ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_SPI_CTRL_LATE_MISO_SAMPLE_POS)
X#define SPI_0_OLED_FLASH_SPI_CTRL_LATE_MISO_SAMPLE      ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_SPI_CTRL_LATE_MISO_SAMPLE_POS)
N#if !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if !((2 == 0u) || (2 == 1u))
N    #define SPI_0_OLED_FLASH_SPI_CTRL_SCLK_CONTINUOUS  ((uint32) 0x01u << SPI_0_OLED_FLASH_SPI_CTRL_SCLK_CONTINUOUS_POS)
N    #define SPI_0_OLED_FLASH_SPI_CTRL_SSEL0_POLARITY   ((uint32) 0x01u << SPI_0_OLED_FLASH_SPI_CTRL_SSEL0_POLARITY_POS)
N    #define SPI_0_OLED_FLASH_SPI_CTRL_SSEL1_POLARITY   ((uint32) 0x01u << SPI_0_OLED_FLASH_SPI_CTRL_SSEL1_POLARITY_POS)
N    #define SPI_0_OLED_FLASH_SPI_CTRL_SSEL2_POLARITY   ((uint32) 0x01u << SPI_0_OLED_FLASH_SPI_CTRL_SSEL2_POLARITY_POS)
N    #define SPI_0_OLED_FLASH_SPI_CTRL_SSEL3_POLARITY   ((uint32) 0x01u << SPI_0_OLED_FLASH_SPI_CTRL_SSEL3_POLARITY_POS)
N    #define SPI_0_OLED_FLASH_SPI_CTRL_SSEL_POLARITY_MASK ((uint32)0x0Fu << SPI_0_OLED_FLASH_SPI_CTRL_SSEL0_POLARITY_POS)
N#endif /* !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N#define SPI_0_OLED_FLASH_SPI_CTRL_LOOPBACK              ((uint32) 0x01u << SPI_0_OLED_FLASH_SPI_CTRL_LOOPBACK_POS)
N#define SPI_0_OLED_FLASH_SPI_CTRL_MODE_MASK             ((uint32) 0x03u << SPI_0_OLED_FLASH_SPI_CTRL_MODE_POS)
N#define SPI_0_OLED_FLASH_SPI_CTRL_MODE_MOTOROLA         ((uint32) 0x00u)
N#define SPI_0_OLED_FLASH_SPI_CTRL_MODE_TI               ((uint32) 0x01u << SPI_0_OLED_FLASH_CTRL_MODE_POS)
N#define SPI_0_OLED_FLASH_SPI_CTRL_MODE_NS               ((uint32) 0x02u << SPI_0_OLED_FLASH_CTRL_MODE_POS)
N#define SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT_MASK     ((uint32) 0x03u << SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT_POS)
N#define SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT0         ((uint32) 0x00u)
N#define SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT1         ((uint32) 0x01u << SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT_POS)
N#define SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT2         ((uint32) 0x02u << SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT_POS)
N#define SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT3         ((uint32) 0x03u << SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT_POS)
N#define SPI_0_OLED_FLASH_SPI_CTRL_MASTER                ((uint32) 0x01u << SPI_0_OLED_FLASH_SPI_CTRL_MASTER_MODE_POS)
N#define SPI_0_OLED_FLASH_SPI_CTRL_SLAVE                 ((uint32) 0x00u)
N
N/* SPI_0_OLED_FLASH_SPI_STATUS_REG  */
N#define SPI_0_OLED_FLASH_SPI_STATUS_BUS_BUSY_POS    (0u)  /* [0]    Bus busy - slave selected */
N#define SPI_0_OLED_FLASH_SPI_STATUS_EZBUF_ADDR_POS  (8u)  /* [15:8] EzAddress                 */
N#define SPI_0_OLED_FLASH_SPI_STATUS_BUS_BUSY        ((uint32) 0x01u)
N#define SPI_0_OLED_FLASH_SPI_STATUS_EZBUF_ADDR_MASK ((uint32) 0xFFu << SPI_0_OLED_FLASH_I2C_STATUS_EZBUF_ADDR_POS)
N
N/* SPI_0_OLED_FLASH_UART_CTRL */
N#define SPI_0_OLED_FLASH_UART_CTRL_LOOPBACK_POS         (16u) /* [16] Loop-back    */
N#define SPI_0_OLED_FLASH_UART_CTRL_MODE_POS             (24u) /* [24] UART subMode */
N#define SPI_0_OLED_FLASH_UART_CTRL_LOOPBACK             ((uint32) 0x01u << SPI_0_OLED_FLASH_UART_CTRL_LOOPBACK_POS)
N#define SPI_0_OLED_FLASH_UART_CTRL_MODE_UART_STD        ((uint32) 0x00u)
N#define SPI_0_OLED_FLASH_UART_CTRL_MODE_UART_SMARTCARD  ((uint32) 0x01u << SPI_0_OLED_FLASH_UART_CTRL_MODE_POS)
N#define SPI_0_OLED_FLASH_UART_CTRL_MODE_UART_IRDA       ((uint32) 0x02u << SPI_0_OLED_FLASH_UART_CTRL_MODE_POS)
N#define SPI_0_OLED_FLASH_UART_CTRL_MODE_MASK            ((uint32) 0x03u << SPI_0_OLED_FLASH_UART_CTRL_MODE_POS)
N
N/* SPI_0_OLED_FLASH_UART_TX_CTRL */
N#define SPI_0_OLED_FLASH_UART_TX_CTRL_STOP_BITS_POS         (0u)  /* [2:0] Stop bits: (Stop bits + 1) * 0.5 period */
N#define SPI_0_OLED_FLASH_UART_TX_CTRL_PARITY_POS            (4u)  /* [4]   Parity bit                              */
N#define SPI_0_OLED_FLASH_UART_TX_CTRL_PARITY_ENABLED_POS    (5u)  /* [5]   Parity enable                           */
N#define SPI_0_OLED_FLASH_UART_TX_CTRL_RETRY_ON_NACK_POS     (8u)  /* [8]   Smart Card: re-send frame on NACK       */
N#define SPI_0_OLED_FLASH_UART_TX_CTRL_ONE_STOP_BIT          ((uint32) 0x01u)
N#define SPI_0_OLED_FLASH_UART_TX_CTRL_ONE_HALF_STOP_BITS    ((uint32) 0x02u)
N#define SPI_0_OLED_FLASH_UART_TX_CTRL_TWO_STOP_BITS         ((uint32) 0x03u)
N#define SPI_0_OLED_FLASH_UART_TX_CTRL_STOP_BITS_MASK        ((uint32) 0x07u)
N#define SPI_0_OLED_FLASH_UART_TX_CTRL_PARITY                ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_UART_TX_CTRL_PARITY_POS)
X#define SPI_0_OLED_FLASH_UART_TX_CTRL_PARITY                ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_UART_TX_CTRL_PARITY_POS)
N#define SPI_0_OLED_FLASH_UART_TX_CTRL_PARITY_ENABLED        ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_UART_TX_CTRL_PARITY_ENABLED_POS)
X#define SPI_0_OLED_FLASH_UART_TX_CTRL_PARITY_ENABLED        ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_UART_TX_CTRL_PARITY_ENABLED_POS)
N#define SPI_0_OLED_FLASH_UART_TX_CTRL_RETRY_ON_NACK         ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_UART_TX_CTRL_RETRY_ON_NACK_POS)
X#define SPI_0_OLED_FLASH_UART_TX_CTRL_RETRY_ON_NACK         ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_UART_TX_CTRL_RETRY_ON_NACK_POS)
N
N/* SPI_0_OLED_FLASH_UART_RX_CTRL */
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_STOP_BITS_POS             (0u)  /* [2:0] Stop bits: (Stop bits + 1) * 0.5 period*/
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_PARITY_POS                (4u)  /* [4]   Parity bit                             */
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_PARITY_ENABLED_POS        (5u)  /* [5]   Parity enable                          */
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_POLARITY_POS              (6u)  /* [6]   IrDA: inverts polarity of RX signal    */
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_DROP_ON_PARITY_ERR_POS    (8u)  /* [8]   Drop and lost RX FIFO on parity error  */
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_DROP_ON_FRAME_ERR_POS     (9u)  /* [9]   Drop and lost RX FIFO on frame error   */
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_MP_MODE_POS               (10u) /* [10]  Multi-processor mode                   */
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_LIN_MODE_POS              (12u) /* [12]  Lin mode: applicable for UART Standard */
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_SKIP_START_POS            (13u) /* [13]  Skip start not: only for UART Standard */
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_BREAK_WIDTH_POS           (16u) /* [19:16]  Break width: (Break width + 1)      */
N#define SPI_0_OLED_FLASH_UART_TX_CTRL_ONE_STOP_BIT              ((uint32) 0x01u)
N#define SPI_0_OLED_FLASH_UART_TX_CTRL_ONE_HALF_STOP_BITS        ((uint32) 0x02u)
N#define SPI_0_OLED_FLASH_UART_TX_CTRL_TWO_STOP_BITS             ((uint32) 0x03u)
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_STOP_BITS_MASK            ((uint32) 0x07u)
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_PARITY                    ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_UART_RX_CTRL_PARITY_POS)
X#define SPI_0_OLED_FLASH_UART_RX_CTRL_PARITY                    ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_UART_RX_CTRL_PARITY_POS)
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_PARITY_ENABLED            ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_UART_RX_CTRL_PARITY_ENABLED_POS)
X#define SPI_0_OLED_FLASH_UART_RX_CTRL_PARITY_ENABLED            ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_UART_RX_CTRL_PARITY_ENABLED_POS)
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_POLARITY                  ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_UART_RX_CTRL_POLARITY_POS)
X#define SPI_0_OLED_FLASH_UART_RX_CTRL_POLARITY                  ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_UART_RX_CTRL_POLARITY_POS)
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_DROP_ON_PARITY_ERR        ((uint32) 0x01u << \
N                                                                   SPI_0_OLED_FLASH_UART_RX_CTRL_DROP_ON_PARITY_ERR_POS)
X#define SPI_0_OLED_FLASH_UART_RX_CTRL_DROP_ON_PARITY_ERR        ((uint32) 0x01u <<                                                                    SPI_0_OLED_FLASH_UART_RX_CTRL_DROP_ON_PARITY_ERR_POS)
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_DROP_ON_FRAME_ERR         ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_UART_RX_CTRL_DROP_ON_FRAME_ERR_POS)
X#define SPI_0_OLED_FLASH_UART_RX_CTRL_DROP_ON_FRAME_ERR         ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_UART_RX_CTRL_DROP_ON_FRAME_ERR_POS)
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_MP_MODE                   ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_UART_RX_CTRL_MP_MODE_POS)
X#define SPI_0_OLED_FLASH_UART_RX_CTRL_MP_MODE                   ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_UART_RX_CTRL_MP_MODE_POS)
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_LIN_MODE                  ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_UART_RX_CTRL_LIN_MODE_POS)
X#define SPI_0_OLED_FLASH_UART_RX_CTRL_LIN_MODE                  ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_UART_RX_CTRL_LIN_MODE_POS)
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_SKIP_START                ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_UART_RX_CTRL_SKIP_START_POS)
X#define SPI_0_OLED_FLASH_UART_RX_CTRL_SKIP_START                ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_UART_RX_CTRL_SKIP_START_POS)
N#define SPI_0_OLED_FLASH_UART_RX_CTRL_BREAK_WIDTH_MASK          ((uint32) 0x0Fu << \
N                                                                    SPI_0_OLED_FLASH_UART_RX_CTRL_BREAK_WIDTH_POS)
X#define SPI_0_OLED_FLASH_UART_RX_CTRL_BREAK_WIDTH_MASK          ((uint32) 0x0Fu <<                                                                     SPI_0_OLED_FLASH_UART_RX_CTRL_BREAK_WIDTH_POS)
N/* SPI_0_OLED_FLASH_UART_RX_STATUS_REG */
N#define SPI_0_OLED_FLASH_UART_RX_STATUS_BR_COUNTER_POS     (0u)  /* [11:0] Baud Rate counter */
N#define SPI_0_OLED_FLASH_UART_RX_STATUS_BR_COUNTER_MASK    ((uint32) 0xFFFu)
N
N#if !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if !((2 == 0u) || (2 == 1u))
N    /* SPI_0_OLED_FLASH_UART_FLOW_CTRL_REG */
N    #define SPI_0_OLED_FLASH_UART_FLOW_CTRL_TRIGGER_LEVEL_POS    (0u)  /* [7:0] RTS RX FIFO trigger level         */
N    #define SPI_0_OLED_FLASH_UART_FLOW_CTRL_RTS_POLARITY_POS     (16u) /* [16]  Polarity of the RTS output signal */
N    #define SPI_0_OLED_FLASH_UART_FLOW_CTRL_CTS_POLARITY_POS     (24u) /* [24]  Polarity of the CTS input signal  */
N    #define SPI_0_OLED_FLASH_UART_FLOW_CTRL_CTS_ENABLED_POS      (25u) /* [25]  Enable CTS signal                 */
N    #define SPI_0_OLED_FLASH_UART_FLOW_CTRL_TRIGGER_LEVEL_MASK   ((uint32) SPI_0_OLED_FLASH_FF_DATA_NR_LOG2_MASK)
N    #define SPI_0_OLED_FLASH_UART_FLOW_CTRL_RTS_POLARITY         ((uint32) 0x01u << \
N                                                                       SPI_0_OLED_FLASH_UART_FLOW_CTRL_RTS_POLARITY_POS)
X    #define SPI_0_OLED_FLASH_UART_FLOW_CTRL_RTS_POLARITY         ((uint32) 0x01u <<                                                                        SPI_0_OLED_FLASH_UART_FLOW_CTRL_RTS_POLARITY_POS)
N    #define SPI_0_OLED_FLASH_UART_FLOW_CTRL_CTS_POLARITY         ((uint32) 0x01u << \
N                                                                       SPI_0_OLED_FLASH_UART_FLOW_CTRL_CTS_POLARITY_POS)
X    #define SPI_0_OLED_FLASH_UART_FLOW_CTRL_CTS_POLARITY         ((uint32) 0x01u <<                                                                        SPI_0_OLED_FLASH_UART_FLOW_CTRL_CTS_POLARITY_POS)
N    #define SPI_0_OLED_FLASH_UART_FLOW_CTRL_CTS_ENABLE           ((uint32) 0x01u << \
N                                                                       SPI_0_OLED_FLASH_UART_FLOW_CTRL_CTS_ENABLED_POS)
X    #define SPI_0_OLED_FLASH_UART_FLOW_CTRL_CTS_ENABLE           ((uint32) 0x01u <<                                                                        SPI_0_OLED_FLASH_UART_FLOW_CTRL_CTS_ENABLED_POS)
N#endif /* !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N/* SPI_0_OLED_FLASH_I2C_CTRL */
N#define SPI_0_OLED_FLASH_I2C_CTRL_HIGH_PHASE_OVS_POS           (0u)   /* [3:0] Oversampling factor high: master only */
N#define SPI_0_OLED_FLASH_I2C_CTRL_LOW_PHASE_OVS_POS            (4u)   /* [7:4] Oversampling factor low:  master only */
N#define SPI_0_OLED_FLASH_I2C_CTRL_M_READY_DATA_ACK_POS         (8u)   /* [8]   Master ACKs data while RX FIFO != FULL*/
N#define SPI_0_OLED_FLASH_I2C_CTRL_M_NOT_READY_DATA_NACK_POS    (9u)   /* [9]   Master NACKs data if RX FIFO ==  FULL */
N#define SPI_0_OLED_FLASH_I2C_CTRL_S_GENERAL_IGNORE_POS         (11u)  /* [11]  Slave ignores General call            */
N#define SPI_0_OLED_FLASH_I2C_CTRL_S_READY_ADDR_ACK_POS         (12u)  /* [12]  Slave ACKs Address if RX FIFO != FULL */
N#define SPI_0_OLED_FLASH_I2C_CTRL_S_READY_DATA_ACK_POS         (13u)  /* [13]  Slave ACKs data while RX FIFO == FULL */
N#define SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_ADDR_NACK_POS    (14u)  /* [14]  Slave NACKs address if RX FIFO == FULL*/
N#define SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK_POS    (15u)  /* [15]  Slave NACKs data if RX FIFO is  FULL  */
N#define SPI_0_OLED_FLASH_I2C_CTRL_LOOPBACK_POS                 (16u)  /* [16]  Loop-back                             */
N#define SPI_0_OLED_FLASH_I2C_CTRL_SLAVE_MODE_POS               (30u)  /* [30]  Slave mode enabled                    */
N#define SPI_0_OLED_FLASH_I2C_CTRL_MASTER_MODE_POS              (31u)  /* [31]  Master mode enabled                   */
N#define SPI_0_OLED_FLASH_I2C_CTRL_HIGH_PHASE_OVS_MASK  ((uint32) 0x0Fu)
N#define SPI_0_OLED_FLASH_I2C_CTRL_LOW_PHASE_OVS_MASK   ((uint32) 0x0Fu << \
N                                                                SPI_0_OLED_FLASH_I2C_CTRL_LOW_PHASE_OVS_POS)
X#define SPI_0_OLED_FLASH_I2C_CTRL_LOW_PHASE_OVS_MASK   ((uint32) 0x0Fu <<                                                                 SPI_0_OLED_FLASH_I2C_CTRL_LOW_PHASE_OVS_POS)
N#define SPI_0_OLED_FLASH_I2C_CTRL_M_READY_DATA_ACK      ((uint32) 0x01u << \
N                                                                SPI_0_OLED_FLASH_I2C_CTRL_M_READY_DATA_ACK_POS)
X#define SPI_0_OLED_FLASH_I2C_CTRL_M_READY_DATA_ACK      ((uint32) 0x01u <<                                                                 SPI_0_OLED_FLASH_I2C_CTRL_M_READY_DATA_ACK_POS)
N#define SPI_0_OLED_FLASH_I2C_CTRL_M_NOT_READY_DATA_NACK ((uint32) 0x01u << \
N                                                                SPI_0_OLED_FLASH_I2C_CTRL_M_NOT_READY_DATA_NACK_POS)
X#define SPI_0_OLED_FLASH_I2C_CTRL_M_NOT_READY_DATA_NACK ((uint32) 0x01u <<                                                                 SPI_0_OLED_FLASH_I2C_CTRL_M_NOT_READY_DATA_NACK_POS)
N#define SPI_0_OLED_FLASH_I2C_CTRL_S_GENERAL_IGNORE      ((uint32) 0x01u << \
N                                                                SPI_0_OLED_FLASH_I2C_CTRL_S_GENERAL_IGNORE_POS)
X#define SPI_0_OLED_FLASH_I2C_CTRL_S_GENERAL_IGNORE      ((uint32) 0x01u <<                                                                 SPI_0_OLED_FLASH_I2C_CTRL_S_GENERAL_IGNORE_POS)
N#define SPI_0_OLED_FLASH_I2C_CTRL_S_READY_ADDR_ACK      ((uint32) 0x01u << \
N                                                                SPI_0_OLED_FLASH_I2C_CTRL_S_READY_ADDR_ACK_POS)
X#define SPI_0_OLED_FLASH_I2C_CTRL_S_READY_ADDR_ACK      ((uint32) 0x01u <<                                                                 SPI_0_OLED_FLASH_I2C_CTRL_S_READY_ADDR_ACK_POS)
N#define SPI_0_OLED_FLASH_I2C_CTRL_S_READY_DATA_ACK      ((uint32) 0x01u << \
N                                                                SPI_0_OLED_FLASH_I2C_CTRL_S_READY_DATA_ACK_POS)
X#define SPI_0_OLED_FLASH_I2C_CTRL_S_READY_DATA_ACK      ((uint32) 0x01u <<                                                                 SPI_0_OLED_FLASH_I2C_CTRL_S_READY_DATA_ACK_POS)
N#define SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_ADDR_NACK ((uint32) 0x01u << \
N                                                                SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_ADDR_NACK_POS)
X#define SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_ADDR_NACK ((uint32) 0x01u <<                                                                 SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_ADDR_NACK_POS)
N#define SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK ((uint32) 0x01u << \
N                                                                SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK_POS)
X#define SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK ((uint32) 0x01u <<                                                                 SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK_POS)
N#define SPI_0_OLED_FLASH_I2C_CTRL_LOOPBACK              ((uint32) 0x01u << \
N                                                                SPI_0_OLED_FLASH_I2C_CTRL_LOOPBACK_POS)
X#define SPI_0_OLED_FLASH_I2C_CTRL_LOOPBACK              ((uint32) 0x01u <<                                                                 SPI_0_OLED_FLASH_I2C_CTRL_LOOPBACK_POS)
N#define SPI_0_OLED_FLASH_I2C_CTRL_SLAVE_MODE            ((uint32) 0x01u << \
N                                                                SPI_0_OLED_FLASH_I2C_CTRL_SLAVE_MODE_POS)
X#define SPI_0_OLED_FLASH_I2C_CTRL_SLAVE_MODE            ((uint32) 0x01u <<                                                                 SPI_0_OLED_FLASH_I2C_CTRL_SLAVE_MODE_POS)
N#define SPI_0_OLED_FLASH_I2C_CTRL_MASTER_MODE           ((uint32) 0x01u << \
N                                                                SPI_0_OLED_FLASH_I2C_CTRL_MASTER_MODE_POS)
X#define SPI_0_OLED_FLASH_I2C_CTRL_MASTER_MODE           ((uint32) 0x01u <<                                                                 SPI_0_OLED_FLASH_I2C_CTRL_MASTER_MODE_POS)
N#define SPI_0_OLED_FLASH_I2C_CTRL_SLAVE_MASTER_MODE_MASK    ((uint32) 0x03u << \
N                                                                SPI_0_OLED_FLASH_I2C_CTRL_SLAVE_MODE_POS)
X#define SPI_0_OLED_FLASH_I2C_CTRL_SLAVE_MASTER_MODE_MASK    ((uint32) 0x03u <<                                                                 SPI_0_OLED_FLASH_I2C_CTRL_SLAVE_MODE_POS)
N
N/* SPI_0_OLED_FLASH_I2C_STATUS_REG  */
N#define SPI_0_OLED_FLASH_I2C_STATUS_BUS_BUSY_POS    (0u)  /* [0]    Bus busy: internally clocked */
N#define SPI_0_OLED_FLASH_I2C_STATUS_S_READ_POS      (4u)  /* [4]    Slave is read by master      */
N#define SPI_0_OLED_FLASH_I2C_STATUS_M_READ_POS      (5u)  /* [5]    Master reads Slave           */
N#define SPI_0_OLED_FLASH_I2C_STATUS_EZBUF_ADDR_POS  (8u)  /* [15:8] EZAddress                    */
N#define SPI_0_OLED_FLASH_I2C_STATUS_BUS_BUSY        ((uint32) 0x01u)
N#define SPI_0_OLED_FLASH_I2C_STATUS_S_READ          ((uint32) 0x01u << SPI_0_OLED_FLASH_I2C_STATUS_S_READ_POS)
N#define SPI_0_OLED_FLASH_I2C_STATUS_M_READ          ((uint32) 0x01u << SPI_0_OLED_FLASH_I2C_STATUS_M_READ_POS)
N#define SPI_0_OLED_FLASH_I2C_STATUS_EZBUF_ADDR_MASK ((uint32) 0xFFu << SPI_0_OLED_FLASH_I2C_STATUS_EZBUF_ADDR_POS)
N
N/* SPI_0_OLED_FLASH_I2C_MASTER_CMD_REG */
N#define SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_START_POS             (0u)  /* [0] Master generate Start                */
N#define SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_START_ON_IDLE_POS     (1u)  /* [1] Master generate Start if bus is free */
N#define SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_ACK_POS               (2u)  /* [2] Master generate ACK                  */
N#define SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_NACK_POS              (3u)  /* [3] Master generate NACK                 */
N#define SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_STOP_POS              (4u)  /* [4] Master generate Stop                 */
N#define SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_START         ((uint32) 0x01u)
N#define SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_START_ON_IDLE ((uint32) 0x01u << \
N                                                                   SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_START_ON_IDLE_POS)
X#define SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_START_ON_IDLE ((uint32) 0x01u <<                                                                    SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_START_ON_IDLE_POS)
N#define SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_ACK           ((uint32) 0x01u << \
N                                                                   SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_ACK_POS)
X#define SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_ACK           ((uint32) 0x01u <<                                                                    SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_ACK_POS)
N#define SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_NACK          ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_NACK_POS)
X#define SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_NACK          ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_NACK_POS)
N#define SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_STOP          ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_STOP_POS)
X#define SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_STOP          ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_STOP_POS)
N
N/* SPI_0_OLED_FLASH_I2C_SLAVE_CMD_REG  */
N#define SPI_0_OLED_FLASH_I2C_SLAVE_CMD_S_ACK_POS    (0u)  /* [0] Slave generate ACK  */
N#define SPI_0_OLED_FLASH_I2C_SLAVE_CMD_S_NACK_POS   (1u)  /* [1] Slave generate NACK */
N#define SPI_0_OLED_FLASH_I2C_SLAVE_CMD_S_ACK        ((uint32) 0x01u)
N#define SPI_0_OLED_FLASH_I2C_SLAVE_CMD_S_NACK       ((uint32) 0x01u << SPI_0_OLED_FLASH_I2C_SLAVE_CMD_S_NACK_POS)
N
N#define SPI_0_OLED_FLASH_I2C_SLAVE_CMD_S_ACK_POS    (0u)  /* [0] Slave generate ACK  */
N#define SPI_0_OLED_FLASH_I2C_SLAVE_CMD_S_NACK_POS   (1u)  /* [1] Slave generate NACK */
N#define SPI_0_OLED_FLASH_I2C_SLAVE_CMD_S_ACK        ((uint32) 0x01u)
N#define SPI_0_OLED_FLASH_I2C_SLAVE_CMD_S_NACK       ((uint32) 0x01u << SPI_0_OLED_FLASH_I2C_SLAVE_CMD_S_NACK_POS)
N
N/* SPI_0_OLED_FLASH_I2C_CFG_REG */
N#if (SPI_0_OLED_FLASH_CY_SCBIP_V0)
X#if ((2 == 0u))
S#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_HYS_POS           (0u)  /* [1:0]   Trim bits for the I2C SDA filter         */
S#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_TRIM_POS          (2u)  /* [3:2]   Trim bits for the I2C SDA filter         */
S#define SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_HYS_POS           (4u)  /* [5:4]   Trim bits for the I2C SCL filter         */
S#define SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_TRIM_POS          (6u)  /* [7:6]   Trim bits for the I2C SCL filter         */
S#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_HYS_POS       (8u)  /* [9:8]   Trim bits for I2C SDA filter output path */
S#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_TRIM_POS      (10u) /* [11:10] Trim bits for I2C SDA filter output path */
S#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_HS_POS            (16u) /* [16]    '0': 50 ns filter, '1': 10 ns filter     */
S#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_ENABLED_POS       (17u) /* [17]    I2C SDA filter enabled                   */
S#define SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_HS_POS            (24u) /* [24]    '0': 50 ns filter, '1': 10 ns filter     */
S#define SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_ENABLED_POS       (25u) /* [25]    I2C SCL filter enabled                   */
S#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_HS_POS        (26u) /* [26]    '0': 50 ns filter, '1': 10 ns filter     */
S#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_ENABLED_POS   (27u) /* [27]    I2C SDA output delay filter enabled      */
S#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_HYS_MASK          ((uint32) 0x03u)
S#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_TRIM_MASK         ((uint32) 0x03u << \
S                                                                SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_TRIM_POS)
X#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_TRIM_MASK         ((uint32) 0x03u <<                                                                 SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_TRIM_POS)
S#define SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_HYS_MASK          ((uint32) 0x03u << \
S                                                                SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_HYS_POS)
X#define SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_HYS_MASK          ((uint32) 0x03u <<                                                                 SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_HYS_POS)
S#define SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_TRIM_MASK         ((uint32) 0x03u << \
S                                                                SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_TRIM_POS)
X#define SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_TRIM_MASK         ((uint32) 0x03u <<                                                                 SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_TRIM_POS)
S#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_HYS_MASK      ((uint32) 0x03u << \
S                                                                SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_HYS_POS)
X#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_HYS_MASK      ((uint32) 0x03u <<                                                                 SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_HYS_POS)
S#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_TRIM_MASK     ((uint32) 0x03u << \
S                                                                SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_TRIM_POS)
X#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_TRIM_MASK     ((uint32) 0x03u <<                                                                 SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_TRIM_POS)
S#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_HS                ((uint32) 0x01u << \
S                                                                SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_HS_POS)
X#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_HS                ((uint32) 0x01u <<                                                                 SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_HS_POS)
S#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_ENABLED           ((uint32) 0x01u << \
S                                                                SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_ENABLED_POS)
X#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_ENABLED           ((uint32) 0x01u <<                                                                 SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_ENABLED_POS)
S#define SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_HS                ((uint32) 0x01u << \
S                                                                SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_HS_POS)
X#define SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_HS                ((uint32) 0x01u <<                                                                 SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_HS_POS)
S#define SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_ENABLED           ((uint32) 0x01u << \
S                                                                SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_ENABLED_POS)
X#define SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_ENABLED           ((uint32) 0x01u <<                                                                 SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_ENABLED_POS)
S#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_HS            ((uint32) 0x01u << \
S                                                                SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_HS_POS)
X#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_HS            ((uint32) 0x01u <<                                                                 SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_HS_POS)
S#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_ENABLED       ((uint32) 0x01u << \
S                                                                SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_ENABLED_POS)
X#define SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_ENABLED       ((uint32) 0x01u <<                                                                 SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_ENABLED_POS)
N#else
N#define SPI_0_OLED_FLASH_I2C_CFG_SDA_IN_FILT_TRIM_POS   (0u)  /* [1:0] Trim bits for "i2c_sda_in" 50 ns filter */
N#define SPI_0_OLED_FLASH_I2C_CFG_SDA_IN_FILT_SEL_POS    (4u)  /* [4]   "i2c_sda_in" filter delay: 0 ns and 50 ns */
N#define SPI_0_OLED_FLASH_I2C_CFG_SCL_IN_FILT_TRIM_POS   (8u)  /* [9:8] Trim bits for "i2c_scl_in" 50 ns filter */
N#define SPI_0_OLED_FLASH_I2C_CFG_SCL_IN_FILT_SEL_POS    (12u) /* [12]  "i2c_scl_in" filter delay: 0 ns and 50 ns */
N#define SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT0_TRIM_POS (16u) /* [17:16] Trim bits for "i2c_sda_out" 50 ns filter 0 */
N#define SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT1_TRIM_POS (18u) /* [19:18] Trim bits for "i2c_sda_out" 50 ns filter 1 */
N#define SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT2_TRIM_POS (20u) /* [21:20] Trim bits for "i2c_sda_out" 50 ns filter 2 */
N#define SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT_SEL_POS   (28u) /* [29:28] Cumulative "i2c_sda_out" filter delay: */
N
N#define SPI_0_OLED_FLASH_I2C_CFG_SDA_IN_FILT_TRIM_MASK  ((uint32) 0x03u)
N#define SPI_0_OLED_FLASH_I2C_CFG_SDA_IN_FILT_SEL        ((uint32) 0x01u << SPI_0_OLED_FLASH_I2C_CFG_SDA_IN_FILT_SEL_POS)
N#define SPI_0_OLED_FLASH_I2C_CFG_SCL_IN_FILT_TRIM_MASK  ((uint32) 0x03u << \
N                                                            SPI_0_OLED_FLASH_I2C_CFG_SCL_IN_FILT_TRIM_POS)
X#define SPI_0_OLED_FLASH_I2C_CFG_SCL_IN_FILT_TRIM_MASK  ((uint32) 0x03u <<                                                             SPI_0_OLED_FLASH_I2C_CFG_SCL_IN_FILT_TRIM_POS)
N#define SPI_0_OLED_FLASH_I2C_CFG_SCL_IN_FILT_SEL        ((uint32) 0x01u << SPI_0_OLED_FLASH_I2C_CFG_SCL_IN_FILT_SEL_POS)
N#define SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT0_TRIM_MASK ((uint32) 0x03u << \
N                                                            SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT0_TRIM_POS)
X#define SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT0_TRIM_MASK ((uint32) 0x03u <<                                                             SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT0_TRIM_POS)
N#define SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT1_TRIM_MASK ((uint32) 0x03u << \
N                                                            SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT1_TRIM_POS)
X#define SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT1_TRIM_MASK ((uint32) 0x03u <<                                                             SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT1_TRIM_POS)
N#define SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT2_TRIM_MASK ((uint32) 0x03u << \
N                                                            SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT2_TRIM_POS)
X#define SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT2_TRIM_MASK ((uint32) 0x03u <<                                                             SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT2_TRIM_POS)
N#define SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT_SEL_MASK   ((uint32) 0x03u << \
N                                                            SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT_SEL_POS)
X#define SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT_SEL_MASK   ((uint32) 0x03u <<                                                             SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT_SEL_POS)
N#endif /* (SPI_0_OLED_FLASH_CY_SCBIP_V0) */
N
N
N/* SPI_0_OLED_FLASH_TX_CTRL_REG */
N#define SPI_0_OLED_FLASH_TX_CTRL_DATA_WIDTH_POS     (0u)  /* [3:0] Data frame width: (Data width - 1) */
N#define SPI_0_OLED_FLASH_TX_CTRL_MSB_FIRST_POS      (8u)  /* [8]   MSB first shifter-out             */
N#define SPI_0_OLED_FLASH_TX_CTRL_ENABLED_POS        (31u) /* [31]  Transmitter enabled               */
N#define SPI_0_OLED_FLASH_TX_CTRL_DATA_WIDTH_MASK    ((uint32) 0x0Fu)
N#define SPI_0_OLED_FLASH_TX_CTRL_MSB_FIRST          ((uint32) 0x01u << SPI_0_OLED_FLASH_TX_CTRL_MSB_FIRST_POS)
N#define SPI_0_OLED_FLASH_TX_CTRL_LSB_FIRST          ((uint32) 0x00u)
N#define SPI_0_OLED_FLASH_TX_CTRL_ENABLED            ((uint32) 0x01u << SPI_0_OLED_FLASH_TX_CTRL_ENABLED_POS)
N
N/* SPI_0_OLED_FLASH_TX_CTRL_FIFO_REG */
N#define SPI_0_OLED_FLASH_TX_FIFO_CTRL_TRIGGER_LEVEL_POS     (0u)  /* [2:0] Trigger level                              */
N#define SPI_0_OLED_FLASH_TX_FIFO_CTRL_CLEAR_POS             (16u) /* [16]  Clear TX FIFO: cleared after set           */
N#define SPI_0_OLED_FLASH_TX_FIFO_CTRL_FREEZE_POS            (17u) /* [17]  Freeze TX FIFO: HW do not inc read pointer */
N#define SPI_0_OLED_FLASH_TX_FIFO_CTRL_TRIGGER_LEVEL_MASK    ((uint32) SPI_0_OLED_FLASH_FF_DATA_NR_LOG2_MASK)
N#define SPI_0_OLED_FLASH_TX_FIFO_CTRL_CLEAR                 ((uint32) 0x01u << SPI_0_OLED_FLASH_TX_FIFO_CTRL_CLEAR_POS)
N#define SPI_0_OLED_FLASH_TX_FIFO_CTRL_FREEZE                ((uint32) 0x01u << SPI_0_OLED_FLASH_TX_FIFO_CTRL_FREEZE_POS)
N
N/* SPI_0_OLED_FLASH_TX_FIFO_STATUS_REG */
N#define SPI_0_OLED_FLASH_TX_FIFO_STATUS_USED_POS    (0u)  /* [3:0]   Amount of entries in TX FIFO */
N#define SPI_0_OLED_FLASH_TX_FIFO_SR_VALID_POS       (15u) /* [15]    Shifter status of TX FIFO    */
N#define SPI_0_OLED_FLASH_TX_FIFO_STATUS_RD_PTR_POS  (16u) /* [18:16] TX FIFO read pointer         */
N#define SPI_0_OLED_FLASH_TX_FIFO_STATUS_WR_PTR_POS  (24u) /* [26:24] TX FIFO write pointer        */
N#define SPI_0_OLED_FLASH_TX_FIFO_STATUS_USED_MASK   ((uint32) SPI_0_OLED_FLASH_FF_DATA_NR_LOG2_PLUS1_MASK)
N#define SPI_0_OLED_FLASH_TX_FIFO_SR_VALID           ((uint32) 0x01u << SPI_0_OLED_FLASH_TX_FIFO_SR_VALID_POS)
N#define SPI_0_OLED_FLASH_TX_FIFO_STATUS_RD_PTR_MASK ((uint32) SPI_0_OLED_FLASH_FF_DATA_NR_LOG2_MASK << \
N                                                                    SPI_0_OLED_FLASH_TX_FIFO_STATUS_RD_PTR_POS)
X#define SPI_0_OLED_FLASH_TX_FIFO_STATUS_RD_PTR_MASK ((uint32) SPI_0_OLED_FLASH_FF_DATA_NR_LOG2_MASK <<                                                                     SPI_0_OLED_FLASH_TX_FIFO_STATUS_RD_PTR_POS)
N#define SPI_0_OLED_FLASH_TX_FIFO_STATUS_WR_PTR_MASK ((uint32) SPI_0_OLED_FLASH_FF_DATA_NR_LOG2_MASK << \
N                                                                    SPI_0_OLED_FLASH_TX_FIFO_STATUS_WR_PTR_POS)
X#define SPI_0_OLED_FLASH_TX_FIFO_STATUS_WR_PTR_MASK ((uint32) SPI_0_OLED_FLASH_FF_DATA_NR_LOG2_MASK <<                                                                     SPI_0_OLED_FLASH_TX_FIFO_STATUS_WR_PTR_POS)
N
N/* SPI_0_OLED_FLASH_TX_FIFO_WR_REG */
N#define SPI_0_OLED_FLASH_TX_FIFO_WR_POS    (0u)  /* [15:0] Data written into TX FIFO */
N#define SPI_0_OLED_FLASH_TX_FIFO_WR_MASK   ((uint32) 0xFFu)
N
N/* SPI_0_OLED_FLASH_RX_CTRL_REG */
N#define SPI_0_OLED_FLASH_RX_CTRL_DATA_WIDTH_POS     (0u)  /* [3:0] Data frame width: (Data width - 1) */
N#define SPI_0_OLED_FLASH_RX_CTRL_MSB_FIRST_POS      (8u)  /* [8]   MSB first shifter-out             */
N#define SPI_0_OLED_FLASH_RX_CTRL_MEDIAN_POS         (9u)  /* [9]   Median filter                     */
N#define SPI_0_OLED_FLASH_RX_CTRL_ENABLED_POS        (31u) /* [31]  Receiver enabled                  */
N#define SPI_0_OLED_FLASH_RX_CTRL_DATA_WIDTH_MASK    ((uint32) 0x0Fu)
N#define SPI_0_OLED_FLASH_RX_CTRL_MSB_FIRST          ((uint32) 0x01u << SPI_0_OLED_FLASH_RX_CTRL_MSB_FIRST_POS)
N#define SPI_0_OLED_FLASH_RX_CTRL_LSB_FIRST          ((uint32) 0x00u)
N#define SPI_0_OLED_FLASH_RX_CTRL_MEDIAN             ((uint32) 0x01u << SPI_0_OLED_FLASH_RX_CTRL_MEDIAN_POS)
N#define SPI_0_OLED_FLASH_RX_CTRL_ENABLED            ((uint32) 0x01u << SPI_0_OLED_FLASH_RX_CTRL_ENABLED_POS)
N
N
N/* SPI_0_OLED_FLASH_RX_FIFO_CTRL_REG */
N#define SPI_0_OLED_FLASH_RX_FIFO_CTRL_TRIGGER_LEVEL_POS     (0u)   /* [2:0] Trigger level                            */
N#define SPI_0_OLED_FLASH_RX_FIFO_CTRL_CLEAR_POS             (16u)  /* [16]  Clear RX FIFO: clear after set           */
N#define SPI_0_OLED_FLASH_RX_FIFO_CTRL_FREEZE_POS            (17u)  /* [17]  Freeze RX FIFO: HW writes has not effect */
N#define SPI_0_OLED_FLASH_RX_FIFO_CTRL_TRIGGER_LEVEL_MASK    ((uint32) SPI_0_OLED_FLASH_FF_DATA_NR_LOG2_MASK)
N#define SPI_0_OLED_FLASH_RX_FIFO_CTRL_CLEAR                 ((uint32) 0x01u << SPI_0_OLED_FLASH_RX_FIFO_CTRL_CLEAR_POS)
N#define SPI_0_OLED_FLASH_RX_FIFO_CTRL_FREEZE                ((uint32) 0x01u << SPI_0_OLED_FLASH_RX_FIFO_CTRL_FREEZE_POS)
N
N/* SPI_0_OLED_FLASH_RX_FIFO_STATUS_REG */
N#define SPI_0_OLED_FLASH_RX_FIFO_STATUS_USED_POS    (0u)   /* [3:0]   Amount of entries in RX FIFO */
N#define SPI_0_OLED_FLASH_RX_FIFO_SR_VALID_POS       (15u)  /* [15]    Shifter status of RX FIFO    */
N#define SPI_0_OLED_FLASH_RX_FIFO_STATUS_RD_PTR_POS  (16u)  /* [18:16] RX FIFO read pointer         */
N#define SPI_0_OLED_FLASH_RX_FIFO_STATUS_WR_PTR_POS  (24u)  /* [26:24] RX FIFO write pointer        */
N#define SPI_0_OLED_FLASH_RX_FIFO_STATUS_USED_MASK   ((uint32) SPI_0_OLED_FLASH_FF_DATA_NR_LOG2_PLUS1_MASK)
N#define SPI_0_OLED_FLASH_RX_FIFO_SR_VALID           ((uint32) 0x01u << SPI_0_OLED_FLASH_RX_FIFO_SR_VALID_POS)
N#define SPI_0_OLED_FLASH_RX_FIFO_STATUS_RD_PTR_MASK ((uint32) SPI_0_OLED_FLASH_FF_DATA_NR_LOG2_MASK << \
N                                                                    SPI_0_OLED_FLASH_RX_FIFO_STATUS_RD_PTR_POS)
X#define SPI_0_OLED_FLASH_RX_FIFO_STATUS_RD_PTR_MASK ((uint32) SPI_0_OLED_FLASH_FF_DATA_NR_LOG2_MASK <<                                                                     SPI_0_OLED_FLASH_RX_FIFO_STATUS_RD_PTR_POS)
N#define SPI_0_OLED_FLASH_RX_FIFO_STATUS_WR_PTR_MASK ((uint32) SPI_0_OLED_FLASH_FF_DATA_NR_LOG2_MASK << \
N                                                                    SPI_0_OLED_FLASH_RX_FIFO_STATUS_WR_PTR_POS)
X#define SPI_0_OLED_FLASH_RX_FIFO_STATUS_WR_PTR_MASK ((uint32) SPI_0_OLED_FLASH_FF_DATA_NR_LOG2_MASK <<                                                                     SPI_0_OLED_FLASH_RX_FIFO_STATUS_WR_PTR_POS)
N
N/* SPI_0_OLED_FLASH_RX_MATCH_REG */
N#define SPI_0_OLED_FLASH_RX_MATCH_ADDR_POS     (0u)  /* [7:0]   Slave address                        */
N#define SPI_0_OLED_FLASH_RX_MATCH_MASK_POS     (16u) /* [23:16] Slave address mask: 0 - doesn't care */
N#define SPI_0_OLED_FLASH_RX_MATCH_ADDR_MASK    ((uint32) 0xFFu)
N#define SPI_0_OLED_FLASH_RX_MATCH_MASK_MASK    ((uint32) 0xFFu << SPI_0_OLED_FLASH_RX_MATCH_MASK_POS)
N
N/* SPI_0_OLED_FLASH_RX_FIFO_WR_REG */
N#define SPI_0_OLED_FLASH_RX_FIFO_RD_POS    (0u)  /* [15:0] Data read from RX FIFO */
N#define SPI_0_OLED_FLASH_RX_FIFO_RD_MASK   ((uint32) 0xFFu)
N
N/* SPI_0_OLED_FLASH_RX_FIFO_RD_SILENT_REG */
N#define SPI_0_OLED_FLASH_RX_FIFO_RD_SILENT_POS     (0u)  /* [15:0] Data read from RX FIFO: not remove data from FIFO */
N#define SPI_0_OLED_FLASH_RX_FIFO_RD_SILENT_MASK    ((uint32) 0xFFu)
N
N/* SPI_0_OLED_FLASH_RX_FIFO_RD_SILENT_REG */
N#define SPI_0_OLED_FLASH_RX_FIFO_RD_SILENT_POS     (0u)  /* [15:0] Data read from RX FIFO: not remove data from FIFO */
N#define SPI_0_OLED_FLASH_RX_FIFO_RD_SILENT_MASK    ((uint32) 0xFFu)
N
N/* SPI_0_OLED_FLASH_EZBUF_DATA_REG */
N#define SPI_0_OLED_FLASH_EZBUF_DATA_POS   (0u)  /* [7:0] Data from EZ Memory */
N#define SPI_0_OLED_FLASH_EZBUF_DATA_MASK  ((uint32) 0xFFu)
N
N/*  SPI_0_OLED_FLASH_INTR_CAUSE_REG */
N#define SPI_0_OLED_FLASH_INTR_CAUSE_MASTER_POS  (0u)  /* [0] Master interrupt active                 */
N#define SPI_0_OLED_FLASH_INTR_CAUSE_SLAVE_POS   (1u)  /* [1] Slave interrupt active                  */
N#define SPI_0_OLED_FLASH_INTR_CAUSE_TX_POS      (2u)  /* [2] Transmitter interrupt active            */
N#define SPI_0_OLED_FLASH_INTR_CAUSE_RX_POS      (3u)  /* [3] Receiver interrupt active               */
N#define SPI_0_OLED_FLASH_INTR_CAUSE_I2C_EC_POS  (4u)  /* [4] Externally clock I2C interrupt active   */
N#define SPI_0_OLED_FLASH_INTR_CAUSE_SPI_EC_POS  (5u)  /* [5] Externally clocked SPI interrupt active */
N#define SPI_0_OLED_FLASH_INTR_CAUSE_MASTER      ((uint32) 0x01u)
N#define SPI_0_OLED_FLASH_INTR_CAUSE_SLAVE       ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_CAUSE_SLAVE_POS)
N#define SPI_0_OLED_FLASH_INTR_CAUSE_TX          ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_CAUSE_TX_POS)
N#define SPI_0_OLED_FLASH_INTR_CAUSE_RX          ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_CAUSE_RX_POS)
N#define SPI_0_OLED_FLASH_INTR_CAUSE_I2C_EC      ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_CAUSE_I2C_EC_POS)
N#define SPI_0_OLED_FLASH_INTR_CAUSE_SPI_EC      ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_CAUSE_SPI_EC_POS)
N
N/* SPI_0_OLED_FLASH_INTR_SPI_EC_REG, SPI_0_OLED_FLASH_INTR_SPI_EC_MASK_REG, SPI_0_OLED_FLASH_INTR_SPI_EC_MASKED_REG */
N#define SPI_0_OLED_FLASH_INTR_SPI_EC_WAKE_UP_POS          (0u)  /* [0] Address match: triggers wakeup of chip */
N#define SPI_0_OLED_FLASH_INTR_SPI_EC_EZBUF_STOP_POS       (1u)  /* [1] Externally clocked Stop detected       */
N#define SPI_0_OLED_FLASH_INTR_SPI_EC_EZBUF_WRITE_STOP_POS (2u)  /* [2] Externally clocked Write Stop detected */
N#define SPI_0_OLED_FLASH_INTR_SPI_EC_WAKE_UP              ((uint32) 0x01u)
N#define SPI_0_OLED_FLASH_INTR_SPI_EC_EZBUF_STOP           ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_INTR_SPI_EC_EZBUF_STOP_POS)
X#define SPI_0_OLED_FLASH_INTR_SPI_EC_EZBUF_STOP           ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_INTR_SPI_EC_EZBUF_STOP_POS)
N#define SPI_0_OLED_FLASH_INTR_SPI_EC_EZBUF_WRITE_STOP     ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_INTR_SPI_EC_EZBUF_WRITE_STOP_POS)
X#define SPI_0_OLED_FLASH_INTR_SPI_EC_EZBUF_WRITE_STOP     ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_INTR_SPI_EC_EZBUF_WRITE_STOP_POS)
N
N/* SPI_0_OLED_FLASH_INTR_I2C_EC, SPI_0_OLED_FLASH_INTR_I2C_EC_MASK, SPI_0_OLED_FLASH_INTR_I2C_EC_MASKED */
N#define SPI_0_OLED_FLASH_INTR_I2C_EC_WAKE_UP_POS          (0u)  /* [0] Address match: triggers wakeup of chip */
N#define SPI_0_OLED_FLASH_INTR_I2C_EC_EZBUF_STOP_POS       (1u)  /* [1] Externally clocked Stop detected       */
N#define SPI_0_OLED_FLASH_INTR_I2C_EC_EZBUF_WRITE_STOP_POS (2u)  /* [2] Externally clocked Write Stop detected */
N#define SPI_0_OLED_FLASH_INTR_I2C_EC_WAKE_UP              ((uint32) 0x01u)
N#define SPI_0_OLED_FLASH_INTR_I2C_EC_EZBUF_STOP           ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_INTR_I2C_EC_EZBUF_STOP_POS)
X#define SPI_0_OLED_FLASH_INTR_I2C_EC_EZBUF_STOP           ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_INTR_I2C_EC_EZBUF_STOP_POS)
N#define SPI_0_OLED_FLASH_INTR_I2C_EC_EZBUF_WRITE_STOP     ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_INTR_I2C_EC_EZBUF_WRITE_STOP_POS)
X#define SPI_0_OLED_FLASH_INTR_I2C_EC_EZBUF_WRITE_STOP     ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_INTR_I2C_EC_EZBUF_WRITE_STOP_POS)
N
N/* SPI_0_OLED_FLASH_INTR_MASTER, SPI_0_OLED_FLASH_INTR_MASTER_SET,
N   SPI_0_OLED_FLASH_INTR_MASTER_MASK, SPI_0_OLED_FLASH_INTR_MASTER_MASKED */
N#define SPI_0_OLED_FLASH_INTR_MASTER_I2C_ARB_LOST_POS   (0u)  /* [0] Master lost arbitration                          */
N#define SPI_0_OLED_FLASH_INTR_MASTER_I2C_NACK_POS       (1u)  /* [1] Master receives NACK: address or write to slave  */
N#define SPI_0_OLED_FLASH_INTR_MASTER_I2C_ACK_POS        (2u)  /* [2] Master receives NACK: address or write to slave  */
N#define SPI_0_OLED_FLASH_INTR_MASTER_I2C_STOP_POS       (4u)  /* [4] Master detects the Stop: only self generated Stop*/
N#define SPI_0_OLED_FLASH_INTR_MASTER_I2C_BUS_ERROR_POS  (8u)  /* [8] Master detects bus error: misplaced Start or Stop*/
N#define SPI_0_OLED_FLASH_INTR_MASTER_SPI_DONE_POS       (9u)  /* [9] Master complete transfer: Only for SPI           */
N#define SPI_0_OLED_FLASH_INTR_MASTER_I2C_ARB_LOST       ((uint32) 0x01u)
N#define SPI_0_OLED_FLASH_INTR_MASTER_I2C_NACK           ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_MASTER_I2C_NACK_POS)
N#define SPI_0_OLED_FLASH_INTR_MASTER_I2C_ACK            ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_MASTER_I2C_ACK_POS)
N#define SPI_0_OLED_FLASH_INTR_MASTER_I2C_STOP           ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_MASTER_I2C_STOP_POS)
N#define SPI_0_OLED_FLASH_INTR_MASTER_I2C_BUS_ERROR      ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_INTR_MASTER_I2C_BUS_ERROR_POS)
X#define SPI_0_OLED_FLASH_INTR_MASTER_I2C_BUS_ERROR      ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_INTR_MASTER_I2C_BUS_ERROR_POS)
N#define SPI_0_OLED_FLASH_INTR_MASTER_SPI_DONE           ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_MASTER_SPI_DONE_POS)
N
N/*
N* SPI_0_OLED_FLASH_INTR_SLAVE, SPI_0_OLED_FLASH_INTR_SLAVE_SET,
N* SPI_0_OLED_FLASH_INTR_SLAVE_MASK, SPI_0_OLED_FLASH_INTR_SLAVE_MASKED
N*/
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ARB_LOST_POS         (0u)  /* [0]  Slave lost arbitration                   */
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_NACK_POS             (1u)  /* [1]  Slave receives NACK: master reads data   */
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ACK_POS              (2u)  /* [2]  Slave receives ACK: master reads data    */
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_WRITE_STOP_POS       (3u)  /* [3]  Slave detects end of write transaction   */
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_STOP_POS             (4u)  /* [4]  Slave detects end of transaction intended */
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_START_POS            (5u)  /* [5]  Slave detects Start                      */
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ADDR_MATCH_POS       (6u)  /* [6]  Slave address matches                    */
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_GENERAL_POS          (7u)  /* [7]  General call received                    */
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_BUS_ERROR_POS        (8u)  /* [8]  Slave detects bus error                  */
N#define SPI_0_OLED_FLASH_INTR_SLAVE_SPI_EZBUF_WRITE_STOP_POS (9u)  /* [9]  Slave write complete: Only for SPI       */
N#define SPI_0_OLED_FLASH_INTR_SLAVE_SPI_EZBUF_STOP_POS       (10u) /* [10] Slave end of transaction: Only for SPI   */
N#define SPI_0_OLED_FLASH_INTR_SLAVE_SPI_BUS_ERROR_POS        (11u) /* [11] Slave detects bus error: Only for SPI    */
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ARB_LOST             ((uint32) 0x01u)
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_NACK                 ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_INTR_SLAVE_I2C_NACK_POS)
X#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_NACK                 ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_INTR_SLAVE_I2C_NACK_POS)
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ACK                  ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ACK_POS)
X#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ACK                  ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ACK_POS)
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_WRITE_STOP           ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_INTR_SLAVE_I2C_WRITE_STOP_POS)
X#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_WRITE_STOP           ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_INTR_SLAVE_I2C_WRITE_STOP_POS)
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_STOP                 ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_INTR_SLAVE_I2C_STOP_POS)
X#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_STOP                 ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_INTR_SLAVE_I2C_STOP_POS)
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_START                ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_INTR_SLAVE_I2C_START_POS)
X#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_START                ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_INTR_SLAVE_I2C_START_POS)
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ADDR_MATCH           ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ADDR_MATCH_POS)
X#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ADDR_MATCH           ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ADDR_MATCH_POS)
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_GENERAL              ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_INTR_SLAVE_I2C_GENERAL_POS)
X#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_GENERAL              ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_INTR_SLAVE_I2C_GENERAL_POS)
N#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_BUS_ERROR            ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_INTR_SLAVE_I2C_BUS_ERROR_POS)
X#define SPI_0_OLED_FLASH_INTR_SLAVE_I2C_BUS_ERROR            ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_INTR_SLAVE_I2C_BUS_ERROR_POS)
N#define SPI_0_OLED_FLASH_INTR_SLAVE_SPI_EZBUF_WRITE_STOP     ((uint32) 0x01u << \
N                                                                   SPI_0_OLED_FLASH_INTR_SLAVE_SPI_EZBUF_WRITE_STOP_POS)
X#define SPI_0_OLED_FLASH_INTR_SLAVE_SPI_EZBUF_WRITE_STOP     ((uint32) 0x01u <<                                                                    SPI_0_OLED_FLASH_INTR_SLAVE_SPI_EZBUF_WRITE_STOP_POS)
N#define SPI_0_OLED_FLASH_INTR_SLAVE_SPI_EZBUF_STOP           ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_INTR_SLAVE_SPI_EZBUF_STOP_POS)
X#define SPI_0_OLED_FLASH_INTR_SLAVE_SPI_EZBUF_STOP           ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_INTR_SLAVE_SPI_EZBUF_STOP_POS)
N#define SPI_0_OLED_FLASH_INTR_SLAVE_SPI_BUS_ERROR           ((uint32) 0x01u << \
N                                                                    SPI_0_OLED_FLASH_INTR_SLAVE_SPI_BUS_ERROR_POS)
X#define SPI_0_OLED_FLASH_INTR_SLAVE_SPI_BUS_ERROR           ((uint32) 0x01u <<                                                                     SPI_0_OLED_FLASH_INTR_SLAVE_SPI_BUS_ERROR_POS)
N
N/*
N* SPI_0_OLED_FLASH_INTR_TX, SPI_0_OLED_FLASH_INTR_TX_SET,
N* SPI_0_OLED_FLASH_INTR_TX_MASK, SPI_0_OLED_FLASH_INTR_TX_MASKED
N*/
N#define SPI_0_OLED_FLASH_INTR_TX_TRIGGER_POS        (0u)  /* [0]  Trigger on TX FIFO entires                       */
N#define SPI_0_OLED_FLASH_INTR_TX_NOT_FULL_POS       (1u)  /* [1]  TX FIFO is not full                              */
N#define SPI_0_OLED_FLASH_INTR_TX_EMPTY_POS          (4u)  /* [4]  TX FIFO is empty                                 */
N#define SPI_0_OLED_FLASH_INTR_TX_OVERFLOW_POS       (5u)  /* [5]  Attempt to write to a full TX FIFO               */
N#define SPI_0_OLED_FLASH_INTR_TX_UNDERFLOW_POS      (6u)  /* [6]  Attempt to read from an empty TX FIFO            */
N#define SPI_0_OLED_FLASH_INTR_TX_BLOCKED_POS        (7u)  /* [7]  No access to the EZ memory                       */
N#define SPI_0_OLED_FLASH_INTR_TX_UART_NACK_POS      (8u)  /* [8]  UART transmitter received a NACK: SmartCard mode */
N#define SPI_0_OLED_FLASH_INTR_TX_UART_DONE_POS      (9u)  /* [9]  UART transmitter done even                       */
N#define SPI_0_OLED_FLASH_INTR_TX_UART_ARB_LOST_POS  (10u) /* [10] UART lost arbitration: LIN or SmartCard          */
N#define SPI_0_OLED_FLASH_INTR_TX_TRIGGER            ((uint32) 0x01u)
N#define SPI_0_OLED_FLASH_INTR_TX_FIFO_LEVEL         (SPI_0_OLED_FLASH_INTR_TX_TRIGGER)
N#define SPI_0_OLED_FLASH_INTR_TX_NOT_FULL           ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_TX_NOT_FULL_POS)
N#define SPI_0_OLED_FLASH_INTR_TX_EMPTY              ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_TX_EMPTY_POS)
N#define SPI_0_OLED_FLASH_INTR_TX_OVERFLOW           ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_TX_OVERFLOW_POS)
N#define SPI_0_OLED_FLASH_INTR_TX_UNDERFLOW          ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_TX_UNDERFLOW_POS)
N#define SPI_0_OLED_FLASH_INTR_TX_BLOCKED            ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_TX_BLOCKED_POS)
N#define SPI_0_OLED_FLASH_INTR_TX_UART_NACK          ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_TX_UART_NACK_POS)
N#define SPI_0_OLED_FLASH_INTR_TX_UART_DONE          ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_TX_UART_DONE_POS)
N#define SPI_0_OLED_FLASH_INTR_TX_UART_ARB_LOST      ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_TX_UART_ARB_LOST_POS)
N
N/*
N* SPI_0_OLED_FLASH_INTR_RX, SPI_0_OLED_FLASH_INTR_RX_SET,
N* SPI_0_OLED_FLASH_INTR_RX_MASK, SPI_0_OLED_FLASH_INTR_RX_MASKED
N*/
N#define SPI_0_OLED_FLASH_INTR_RX_TRIGGER_POS        (0u)   /* [0]  Trigger on RX FIFO entires            */
N#define SPI_0_OLED_FLASH_INTR_RX_NOT_EMPTY_POS      (2u)   /* [2]  RX FIFO is not empty                  */
N#define SPI_0_OLED_FLASH_INTR_RX_FULL_POS           (3u)   /* [3]  RX FIFO is full                       */
N#define SPI_0_OLED_FLASH_INTR_RX_OVERFLOW_POS       (5u)   /* [5]  Attempt to write to a full RX FIFO    */
N#define SPI_0_OLED_FLASH_INTR_RX_UNDERFLOW_POS      (6u)   /* [6]  Attempt to read from an empty RX FIFO */
N#define SPI_0_OLED_FLASH_INTR_RX_BLOCKED_POS        (7u)   /* [7]  No access to the EZ memory            */
N#define SPI_0_OLED_FLASH_INTR_RX_FRAME_ERROR_POS    (8u)   /* [8]  Frame error in received data frame    */
N#define SPI_0_OLED_FLASH_INTR_RX_PARITY_ERROR_POS   (9u)   /* [9]  Parity error in received data frame   */
N#define SPI_0_OLED_FLASH_INTR_RX_BAUD_DETECT_POS    (10u)  /* [10] LIN baud rate detection is completed   */
N#define SPI_0_OLED_FLASH_INTR_RX_BREAK_DETECT_POS   (11u)  /* [11] Break detection is successful         */
N#define SPI_0_OLED_FLASH_INTR_RX_TRIGGER            ((uint32) 0x01u)
N#define SPI_0_OLED_FLASH_INTR_RX_FIFO_LEVEL         (SPI_0_OLED_FLASH_INTR_RX_TRIGGER)
N#define SPI_0_OLED_FLASH_INTR_RX_NOT_EMPTY          ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_RX_NOT_EMPTY_POS)
N#define SPI_0_OLED_FLASH_INTR_RX_FULL               ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_RX_FULL_POS)
N#define SPI_0_OLED_FLASH_INTR_RX_OVERFLOW           ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_RX_OVERFLOW_POS)
N#define SPI_0_OLED_FLASH_INTR_RX_UNDERFLOW          ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_RX_UNDERFLOW_POS)
N#define SPI_0_OLED_FLASH_INTR_RX_BLOCKED            ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_RX_BLOCKED_POS)
N#define SPI_0_OLED_FLASH_INTR_RX_FRAME_ERROR        ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_RX_FRAME_ERROR_POS)
N#define SPI_0_OLED_FLASH_INTR_RX_PARITY_ERROR       ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_RX_PARITY_ERROR_POS)
N#define SPI_0_OLED_FLASH_INTR_RX_BAUD_DETECT        ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_RX_BAUD_DETECT_POS)
N#define SPI_0_OLED_FLASH_INTR_RX_BREAK_DETECT       ((uint32) 0x01u << SPI_0_OLED_FLASH_INTR_RX_BREAK_DETECT_POS)
N
N/* Define all interrupt sources */
N#define SPI_0_OLED_FLASH_INTR_I2C_EC_ALL    (SPI_0_OLED_FLASH_INTR_I2C_EC_WAKE_UP    | \
N                                             SPI_0_OLED_FLASH_INTR_I2C_EC_EZBUF_STOP | \
N                                             SPI_0_OLED_FLASH_INTR_I2C_EC_EZBUF_WRITE_STOP)
X#define SPI_0_OLED_FLASH_INTR_I2C_EC_ALL    (SPI_0_OLED_FLASH_INTR_I2C_EC_WAKE_UP    |                                              SPI_0_OLED_FLASH_INTR_I2C_EC_EZBUF_STOP |                                              SPI_0_OLED_FLASH_INTR_I2C_EC_EZBUF_WRITE_STOP)
N
N#define SPI_0_OLED_FLASH_INTR_SPI_EC_ALL    (SPI_0_OLED_FLASH_INTR_SPI_EC_WAKE_UP    | \
N                                             SPI_0_OLED_FLASH_INTR_SPI_EC_EZBUF_STOP | \
N                                             SPI_0_OLED_FLASH_INTR_SPI_EC_EZBUF_WRITE_STOP)
X#define SPI_0_OLED_FLASH_INTR_SPI_EC_ALL    (SPI_0_OLED_FLASH_INTR_SPI_EC_WAKE_UP    |                                              SPI_0_OLED_FLASH_INTR_SPI_EC_EZBUF_STOP |                                              SPI_0_OLED_FLASH_INTR_SPI_EC_EZBUF_WRITE_STOP)
N
N#define SPI_0_OLED_FLASH_INTR_MASTER_ALL    (SPI_0_OLED_FLASH_INTR_MASTER_I2C_ARB_LOST  | \
N                                             SPI_0_OLED_FLASH_INTR_MASTER_I2C_NACK      | \
N                                             SPI_0_OLED_FLASH_INTR_MASTER_I2C_ACK       | \
N                                             SPI_0_OLED_FLASH_INTR_MASTER_I2C_STOP      | \
N                                             SPI_0_OLED_FLASH_INTR_MASTER_I2C_BUS_ERROR | \
N                                             SPI_0_OLED_FLASH_INTR_MASTER_SPI_DONE)
X#define SPI_0_OLED_FLASH_INTR_MASTER_ALL    (SPI_0_OLED_FLASH_INTR_MASTER_I2C_ARB_LOST  |                                              SPI_0_OLED_FLASH_INTR_MASTER_I2C_NACK      |                                              SPI_0_OLED_FLASH_INTR_MASTER_I2C_ACK       |                                              SPI_0_OLED_FLASH_INTR_MASTER_I2C_STOP      |                                              SPI_0_OLED_FLASH_INTR_MASTER_I2C_BUS_ERROR |                                              SPI_0_OLED_FLASH_INTR_MASTER_SPI_DONE)
N
N#define SPI_0_OLED_FLASH_INTR_SLAVE_ALL     (SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ARB_LOST      | \
N                                             SPI_0_OLED_FLASH_INTR_SLAVE_I2C_NACK          | \
N                                             SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ACK           | \
N                                             SPI_0_OLED_FLASH_INTR_SLAVE_I2C_WRITE_STOP    | \
N                                             SPI_0_OLED_FLASH_INTR_SLAVE_I2C_STOP          | \
N                                             SPI_0_OLED_FLASH_INTR_SLAVE_I2C_START         | \
N                                             SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ADDR_MATCH    | \
N                                             SPI_0_OLED_FLASH_INTR_SLAVE_I2C_GENERAL       | \
N                                             SPI_0_OLED_FLASH_INTR_SLAVE_I2C_BUS_ERROR     | \
N                                             SPI_0_OLED_FLASH_INTR_SLAVE_SPI_EZBUF_WRITE_STOP | \
N                                             SPI_0_OLED_FLASH_INTR_SLAVE_SPI_EZBUF_STOP       | \
N                                             SPI_0_OLED_FLASH_INTR_SLAVE_SPI_BUS_ERROR)
X#define SPI_0_OLED_FLASH_INTR_SLAVE_ALL     (SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ARB_LOST      |                                              SPI_0_OLED_FLASH_INTR_SLAVE_I2C_NACK          |                                              SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ACK           |                                              SPI_0_OLED_FLASH_INTR_SLAVE_I2C_WRITE_STOP    |                                              SPI_0_OLED_FLASH_INTR_SLAVE_I2C_STOP          |                                              SPI_0_OLED_FLASH_INTR_SLAVE_I2C_START         |                                              SPI_0_OLED_FLASH_INTR_SLAVE_I2C_ADDR_MATCH    |                                              SPI_0_OLED_FLASH_INTR_SLAVE_I2C_GENERAL       |                                              SPI_0_OLED_FLASH_INTR_SLAVE_I2C_BUS_ERROR     |                                              SPI_0_OLED_FLASH_INTR_SLAVE_SPI_EZBUF_WRITE_STOP |                                              SPI_0_OLED_FLASH_INTR_SLAVE_SPI_EZBUF_STOP       |                                              SPI_0_OLED_FLASH_INTR_SLAVE_SPI_BUS_ERROR)
N
N#define SPI_0_OLED_FLASH_INTR_TX_ALL        (SPI_0_OLED_FLASH_INTR_TX_TRIGGER   | \
N                                             SPI_0_OLED_FLASH_INTR_TX_NOT_FULL  | \
N                                             SPI_0_OLED_FLASH_INTR_TX_EMPTY     | \
N                                             SPI_0_OLED_FLASH_INTR_TX_OVERFLOW  | \
N                                             SPI_0_OLED_FLASH_INTR_TX_UNDERFLOW | \
N                                             SPI_0_OLED_FLASH_INTR_TX_BLOCKED   | \
N                                             SPI_0_OLED_FLASH_INTR_TX_UART_NACK | \
N                                             SPI_0_OLED_FLASH_INTR_TX_UART_DONE | \
N                                             SPI_0_OLED_FLASH_INTR_TX_UART_ARB_LOST)
X#define SPI_0_OLED_FLASH_INTR_TX_ALL        (SPI_0_OLED_FLASH_INTR_TX_TRIGGER   |                                              SPI_0_OLED_FLASH_INTR_TX_NOT_FULL  |                                              SPI_0_OLED_FLASH_INTR_TX_EMPTY     |                                              SPI_0_OLED_FLASH_INTR_TX_OVERFLOW  |                                              SPI_0_OLED_FLASH_INTR_TX_UNDERFLOW |                                              SPI_0_OLED_FLASH_INTR_TX_BLOCKED   |                                              SPI_0_OLED_FLASH_INTR_TX_UART_NACK |                                              SPI_0_OLED_FLASH_INTR_TX_UART_DONE |                                              SPI_0_OLED_FLASH_INTR_TX_UART_ARB_LOST)
N
N#define SPI_0_OLED_FLASH_INTR_RX_ALL        (SPI_0_OLED_FLASH_INTR_RX_TRIGGER      | \
N                                             SPI_0_OLED_FLASH_INTR_RX_NOT_EMPTY    | \
N                                             SPI_0_OLED_FLASH_INTR_RX_FULL         | \
N                                             SPI_0_OLED_FLASH_INTR_RX_OVERFLOW     | \
N                                             SPI_0_OLED_FLASH_INTR_RX_UNDERFLOW    | \
N                                             SPI_0_OLED_FLASH_INTR_RX_BLOCKED      | \
N                                             SPI_0_OLED_FLASH_INTR_RX_FRAME_ERROR  | \
N                                             SPI_0_OLED_FLASH_INTR_RX_PARITY_ERROR | \
N                                             SPI_0_OLED_FLASH_INTR_RX_BAUD_DETECT  | \
N                                             SPI_0_OLED_FLASH_INTR_RX_BREAK_DETECT)
X#define SPI_0_OLED_FLASH_INTR_RX_ALL        (SPI_0_OLED_FLASH_INTR_RX_TRIGGER      |                                              SPI_0_OLED_FLASH_INTR_RX_NOT_EMPTY    |                                              SPI_0_OLED_FLASH_INTR_RX_FULL         |                                              SPI_0_OLED_FLASH_INTR_RX_OVERFLOW     |                                              SPI_0_OLED_FLASH_INTR_RX_UNDERFLOW    |                                              SPI_0_OLED_FLASH_INTR_RX_BLOCKED      |                                              SPI_0_OLED_FLASH_INTR_RX_FRAME_ERROR  |                                              SPI_0_OLED_FLASH_INTR_RX_PARITY_ERROR |                                              SPI_0_OLED_FLASH_INTR_RX_BAUD_DETECT  |                                              SPI_0_OLED_FLASH_INTR_RX_BREAK_DETECT)
N
N/* I2C and EZI2C slave address defines */
N#define SPI_0_OLED_FLASH_I2C_SLAVE_ADDR_POS    (0x01u)    /* 7-bit address shift */
N#define SPI_0_OLED_FLASH_I2C_SLAVE_ADDR_MASK   (0xFEu)    /* 8-bit address mask */
N
N/* OVS constants for IrDA Low Power operation */
N#define SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS16     (0x00u)
N#define SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS32     (0x01u)
N#define SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS48     (0x02u)
N#define SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS96     (0x03u)
N#define SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS192    (0x04u)
N#define SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS768    (0x05u)
N#define SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS1536   (0x06u)
N
N/* OVS constant for IrDA */
N#define SPI_0_OLED_FLASH_CTRL_OVS_IRDA_OVS16        (SPI_0_OLED_FLASH_UART_IRDA_LP_OVS16)
N
N
N/***************************************
N*    Common Macro Definitions
N***************************************/
N
N/* Re-enables the SCB IP. A clear enable bit has a different effect
N* on the scb IP depending on the version:
N*  CY_SCBIP_V0: resets state, status, TX and RX FIFOs.
N*  CY_SCBIP_V1 or later: resets state, status, TX and RX FIFOs and interrupt sources.
N* Clear I2C command registers are because they are not impacted by re-enable.
N*/
N#define SPI_0_OLED_FLASH_SCB_SW_RESET   SPI_0_OLED_FLASH_I2CFwBlockReset()
N
N/* TX FIFO macro */
N#define SPI_0_OLED_FLASH_CLEAR_TX_FIFO \
N                            do{        \
N                                SPI_0_OLED_FLASH_TX_FIFO_CTRL_REG |= ((uint32)  SPI_0_OLED_FLASH_TX_FIFO_CTRL_CLEAR); \
N                                SPI_0_OLED_FLASH_TX_FIFO_CTRL_REG &= ((uint32) ~SPI_0_OLED_FLASH_TX_FIFO_CTRL_CLEAR); \
N                            }while(0)
X#define SPI_0_OLED_FLASH_CLEAR_TX_FIFO                             do{                                        SPI_0_OLED_FLASH_TX_FIFO_CTRL_REG |= ((uint32)  SPI_0_OLED_FLASH_TX_FIFO_CTRL_CLEAR);                                 SPI_0_OLED_FLASH_TX_FIFO_CTRL_REG &= ((uint32) ~SPI_0_OLED_FLASH_TX_FIFO_CTRL_CLEAR);                             }while(0)
N
N#define SPI_0_OLED_FLASH_GET_TX_FIFO_ENTRIES    (SPI_0_OLED_FLASH_TX_FIFO_STATUS_REG & \
N                                                 SPI_0_OLED_FLASH_TX_FIFO_STATUS_USED_MASK)
X#define SPI_0_OLED_FLASH_GET_TX_FIFO_ENTRIES    (SPI_0_OLED_FLASH_TX_FIFO_STATUS_REG &                                                  SPI_0_OLED_FLASH_TX_FIFO_STATUS_USED_MASK)
N
N#define SPI_0_OLED_FLASH_GET_TX_FIFO_SR_VALID   ((0u != (SPI_0_OLED_FLASH_TX_FIFO_STATUS_REG & \
N                                                         SPI_0_OLED_FLASH_TX_FIFO_SR_VALID)) ? (1u) : (0u))
X#define SPI_0_OLED_FLASH_GET_TX_FIFO_SR_VALID   ((0u != (SPI_0_OLED_FLASH_TX_FIFO_STATUS_REG &                                                          SPI_0_OLED_FLASH_TX_FIFO_SR_VALID)) ? (1u) : (0u))
N
N/* RX FIFO macro */
N#define SPI_0_OLED_FLASH_CLEAR_RX_FIFO \
N                            do{        \
N                                SPI_0_OLED_FLASH_RX_FIFO_CTRL_REG |= ((uint32)  SPI_0_OLED_FLASH_RX_FIFO_CTRL_CLEAR); \
N                                SPI_0_OLED_FLASH_RX_FIFO_CTRL_REG &= ((uint32) ~SPI_0_OLED_FLASH_RX_FIFO_CTRL_CLEAR); \
N                            }while(0)
X#define SPI_0_OLED_FLASH_CLEAR_RX_FIFO                             do{                                        SPI_0_OLED_FLASH_RX_FIFO_CTRL_REG |= ((uint32)  SPI_0_OLED_FLASH_RX_FIFO_CTRL_CLEAR);                                 SPI_0_OLED_FLASH_RX_FIFO_CTRL_REG &= ((uint32) ~SPI_0_OLED_FLASH_RX_FIFO_CTRL_CLEAR);                             }while(0)
N
N#define SPI_0_OLED_FLASH_GET_RX_FIFO_ENTRIES    (SPI_0_OLED_FLASH_RX_FIFO_STATUS_REG & \
N                                                    SPI_0_OLED_FLASH_RX_FIFO_STATUS_USED_MASK)
X#define SPI_0_OLED_FLASH_GET_RX_FIFO_ENTRIES    (SPI_0_OLED_FLASH_RX_FIFO_STATUS_REG &                                                     SPI_0_OLED_FLASH_RX_FIFO_STATUS_USED_MASK)
N
N#define SPI_0_OLED_FLASH_GET_RX_FIFO_SR_VALID   ((0u != (SPI_0_OLED_FLASH_RX_FIFO_STATUS_REG & \
N                                                         SPI_0_OLED_FLASH_RX_FIFO_SR_VALID)) ? (1u) : (0u))
X#define SPI_0_OLED_FLASH_GET_RX_FIFO_SR_VALID   ((0u != (SPI_0_OLED_FLASH_RX_FIFO_STATUS_REG &                                                          SPI_0_OLED_FLASH_RX_FIFO_SR_VALID)) ? (1u) : (0u))
N
N/* Write interrupt source: set sourceMask bits in SPI_0_OLED_FLASH_INTR_X_MASK_REG */
N#define SPI_0_OLED_FLASH_WRITE_INTR_I2C_EC_MASK(sourceMask) \
N                                                do{         \
N                                                    SPI_0_OLED_FLASH_INTR_I2C_EC_MASK_REG = (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_WRITE_INTR_I2C_EC_MASK(sourceMask)                                                 do{                                                             SPI_0_OLED_FLASH_INTR_I2C_EC_MASK_REG = (uint32) (sourceMask);                                                 }while(0)
N
N#if (!SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if (!(2 == 1u))
N    #define SPI_0_OLED_FLASH_WRITE_INTR_SPI_EC_MASK(sourceMask) \
N                                                do{         \
N                                                    SPI_0_OLED_FLASH_INTR_SPI_EC_MASK_REG = (uint32) (sourceMask); \
N                                                }while(0)
X    #define SPI_0_OLED_FLASH_WRITE_INTR_SPI_EC_MASK(sourceMask)                                                 do{                                                             SPI_0_OLED_FLASH_INTR_SPI_EC_MASK_REG = (uint32) (sourceMask);                                                 }while(0)
N#endif /* (!SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N#define SPI_0_OLED_FLASH_WRITE_INTR_MASTER_MASK(sourceMask) \
N                                                do{         \
N                                                    SPI_0_OLED_FLASH_INTR_MASTER_MASK_REG = (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_WRITE_INTR_MASTER_MASK(sourceMask)                                                 do{                                                             SPI_0_OLED_FLASH_INTR_MASTER_MASK_REG = (uint32) (sourceMask);                                                 }while(0)
N
N#define SPI_0_OLED_FLASH_WRITE_INTR_SLAVE_MASK(sourceMask)  \
N                                                do{         \
N                                                    SPI_0_OLED_FLASH_INTR_SLAVE_MASK_REG = (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_WRITE_INTR_SLAVE_MASK(sourceMask)                                                  do{                                                             SPI_0_OLED_FLASH_INTR_SLAVE_MASK_REG = (uint32) (sourceMask);                                                 }while(0)
N
N#define SPI_0_OLED_FLASH_WRITE_INTR_TX_MASK(sourceMask)     \
N                                                do{         \
N                                                    SPI_0_OLED_FLASH_INTR_TX_MASK_REG = (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_WRITE_INTR_TX_MASK(sourceMask)                                                     do{                                                             SPI_0_OLED_FLASH_INTR_TX_MASK_REG = (uint32) (sourceMask);                                                 }while(0)
N
N#define SPI_0_OLED_FLASH_WRITE_INTR_RX_MASK(sourceMask)     \
N                                                do{         \
N                                                    SPI_0_OLED_FLASH_INTR_RX_MASK_REG = (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_WRITE_INTR_RX_MASK(sourceMask)                                                     do{                                                             SPI_0_OLED_FLASH_INTR_RX_MASK_REG = (uint32) (sourceMask);                                                 }while(0)
N
N/* Enable interrupt source: set sourceMask bits in SPI_0_OLED_FLASH_INTR_X_MASK_REG */
N#define SPI_0_OLED_FLASH_ENABLE_INTR_I2C_EC(sourceMask) \
N                                                do{     \
N                                                    SPI_0_OLED_FLASH_INTR_I2C_EC_MASK_REG |= (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_ENABLE_INTR_I2C_EC(sourceMask)                                                 do{                                                         SPI_0_OLED_FLASH_INTR_I2C_EC_MASK_REG |= (uint32) (sourceMask);                                                 }while(0)
N#if (!SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if (!(2 == 1u))
N    #define SPI_0_OLED_FLASH_ENABLE_INTR_SPI_EC(sourceMask) \
N                                                do{     \
N                                                    SPI_0_OLED_FLASH_INTR_SPI_EC_MASK_REG |= (uint32) (sourceMask); \
N                                                }while(0)
X    #define SPI_0_OLED_FLASH_ENABLE_INTR_SPI_EC(sourceMask)                                                 do{                                                         SPI_0_OLED_FLASH_INTR_SPI_EC_MASK_REG |= (uint32) (sourceMask);                                                 }while(0)
N#endif /* (!SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N#define SPI_0_OLED_FLASH_ENABLE_INTR_MASTER(sourceMask) \
N                                                do{     \
N                                                    SPI_0_OLED_FLASH_INTR_MASTER_MASK_REG |= (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_ENABLE_INTR_MASTER(sourceMask)                                                 do{                                                         SPI_0_OLED_FLASH_INTR_MASTER_MASK_REG |= (uint32) (sourceMask);                                                 }while(0)
N
N#define SPI_0_OLED_FLASH_ENABLE_INTR_SLAVE(sourceMask)  \
N                                                do{     \
N                                                    SPI_0_OLED_FLASH_INTR_SLAVE_MASK_REG |= (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_ENABLE_INTR_SLAVE(sourceMask)                                                  do{                                                         SPI_0_OLED_FLASH_INTR_SLAVE_MASK_REG |= (uint32) (sourceMask);                                                 }while(0)
N
N#define SPI_0_OLED_FLASH_ENABLE_INTR_TX(sourceMask)     \
N                                                do{     \
N                                                    SPI_0_OLED_FLASH_INTR_TX_MASK_REG |= (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_ENABLE_INTR_TX(sourceMask)                                                     do{                                                         SPI_0_OLED_FLASH_INTR_TX_MASK_REG |= (uint32) (sourceMask);                                                 }while(0)
N
N#define SPI_0_OLED_FLASH_ENABLE_INTR_RX(sourceMask)     \
N                                                do{     \
N                                                    SPI_0_OLED_FLASH_INTR_RX_MASK_REG |= (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_ENABLE_INTR_RX(sourceMask)                                                     do{                                                         SPI_0_OLED_FLASH_INTR_RX_MASK_REG |= (uint32) (sourceMask);                                                 }while(0)
N
N/* Disable interrupt source: clear sourceMask bits in SPI_0_OLED_FLASH_INTR_X_MASK_REG */
N#define SPI_0_OLED_FLASH_DISABLE_INTR_I2C_EC(sourceMask) \
N                                do{                      \
N                                    SPI_0_OLED_FLASH_INTR_I2C_EC_MASK_REG &= ((uint32) ~((uint32) (sourceMask))); \
N                                }while(0)
X#define SPI_0_OLED_FLASH_DISABLE_INTR_I2C_EC(sourceMask)                                 do{                                                          SPI_0_OLED_FLASH_INTR_I2C_EC_MASK_REG &= ((uint32) ~((uint32) (sourceMask)));                                 }while(0)
N
N#if (!SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if (!(2 == 1u))
N    #define SPI_0_OLED_FLASH_DISABLE_INTR_SPI_EC(sourceMask) \
N                                do{                      \
N                                    SPI_0_OLED_FLASH_INTR_SPI_EC_MASK_REG &= ((uint32) ~((uint32) (sourceMask))); \
N                                 }while(0)
X    #define SPI_0_OLED_FLASH_DISABLE_INTR_SPI_EC(sourceMask)                                 do{                                                          SPI_0_OLED_FLASH_INTR_SPI_EC_MASK_REG &= ((uint32) ~((uint32) (sourceMask)));                                  }while(0)
N#endif /* (!SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N#define SPI_0_OLED_FLASH_DISABLE_INTR_MASTER(sourceMask) \
N                                do{                      \
N                                SPI_0_OLED_FLASH_INTR_MASTER_MASK_REG &= ((uint32) ~((uint32) (sourceMask))); \
N                                }while(0)
X#define SPI_0_OLED_FLASH_DISABLE_INTR_MASTER(sourceMask)                                 do{                                                      SPI_0_OLED_FLASH_INTR_MASTER_MASK_REG &= ((uint32) ~((uint32) (sourceMask)));                                 }while(0)
N
N#define SPI_0_OLED_FLASH_DISABLE_INTR_SLAVE(sourceMask) \
N                                do{                     \
N                                    SPI_0_OLED_FLASH_INTR_SLAVE_MASK_REG &= ((uint32) ~((uint32) (sourceMask))); \
N                                }while(0)
X#define SPI_0_OLED_FLASH_DISABLE_INTR_SLAVE(sourceMask)                                 do{                                                         SPI_0_OLED_FLASH_INTR_SLAVE_MASK_REG &= ((uint32) ~((uint32) (sourceMask)));                                 }while(0)
N
N#define SPI_0_OLED_FLASH_DISABLE_INTR_TX(sourceMask)    \
N                                do{                     \
N                                    SPI_0_OLED_FLASH_INTR_TX_MASK_REG &= ((uint32) ~((uint32) (sourceMask))); \
N                                 }while(0)
X#define SPI_0_OLED_FLASH_DISABLE_INTR_TX(sourceMask)                                    do{                                                         SPI_0_OLED_FLASH_INTR_TX_MASK_REG &= ((uint32) ~((uint32) (sourceMask)));                                  }while(0)
N
N#define SPI_0_OLED_FLASH_DISABLE_INTR_RX(sourceMask)    \
N                                do{                     \
N                                    SPI_0_OLED_FLASH_INTR_RX_MASK_REG &= ((uint32) ~((uint32) (sourceMask))); \
N                                }while(0)
X#define SPI_0_OLED_FLASH_DISABLE_INTR_RX(sourceMask)                                    do{                                                         SPI_0_OLED_FLASH_INTR_RX_MASK_REG &= ((uint32) ~((uint32) (sourceMask)));                                 }while(0)
N
N/* Set interrupt sources: write sourceMask bits in SPI_0_OLED_FLASH_INTR_X_SET_REG */
N#define SPI_0_OLED_FLASH_SET_INTR_MASTER(sourceMask)    \
N                                                do{     \
N                                                    SPI_0_OLED_FLASH_INTR_MASTER_SET_REG = (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_SET_INTR_MASTER(sourceMask)                                                    do{                                                         SPI_0_OLED_FLASH_INTR_MASTER_SET_REG = (uint32) (sourceMask);                                                 }while(0)
N
N#define SPI_0_OLED_FLASH_SET_INTR_SLAVE(sourceMask) \
N                                                do{ \
N                                                    SPI_0_OLED_FLASH_INTR_SLAVE_SET_REG = (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_SET_INTR_SLAVE(sourceMask)                                                 do{                                                     SPI_0_OLED_FLASH_INTR_SLAVE_SET_REG = (uint32) (sourceMask);                                                 }while(0)
N
N#define SPI_0_OLED_FLASH_SET_INTR_TX(sourceMask)    \
N                                                do{ \
N                                                    SPI_0_OLED_FLASH_INTR_TX_SET_REG = (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_SET_INTR_TX(sourceMask)                                                    do{                                                     SPI_0_OLED_FLASH_INTR_TX_SET_REG = (uint32) (sourceMask);                                                 }while(0)
N
N#define SPI_0_OLED_FLASH_SET_INTR_RX(sourceMask)    \
N                                                do{ \
N                                                    SPI_0_OLED_FLASH_INTR_RX_SET_REG = (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_SET_INTR_RX(sourceMask)                                                    do{                                                     SPI_0_OLED_FLASH_INTR_RX_SET_REG = (uint32) (sourceMask);                                                 }while(0)
N
N/* Clear interrupt sources: write sourceMask bits in SPI_0_OLED_FLASH_INTR_X_REG */
N#define SPI_0_OLED_FLASH_CLEAR_INTR_I2C_EC(sourceMask)  \
N                                                do{     \
N                                                    SPI_0_OLED_FLASH_INTR_I2C_EC_REG = (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_CLEAR_INTR_I2C_EC(sourceMask)                                                  do{                                                         SPI_0_OLED_FLASH_INTR_I2C_EC_REG = (uint32) (sourceMask);                                                 }while(0)
N
N#if (!SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if (!(2 == 1u))
N    #define SPI_0_OLED_FLASH_CLEAR_INTR_SPI_EC(sourceMask)  \
N                                                do{     \
N                                                    SPI_0_OLED_FLASH_INTR_SPI_EC_REG = (uint32) (sourceMask); \
N                                                }while(0)
X    #define SPI_0_OLED_FLASH_CLEAR_INTR_SPI_EC(sourceMask)                                                  do{                                                         SPI_0_OLED_FLASH_INTR_SPI_EC_REG = (uint32) (sourceMask);                                                 }while(0)
N#endif /* (!SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N#define SPI_0_OLED_FLASH_CLEAR_INTR_MASTER(sourceMask)  \
N                                                do{     \
N                                                    SPI_0_OLED_FLASH_INTR_MASTER_REG = (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_CLEAR_INTR_MASTER(sourceMask)                                                  do{                                                         SPI_0_OLED_FLASH_INTR_MASTER_REG = (uint32) (sourceMask);                                                 }while(0)
N
N#define SPI_0_OLED_FLASH_CLEAR_INTR_SLAVE(sourceMask)   \
N                                                do{     \
N                                                    SPI_0_OLED_FLASH_INTR_SLAVE_REG  = (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_CLEAR_INTR_SLAVE(sourceMask)                                                   do{                                                         SPI_0_OLED_FLASH_INTR_SLAVE_REG  = (uint32) (sourceMask);                                                 }while(0)
N
N#define SPI_0_OLED_FLASH_CLEAR_INTR_TX(sourceMask)      \
N                                                do{     \
N                                                    SPI_0_OLED_FLASH_INTR_TX_REG     = (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_CLEAR_INTR_TX(sourceMask)                                                      do{                                                         SPI_0_OLED_FLASH_INTR_TX_REG     = (uint32) (sourceMask);                                                 }while(0)
N
N#define SPI_0_OLED_FLASH_CLEAR_INTR_RX(sourceMask)      \
N                                                do{     \
N                                                    SPI_0_OLED_FLASH_INTR_RX_REG     = (uint32) (sourceMask); \
N                                                }while(0)
X#define SPI_0_OLED_FLASH_CLEAR_INTR_RX(sourceMask)                                                      do{                                                         SPI_0_OLED_FLASH_INTR_RX_REG     = (uint32) (sourceMask);                                                 }while(0)
N
N/* Return true if sourceMask is set in SPI_0_OLED_FLASH_INTR_CAUSE_REG */
N#define SPI_0_OLED_FLASH_CHECK_CAUSE_INTR(sourceMask)    (0u != (SPI_0_OLED_FLASH_INTR_CAUSE_REG & (sourceMask)))
N
N/* Return true if sourceMask is set in INTR_X_MASKED_REG */
N#define SPI_0_OLED_FLASH_CHECK_INTR_I2C_EC(sourceMask)  (0u != (SPI_0_OLED_FLASH_INTR_I2C_EC_REG & (sourceMask)))
N#if (!SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if (!(2 == 1u))
N    #define SPI_0_OLED_FLASH_CHECK_INTR_SPI_EC(sourceMask)  (0u != (SPI_0_OLED_FLASH_INTR_SPI_EC_REG & (sourceMask)))
N#endif /* (!SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N#define SPI_0_OLED_FLASH_CHECK_INTR_MASTER(sourceMask)  (0u != (SPI_0_OLED_FLASH_INTR_MASTER_REG & (sourceMask)))
N#define SPI_0_OLED_FLASH_CHECK_INTR_SLAVE(sourceMask)   (0u != (SPI_0_OLED_FLASH_INTR_SLAVE_REG  & (sourceMask)))
N#define SPI_0_OLED_FLASH_CHECK_INTR_TX(sourceMask)      (0u != (SPI_0_OLED_FLASH_INTR_TX_REG     & (sourceMask)))
N#define SPI_0_OLED_FLASH_CHECK_INTR_RX(sourceMask)      (0u != (SPI_0_OLED_FLASH_INTR_RX_REG     & (sourceMask)))
N
N/* Return true if sourceMask is set in SPI_0_OLED_FLASH_INTR_X_MASKED_REG */
N#define SPI_0_OLED_FLASH_CHECK_INTR_I2C_EC_MASKED(sourceMask)   (0u != (SPI_0_OLED_FLASH_INTR_I2C_EC_MASKED_REG & \
N                                                                       (sourceMask)))
X#define SPI_0_OLED_FLASH_CHECK_INTR_I2C_EC_MASKED(sourceMask)   (0u != (SPI_0_OLED_FLASH_INTR_I2C_EC_MASKED_REG &                                                                        (sourceMask)))
N#if (!SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if (!(2 == 1u))
N    #define SPI_0_OLED_FLASH_CHECK_INTR_SPI_EC_MASKED(sourceMask)   (0u != (SPI_0_OLED_FLASH_INTR_SPI_EC_MASKED_REG & \
N                                                                       (sourceMask)))
X    #define SPI_0_OLED_FLASH_CHECK_INTR_SPI_EC_MASKED(sourceMask)   (0u != (SPI_0_OLED_FLASH_INTR_SPI_EC_MASKED_REG &                                                                        (sourceMask)))
N#endif /* (!SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N#define SPI_0_OLED_FLASH_CHECK_INTR_MASTER_MASKED(sourceMask)   (0u != (SPI_0_OLED_FLASH_INTR_MASTER_MASKED_REG & \
N                                                                       (sourceMask)))
X#define SPI_0_OLED_FLASH_CHECK_INTR_MASTER_MASKED(sourceMask)   (0u != (SPI_0_OLED_FLASH_INTR_MASTER_MASKED_REG &                                                                        (sourceMask)))
N#define SPI_0_OLED_FLASH_CHECK_INTR_SLAVE_MASKED(sourceMask)    (0u != (SPI_0_OLED_FLASH_INTR_SLAVE_MASKED_REG  & \
N                                                                       (sourceMask)))
X#define SPI_0_OLED_FLASH_CHECK_INTR_SLAVE_MASKED(sourceMask)    (0u != (SPI_0_OLED_FLASH_INTR_SLAVE_MASKED_REG  &                                                                        (sourceMask)))
N#define SPI_0_OLED_FLASH_CHECK_INTR_TX_MASKED(sourceMask)       (0u != (SPI_0_OLED_FLASH_INTR_TX_MASKED_REG     & \
N                                                                       (sourceMask)))
X#define SPI_0_OLED_FLASH_CHECK_INTR_TX_MASKED(sourceMask)       (0u != (SPI_0_OLED_FLASH_INTR_TX_MASKED_REG     &                                                                        (sourceMask)))
N#define SPI_0_OLED_FLASH_CHECK_INTR_RX_MASKED(sourceMask)       (0u != (SPI_0_OLED_FLASH_INTR_RX_MASKED_REG     & \
N                                                                       (sourceMask)))
X#define SPI_0_OLED_FLASH_CHECK_INTR_RX_MASKED(sourceMask)       (0u != (SPI_0_OLED_FLASH_INTR_RX_MASKED_REG     &                                                                        (sourceMask)))
N
N/* Return true if sourceMask is set in SPI_0_OLED_FLASH_CTRL_REG: generally is used to check enable bit */
N#define SPI_0_OLED_FLASH_GET_CTRL_ENABLED    (0u != (SPI_0_OLED_FLASH_CTRL_REG & SPI_0_OLED_FLASH_CTRL_ENABLED))
N
N#define SPI_0_OLED_FLASH_CHECK_SLAVE_AUTO_ADDR_NACK     (0u != (SPI_0_OLED_FLASH_I2C_CTRL_REG & \
N                                                                SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK))
X#define SPI_0_OLED_FLASH_CHECK_SLAVE_AUTO_ADDR_NACK     (0u != (SPI_0_OLED_FLASH_I2C_CTRL_REG &                                                                 SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK))
N
N
N/***************************************
N*      I2C Macro Definitions
N***************************************/
N
N/* Enable auto ACK/NACK */
N#define SPI_0_OLED_FLASH_ENABLE_SLAVE_AUTO_ADDR_NACK \
N                            do{                      \
N                                SPI_0_OLED_FLASH_I2C_CTRL_REG |= SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK; \
N                            }while(0)
X#define SPI_0_OLED_FLASH_ENABLE_SLAVE_AUTO_ADDR_NACK                             do{                                                      SPI_0_OLED_FLASH_I2C_CTRL_REG |= SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK;                             }while(0)
N
N#define SPI_0_OLED_FLASH_ENABLE_SLAVE_AUTO_DATA_ACK \
N                            do{                     \
N                                SPI_0_OLED_FLASH_I2C_CTRL_REG |= SPI_0_OLED_FLASH_I2C_CTRL_S_READY_DATA_ACK; \
N                            }while(0)
X#define SPI_0_OLED_FLASH_ENABLE_SLAVE_AUTO_DATA_ACK                             do{                                                     SPI_0_OLED_FLASH_I2C_CTRL_REG |= SPI_0_OLED_FLASH_I2C_CTRL_S_READY_DATA_ACK;                             }while(0)
N
N#define SPI_0_OLED_FLASH_ENABLE_SLAVE_AUTO_DATA_NACK \
N                            do{                      \
N                                SPI_0_OLED_FLASH_I2C_CTRL_REG |= SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK; \
N                            }while(0)
X#define SPI_0_OLED_FLASH_ENABLE_SLAVE_AUTO_DATA_NACK                             do{                                                      SPI_0_OLED_FLASH_I2C_CTRL_REG |= SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK;                             }while(0)
N
N#define SPI_0_OLED_FLASH_ENABLE_MASTER_AUTO_DATA_ACK \
N                            do{                      \
N                                SPI_0_OLED_FLASH_I2C_CTRL_REG |= SPI_0_OLED_FLASH_I2C_CTRL_M_READY_DATA_ACK; \
N                            }while(0)
X#define SPI_0_OLED_FLASH_ENABLE_MASTER_AUTO_DATA_ACK                             do{                                                      SPI_0_OLED_FLASH_I2C_CTRL_REG |= SPI_0_OLED_FLASH_I2C_CTRL_M_READY_DATA_ACK;                             }while(0)
N
N#define SPI_0_OLED_FLASH_ENABLE_MASTER_AUTO_DATA_NACK \
N                            do{                       \
N                                SPI_0_OLED_FLASH_I2C_CTRL_REG |= SPI_0_OLED_FLASH_I2C_CTRL_M_NOT_READY_DATA_NACK; \
N                            }while(0)
X#define SPI_0_OLED_FLASH_ENABLE_MASTER_AUTO_DATA_NACK                             do{                                                       SPI_0_OLED_FLASH_I2C_CTRL_REG |= SPI_0_OLED_FLASH_I2C_CTRL_M_NOT_READY_DATA_NACK;                             }while(0)
N
N/* Disable auto ACK/NACK */
N#define SPI_0_OLED_FLASH_DISABLE_SLAVE_AUTO_ADDR_NACK \
N                            do{                       \
N                                SPI_0_OLED_FLASH_I2C_CTRL_REG &= ~SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK; \
N                            }while(0)
X#define SPI_0_OLED_FLASH_DISABLE_SLAVE_AUTO_ADDR_NACK                             do{                                                       SPI_0_OLED_FLASH_I2C_CTRL_REG &= ~SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK;                             }while(0)
N
N#define SPI_0_OLED_FLASH_DISABLE_SLAVE_AUTO_DATA_ACK \
N                            do{                      \
N                                SPI_0_OLED_FLASH_I2C_CTRL_REG &= ~SPI_0_OLED_FLASH_I2C_CTRL_S_READY_DATA_ACK; \
N                            }while(0)
X#define SPI_0_OLED_FLASH_DISABLE_SLAVE_AUTO_DATA_ACK                             do{                                                      SPI_0_OLED_FLASH_I2C_CTRL_REG &= ~SPI_0_OLED_FLASH_I2C_CTRL_S_READY_DATA_ACK;                             }while(0)
N
N#define SPI_0_OLED_FLASH_DISABLE_SLAVE_AUTO_DATA_NACK \
N                            do{                       \
N                                SPI_0_OLED_FLASH_I2C_CTRL_REG &= ~SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK; \
N                            }while(0)
X#define SPI_0_OLED_FLASH_DISABLE_SLAVE_AUTO_DATA_NACK                             do{                                                       SPI_0_OLED_FLASH_I2C_CTRL_REG &= ~SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK;                             }while(0)
N
N#define SPI_0_OLED_FLASH_DISABLE_MASTER_AUTO_DATA_ACK \
N                            do{                       \
N                                SPI_0_OLED_FLASH_I2C_CTRL_REG &= ~SPI_0_OLED_FLASH_I2C_CTRL_M_READY_DATA_ACK; \
N                            }while(0)
X#define SPI_0_OLED_FLASH_DISABLE_MASTER_AUTO_DATA_ACK                             do{                                                       SPI_0_OLED_FLASH_I2C_CTRL_REG &= ~SPI_0_OLED_FLASH_I2C_CTRL_M_READY_DATA_ACK;                             }while(0)
N
N#define SPI_0_OLED_FLASH_DISABLE_MASTER_AUTO_DATA_NACK \
N                            do{                        \
N                                SPI_0_OLED_FLASH_I2C_CTRL_REG &= ~SPI_0_OLED_FLASH_I2C_CTRL_M_NOT_READY_DATA_NACK; \
N                            }while(0)
X#define SPI_0_OLED_FLASH_DISABLE_MASTER_AUTO_DATA_NACK                             do{                                                        SPI_0_OLED_FLASH_I2C_CTRL_REG &= ~SPI_0_OLED_FLASH_I2C_CTRL_M_NOT_READY_DATA_NACK;                             }while(0)
N
N/* Enable Slave autoACK/NACK Data */
N#define SPI_0_OLED_FLASH_ENABLE_SLAVE_AUTO_DATA \
N                            do{                 \
N                                SPI_0_OLED_FLASH_I2C_CTRL_REG |= (SPI_0_OLED_FLASH_I2C_CTRL_S_READY_DATA_ACK |      \
N                                                                  SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK); \
N                            }while(0)
X#define SPI_0_OLED_FLASH_ENABLE_SLAVE_AUTO_DATA                             do{                                                 SPI_0_OLED_FLASH_I2C_CTRL_REG |= (SPI_0_OLED_FLASH_I2C_CTRL_S_READY_DATA_ACK |                                                                        SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK);                             }while(0)
N
N/* Disable Slave autoACK/NACK Data */
N#define SPI_0_OLED_FLASH_DISABLE_SLAVE_AUTO_DATA \
N                            do{                  \
N                                SPI_0_OLED_FLASH_I2C_CTRL_REG &= ((uint32) \
N                                                                  ~(SPI_0_OLED_FLASH_I2C_CTRL_S_READY_DATA_ACK |       \
N                                                                    SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK)); \
N                            }while(0)
X#define SPI_0_OLED_FLASH_DISABLE_SLAVE_AUTO_DATA                             do{                                                  SPI_0_OLED_FLASH_I2C_CTRL_REG &= ((uint32)                                                                   ~(SPI_0_OLED_FLASH_I2C_CTRL_S_READY_DATA_ACK |                                                                           SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK));                             }while(0)
N
N/* Disable Master autoACK/NACK Data */
N#define SPI_0_OLED_FLASH_DISABLE_MASTER_AUTO_DATA \
N                            do{                   \
N                                SPI_0_OLED_FLASH_I2C_CTRL_REG &= ((uint32) \
N                                                                  ~(SPI_0_OLED_FLASH_I2C_CTRL_M_READY_DATA_ACK |       \
N                                                                    SPI_0_OLED_FLASH_I2C_CTRL_M_NOT_READY_DATA_NACK)); \
N                            }while(0)
X#define SPI_0_OLED_FLASH_DISABLE_MASTER_AUTO_DATA                             do{                                                   SPI_0_OLED_FLASH_I2C_CTRL_REG &= ((uint32)                                                                   ~(SPI_0_OLED_FLASH_I2C_CTRL_M_READY_DATA_ACK |                                                                           SPI_0_OLED_FLASH_I2C_CTRL_M_NOT_READY_DATA_NACK));                             }while(0)
N/* Disables auto data ACK/NACK bits */
N#define SPI_0_OLED_FLASH_DISABLE_AUTO_DATA \
N                do{                        \
N                    SPI_0_OLED_FLASH_I2C_CTRL_REG &= ((uint32) ~(SPI_0_OLED_FLASH_I2C_CTRL_M_READY_DATA_ACK      |  \
N                                                                 SPI_0_OLED_FLASH_I2C_CTRL_M_NOT_READY_DATA_NACK |  \
N                                                                 SPI_0_OLED_FLASH_I2C_CTRL_S_READY_DATA_ACK      |  \
N                                                                 SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK)); \
N                }while(0)
X#define SPI_0_OLED_FLASH_DISABLE_AUTO_DATA                 do{                                            SPI_0_OLED_FLASH_I2C_CTRL_REG &= ((uint32) ~(SPI_0_OLED_FLASH_I2C_CTRL_M_READY_DATA_ACK      |                                                                   SPI_0_OLED_FLASH_I2C_CTRL_M_NOT_READY_DATA_NACK |                                                                   SPI_0_OLED_FLASH_I2C_CTRL_S_READY_DATA_ACK      |                                                                   SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_DATA_NACK));                 }while(0)
N
N/* Master commands */
N#define SPI_0_OLED_FLASH_I2C_MASTER_GENERATE_START \
N                            do{                    \
N                                SPI_0_OLED_FLASH_I2C_MASTER_CMD_REG = SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_START_ON_IDLE; \
N                            }while(0)
X#define SPI_0_OLED_FLASH_I2C_MASTER_GENERATE_START                             do{                                                    SPI_0_OLED_FLASH_I2C_MASTER_CMD_REG = SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_START_ON_IDLE;                             }while(0)
N
N#define SPI_0_OLED_FLASH_I2C_MASTER_CLEAR_START \
N                            do{                 \
N                                SPI_0_OLED_FLASH_I2C_MASTER_CMD_REG =  ((uint32) 0u); \
N                            }while(0)
X#define SPI_0_OLED_FLASH_I2C_MASTER_CLEAR_START                             do{                                                 SPI_0_OLED_FLASH_I2C_MASTER_CMD_REG =  ((uint32) 0u);                             }while(0)
N
N#define SPI_0_OLED_FLASH_I2C_MASTER_GENERATE_RESTART SPI_0_OLED_FLASH_I2CReStartGeneration()
N
N#define SPI_0_OLED_FLASH_I2C_MASTER_GENERATE_STOP \
N                            do{                   \
N                                SPI_0_OLED_FLASH_I2C_MASTER_CMD_REG =                                            \
N                                    (SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_STOP |                                    \
N                                        (SPI_0_OLED_FLASH_CHECK_I2C_STATUS(SPI_0_OLED_FLASH_I2C_STATUS_M_READ) ? \
N                                            (SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_NACK) : (0u)));                   \
N                            }while(0)
X#define SPI_0_OLED_FLASH_I2C_MASTER_GENERATE_STOP                             do{                                                   SPI_0_OLED_FLASH_I2C_MASTER_CMD_REG =                                                                                (SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_STOP |                                                                            (SPI_0_OLED_FLASH_CHECK_I2C_STATUS(SPI_0_OLED_FLASH_I2C_STATUS_M_READ) ?                                             (SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_NACK) : (0u)));                                               }while(0)
N
N#define SPI_0_OLED_FLASH_I2C_MASTER_GENERATE_ACK \
N                            do{                  \
N                                SPI_0_OLED_FLASH_I2C_MASTER_CMD_REG = SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_ACK; \
N                            }while(0)
X#define SPI_0_OLED_FLASH_I2C_MASTER_GENERATE_ACK                             do{                                                  SPI_0_OLED_FLASH_I2C_MASTER_CMD_REG = SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_ACK;                             }while(0)
N
N#define SPI_0_OLED_FLASH_I2C_MASTER_GENERATE_NACK \
N                            do{                   \
N                                SPI_0_OLED_FLASH_I2C_MASTER_CMD_REG = SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_NACK; \
N                            }while(0)
X#define SPI_0_OLED_FLASH_I2C_MASTER_GENERATE_NACK                             do{                                                   SPI_0_OLED_FLASH_I2C_MASTER_CMD_REG = SPI_0_OLED_FLASH_I2C_MASTER_CMD_M_NACK;                             }while(0)
N
N/* Slave commands */
N#define SPI_0_OLED_FLASH_I2C_SLAVE_GENERATE_ACK \
N                            do{                 \
N                                SPI_0_OLED_FLASH_I2C_SLAVE_CMD_REG = SPI_0_OLED_FLASH_I2C_SLAVE_CMD_S_ACK; \
N                            }while(0)
X#define SPI_0_OLED_FLASH_I2C_SLAVE_GENERATE_ACK                             do{                                                 SPI_0_OLED_FLASH_I2C_SLAVE_CMD_REG = SPI_0_OLED_FLASH_I2C_SLAVE_CMD_S_ACK;                             }while(0)
N
N#if (SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if ((2 == 0u) || (2 == 1u))
S    /* Slave NACK generation for EC_AM logic on address phase. Ticket ID #183902 */
S    void SPI_0_OLED_FLASH_I2CSlaveNackGeneration(void);
S    #define SPI_0_OLED_FLASH_I2C_SLAVE_GENERATE_NACK SPI_0_OLED_FLASH_I2CSlaveNackGeneration()
S
N#else
N    #define SPI_0_OLED_FLASH_I2C_SLAVE_GENERATE_NACK \
N                            do{                      \
N                                SPI_0_OLED_FLASH_I2C_SLAVE_CMD_REG = SPI_0_OLED_FLASH_I2C_SLAVE_CMD_S_NACK; \
N                            }while(0)
X    #define SPI_0_OLED_FLASH_I2C_SLAVE_GENERATE_NACK                             do{                                                      SPI_0_OLED_FLASH_I2C_SLAVE_CMD_REG = SPI_0_OLED_FLASH_I2C_SLAVE_CMD_S_NACK;                             }while(0)
N#endif /* (SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N#define SPI_0_OLED_FLASH_I2C_SLAVE_CLEAR_NACK \
N                            do{               \
N                                SPI_0_OLED_FLASH_I2C_SLAVE_CMD_REG = 0u; \
N                            }while(0)
X#define SPI_0_OLED_FLASH_I2C_SLAVE_CLEAR_NACK                             do{                                               SPI_0_OLED_FLASH_I2C_SLAVE_CMD_REG = 0u;                             }while(0)
N
N/* Return 8-bit address. The input address should be 7-bits */
N#define SPI_0_OLED_FLASH_GET_I2C_8BIT_ADDRESS(addr) (((uint32) ((uint32) (addr) << \
N                                                                    SPI_0_OLED_FLASH_I2C_SLAVE_ADDR_POS)) & \
N                                                                        SPI_0_OLED_FLASH_I2C_SLAVE_ADDR_MASK)
X#define SPI_0_OLED_FLASH_GET_I2C_8BIT_ADDRESS(addr) (((uint32) ((uint32) (addr) <<                                                                     SPI_0_OLED_FLASH_I2C_SLAVE_ADDR_POS)) &                                                                         SPI_0_OLED_FLASH_I2C_SLAVE_ADDR_MASK)
N
N#define SPI_0_OLED_FLASH_GET_I2C_7BIT_ADDRESS(addr) ((uint32) (addr) >> SPI_0_OLED_FLASH_I2C_SLAVE_ADDR_POS)
N
N/* Adjust SDA filter Trim settings */
N#define SPI_0_OLED_FLASH_DEFAULT_I2C_CFG_SDA_FILT_TRIM  (0x02u)
N#define SPI_0_OLED_FLASH_EC_AM_I2C_CFG_SDA_FILT_TRIM    (0x03u)
N
N#if (SPI_0_OLED_FLASH_CY_SCBIP_V0)
X#if ((2 == 0u))
S    #define SPI_0_OLED_FLASH_SET_I2C_CFG_SDA_FILT_TRIM(sdaTrim) \
S        do{                                                 \
S            SPI_0_OLED_FLASH_I2C_CFG_REG =                  \
S                            ((SPI_0_OLED_FLASH_I2C_CFG_REG & (uint32) ~SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_TRIM_MASK) | \
S                             ((uint32) ((uint32) (sdaTrim) <<SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_TRIM_POS)));           \
S        }while(0)
X    #define SPI_0_OLED_FLASH_SET_I2C_CFG_SDA_FILT_TRIM(sdaTrim)         do{                                                             SPI_0_OLED_FLASH_I2C_CFG_REG =                                              ((SPI_0_OLED_FLASH_I2C_CFG_REG & (uint32) ~SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_TRIM_MASK) |                              ((uint32) ((uint32) (sdaTrim) <<SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_TRIM_POS)));                   }while(0)
N#endif /* (SPI_0_OLED_FLASH_CY_SCBIP_V0) */
N
N/* Enable/Disable analog and digital filter */
N#define SPI_0_OLED_FLASH_DIGITAL_FILTER_DISABLE    (0u)
N#define SPI_0_OLED_FLASH_DIGITAL_FILTER_ENABLE     (1u)
N#define SPI_0_OLED_FLASH_I2C_DATA_RATE_FS_MODE_MAX (400u)
N#if (SPI_0_OLED_FLASH_CY_SCBIP_V0)
X#if ((2 == 0u))
S    /* SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_OUT_ENABLED is disabled by default */
S    #define SPI_0_OLED_FLASH_I2C_CFG_FILT_MASK  (SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_ENABLED | \
S                                                 SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_ENABLED)
X    #define SPI_0_OLED_FLASH_I2C_CFG_FILT_MASK  (SPI_0_OLED_FLASH_I2C_CFG_SDA_FILT_ENABLED |                                                  SPI_0_OLED_FLASH_I2C_CFG_SCL_FILT_ENABLED)
N#else
N    /* SPI_0_OLED_FLASH_I2C_CFG_SDA_OUT_FILT_SEL_MASK is disabled by default */
N    #define SPI_0_OLED_FLASH_I2C_CFG_FILT_MASK  (SPI_0_OLED_FLASH_I2C_CFG_SDA_IN_FILT_SEL | \
N                                                 SPI_0_OLED_FLASH_I2C_CFG_SCL_IN_FILT_SEL)
X    #define SPI_0_OLED_FLASH_I2C_CFG_FILT_MASK  (SPI_0_OLED_FLASH_I2C_CFG_SDA_IN_FILT_SEL |                                                  SPI_0_OLED_FLASH_I2C_CFG_SCL_IN_FILT_SEL)
N#endif /* (SPI_0_OLED_FLASH_CY_SCBIP_V0) */
N
N#define SPI_0_OLED_FLASH_I2C_CFG_ANALOG_FITER_DISABLE \
N        do{                                           \
N            SPI_0_OLED_FLASH_I2C_CFG_REG &= (uint32) ~SPI_0_OLED_FLASH_I2C_CFG_FILT_MASK; \
N        }while(0)
X#define SPI_0_OLED_FLASH_I2C_CFG_ANALOG_FITER_DISABLE         do{                                                       SPI_0_OLED_FLASH_I2C_CFG_REG &= (uint32) ~SPI_0_OLED_FLASH_I2C_CFG_FILT_MASK;         }while(0)
N
N#define SPI_0_OLED_FLASH_I2C_CFG_ANALOG_FITER_ENABLE \
N        do{                                          \
N            SPI_0_OLED_FLASH_I2C_CFG_REG |= (uint32)  SPI_0_OLED_FLASH_I2C_CFG_FILT_MASK; \
N        }while(0)
X#define SPI_0_OLED_FLASH_I2C_CFG_ANALOG_FITER_ENABLE         do{                                                      SPI_0_OLED_FLASH_I2C_CFG_REG |= (uint32)  SPI_0_OLED_FLASH_I2C_CFG_FILT_MASK;         }while(0)
N
N/* Return slave select number from SPI_CTRL register */
N#define SPI_0_OLED_FLASH_GET_SPI_CTRL_SS(activeSelect) (((uint32) ((uint32) (activeSelect) << \
N                                                                    SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT_POS)) & \
N                                                                        SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT_MASK)
X#define SPI_0_OLED_FLASH_GET_SPI_CTRL_SS(activeSelect) (((uint32) ((uint32) (activeSelect) <<                                                                     SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT_POS)) &                                                                         SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT_MASK)
N
N/* Return true if bit is set in SPI_0_OLED_FLASH_I2C_STATUS_REG */
N#define SPI_0_OLED_FLASH_CHECK_I2C_STATUS(sourceMask)   (0u != (SPI_0_OLED_FLASH_I2C_STATUS_REG & (sourceMask)))
N
N/* Return true if bit is set in SPI_0_OLED_FLASH_SPI_STATUS_REG */
N#define SPI_0_OLED_FLASH_CHECK_SPI_STATUS(sourceMask)   (0u != (SPI_0_OLED_FLASH_SPI_STATUS_REG & (sourceMask)))
N
N/* Return FIFO size depends on SPI_0_OLED_FLASH_CTRL_BYTE_MODE bit */
N#define SPI_0_OLED_FLASH_GET_FIFO_SIZE(condition) ((0u != (condition)) ? \
N                                                    (2u * SPI_0_OLED_FLASH_FIFO_SIZE) : (SPI_0_OLED_FLASH_FIFO_SIZE))
X#define SPI_0_OLED_FLASH_GET_FIFO_SIZE(condition) ((0u != (condition)) ?                                                     (2u * SPI_0_OLED_FLASH_FIFO_SIZE) : (SPI_0_OLED_FLASH_FIFO_SIZE))
N
N
N/***************************************
N*       Get Macros Definitions
N***************************************/
N
N/* SPI_0_OLED_FLASH_CTRL */
N#define SPI_0_OLED_FLASH_GET_CTRL_OVS(oversample)       (((uint32) (oversample) - 1u) & SPI_0_OLED_FLASH_CTRL_OVS_MASK)
N
N#define SPI_0_OLED_FLASH_GET_CTRL_EC_OP_MODE(opMode)        ((0u != (opMode)) ? \
N                                                                (SPI_0_OLED_FLASH_CTRL_EC_OP_MODE)  : (0u))
X#define SPI_0_OLED_FLASH_GET_CTRL_EC_OP_MODE(opMode)        ((0u != (opMode)) ?                                                                 (SPI_0_OLED_FLASH_CTRL_EC_OP_MODE)  : (0u))
N
N#define SPI_0_OLED_FLASH_GET_CTRL_EC_AM_MODE(amMode)        ((0u != (amMode)) ? \
N                                                                (SPI_0_OLED_FLASH_CTRL_EC_AM_MODE)  : (0u))
X#define SPI_0_OLED_FLASH_GET_CTRL_EC_AM_MODE(amMode)        ((0u != (amMode)) ?                                                                 (SPI_0_OLED_FLASH_CTRL_EC_AM_MODE)  : (0u))
N
N#define SPI_0_OLED_FLASH_GET_CTRL_BLOCK(block)              ((0u != (block))  ? \
N                                                                (SPI_0_OLED_FLASH_CTRL_BLOCK)       : (0u))
X#define SPI_0_OLED_FLASH_GET_CTRL_BLOCK(block)              ((0u != (block))  ?                                                                 (SPI_0_OLED_FLASH_CTRL_BLOCK)       : (0u))
N
N#define SPI_0_OLED_FLASH_GET_CTRL_ADDR_ACCEPT(acceptAddr)   ((0u != (acceptAddr)) ? \
N                                                                (SPI_0_OLED_FLASH_CTRL_ADDR_ACCEPT) : (0u))
X#define SPI_0_OLED_FLASH_GET_CTRL_ADDR_ACCEPT(acceptAddr)   ((0u != (acceptAddr)) ?                                                                 (SPI_0_OLED_FLASH_CTRL_ADDR_ACCEPT) : (0u))
N
N#if (SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if ((2 == 0u) || (2 == 1u))
S    #define SPI_0_OLED_FLASH_GET_CTRL_BYTE_MODE(mode)   (0u)
N#else
N    #define SPI_0_OLED_FLASH_GET_CTRL_BYTE_MODE(mode)   ((0u != (mode)) ? \
N                                                            (SPI_0_OLED_FLASH_CTRL_BYTE_MODE) : (0u))
X    #define SPI_0_OLED_FLASH_GET_CTRL_BYTE_MODE(mode)   ((0u != (mode)) ?                                                             (SPI_0_OLED_FLASH_CTRL_BYTE_MODE) : (0u))
N#endif /* (SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N/* SPI_0_OLED_FLASH_I2C_CTRL */
N#define SPI_0_OLED_FLASH_GET_I2C_CTRL_HIGH_PHASE_OVS(oversampleHigh) (((uint32) (oversampleHigh) - 1u) & \
N                                                                        SPI_0_OLED_FLASH_I2C_CTRL_HIGH_PHASE_OVS_MASK)
X#define SPI_0_OLED_FLASH_GET_I2C_CTRL_HIGH_PHASE_OVS(oversampleHigh) (((uint32) (oversampleHigh) - 1u) &                                                                         SPI_0_OLED_FLASH_I2C_CTRL_HIGH_PHASE_OVS_MASK)
N
N#define SPI_0_OLED_FLASH_GET_I2C_CTRL_LOW_PHASE_OVS(oversampleLow)  ((((uint32) (oversampleLow) - 1u) << \
N                                                                    SPI_0_OLED_FLASH_I2C_CTRL_LOW_PHASE_OVS_POS) &  \
N                                                                    SPI_0_OLED_FLASH_I2C_CTRL_LOW_PHASE_OVS_MASK)
X#define SPI_0_OLED_FLASH_GET_I2C_CTRL_LOW_PHASE_OVS(oversampleLow)  ((((uint32) (oversampleLow) - 1u) <<                                                                     SPI_0_OLED_FLASH_I2C_CTRL_LOW_PHASE_OVS_POS) &                                                                      SPI_0_OLED_FLASH_I2C_CTRL_LOW_PHASE_OVS_MASK)
N
N#define SPI_0_OLED_FLASH_GET_I2C_CTRL_S_NOT_READY_ADDR_NACK(wakeNack) ((0u != (wakeNack)) ? \
N                                                            (SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_ADDR_NACK) : (0u))
X#define SPI_0_OLED_FLASH_GET_I2C_CTRL_S_NOT_READY_ADDR_NACK(wakeNack) ((0u != (wakeNack)) ?                                                             (SPI_0_OLED_FLASH_I2C_CTRL_S_NOT_READY_ADDR_NACK) : (0u))
N
N#define SPI_0_OLED_FLASH_GET_I2C_CTRL_S_GENERAL_IGNORE(genCall) ((0u != (genCall)) ? \
N                                                                    (SPI_0_OLED_FLASH_I2C_CTRL_S_GENERAL_IGNORE) : (0u))
X#define SPI_0_OLED_FLASH_GET_I2C_CTRL_S_GENERAL_IGNORE(genCall) ((0u != (genCall)) ?                                                                     (SPI_0_OLED_FLASH_I2C_CTRL_S_GENERAL_IGNORE) : (0u))
N
N#define SPI_0_OLED_FLASH_GET_I2C_CTRL_SL_MSTR_MODE(mode)    ((uint32)(mode) << SPI_0_OLED_FLASH_I2C_CTRL_SLAVE_MODE_POS)
N
N/* SPI_0_OLED_FLASH_SPI_CTRL */
N#define SPI_0_OLED_FLASH_GET_SPI_CTRL_CONTINUOUS(separate)  ((0u != (separate)) ? \
N                                                                (SPI_0_OLED_FLASH_SPI_CTRL_CONTINUOUS) : (0u))
X#define SPI_0_OLED_FLASH_GET_SPI_CTRL_CONTINUOUS(separate)  ((0u != (separate)) ?                                                                 (SPI_0_OLED_FLASH_SPI_CTRL_CONTINUOUS) : (0u))
N
N#define SPI_0_OLED_FLASH_GET_SPI_CTRL_SELECT_PRECEDE(mode)  ((0u != (mode)) ? \
N                                                                      (SPI_0_OLED_FLASH_SPI_CTRL_SELECT_PRECEDE) : (0u))
X#define SPI_0_OLED_FLASH_GET_SPI_CTRL_SELECT_PRECEDE(mode)  ((0u != (mode)) ?                                                                       (SPI_0_OLED_FLASH_SPI_CTRL_SELECT_PRECEDE) : (0u))
N
N#define SPI_0_OLED_FLASH_GET_SPI_CTRL_SCLK_MODE(mode)       (((uint32) (mode) << \
N                                                                        SPI_0_OLED_FLASH_SPI_CTRL_CPHA_POS) & \
N                                                                        SPI_0_OLED_FLASH_SPI_CTRL_SCLK_MODE_MASK)
X#define SPI_0_OLED_FLASH_GET_SPI_CTRL_SCLK_MODE(mode)       (((uint32) (mode) <<                                                                         SPI_0_OLED_FLASH_SPI_CTRL_CPHA_POS) &                                                                         SPI_0_OLED_FLASH_SPI_CTRL_SCLK_MODE_MASK)
N
N#define SPI_0_OLED_FLASH_GET_SPI_CTRL_LATE_MISO_SAMPLE(lateMiso) ((0u != (lateMiso)) ? \
N                                                                    (SPI_0_OLED_FLASH_SPI_CTRL_LATE_MISO_SAMPLE) : (0u))
X#define SPI_0_OLED_FLASH_GET_SPI_CTRL_LATE_MISO_SAMPLE(lateMiso) ((0u != (lateMiso)) ?                                                                     (SPI_0_OLED_FLASH_SPI_CTRL_LATE_MISO_SAMPLE) : (0u))
N
N#if (SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if ((2 == 0u) || (2 == 1u))
S    #define SPI_0_OLED_FLASH_GET_SPI_CTRL_SCLK_CONTINUOUS(sclkType) (0u)
S    #define SPI_0_OLED_FLASH_GET_SPI_CTRL_SSEL_POLARITY(polarity)   (0u)
N#else
N    #define SPI_0_OLED_FLASH_GET_SPI_CTRL_SCLK_CONTINUOUS(sclkType) ((0u != (sclkType)) ? \
N                                                                    (SPI_0_OLED_FLASH_SPI_CTRL_SCLK_CONTINUOUS) : (0u))
X    #define SPI_0_OLED_FLASH_GET_SPI_CTRL_SCLK_CONTINUOUS(sclkType) ((0u != (sclkType)) ?                                                                     (SPI_0_OLED_FLASH_SPI_CTRL_SCLK_CONTINUOUS) : (0u))
N
N    #define SPI_0_OLED_FLASH_GET_SPI_CTRL_SSEL_POLARITY(polarity)   (((uint32) (polarity) << \
N                                                                     SPI_0_OLED_FLASH_SPI_CTRL_SSEL0_POLARITY_POS) & \
N                                                                     SPI_0_OLED_FLASH_SPI_CTRL_SSEL_POLARITY_MASK)
X    #define SPI_0_OLED_FLASH_GET_SPI_CTRL_SSEL_POLARITY(polarity)   (((uint32) (polarity) <<                                                                      SPI_0_OLED_FLASH_SPI_CTRL_SSEL0_POLARITY_POS) &                                                                      SPI_0_OLED_FLASH_SPI_CTRL_SSEL_POLARITY_MASK)
N#endif /* ((SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N#define SPI_0_OLED_FLASH_GET_SPI_CTRL_SUB_MODE(mode)        (((uint32) (mode) << SPI_0_OLED_FLASH_SPI_CTRL_MODE_POS) & \
N                                                                                 SPI_0_OLED_FLASH_SPI_CTRL_MODE_MASK)
X#define SPI_0_OLED_FLASH_GET_SPI_CTRL_SUB_MODE(mode)        (((uint32) (mode) << SPI_0_OLED_FLASH_SPI_CTRL_MODE_POS) &                                                                                  SPI_0_OLED_FLASH_SPI_CTRL_MODE_MASK)
N
N#define SPI_0_OLED_FLASH_GET_SPI_CTRL_SLAVE_SELECT(select)  (((uint32) (select) << \
N                                                                      SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT_POS) & \
N                                                                      SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT_MASK)
X#define SPI_0_OLED_FLASH_GET_SPI_CTRL_SLAVE_SELECT(select)  (((uint32) (select) <<                                                                       SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT_POS) &                                                                       SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT_MASK)
N
N#define SPI_0_OLED_FLASH_GET_SPI_CTRL_MASTER_MODE(mode)     ((0u != (mode)) ? \
N                                                                (SPI_0_OLED_FLASH_SPI_CTRL_MASTER) : (0u))
X#define SPI_0_OLED_FLASH_GET_SPI_CTRL_MASTER_MODE(mode)     ((0u != (mode)) ?                                                                 (SPI_0_OLED_FLASH_SPI_CTRL_MASTER) : (0u))
N
N/* SPI_0_OLED_FLASH_UART_CTRL */
N#define SPI_0_OLED_FLASH_GET_UART_CTRL_MODE(mode)           (((uint32) (mode) << \
N                                                                            SPI_0_OLED_FLASH_UART_CTRL_MODE_POS) & \
N                                                                            SPI_0_OLED_FLASH_UART_CTRL_MODE_MASK)
X#define SPI_0_OLED_FLASH_GET_UART_CTRL_MODE(mode)           (((uint32) (mode) <<                                                                             SPI_0_OLED_FLASH_UART_CTRL_MODE_POS) &                                                                             SPI_0_OLED_FLASH_UART_CTRL_MODE_MASK)
N
N/* SPI_0_OLED_FLASH_UART_RX_CTRL */
N#define SPI_0_OLED_FLASH_GET_UART_RX_CTRL_MODE(stopBits)    (((uint32) (stopBits) - 1u) & \
N                                                                        SPI_0_OLED_FLASH_UART_RX_CTRL_STOP_BITS_MASK)
X#define SPI_0_OLED_FLASH_GET_UART_RX_CTRL_MODE(stopBits)    (((uint32) (stopBits) - 1u) &                                                                         SPI_0_OLED_FLASH_UART_RX_CTRL_STOP_BITS_MASK)
N
N#define SPI_0_OLED_FLASH_GET_UART_RX_CTRL_PARITY(parity)    ((0u != (parity)) ? \
N                                                                    (SPI_0_OLED_FLASH_UART_RX_CTRL_PARITY) : (0u))
X#define SPI_0_OLED_FLASH_GET_UART_RX_CTRL_PARITY(parity)    ((0u != (parity)) ?                                                                     (SPI_0_OLED_FLASH_UART_RX_CTRL_PARITY) : (0u))
N
N#define SPI_0_OLED_FLASH_GET_UART_RX_CTRL_POLARITY(polarity)    ((0u != (polarity)) ? \
N                                                                    (SPI_0_OLED_FLASH_UART_RX_CTRL_POLARITY) : (0u))
X#define SPI_0_OLED_FLASH_GET_UART_RX_CTRL_POLARITY(polarity)    ((0u != (polarity)) ?                                                                     (SPI_0_OLED_FLASH_UART_RX_CTRL_POLARITY) : (0u))
N
N#define SPI_0_OLED_FLASH_GET_UART_RX_CTRL_DROP_ON_PARITY_ERR(dropErr) ((0u != (dropErr)) ? \
N                                                        (SPI_0_OLED_FLASH_UART_RX_CTRL_DROP_ON_PARITY_ERR) : (0u))
X#define SPI_0_OLED_FLASH_GET_UART_RX_CTRL_DROP_ON_PARITY_ERR(dropErr) ((0u != (dropErr)) ?                                                         (SPI_0_OLED_FLASH_UART_RX_CTRL_DROP_ON_PARITY_ERR) : (0u))
N
N#define SPI_0_OLED_FLASH_GET_UART_RX_CTRL_DROP_ON_FRAME_ERR(dropErr) ((0u != (dropErr)) ? \
N                                                        (SPI_0_OLED_FLASH_UART_RX_CTRL_DROP_ON_FRAME_ERR) : (0u))
X#define SPI_0_OLED_FLASH_GET_UART_RX_CTRL_DROP_ON_FRAME_ERR(dropErr) ((0u != (dropErr)) ?                                                         (SPI_0_OLED_FLASH_UART_RX_CTRL_DROP_ON_FRAME_ERR) : (0u))
N
N#define SPI_0_OLED_FLASH_GET_UART_RX_CTRL_MP_MODE(mpMode)   ((0u != (mpMode)) ? \
N                                                        (SPI_0_OLED_FLASH_UART_RX_CTRL_MP_MODE) : (0u))
X#define SPI_0_OLED_FLASH_GET_UART_RX_CTRL_MP_MODE(mpMode)   ((0u != (mpMode)) ?                                                         (SPI_0_OLED_FLASH_UART_RX_CTRL_MP_MODE) : (0u))
N
N#define SPI_0_OLED_FLASH_GET_UART_RX_CTRL_BREAK_WIDTH(width)    (((uint32) ((uint32) (width) - 1u) << \
N                                                                    SPI_0_OLED_FLASH_UART_RX_CTRL_BREAK_WIDTH_POS) & \
N                                                                    SPI_0_OLED_FLASH_UART_RX_CTRL_BREAK_WIDTH_MASK)
X#define SPI_0_OLED_FLASH_GET_UART_RX_CTRL_BREAK_WIDTH(width)    (((uint32) ((uint32) (width) - 1u) <<                                                                     SPI_0_OLED_FLASH_UART_RX_CTRL_BREAK_WIDTH_POS) &                                                                     SPI_0_OLED_FLASH_UART_RX_CTRL_BREAK_WIDTH_MASK)
N
N/* SPI_0_OLED_FLASH_UART_TX_CTRL */
N#define SPI_0_OLED_FLASH_GET_UART_TX_CTRL_MODE(stopBits)    (((uint32) (stopBits) - 1u) & \
N                                                                SPI_0_OLED_FLASH_UART_RX_CTRL_STOP_BITS_MASK)
X#define SPI_0_OLED_FLASH_GET_UART_TX_CTRL_MODE(stopBits)    (((uint32) (stopBits) - 1u) &                                                                 SPI_0_OLED_FLASH_UART_RX_CTRL_STOP_BITS_MASK)
N
N#define SPI_0_OLED_FLASH_GET_UART_TX_CTRL_PARITY(parity)    ((0u != (parity)) ? \
N                                                               (SPI_0_OLED_FLASH_UART_TX_CTRL_PARITY) : (0u))
X#define SPI_0_OLED_FLASH_GET_UART_TX_CTRL_PARITY(parity)    ((0u != (parity)) ?                                                                (SPI_0_OLED_FLASH_UART_TX_CTRL_PARITY) : (0u))
N
N#define SPI_0_OLED_FLASH_GET_UART_TX_CTRL_RETRY_NACK(nack)  ((0u != (nack)) ? \
N                                                               (SPI_0_OLED_FLASH_UART_TX_CTRL_RETRY_ON_NACK) : (0u))
X#define SPI_0_OLED_FLASH_GET_UART_TX_CTRL_RETRY_NACK(nack)  ((0u != (nack)) ?                                                                (SPI_0_OLED_FLASH_UART_TX_CTRL_RETRY_ON_NACK) : (0u))
N
N/* SPI_0_OLED_FLASH_UART_FLOW_CTRL */
N#if !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if !((2 == 0u) || (2 == 1u))
N    #define SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_TRIGGER_LEVEL(level)   ( (uint32) (level) & \
N                                                                 SPI_0_OLED_FLASH_UART_FLOW_CTRL_TRIGGER_LEVEL_MASK)
X    #define SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_TRIGGER_LEVEL(level)   ( (uint32) (level) &                                                                  SPI_0_OLED_FLASH_UART_FLOW_CTRL_TRIGGER_LEVEL_MASK)
N
N    #define SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_RTS_POLARITY(polarity) ((0u != (polarity)) ? \
N                                                                (SPI_0_OLED_FLASH_UART_FLOW_CTRL_RTS_POLARITY) : (0u))
X    #define SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_RTS_POLARITY(polarity) ((0u != (polarity)) ?                                                                 (SPI_0_OLED_FLASH_UART_FLOW_CTRL_RTS_POLARITY) : (0u))
N
N    #define SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_CTS_POLARITY(polarity) ((0u != (polarity)) ? \
N                                                                (SPI_0_OLED_FLASH_UART_FLOW_CTRL_CTS_POLARITY) : (0u))
X    #define SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_CTS_POLARITY(polarity) ((0u != (polarity)) ?                                                                 (SPI_0_OLED_FLASH_UART_FLOW_CTRL_CTS_POLARITY) : (0u))
N
N    #define SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_CTS_ENABLE(ctsEn)      ((0u != (ctsEn)) ? \
N                                                                (SPI_0_OLED_FLASH_UART_FLOW_CTRL_CTS_ENABLE) : (0u))
X    #define SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_CTS_ENABLE(ctsEn)      ((0u != (ctsEn)) ?                                                                 (SPI_0_OLED_FLASH_UART_FLOW_CTRL_CTS_ENABLE) : (0u))
N#endif /* !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N/* SPI_0_OLED_FLASH_RX_CTRL */
N#define SPI_0_OLED_FLASH_GET_RX_CTRL_DATA_WIDTH(dataWidth)  (((uint32) (dataWidth) - 1u) & \
N                                                                SPI_0_OLED_FLASH_RX_CTRL_DATA_WIDTH_MASK)
X#define SPI_0_OLED_FLASH_GET_RX_CTRL_DATA_WIDTH(dataWidth)  (((uint32) (dataWidth) - 1u) &                                                                 SPI_0_OLED_FLASH_RX_CTRL_DATA_WIDTH_MASK)
N
N#define SPI_0_OLED_FLASH_GET_RX_CTRL_BIT_ORDER(bitOrder)    ((0u != (bitOrder)) ? \
N                                                                (SPI_0_OLED_FLASH_RX_CTRL_MSB_FIRST) : (0u))
X#define SPI_0_OLED_FLASH_GET_RX_CTRL_BIT_ORDER(bitOrder)    ((0u != (bitOrder)) ?                                                                 (SPI_0_OLED_FLASH_RX_CTRL_MSB_FIRST) : (0u))
N
N#define SPI_0_OLED_FLASH_GET_RX_CTRL_MEDIAN(filterEn)       ((0u != (filterEn)) ? \
N                                                                (SPI_0_OLED_FLASH_RX_CTRL_MEDIAN) : (0u))
X#define SPI_0_OLED_FLASH_GET_RX_CTRL_MEDIAN(filterEn)       ((0u != (filterEn)) ?                                                                 (SPI_0_OLED_FLASH_RX_CTRL_MEDIAN) : (0u))
N
N/* SPI_0_OLED_FLASH_RX_MATCH */
N#define SPI_0_OLED_FLASH_GET_RX_MATCH_ADDR(addr)    ((uint32) (addr) & SPI_0_OLED_FLASH_RX_MATCH_ADDR_MASK)
N#define SPI_0_OLED_FLASH_GET_RX_MATCH_MASK(mask)    (((uint32) (mask) << \
N                                                            SPI_0_OLED_FLASH_RX_MATCH_MASK_POS) & \
N                                                            SPI_0_OLED_FLASH_RX_MATCH_MASK_MASK)
X#define SPI_0_OLED_FLASH_GET_RX_MATCH_MASK(mask)    (((uint32) (mask) <<                                                             SPI_0_OLED_FLASH_RX_MATCH_MASK_POS) &                                                             SPI_0_OLED_FLASH_RX_MATCH_MASK_MASK)
N
N/* SPI_0_OLED_FLASH_RX_FIFO_CTRL */
N#define SPI_0_OLED_FLASH_GET_RX_FIFO_CTRL_TRIGGER_LEVEL(level)  ((uint32) (level) & \
N                                                                    SPI_0_OLED_FLASH_RX_FIFO_CTRL_TRIGGER_LEVEL_MASK)
X#define SPI_0_OLED_FLASH_GET_RX_FIFO_CTRL_TRIGGER_LEVEL(level)  ((uint32) (level) &                                                                     SPI_0_OLED_FLASH_RX_FIFO_CTRL_TRIGGER_LEVEL_MASK)
N
N/* SPI_0_OLED_FLASH_TX_CTRL */
N#define SPI_0_OLED_FLASH_GET_TX_CTRL_DATA_WIDTH(dataWidth)  (((uint32) (dataWidth) - 1u) & \
N                                                                SPI_0_OLED_FLASH_TX_CTRL_DATA_WIDTH_MASK)
X#define SPI_0_OLED_FLASH_GET_TX_CTRL_DATA_WIDTH(dataWidth)  (((uint32) (dataWidth) - 1u) &                                                                 SPI_0_OLED_FLASH_TX_CTRL_DATA_WIDTH_MASK)
N
N#define SPI_0_OLED_FLASH_GET_TX_CTRL_BIT_ORDER(bitOrder)    ((0u != (bitOrder)) ? \
N                                                                (SPI_0_OLED_FLASH_TX_CTRL_MSB_FIRST) : (0u))
X#define SPI_0_OLED_FLASH_GET_TX_CTRL_BIT_ORDER(bitOrder)    ((0u != (bitOrder)) ?                                                                 (SPI_0_OLED_FLASH_TX_CTRL_MSB_FIRST) : (0u))
N
N/* SPI_0_OLED_FLASH_TX_FIFO_CTRL */
N#define SPI_0_OLED_FLASH_GET_TX_FIFO_CTRL_TRIGGER_LEVEL(level)  ((uint32) (level) & \
N                                                                    SPI_0_OLED_FLASH_TX_FIFO_CTRL_TRIGGER_LEVEL_MASK)
X#define SPI_0_OLED_FLASH_GET_TX_FIFO_CTRL_TRIGGER_LEVEL(level)  ((uint32) (level) &                                                                     SPI_0_OLED_FLASH_TX_FIFO_CTRL_TRIGGER_LEVEL_MASK)
N
N/* SPI_0_OLED_FLASH_INTR_SLAVE_I2C_GENERAL */
N#define SPI_0_OLED_FLASH_GET_INTR_SLAVE_I2C_GENERAL(genCall)  ((0u != (genCall)) ? \
N                                                                (SPI_0_OLED_FLASH_INTR_SLAVE_I2C_GENERAL) : (0u))
X#define SPI_0_OLED_FLASH_GET_INTR_SLAVE_I2C_GENERAL(genCall)  ((0u != (genCall)) ?                                                                 (SPI_0_OLED_FLASH_INTR_SLAVE_I2C_GENERAL) : (0u))
N
N/* Return true if master mode is enabled SPI_0_OLED_FLASH_SPI_CTRL_REG */
N#define SPI_0_OLED_FLASH_CHECK_SPI_MASTER   (0u != (SPI_0_OLED_FLASH_SPI_CTRL_REG & SPI_0_OLED_FLASH_SPI_CTRL_MASTER))
N
N/* Return inactive state of SPI SCLK line depends on CPOL */
N#define SPI_0_OLED_FLASH_GET_SPI_SCLK_INACTIVE \
N            ((0u == (SPI_0_OLED_FLASH_SPI_CTRL_REG & SPI_0_OLED_FLASH_SPI_CTRL_CPOL)) ? (0u) : (1u))
X#define SPI_0_OLED_FLASH_GET_SPI_SCLK_INACTIVE             ((0u == (SPI_0_OLED_FLASH_SPI_CTRL_REG & SPI_0_OLED_FLASH_SPI_CTRL_CPOL)) ? (0u) : (1u))
N
N/* Get output pin inactive state */
N#if (SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if ((2 == 0u) || (2 == 1u))
S#define SPI_0_OLED_FLASH_GET_SPI_SS0_INACTIVE       (1u)
S#define SPI_0_OLED_FLASH_GET_SPI_SS1_INACTIVE       (1u)
S#define SPI_0_OLED_FLASH_GET_SPI_SS2_INACTIVE       (1u)
S#define SPI_0_OLED_FLASH_GET_SPI_SS3_INACTIVE       (1u)
S#define SPI_0_OLED_FLASH_GET_UART_RTS_INACTIVE      (1u)
S
N#else
N#define SPI_0_OLED_FLASH_GET_SPI_SS0_INACTIVE  \
N        ((0u != (SPI_0_OLED_FLASH_SPI_CTRL_REG & SPI_0_OLED_FLASH_SPI_CTRL_SSEL0_POLARITY)) ? (0u) : (1u))
X#define SPI_0_OLED_FLASH_GET_SPI_SS0_INACTIVE          ((0u != (SPI_0_OLED_FLASH_SPI_CTRL_REG & SPI_0_OLED_FLASH_SPI_CTRL_SSEL0_POLARITY)) ? (0u) : (1u))
N
N#define SPI_0_OLED_FLASH_GET_SPI_SS1_INACTIVE  \
N        ((0u != (SPI_0_OLED_FLASH_SPI_CTRL_REG & SPI_0_OLED_FLASH_SPI_CTRL_SSEL1_POLARITY)) ? (0u) : (1u))
X#define SPI_0_OLED_FLASH_GET_SPI_SS1_INACTIVE          ((0u != (SPI_0_OLED_FLASH_SPI_CTRL_REG & SPI_0_OLED_FLASH_SPI_CTRL_SSEL1_POLARITY)) ? (0u) : (1u))
N
N#define SPI_0_OLED_FLASH_GET_SPI_SS2_INACTIVE  \
N        ((0u != (SPI_0_OLED_FLASH_SPI_CTRL_REG & SPI_0_OLED_FLASH_SPI_CTRL_SSEL2_POLARITY)) ? (0u) : (1u))
X#define SPI_0_OLED_FLASH_GET_SPI_SS2_INACTIVE          ((0u != (SPI_0_OLED_FLASH_SPI_CTRL_REG & SPI_0_OLED_FLASH_SPI_CTRL_SSEL2_POLARITY)) ? (0u) : (1u))
N
N#define SPI_0_OLED_FLASH_GET_SPI_SS3_INACTIVE  \
N        ((0u != (SPI_0_OLED_FLASH_SPI_CTRL_REG & SPI_0_OLED_FLASH_SPI_CTRL_SSEL3_POLARITY)) ? (0u) : (1u))
X#define SPI_0_OLED_FLASH_GET_SPI_SS3_INACTIVE          ((0u != (SPI_0_OLED_FLASH_SPI_CTRL_REG & SPI_0_OLED_FLASH_SPI_CTRL_SSEL3_POLARITY)) ? (0u) : (1u))
N
N#define SPI_0_OLED_FLASH_GET_UART_RTS_INACTIVE \
N        ((0u == (SPI_0_OLED_FLASH_UART_FLOW_CTRL_REG & SPI_0_OLED_FLASH_UART_FLOW_CTRL_RTS_POLARITY)) ? (0u) : (1u))
X#define SPI_0_OLED_FLASH_GET_UART_RTS_INACTIVE         ((0u == (SPI_0_OLED_FLASH_UART_FLOW_CTRL_REG & SPI_0_OLED_FLASH_UART_FLOW_CTRL_RTS_POLARITY)) ? (0u) : (1u))
N
N#endif /*(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N/* Clear register constants for configuration and interrupt mask */
N#define SPI_0_OLED_FLASH_CLEAR_REG          ((uint32) (0u))
N#define SPI_0_OLED_FLASH_NO_INTR_SOURCES    ((uint32) (0u))
N#define SPI_0_OLED_FLASH_DUMMY_PARAM        ((uint32) (0u))
N#define SPI_0_OLED_FLASH_SUBMODE_SPI_SLAVE  ((uint32) (0u))
N
N/* Return in case of I2C read error */
N#define SPI_0_OLED_FLASH_I2C_INVALID_BYTE   ((uint32) 0xFFFFFFFFu)
N#define SPI_0_OLED_FLASH_CHECK_VALID_BYTE   ((uint32) 0x80000000u)
N
N
N/***************************************
N* The following code is DEPRECATED and
N* must not be used.
N***************************************/
N
N#define SPI_0_OLED_FLASH_CHECK_INTR_EC_I2C(sourceMask)  SPI_0_OLED_FLASH_CHECK_INTR_I2C_EC(sourceMask)
N#if (!SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if (!(2 == 1u))
N    #define SPI_0_OLED_FLASH_CHECK_INTR_EC_SPI(sourceMask)  SPI_0_OLED_FLASH_CHECK_INTR_SPI_EC(sourceMask)
N#endif /* (!SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N#define SPI_0_OLED_FLASH_CY_SCBIP_V1_I2C_ONLY   (SPI_0_OLED_FLASH_CY_SCBIP_V1)
N#define SPI_0_OLED_FLASH_EZBUFFER_SIZE          (SPI_0_OLED_FLASH_EZ_DATA_NR)
N
N#define SPI_0_OLED_FLASH_EZBUF_DATA00_REG   SPI_0_OLED_FLASH_EZBUF_DATA0_REG
N#define SPI_0_OLED_FLASH_EZBUF_DATA00_PTR   SPI_0_OLED_FLASH_EZBUF_DATA0_PTR
N
N#endif /* (CY_SCB_SPI_0_OLED_FLASH_H) */
N
N
N/* [] END OF FILE */
L 24 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_PVT.h" 2
N
N
N/***************************************
N*     Private Function Prototypes
N***************************************/
N
N/* APIs to service INTR_I2C_EC register */
N#define SPI_0_OLED_FLASH_SetI2CExtClkInterruptMode(interruptMask) SPI_0_OLED_FLASH_WRITE_INTR_I2C_EC_MASK(interruptMask)
N#define SPI_0_OLED_FLASH_ClearI2CExtClkInterruptSource(interruptMask) SPI_0_OLED_FLASH_CLEAR_INTR_I2C_EC(interruptMask)
N#define SPI_0_OLED_FLASH_GetI2CExtClkInterruptSource()                (SPI_0_OLED_FLASH_INTR_I2C_EC_REG)
N#define SPI_0_OLED_FLASH_GetI2CExtClkInterruptMode()                  (SPI_0_OLED_FLASH_INTR_I2C_EC_MASK_REG)
N#define SPI_0_OLED_FLASH_GetI2CExtClkInterruptSourceMasked()          (SPI_0_OLED_FLASH_INTR_I2C_EC_MASKED_REG)
N
N#if (!SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if (!(2 == 1u))
N    /* APIs to service INTR_SPI_EC register */
N    #define SPI_0_OLED_FLASH_SetSpiExtClkInterruptMode(interruptMask) \
N                                                                SPI_0_OLED_FLASH_WRITE_INTR_SPI_EC_MASK(interruptMask)
X    #define SPI_0_OLED_FLASH_SetSpiExtClkInterruptMode(interruptMask)                                                                 SPI_0_OLED_FLASH_WRITE_INTR_SPI_EC_MASK(interruptMask)
N    #define SPI_0_OLED_FLASH_ClearSpiExtClkInterruptSource(interruptMask) \
N                                                                SPI_0_OLED_FLASH_CLEAR_INTR_SPI_EC(interruptMask)
X    #define SPI_0_OLED_FLASH_ClearSpiExtClkInterruptSource(interruptMask)                                                                 SPI_0_OLED_FLASH_CLEAR_INTR_SPI_EC(interruptMask)
N    #define SPI_0_OLED_FLASH_GetExtSpiClkInterruptSource()                 (SPI_0_OLED_FLASH_INTR_SPI_EC_REG)
N    #define SPI_0_OLED_FLASH_GetExtSpiClkInterruptMode()                   (SPI_0_OLED_FLASH_INTR_SPI_EC_MASK_REG)
N    #define SPI_0_OLED_FLASH_GetExtSpiClkInterruptSourceMasked()           (SPI_0_OLED_FLASH_INTR_SPI_EC_MASKED_REG)
N#endif /* (!SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N#if(SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG)
X#if(((0xFFu) == (2u)))
S    extern void SPI_0_OLED_FLASH_SetPins(uint32 mode, uint32 subMode, uint32 uartEnableMask);
N#endif /* (SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG) */
N
N
N/***************************************
N*     Vars with External Linkage
N***************************************/
N
N#if (SPI_0_OLED_FLASH_SCB_IRQ_INTERNAL)
X#if ((0u == (1u)))
S#if !defined (CY_REMOVE_SPI_0_OLED_FLASH_CUSTOM_INTR_HANDLER)
S    extern cyisraddress SPI_0_OLED_FLASH_customIntrHandler;
S#endif /* !defined (CY_REMOVE_SPI_0_OLED_FLASH_CUSTOM_INTR_HANDLER) */
N#endif /* (SPI_0_OLED_FLASH_SCB_IRQ_INTERNAL) */
N
Nextern SPI_0_OLED_FLASH_BACKUP_STRUCT SPI_0_OLED_FLASH_backup;
N
N#if(SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG)
X#if(((0xFFu) == (2u)))
S    /* Common configuration variables */
S    extern uint8 SPI_0_OLED_FLASH_scbMode;
S    extern uint8 SPI_0_OLED_FLASH_scbEnableWake;
S    extern uint8 SPI_0_OLED_FLASH_scbEnableIntr;
S
S    /* I2C configuration variables */
S    extern uint8 SPI_0_OLED_FLASH_mode;
S    extern uint8 SPI_0_OLED_FLASH_acceptAddr;
S
S    /* SPI/UART configuration variables */
S    extern volatile uint8 * SPI_0_OLED_FLASH_rxBuffer;
S    extern uint8   SPI_0_OLED_FLASH_rxDataBits;
S    extern uint32  SPI_0_OLED_FLASH_rxBufferSize;
S
S    extern volatile uint8 * SPI_0_OLED_FLASH_txBuffer;
S    extern uint8   SPI_0_OLED_FLASH_txDataBits;
S    extern uint32  SPI_0_OLED_FLASH_txBufferSize;
S
S    /* EZI2C configuration variables */
S    extern uint8 SPI_0_OLED_FLASH_numberOfAddr;
S    extern uint8 SPI_0_OLED_FLASH_subAddrSize;
N#endif /* (SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG) */
N
N#if (! (SPI_0_OLED_FLASH_SCB_MODE_I2C_CONST_CFG || \
N        SPI_0_OLED_FLASH_SCB_MODE_EZI2C_CONST_CFG))
X#if (! (((0x01u) == (2u)) ||         ((0x08u) == (2u))))
N    extern uint16 SPI_0_OLED_FLASH_IntrTxMask;
N#endif /* (! (SPI_0_OLED_FLASH_SCB_MODE_I2C_CONST_CFG || \
N              SPI_0_OLED_FLASH_SCB_MODE_EZI2C_CONST_CFG)) */
X#endif  
N
N
N/***************************************
N*        Conditional Macro
N****************************************/
N
N#if(SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG)
X#if(((0xFFu) == (2u)))
S    /* Defines run time operation mode */
S    #define SPI_0_OLED_FLASH_SCB_MODE_I2C_RUNTM_CFG     (SPI_0_OLED_FLASH_SCB_MODE_I2C      == SPI_0_OLED_FLASH_scbMode)
S    #define SPI_0_OLED_FLASH_SCB_MODE_SPI_RUNTM_CFG     (SPI_0_OLED_FLASH_SCB_MODE_SPI      == SPI_0_OLED_FLASH_scbMode)
S    #define SPI_0_OLED_FLASH_SCB_MODE_UART_RUNTM_CFG    (SPI_0_OLED_FLASH_SCB_MODE_UART     == SPI_0_OLED_FLASH_scbMode)
S    #define SPI_0_OLED_FLASH_SCB_MODE_EZI2C_RUNTM_CFG   (SPI_0_OLED_FLASH_SCB_MODE_EZI2C    == SPI_0_OLED_FLASH_scbMode)
S    #define SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_RUNTM_CFG \
S                                                        (SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG == SPI_0_OLED_FLASH_scbMode)
X    #define SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_RUNTM_CFG                                                         (SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG == SPI_0_OLED_FLASH_scbMode)
S
S    /* Defines wakeup enable */
S    #define SPI_0_OLED_FLASH_SCB_WAKE_ENABLE_CHECK       (0u != SPI_0_OLED_FLASH_scbEnableWake)
N#endif /* (SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG) */
N
N/* Defines maximum number of SCB pins */
N#if (!SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if (!(2 == 1u))
N    #define SPI_0_OLED_FLASH_SCB_PINS_NUMBER    (7u)
N#else
S    #define SPI_0_OLED_FLASH_SCB_PINS_NUMBER    (2u)
N#endif /* (!SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N#endif /* (CY_SCB_PVT_SPI_0_OLED_FLASH_H) */
N
N
N/* [] END OF FILE */
L 20 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_SPI.c" 2
N#include "SPI_0_OLED_FLASH_SPI_UART_PVT.h"
L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_SPI_UART_PVT.h" 1
N/***************************************************************************//**
N* \file SPI_0_OLED_FLASH_SPI_UART_PVT.h
N* \version 4.0
N*
N* \brief
N*  This private file provides constants and parameter values for the
N*  SCB Component in SPI and UART modes.
N*  Please do not use this file or its content in your project.
N*
N* Note:
N*
N********************************************************************************
N* \copyright
N* Copyright 2013-2017, Cypress Semiconductor Corporation. All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_SCB_SPI_UART_PVT_SPI_0_OLED_FLASH_H)
X#if !0L
N#define CY_SCB_SPI_UART_PVT_SPI_0_OLED_FLASH_H
N
N#include "SPI_0_OLED_FLASH_SPI_UART.h"
L 1 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_SPI_UART.h" 1
N/***************************************************************************//**
N* \file SPI_0_OLED_FLASH_SPI_UART.h
N* \version 4.0
N*
N* \brief
N*  This file provides constants and parameter values for the SCB Component in
N*  SPI and UART modes.
N*
N* Note:
N*
N********************************************************************************
N* \copyright
N* Copyright 2013-2017, Cypress Semiconductor Corporation.  All rights reserved.
N* You may use this file only in accordance with the license, terms, conditions,
N* disclaimers, and limitations in the end user license agreement accompanying
N* the software package with which this file was provided.
N*******************************************************************************/
N
N#if !defined(CY_SCB_SPI_UART_SPI_0_OLED_FLASH_H)
X#if !0L
N#define CY_SCB_SPI_UART_SPI_0_OLED_FLASH_H
N
N#include "SPI_0_OLED_FLASH.h"
N
N
N/***************************************
N*   SPI Initial Parameter Constants
N****************************************/
N
N#define SPI_0_OLED_FLASH_SPI_MODE                   (1u)
N#define SPI_0_OLED_FLASH_SPI_SUB_MODE               (0u)
N#define SPI_0_OLED_FLASH_SPI_CLOCK_MODE             (0u)
N#define SPI_0_OLED_FLASH_SPI_OVS_FACTOR             (6u)
N#define SPI_0_OLED_FLASH_SPI_MEDIAN_FILTER_ENABLE   (0u)
N#define SPI_0_OLED_FLASH_SPI_LATE_MISO_SAMPLE_ENABLE (0u)
N#define SPI_0_OLED_FLASH_SPI_RX_DATA_BITS_NUM       (8u)
N#define SPI_0_OLED_FLASH_SPI_TX_DATA_BITS_NUM       (8u)
N#define SPI_0_OLED_FLASH_SPI_WAKE_ENABLE            (0u)
N#define SPI_0_OLED_FLASH_SPI_BITS_ORDER             (1u)
N#define SPI_0_OLED_FLASH_SPI_TRANSFER_SEPARATION    (1u)
N#define SPI_0_OLED_FLASH_SPI_NUMBER_OF_SS_LINES     (2u)
N#define SPI_0_OLED_FLASH_SPI_RX_BUFFER_SIZE         (16u)
N#define SPI_0_OLED_FLASH_SPI_TX_BUFFER_SIZE         (16u)
N
N#define SPI_0_OLED_FLASH_SPI_INTERRUPT_MODE         (0u)
N
N#define SPI_0_OLED_FLASH_SPI_INTR_RX_MASK           (0x0u)
N#define SPI_0_OLED_FLASH_SPI_INTR_TX_MASK           (0x0u)
N
N#define SPI_0_OLED_FLASH_SPI_RX_TRIGGER_LEVEL       (7u)
N#define SPI_0_OLED_FLASH_SPI_TX_TRIGGER_LEVEL       (0u)
N
N#define SPI_0_OLED_FLASH_SPI_BYTE_MODE_ENABLE       (1u)
N#define SPI_0_OLED_FLASH_SPI_FREE_RUN_SCLK_ENABLE   (0u)
N#define SPI_0_OLED_FLASH_SPI_SS0_POLARITY           (0u)
N#define SPI_0_OLED_FLASH_SPI_SS1_POLARITY           (0u)
N#define SPI_0_OLED_FLASH_SPI_SS2_POLARITY           (0u)
N#define SPI_0_OLED_FLASH_SPI_SS3_POLARITY           (0u)
N
N
N/***************************************
N*   UART Initial Parameter Constants
N****************************************/
N
N#define SPI_0_OLED_FLASH_UART_SUB_MODE              (0u)
N#define SPI_0_OLED_FLASH_UART_DIRECTION             (3u)
N#define SPI_0_OLED_FLASH_UART_DATA_BITS_NUM         (8u)
N#define SPI_0_OLED_FLASH_UART_PARITY_TYPE           (2u)
N#define SPI_0_OLED_FLASH_UART_STOP_BITS_NUM         (2u)
N#define SPI_0_OLED_FLASH_UART_OVS_FACTOR            (12u)
N#define SPI_0_OLED_FLASH_UART_IRDA_LOW_POWER        (0u)
N#define SPI_0_OLED_FLASH_UART_MEDIAN_FILTER_ENABLE  (0u)
N#define SPI_0_OLED_FLASH_UART_RETRY_ON_NACK         (0u)
N#define SPI_0_OLED_FLASH_UART_IRDA_POLARITY         (0u)
N#define SPI_0_OLED_FLASH_UART_DROP_ON_FRAME_ERR     (0u)
N#define SPI_0_OLED_FLASH_UART_DROP_ON_PARITY_ERR    (0u)
N#define SPI_0_OLED_FLASH_UART_WAKE_ENABLE           (0u)
N#define SPI_0_OLED_FLASH_UART_RX_BUFFER_SIZE        (8u)
N#define SPI_0_OLED_FLASH_UART_TX_BUFFER_SIZE        (8u)
N#define SPI_0_OLED_FLASH_UART_MP_MODE_ENABLE        (0u)
N#define SPI_0_OLED_FLASH_UART_MP_ACCEPT_ADDRESS     (0u)
N#define SPI_0_OLED_FLASH_UART_MP_RX_ADDRESS         (0x2u)
N#define SPI_0_OLED_FLASH_UART_MP_RX_ADDRESS_MASK    (0xFFu)
N
N#define SPI_0_OLED_FLASH_UART_INTERRUPT_MODE        (0u)
N
N#define SPI_0_OLED_FLASH_UART_INTR_RX_MASK          (0x0u)
N#define SPI_0_OLED_FLASH_UART_INTR_TX_MASK          (0x0u)
N
N#define SPI_0_OLED_FLASH_UART_RX_TRIGGER_LEVEL      (7u)
N#define SPI_0_OLED_FLASH_UART_TX_TRIGGER_LEVEL      (0u)
N
N#define SPI_0_OLED_FLASH_UART_BYTE_MODE_ENABLE      (0u)
N#define SPI_0_OLED_FLASH_UART_CTS_ENABLE            (0u)
N#define SPI_0_OLED_FLASH_UART_CTS_POLARITY          (0u)
N#define SPI_0_OLED_FLASH_UART_RTS_ENABLE            (0u)
N#define SPI_0_OLED_FLASH_UART_RTS_POLARITY          (0u)
N#define SPI_0_OLED_FLASH_UART_RTS_FIFO_LEVEL        (4u)
N
N#define SPI_0_OLED_FLASH_UART_RX_BREAK_WIDTH        (11u)
N
N/* SPI mode enum */
N#define SPI_0_OLED_FLASH_SPI_SLAVE  (0u)
N#define SPI_0_OLED_FLASH_SPI_MASTER (1u)
N
N/* UART direction enum */
N#define SPI_0_OLED_FLASH_UART_RX    (1u)
N#define SPI_0_OLED_FLASH_UART_TX    (2u)
N#define SPI_0_OLED_FLASH_UART_TX_RX (3u)
N
N
N/***************************************
N*   Conditional Compilation Parameters
N****************************************/
N
N#if(SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG)
X#if(((0xFFu) == (2u)))
S
S    /* Mode */
S    #define SPI_0_OLED_FLASH_SPI_SLAVE_CONST        (1u)
S    #define SPI_0_OLED_FLASH_SPI_MASTER_CONST       (1u)
S
S    /* Direction */
S    #define SPI_0_OLED_FLASH_RX_DIRECTION           (1u)
S    #define SPI_0_OLED_FLASH_TX_DIRECTION           (1u)
S    #define SPI_0_OLED_FLASH_UART_RX_DIRECTION      (1u)
S    #define SPI_0_OLED_FLASH_UART_TX_DIRECTION      (1u)
S
S    /* Only external RX and TX buffer for Uncofigured mode */
S    #define SPI_0_OLED_FLASH_INTERNAL_RX_SW_BUFFER   (0u)
S    #define SPI_0_OLED_FLASH_INTERNAL_TX_SW_BUFFER   (0u)
S
S    /* Get RX and TX buffer size */
S    #define SPI_0_OLED_FLASH_INTERNAL_RX_BUFFER_SIZE    (SPI_0_OLED_FLASH_rxBufferSize + 1u)
S    #define SPI_0_OLED_FLASH_RX_BUFFER_SIZE             (SPI_0_OLED_FLASH_rxBufferSize)
S    #define SPI_0_OLED_FLASH_TX_BUFFER_SIZE             (SPI_0_OLED_FLASH_txBufferSize)
S
S    /* Return true if buffer is provided */
S    #define SPI_0_OLED_FLASH_CHECK_RX_SW_BUFFER (NULL != SPI_0_OLED_FLASH_rxBuffer)
S    #define SPI_0_OLED_FLASH_CHECK_TX_SW_BUFFER (NULL != SPI_0_OLED_FLASH_txBuffer)
S
S    /* Always provide global variables to support RX and TX buffers */
S    #define SPI_0_OLED_FLASH_INTERNAL_RX_SW_BUFFER_CONST    (1u)
S    #define SPI_0_OLED_FLASH_INTERNAL_TX_SW_BUFFER_CONST    (1u)
S
S    /* Get wakeup enable option */
S    #define SPI_0_OLED_FLASH_SPI_WAKE_ENABLE_CONST  (1u)
S    #define SPI_0_OLED_FLASH_UART_WAKE_ENABLE_CONST (1u)
S    #define SPI_0_OLED_FLASH_CHECK_SPI_WAKE_ENABLE  ((0u != SPI_0_OLED_FLASH_scbEnableWake) && SPI_0_OLED_FLASH_SCB_MODE_SPI_RUNTM_CFG)
S    #define SPI_0_OLED_FLASH_CHECK_UART_WAKE_ENABLE ((0u != SPI_0_OLED_FLASH_scbEnableWake) && SPI_0_OLED_FLASH_SCB_MODE_UART_RUNTM_CFG)
S
S    /* SPI/UART: TX or RX FIFO size */
S    #if (SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
S        #define SPI_0_OLED_FLASH_SPI_UART_FIFO_SIZE             (SPI_0_OLED_FLASH_FIFO_SIZE)
S        #define SPI_0_OLED_FLASH_CHECK_UART_RTS_CONTROL_FLOW    (0u)
S    #else
S        #define SPI_0_OLED_FLASH_SPI_UART_FIFO_SIZE (SPI_0_OLED_FLASH_GET_FIFO_SIZE(SPI_0_OLED_FLASH_CTRL_REG & \
S                                                                                    SPI_0_OLED_FLASH_CTRL_BYTE_MODE))
X        #define SPI_0_OLED_FLASH_SPI_UART_FIFO_SIZE (SPI_0_OLED_FLASH_GET_FIFO_SIZE(SPI_0_OLED_FLASH_CTRL_REG &                                                                                     SPI_0_OLED_FLASH_CTRL_BYTE_MODE))
S
S        #define SPI_0_OLED_FLASH_CHECK_UART_RTS_CONTROL_FLOW \
S                    ((SPI_0_OLED_FLASH_SCB_MODE_UART_RUNTM_CFG) && \
S                     (0u != SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_TRIGGER_LEVEL(SPI_0_OLED_FLASH_UART_FLOW_CTRL_REG)))
X        #define SPI_0_OLED_FLASH_CHECK_UART_RTS_CONTROL_FLOW                     ((SPI_0_OLED_FLASH_SCB_MODE_UART_RUNTM_CFG) &&                      (0u != SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_TRIGGER_LEVEL(SPI_0_OLED_FLASH_UART_FLOW_CTRL_REG)))
S    #endif /* (SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
S
N#else
N
N    /* Internal RX and TX buffer: for SPI or UART */
N    #if (SPI_0_OLED_FLASH_SCB_MODE_SPI_CONST_CFG)
X    #if (((0x02u) == (2u)))
N
N        /* SPI Direction */
N        #define SPI_0_OLED_FLASH_SPI_RX_DIRECTION (1u)
N        #define SPI_0_OLED_FLASH_SPI_TX_DIRECTION (1u)
N
N        /* Get FIFO size */
N        #define SPI_0_OLED_FLASH_SPI_UART_FIFO_SIZE SPI_0_OLED_FLASH_GET_FIFO_SIZE(SPI_0_OLED_FLASH_SPI_BYTE_MODE_ENABLE)
N
N        /* SPI internal RX and TX buffers */
N        #define SPI_0_OLED_FLASH_INTERNAL_SPI_RX_SW_BUFFER  (SPI_0_OLED_FLASH_SPI_RX_BUFFER_SIZE > \
N                                                                SPI_0_OLED_FLASH_SPI_UART_FIFO_SIZE)
X        #define SPI_0_OLED_FLASH_INTERNAL_SPI_RX_SW_BUFFER  (SPI_0_OLED_FLASH_SPI_RX_BUFFER_SIZE >                                                                 SPI_0_OLED_FLASH_SPI_UART_FIFO_SIZE)
N        #define SPI_0_OLED_FLASH_INTERNAL_SPI_TX_SW_BUFFER  (SPI_0_OLED_FLASH_SPI_TX_BUFFER_SIZE > \
N                                                                SPI_0_OLED_FLASH_SPI_UART_FIFO_SIZE)
X        #define SPI_0_OLED_FLASH_INTERNAL_SPI_TX_SW_BUFFER  (SPI_0_OLED_FLASH_SPI_TX_BUFFER_SIZE >                                                                 SPI_0_OLED_FLASH_SPI_UART_FIFO_SIZE)
N
N        /* Internal SPI RX and TX buffer */
N        #define SPI_0_OLED_FLASH_INTERNAL_RX_SW_BUFFER  (SPI_0_OLED_FLASH_INTERNAL_SPI_RX_SW_BUFFER)
N        #define SPI_0_OLED_FLASH_INTERNAL_TX_SW_BUFFER  (SPI_0_OLED_FLASH_INTERNAL_SPI_TX_SW_BUFFER)
N
N        /* Internal SPI RX and TX buffer size */
N        #define SPI_0_OLED_FLASH_INTERNAL_RX_BUFFER_SIZE    (SPI_0_OLED_FLASH_SPI_RX_BUFFER_SIZE + 1u)
N        #define SPI_0_OLED_FLASH_RX_BUFFER_SIZE             (SPI_0_OLED_FLASH_SPI_RX_BUFFER_SIZE)
N        #define SPI_0_OLED_FLASH_TX_BUFFER_SIZE             (SPI_0_OLED_FLASH_SPI_TX_BUFFER_SIZE)
N
N        /* Get wakeup enable option */
N        #define SPI_0_OLED_FLASH_SPI_WAKE_ENABLE_CONST  (0u != SPI_0_OLED_FLASH_SPI_WAKE_ENABLE)
N        #define SPI_0_OLED_FLASH_UART_WAKE_ENABLE_CONST (0u)
N
N    #else
S
S        /* UART Direction */
S        #define SPI_0_OLED_FLASH_UART_RX_DIRECTION (0u != (SPI_0_OLED_FLASH_UART_DIRECTION & SPI_0_OLED_FLASH_UART_RX))
S        #define SPI_0_OLED_FLASH_UART_TX_DIRECTION (0u != (SPI_0_OLED_FLASH_UART_DIRECTION & SPI_0_OLED_FLASH_UART_TX))
S
S        /* Get FIFO size */
S        #define SPI_0_OLED_FLASH_SPI_UART_FIFO_SIZE SPI_0_OLED_FLASH_GET_FIFO_SIZE(SPI_0_OLED_FLASH_UART_BYTE_MODE_ENABLE)
S
S        /* UART internal RX and TX buffers */
S        #define SPI_0_OLED_FLASH_INTERNAL_UART_RX_SW_BUFFER  (SPI_0_OLED_FLASH_UART_RX_BUFFER_SIZE > \
S                                                                SPI_0_OLED_FLASH_SPI_UART_FIFO_SIZE)
X        #define SPI_0_OLED_FLASH_INTERNAL_UART_RX_SW_BUFFER  (SPI_0_OLED_FLASH_UART_RX_BUFFER_SIZE >                                                                 SPI_0_OLED_FLASH_SPI_UART_FIFO_SIZE)
S        #define SPI_0_OLED_FLASH_INTERNAL_UART_TX_SW_BUFFER  (SPI_0_OLED_FLASH_UART_TX_BUFFER_SIZE > \
S                                                                    SPI_0_OLED_FLASH_SPI_UART_FIFO_SIZE)
X        #define SPI_0_OLED_FLASH_INTERNAL_UART_TX_SW_BUFFER  (SPI_0_OLED_FLASH_UART_TX_BUFFER_SIZE >                                                                     SPI_0_OLED_FLASH_SPI_UART_FIFO_SIZE)
S
S        /* Internal UART RX and TX buffer */
S        #define SPI_0_OLED_FLASH_INTERNAL_RX_SW_BUFFER  (SPI_0_OLED_FLASH_INTERNAL_UART_RX_SW_BUFFER)
S        #define SPI_0_OLED_FLASH_INTERNAL_TX_SW_BUFFER  (SPI_0_OLED_FLASH_INTERNAL_UART_TX_SW_BUFFER)
S
S        /* Internal UART RX and TX buffer size */
S        #define SPI_0_OLED_FLASH_INTERNAL_RX_BUFFER_SIZE    (SPI_0_OLED_FLASH_UART_RX_BUFFER_SIZE + 1u)
S        #define SPI_0_OLED_FLASH_RX_BUFFER_SIZE             (SPI_0_OLED_FLASH_UART_RX_BUFFER_SIZE)
S        #define SPI_0_OLED_FLASH_TX_BUFFER_SIZE             (SPI_0_OLED_FLASH_UART_TX_BUFFER_SIZE)
S
S        /* Get wakeup enable option */
S        #define SPI_0_OLED_FLASH_SPI_WAKE_ENABLE_CONST  (0u)
S        #define SPI_0_OLED_FLASH_UART_WAKE_ENABLE_CONST (0u != SPI_0_OLED_FLASH_UART_WAKE_ENABLE)
S
N    #endif /* (SPI_0_OLED_FLASH_SCB_MODE_SPI_CONST_CFG) */
N
N    /* Mode */
N    #define SPI_0_OLED_FLASH_SPI_SLAVE_CONST    (SPI_0_OLED_FLASH_SPI_MODE == SPI_0_OLED_FLASH_SPI_SLAVE)
N    #define SPI_0_OLED_FLASH_SPI_MASTER_CONST   (SPI_0_OLED_FLASH_SPI_MODE == SPI_0_OLED_FLASH_SPI_MASTER)
N
N    /* Direction */
N    #define SPI_0_OLED_FLASH_RX_DIRECTION ((SPI_0_OLED_FLASH_SCB_MODE_SPI_CONST_CFG) ? \
N                                            (SPI_0_OLED_FLASH_SPI_RX_DIRECTION) : (SPI_0_OLED_FLASH_UART_RX_DIRECTION))
X    #define SPI_0_OLED_FLASH_RX_DIRECTION ((SPI_0_OLED_FLASH_SCB_MODE_SPI_CONST_CFG) ?                                             (SPI_0_OLED_FLASH_SPI_RX_DIRECTION) : (SPI_0_OLED_FLASH_UART_RX_DIRECTION))
N
N    #define SPI_0_OLED_FLASH_TX_DIRECTION ((SPI_0_OLED_FLASH_SCB_MODE_SPI_CONST_CFG) ? \
N                                            (SPI_0_OLED_FLASH_SPI_TX_DIRECTION) : (SPI_0_OLED_FLASH_UART_TX_DIRECTION))
X    #define SPI_0_OLED_FLASH_TX_DIRECTION ((SPI_0_OLED_FLASH_SCB_MODE_SPI_CONST_CFG) ?                                             (SPI_0_OLED_FLASH_SPI_TX_DIRECTION) : (SPI_0_OLED_FLASH_UART_TX_DIRECTION))
N
N    /* Internal RX and TX buffer: for SPI or UART. Used in conditional compilation check */
N    #define SPI_0_OLED_FLASH_CHECK_RX_SW_BUFFER (SPI_0_OLED_FLASH_INTERNAL_RX_SW_BUFFER)
N    #define SPI_0_OLED_FLASH_CHECK_TX_SW_BUFFER (SPI_0_OLED_FLASH_INTERNAL_TX_SW_BUFFER)
N
N    /* Provide global variables to support RX and TX buffers */
N    #define SPI_0_OLED_FLASH_INTERNAL_RX_SW_BUFFER_CONST    (SPI_0_OLED_FLASH_INTERNAL_RX_SW_BUFFER)
N    #define SPI_0_OLED_FLASH_INTERNAL_TX_SW_BUFFER_CONST    (SPI_0_OLED_FLASH_INTERNAL_TX_SW_BUFFER)
N
N    /* Wake up enable */
N    #define SPI_0_OLED_FLASH_CHECK_SPI_WAKE_ENABLE  (SPI_0_OLED_FLASH_SPI_WAKE_ENABLE_CONST)
N    #define SPI_0_OLED_FLASH_CHECK_UART_WAKE_ENABLE (SPI_0_OLED_FLASH_UART_WAKE_ENABLE_CONST)
N
N    /* UART flow control: not applicable for CY_SCBIP_V0 || CY_SCBIP_V1 */
N    #define SPI_0_OLED_FLASH_CHECK_UART_RTS_CONTROL_FLOW    (SPI_0_OLED_FLASH_SCB_MODE_UART_CONST_CFG && \
N                                                             SPI_0_OLED_FLASH_UART_RTS_ENABLE)
X    #define SPI_0_OLED_FLASH_CHECK_UART_RTS_CONTROL_FLOW    (SPI_0_OLED_FLASH_SCB_MODE_UART_CONST_CFG &&                                                              SPI_0_OLED_FLASH_UART_RTS_ENABLE)
N
N#endif /* End (SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG) */
N
N
N/***************************************
N*       Type Definitions
N***************************************/
N
N/**
N* \addtogroup group_structures
N* @{
N*/
N
N/* SPI_0_OLED_FLASH_SPI_INIT_STRUCT */
Ntypedef struct
N{
N    /** Mode of operation for SPI. The following defines are available choices:
N     *  - SPI_0_OLED_FLASH_SPI_SLAVE
N     *  - SPI_0_OLED_FLASH_SPI_MASTE
N    */
N    uint32 mode;
N
N    /** Submode of operation for SPI. The following defines are available
N     *  choices:
N     *  - SPI_0_OLED_FLASH_SPI_MODE_MOTOROLA
N     *  - SPI_0_OLED_FLASH_SPI_MODE_TI_COINCIDES
N     *  - SPI_0_OLED_FLASH_SPI_MODE_TI_PRECEDES
N     *  - SPI_0_OLED_FLASH_SPI_MODE_NATIONAL
N    */
N    uint32 submode;
N
N    /** Determines the sclk relationship for Motorola submode. Ignored
N     *  for other submodes. The following defines are available choices:
N     *  - SPI_0_OLED_FLASH_SPI_SCLK_CPHA0_CPOL0
N     *  - SPI_0_OLED_FLASH_SPI_SCLK_CPHA0_CPOL1
N     *  - SPI_0_OLED_FLASH_SPI_SCLK_CPHA1_CPOL0
N     *  - SPI_0_OLED_FLASH_SPI_SCLK_CPHA1_CPOL1
N    */
N    uint32 sclkMode;
N
N    /** Oversampling factor for the SPI clock. Ignored for Slave mode operation.
N    */
N    uint32 oversample;
N
N    /** Applies median filter on the input lines: 0 – not applied, 1 – applied.
N    */
N    uint32 enableMedianFilter;
N
N    /** Applies late sampling of MISO line: 0 – not applied, 1 – applied.
N     *  Ignored for slave mode.
N    */
N    uint32 enableLateSampling;
N
N    /** Enables wakeup from low power mode: 0 – disable, 1 – enable.
N     *  Ignored for master mode.
N    */
N    uint32 enableWake;
N
N    /** Number of data bits for RX direction.
N     *  Different dataBitsRx and dataBitsTx are only allowed for National
N     *  submode.
N    */
N    uint32 rxDataBits;
N
N    /** Number of data bits for TX direction.
N     *  Different dataBitsRx and dataBitsTx are only allowed for National
N     *  submode.
N    */
N    uint32 txDataBits;
N
N    /** Determines the bit ordering. The following defines are available
N     *  choices:
N     *  - SPI_0_OLED_FLASH_BITS_ORDER_LSB_FIRST
N     *  - SPI_0_OLED_FLASH_BITS_ORDER_MSB_FIRST
N    */
N    uint32 bitOrder;
N
N    /** Determines whether transfers are back to back or have SS disabled
N     *  between words. Ignored for slave mode. The following defines are
N     *  available choices:
N     *  - SPI_0_OLED_FLASH_SPI_TRANSFER_CONTINUOUS
N     *  - SPI_0_OLED_FLASH_SPI_TRANSFER_SEPARATED
N    */
N    uint32 transferSeperation;
N
N    /** Size of the RX buffer in bytes/words (depends on rxDataBits parameter).
N     *  A value equal to the RX FIFO depth implies the usage of buffering in
N     *  hardware. A value greater than the RX FIFO depth results in a software
N     *  buffer.
N     *  The SPI_0_OLED_FLASH_INTR _RX_NOT_EMPTY interrupt has to be enabled to
N     *  transfer data into the software buffer.
N     *  - The RX and TX FIFO depth is equal to 8 bytes/words for PSoC 4100 /
N     *    PSoC 4200 devices.
N     *  - The RX and TX FIFO depth is equal to 8 bytes/words or 16
N     *    bytes (Byte mode is enabled) for PSoC 4100 BLE / PSoC 4200 BLE /
N     *    PSoC 4100M / PSoC 4200M / PSoC 4200L / PSoC 4000S / PSoC 4100S /
N     *    PSoC Analog Coprocessor devices.
N    */
N    uint32 rxBufferSize;
N
N    /** Buffer space provided for a RX software buffer:
N     *  - A NULL pointer must be provided to use hardware buffering.
N     *  - A pointer to an allocated buffer must be provided to use software
N     *    buffering. The buffer size must equal (rxBufferSize + 1) in bytes if
N     *    dataBitsRx is less or equal to 8, otherwise (2 * (rxBufferSize + 1))
N     *    in bytes. The software RX buffer always keeps one element empty.
N     *    For correct operation the allocated RX buffer has to be one element
N     *    greater than maximum packet size expected to be received.
N    */
N    uint8* rxBuffer;
N
N    /** Size of the TX buffer in bytes/words(depends on txDataBits parameter).
N     *  A value equal to the TX FIFO depth implies the usage of buffering in
N     *  hardware. A value greater than the TX FIFO depth results in a software
N     *  buffer.
N     *  - The RX and TX FIFO depth is equal to 8 bytes/words for PSoC 4100 /
N     *    PSoC 4200 devices.
N     *  - The RX and TX FIFO depth is equal to 8 bytes/words or 16
N     *    bytes (Byte mode is enabled) for PSoC 4100 BLE / PSoC 4200 BLE /
N     *    PSoC 4100M / PSoC 4200M / PSoC 4200L / PSoC 4000S / PSoC 4100S /
N     *    PSoC Analog Coprocessor devices.
N    */
N    uint32 txBufferSize;
N
N    /** Buffer space provided for a TX software buffer:
N     *  - A NULL pointer must be provided to use hardware buffering.
N     *  - A pointer to an allocated buffer must be provided to use software
N     *    buffering. The buffer size must equal txBufferSize if dataBitsTx is
N     *    less or equal to 8, otherwise (2* txBufferSize).
N    */
N    uint8* txBuffer;
N
N    /** Enables component interrupt: 0 – disable, 1 – enable.
N     *  The interrupt has to be enabled if software buffer is used.
N    */
N    uint32 enableInterrupt;
N
N    /** Mask of enabled interrupt sources for the RX direction. This mask is
N     *  written regardless of the setting of the enable Interrupt field.
N     *  Multiple sources are enabled by providing a value that is the OR of
N     *  all of the following sources to enable:
N     *  - SPI_0_OLED_FLASH_INTR_RX_FIFO_LEVEL
N     *  - SPI_0_OLED_FLASH_INTR_RX_NOT_EMPTY
N     *  - SPI_0_OLED_FLASH_INTR_RX_FULL
N     *  - SPI_0_OLED_FLASH_INTR_RX_OVERFLOW
N     *  - SPI_0_OLED_FLASH_INTR_RX_UNDERFLOW
N     *  - SPI_0_OLED_FLASH_INTR_SLAVE_SPI_BUS_ERROR
N    */
N    uint32 rxInterruptMask;
N
N    /** FIFO level for an RX FIFO level interrupt. This value is written
N     *  regardless of whether the RX FIFO level interrupt source is enabled.
N    */
N    uint32 rxTriggerLevel;
N
N    /** Mask of enabled interrupt sources for the TX direction. This mask is
N     *  written regardless of the setting of the enable Interrupt field.
N     *  Multiple sources are enabled by providing a value that is the OR of
N     *  all of the following sources to enable:
N     *  - SPI_0_OLED_FLASH_INTR_TX_FIFO_LEVEL
N     *  - SPI_0_OLED_FLASH_INTR_TX_NOT_FULL
N     *  - SPI_0_OLED_FLASH_INTR_TX_EMPTY
N     *  - SPI_0_OLED_FLASH_INTR_TX_OVERFLOW
N     *  - SPI_0_OLED_FLASH_INTR_TX_UNDERFLOW
N     *  - SPI_0_OLED_FLASH_INTR_MASTER_SPI_DONE
N    */
N    uint32 txInterruptMask;
N
N    /** FIFO level for a TX FIFO level interrupt. This value is written
N     * regardless of whether the TX FIFO level interrupt source is enabled.
N    */
N    uint32 txTriggerLevel;
N
N    /** When enabled the TX and RX FIFO depth is doubled and equal to
N     *  16 bytes: 0 – disable, 1 – enable. This implies that number of
N     *  TX and RX data bits must be less than or equal to 8.
N     *
N     *  Ignored for all devices other than PSoC 4100 BLE / PSoC 4200 BLE /
N     *  PSoC 4100M / PSoC 4200M / PSoC 4200L / PSoC 4000S / PSoC 4100S /
N     *  PSoC Analog Coprocessor.
N    */
N    uint8 enableByteMode;
N
N    /** Enables continuous SCLK generation by the SPI master: 0 – disable,
N     *  1 – enable.
N     *
N     *  Ignored for all devices other than PSoC 4100 BLE / PSoC 4200 BLE /
N     *  PSoC 4100M / PSoC 4200M / PSoC 4200L / PSoC 4000S / PSoC 4100S /
N     *  PSoC Analog Coprocessor.
N    */
N    uint8 enableFreeRunSclk;
N
N    /** Active polarity of slave select lines 0-3. This is bit mask where bit
N     *  SPI_0_OLED_FLASH_SPI_SLAVE_SELECT0 corresponds to slave select 0
N     *  polarity, bit SPI_0_OLED_FLASH_SPI_SLAVE_SELECT1 – slave select 1
N     *  polarity and so on. Polarity constants are:
N     *  - SPI_0_OLED_FLASH_SPI_SS_ACTIVE_LOW
N     *  - SPI_0_OLED_FLASH_SPI_SS_ACTIVE_HIGH
N     *
N     *  Ignored for all devices other than PSoC 4100 BLE / PSoC 4200 BLE /
N     *  PSoC 4100M / PSoC 4200M / PSoC 4200L / PSoC 4000S / PSoC 4100S /
N     *  PSoC Analog Coprocessor.
N    */
N    uint8 polaritySs;
N} SPI_0_OLED_FLASH_SPI_INIT_STRUCT;
N
N
N/* SPI_0_OLED_FLASH_UART_INIT_STRUCT */
Ntypedef struct
N{
N    /** Mode of operation for the UART. The following defines are available
N     *  choices:
N     *  - SPI_0_OLED_FLASH_UART_MODE_STD
N     *  - SPI_0_OLED_FLASH_UART_MODE_SMARTCARD
N     *  - SPI_0_OLED_FLASH_UART_MODE_IRDA
N    */
N    uint32 mode;
N
N    /** Direction of operation for the UART. The following defines are available
N     *  choices:
N     *  - SPI_0_OLED_FLASH_UART_TX_RX
N     *  - SPI_0_OLED_FLASH_UART_RX
N     *  - SPI_0_OLED_FLASH_UART_TX
N    */
N    uint32 direction;
N
N    /** Number of data bits.
N    */
N    uint32 dataBits;
N
N    /** Determines the parity. The following defines are available choices:
N     *  - SPI_0_OLED_FLASH_UART_PARITY_EVEN
N     *  - SPI_0_OLED_FLASH_UART_PARITY_ODD
N     *  - SPI_0_OLED_FLASH_UART_PARITY_NONE
N    */
N    uint32 parity;
N
N    /** Determines the number of stop bits. The following defines are available
N     *  choices:
N     *  - SPI_0_OLED_FLASH_UART_STOP_BITS_1
N     *  - SPI_0_OLED_FLASH_UART_STOP_BITS_1_5
N     *  - SPI_0_OLED_FLASH_UART_STOP_BITS_2
N    */
N    uint32 stopBits;
N
N    /** Oversampling factor for the UART.
N     *
N     *  Note The oversampling factor values are changed when enableIrdaLowPower
N     *  is enabled:
N     *  - SPI_0_OLED_FLASH_UART_IRDA_LP_OVS16
N     *  - SPI_0_OLED_FLASH_UART_IRDA_LP_OVS32
N     *  - SPI_0_OLED_FLASH_UART_IRDA_LP_OVS48
N     *  - SPI_0_OLED_FLASH_UART_IRDA_LP_OVS96
N     *  - SPI_0_OLED_FLASH_UART_IRDA_LP_OVS192
N     *  - SPI_0_OLED_FLASH_UART_IRDA_LP_OVS768
N     *  - SPI_0_OLED_FLASH_UART_IRDA_LP_OVS1536
N    */
N    uint32 oversample;
N
N    /** Enables IrDA low power RX mode operation: 0 – disable, 1 – enable.
N     *  The TX functionality does not work when enabled.
N    */
N    uint32 enableIrdaLowPower;
N
N    /** Applies median filter on the input lines:  0 – not applied, 1 – applied.
N    */
N    uint32 enableMedianFilter;
N
N    /** Enables retry when NACK response was received: 0 – disable, 1 – enable.
N     *  Only current content of TX FIFO is re-sent.
N     *  Ignored for modes other than SmartCard.
N    */
N    uint32 enableRetryNack;
N
N    /** Inverts polarity of RX line: 0 – non-inverting, 1 – inverting.
N     *  Ignored for modes other than IrDA.
N    */
N    uint32 enableInvertedRx;
N
N    /** Drop data from RX FIFO if parity error is detected: 0 – disable,
N     *  1 – enable.
N    */
N    uint32 dropOnParityErr;
N
N    /** Drop data from RX FIFO if a frame error is detected: 0 – disable,
N     *  1 – enable.
N    */
N    uint32 dropOnFrameErr;
N
N    /** Enables wakeup from low power mode: 0 – disable, 1 – enable.
N     *  Ignored for modes other than standard UART. The RX functionality
N     *  has to be enabled.
N    */
N    uint32 enableWake;
N
N    /** Size of the RX buffer in bytes/words (depends on rxDataBits parameter).
N     *  A value equal to the RX FIFO depth implies the usage of buffering in
N     *  hardware. A value greater than the RX FIFO depth results in a software
N     *  buffer.
N     *  The SPI_0_OLED_FLASH_INTR _RX_NOT_EMPTY interrupt has to be enabled to
N     *  transfer data into the software buffer.
N     *  - The RX and TX FIFO depth is equal to 8 bytes/words for PSoC 4100 /
N     *    PSoC 4200 devices.
N     *  - The RX and TX FIFO depth is equal to 8 bytes/words or 16
N     *    bytes (Byte mode is enabled) for PSoC 4100 BLE / PSoC 4200 BLE /
N     *    PSoC 4100M / PSoC 4200M / PSoC 4200L / PSoC 4000S / PSoC 4100S /
N     *    PSoC Analog Coprocessor devices.
N    */
N    uint32 rxBufferSize;
N
N    /** Buffer space provided for a RX software buffer:
N     *  - A NULL pointer must be provided to use hardware buffering.
N     *  - A pointer to an allocated buffer must be provided to use software
N     *    buffering. The buffer size must equal (rxBufferSize + 1) in bytes if
N     *    dataBitsRx is less or equal to 8, otherwise (2 * (rxBufferSize + 1))
N     *    in bytes. The software RX buffer always keeps one element empty.
N     *    For correct operation the allocated RX buffer has to be one element
N     *    greater than maximum packet size expected to be received.
N    */
N    uint8* rxBuffer;
N
N    /** Size of the TX buffer in bytes/words(depends on txDataBits parameter).
N     *  A value equal to the TX FIFO depth implies the usage of buffering in
N     *  hardware. A value greater than the TX FIFO depth results in a software
N     *  buffer.
N     *  - The RX and TX FIFO depth is equal to 8 bytes/words for PSoC 4100 /
N     *    PSoC 4200 devices.
N     *  - The RX and TX FIFO depth is equal to 8 bytes/words or 16
N     *    bytes (Byte mode is enabled) for PSoC 4100 BLE / PSoC 4200 BLE /
N     *    PSoC 4100M / PSoC 4200M / PSoC 4200L / PSoC 4000S / PSoC 4100S /
N     *    PSoC Analog Coprocessor devices.
N    */
N    uint32 txBufferSize;
N
N    /** Buffer space provided for a TX software buffer:
N     *  - A NULL pointer must be provided to use hardware buffering.
N     *  - A pointer to an allocated buffer must be provided to use software
N     *    buffering. The buffer size must equal txBufferSize if dataBitsTx is
N     *    less or equal to 8, otherwise (2* txBufferSize).
N    */
N    uint8* txBuffer;
N
N    /** Enables multiprocessor mode: 0 – disable, 1 – enable.
N    */
N    uint32 enableMultiproc;
N
N    /** Enables matched address to be accepted: 0 – disable, 1 – enable.
N    */
N    uint32 multiprocAcceptAddr;
N
N    /** 8 bit address to match in Multiprocessor mode. Ignored for other modes.
N    */
N    uint32 multiprocAddr;
N
N    /** 8 bit mask of address bits that are compared for a Multiprocessor
N     *  address match. Ignored for other modes.
N     *  - Bit value 0 – excludes bit from address comparison.
N     *  - Bit value 1 – the bit needs to match with the corresponding bit
N     *   of the device address.
N    */
N    uint32 multiprocAddrMask;
N
N    /** Enables component interrupt: 0 – disable, 1 – enable.
N     *  The interrupt has to be enabled if software buffer is used.
N    */
N    uint32 enableInterrupt;
N
N    /** Mask of interrupt sources to enable in the RX direction. This mask is
N     *  written regardless of the setting of the enableInterrupt field.
N     *  Multiple sources are enabled by providing a value that is the OR of
N     *  all of the following sources to enable:
N     *  - SPI_0_OLED_FLASH_INTR_RX_FIFO_LEVEL
N     *  - SPI_0_OLED_FLASH_INTR_RX_NOT_EMPTY
N     *  - SPI_0_OLED_FLASH_INTR_RX_FULL
N     *  - SPI_0_OLED_FLASH_INTR_RX_OVERFLOW
N     *  - SPI_0_OLED_FLASH_INTR_RX_UNDERFLOW
N     *  - SPI_0_OLED_FLASH_INTR_RX_FRAME_ERROR
N     *  - SPI_0_OLED_FLASH_INTR_RX_PARITY_ERROR
N    */
N    uint32 rxInterruptMask;
N
N    /** FIFO level for an RX FIFO level interrupt. This value is written
N     *  regardless of whether the RX FIFO level interrupt source is enabled.
N    */
N    uint32 rxTriggerLevel;
N
N    /** Mask of interrupt sources to enable in the TX direction. This mask is
N     *  written regardless of the setting of the enableInterrupt field.
N     *  Multiple sources are enabled by providing a value that is the OR of
N     *  all of the following sources to enable:
N     *  - SPI_0_OLED_FLASH_INTR_TX_FIFO_LEVEL
N     *  - SPI_0_OLED_FLASH_INTR_TX_NOT_FULL
N     *  - SPI_0_OLED_FLASH_INTR_TX_EMPTY
N     *  - SPI_0_OLED_FLASH_INTR_TX_OVERFLOW
N     *  - SPI_0_OLED_FLASH_INTR_TX_UNDERFLOW
N     *  - SPI_0_OLED_FLASH_INTR_TX_UART_DONE
N     *  - SPI_0_OLED_FLASH_INTR_TX_UART_NACK
N     *  - SPI_0_OLED_FLASH_INTR_TX_UART_ARB_LOST
N    */
N    uint32 txInterruptMask;
N
N    /** FIFO level for a TX FIFO level interrupt. This value is written
N     *  regardless of whether the TX FIFO level interrupt source is enabled.
N    */
N    uint32 txTriggerLevel;
N
N    /** When enabled the TX and RX FIFO depth is doubled and equal to
N     *  16 bytes: 0 – disable, 1 – enable. This implies that number of
N     *  Data bits must be less than or equal to 8.
N     *
N     *  Ignored for all devices other than PSoC 4100 BLE / PSoC 4200 BLE /
N     *  PSoC 4100M / PSoC 4200M / PSoC 4200L / PSoC 4000S / PSoC 4100S /
N     *  PSoC Analog Coprocessor.
N    */
N    uint8 enableByteMode;
N
N    /** Enables usage of CTS input signal by the UART transmitter : 0 – disable,
N     *  1 – enable.
N     *
N     *  Ignored for all devices other than PSoC 4100 BLE / PSoC 4200 BLE /
N     *  PSoC 4100M / PSoC 4200M / PSoC 4200L / PSoC 4000S / PSoC 4100S /
N     *  PSoC Analog Coprocessor.
N    */
N    uint8 enableCts;
N
N    /** Sets active polarity of CTS input signal:
N     *  - SPI_0_OLED_FLASH_UART_CTS_ACTIVE_LOW
N     *  - SPI_0_OLED_FLASH_UART_CTS_ACTIVE_HIGH
N     *
N     *  Ignored for all devices other than PSoC 4100 BLE / PSoC 4200 BLE /
N     *  PSoC 4100M / PSoC 4200M / PSoC 4200L / PSoC 4000S / PSoC 4100S /
N     *  PSoC Analog Coprocessor.
N    */
N    uint8 ctsPolarity;
N
N    /** RX FIFO level for RTS signal activation. While the RX FIFO has fewer
N     *  entries than the RTS FIFO level value the RTS signal remains active,
N     *  otherwise the RTS signal becomes inactive. By setting this field to 0,
N     *  RTS signal activation is disabled.
N     *
N     *  Ignored for all devices other than PSoC 4100 BLE / PSoC 4200 BLE /
N     *  PSoC 4100M / PSoC 4200M / PSoC 4200L / PSoC 4000S / PSoC 4100S /
N     *  PSoC Analog Coprocessor.
N    */
N    uint8 rtsRxFifoLevel;
N
N    /** Sets active polarity of RTS output signal:
N     *  - SPI_0_OLED_FLASH_UART_RTS_ ACTIVE_LOW
N     *  - SPI_0_OLED_FLASH_UART_RTS_ACTIVE_HIGH
N     *
N     *  Ignored for all devices other than PSoC 4100 BLE / PSoC 4200 BLE /
N     *  PSoC 4100M / PSoC 4200M / PSoC 4200L / PSoC 4000S / PSoC 4100S /
N     *  PSoC Analog Coprocessor.
N    */
N    uint8 rtsPolarity;
N
N    /** Configures the width of a break signal in that triggers the break
N     *  detection interrupt source. A Break is a low level on the RX line.
N     *  Valid range is 1-16 UART bits times.
N    */
N    uint8 breakWidth;
N} SPI_0_OLED_FLASH_UART_INIT_STRUCT;
N
N/** @} structures */
N
N
N/***************************************
N*        Function Prototypes
N***************************************/
N
N/**
N* \addtogroup group_spi
N* @{
N*/
N/* SPI specific functions */
N#if(SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG)
X#if(((0xFFu) == (2u)))
S    void SPI_0_OLED_FLASH_SpiInit(const SPI_0_OLED_FLASH_SPI_INIT_STRUCT *config);
N#endif /* (SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG) */
N
N
N#if(SPI_0_OLED_FLASH_SCB_MODE_SPI_INC)
X#if((0u !=((0x02u) & (2u))))
N    /*******************************************************************************
N    * Function Name: SPI_0_OLED_FLASH_SpiIsBusBusy
N    ****************************************************************************//**
N    *
N    *  Returns the current status on the bus. The bus status is determined using
N    *  the slave select signal.
N    *  - Motorola and National Semiconductor sub-modes: The bus is busy after
N    *    the slave select line is activated and lasts until the slave select line
N    *    is deactivated.
N    *  - Texas Instrument sub-modes: The bus is busy at the moment of the initial
N    *    pulse on the slave select line and lasts until the transfer is complete.
N    *    If SPI Master is configured to use "Separated transfers"
N    *    (see Continuous versus Separated Transfer Separation), the bus is busy
N    *    during each element transfer and is free between each element transfer.
N    *    The Master does not activate SS line immediately after data has been
N    *    written into the TX FIFO.
N    *
N    *  \return slaveSelect: Current status on the bus.
N    *   If the returned value is nonzero, the bus is busy.
N    *   If zero is returned, the bus is free. The bus status is determined using
N    *   the slave select signal.
N    *
N    *******************************************************************************/
N    #define SPI_0_OLED_FLASH_SpiIsBusBusy() ((uint32) (0u != (SPI_0_OLED_FLASH_SPI_STATUS_REG & \
N                                                              SPI_0_OLED_FLASH_SPI_STATUS_BUS_BUSY)))
X    #define SPI_0_OLED_FLASH_SpiIsBusBusy() ((uint32) (0u != (SPI_0_OLED_FLASH_SPI_STATUS_REG &                                                               SPI_0_OLED_FLASH_SPI_STATUS_BUS_BUSY)))
N
N    #if (SPI_0_OLED_FLASH_SPI_MASTER_CONST)
X    #if (((1u) == (1u)))
N        void SPI_0_OLED_FLASH_SpiSetActiveSlaveSelect(uint32 slaveSelect);
N    #endif /*(SPI_0_OLED_FLASH_SPI_MASTER_CONST) */
N
N    #if !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
X    #if !((2 == 0u) || (2 == 1u))
N        void SPI_0_OLED_FLASH_SpiSetSlaveSelectPolarity(uint32 slaveSelect, uint32 polarity);
N    #endif /* !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N#endif /* (SPI_0_OLED_FLASH_SCB_MODE_SPI_INC) */
N/** @} spi */
N
N/**
N* \addtogroup group_uart
N* @{
N*/
N/* UART specific functions */
N#if(SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG)
X#if(((0xFFu) == (2u)))
S    void SPI_0_OLED_FLASH_UartInit(const SPI_0_OLED_FLASH_UART_INIT_STRUCT *config);
N#endif /* (SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG) */
N
N#if(SPI_0_OLED_FLASH_SCB_MODE_UART_INC)
X#if((0u !=((0x04u) & (2u))))
S    void SPI_0_OLED_FLASH_UartSetRxAddress(uint32 address);
S    void SPI_0_OLED_FLASH_UartSetRxAddressMask(uint32 addressMask);
S
S
S    /* UART RX direction APIs */
S    #if(SPI_0_OLED_FLASH_UART_RX_DIRECTION)
S        uint32 SPI_0_OLED_FLASH_UartGetChar(void);
S        uint32 SPI_0_OLED_FLASH_UartGetByte(void);
S
S        #if !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
S            /* UART APIs for Flow Control */
S            void SPI_0_OLED_FLASH_UartSetRtsPolarity(uint32 polarity);
S            void SPI_0_OLED_FLASH_UartSetRtsFifoLevel(uint32 level);
S        #endif /* !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
S    #endif /* (SPI_0_OLED_FLASH_UART_RX_DIRECTION) */
S
S    /* UART TX direction APIs */
S    #if(SPI_0_OLED_FLASH_UART_TX_DIRECTION)
S        /*******************************************************************************
S        * Function Name: SPI_0_OLED_FLASH_UartPutChar
S        ****************************************************************************//**
S        *
S        *  Places a byte of data in the transmit buffer to be sent at the next available
S        *  bus time. This function is blocking and waits until there is a space
S        *  available to put requested data in the transmit buffer.
S        *  For UART Multi Processor mode this function can send 9-bits data as well.
S        *  Use SPI_0_OLED_FLASH_UART_MP_MARK to add a mark to create an address byte.
S        *
S        *  \param txDataByte: the data to be transmitted.
S        *
S        *******************************************************************************/
S        #define SPI_0_OLED_FLASH_UartPutChar(ch)    SPI_0_OLED_FLASH_SpiUartWriteTxData((uint32)(ch))
S
S        void SPI_0_OLED_FLASH_UartPutString(const char8 string[]);
S        void SPI_0_OLED_FLASH_UartPutCRLF(uint32 txDataByte);
S        void SPI_0_OLED_FLASH_UartSendBreakBlocking(uint32 breakWidth);
S
S        #if !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
S            /* UART APIs for Flow Control */
S            void SPI_0_OLED_FLASH_UartEnableCts(void);
S            void SPI_0_OLED_FLASH_UartDisableCts(void);
S            void SPI_0_OLED_FLASH_UartSetCtsPolarity(uint32 polarity);
S        #endif /* !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
S    #endif /* (SPI_0_OLED_FLASH_UART_TX_DIRECTION) */
N#endif /* (SPI_0_OLED_FLASH_SCB_MODE_UART_INC) */
N/** @} uart */
N
N/**
N* \addtogroup group_spi_uart
N* @{
N*/
N#if(SPI_0_OLED_FLASH_RX_DIRECTION)
X#if(((((0x02u) == (2u))) ? ((1u)) : (SPI_0_OLED_FLASH_UART_RX_DIRECTION)))
N    uint32 SPI_0_OLED_FLASH_SpiUartReadRxData(void);
N    uint32 SPI_0_OLED_FLASH_SpiUartGetRxBufferSize(void);
N    void   SPI_0_OLED_FLASH_SpiUartClearRxBuffer(void);
N#endif /* (SPI_0_OLED_FLASH_RX_DIRECTION) */
N
N/* Common APIs TX direction */
N#if(SPI_0_OLED_FLASH_TX_DIRECTION)
X#if(((((0x02u) == (2u))) ? ((1u)) : (SPI_0_OLED_FLASH_UART_TX_DIRECTION)))
N    void   SPI_0_OLED_FLASH_SpiUartWriteTxData(uint32 txData);
N    void   SPI_0_OLED_FLASH_SpiUartPutArray(const uint8 wrBuf[], uint32 count);
N    uint32 SPI_0_OLED_FLASH_SpiUartGetTxBufferSize(void);
N    void   SPI_0_OLED_FLASH_SpiUartClearTxBuffer(void);
N#endif /* (SPI_0_OLED_FLASH_TX_DIRECTION) */
N/** @} spi_uart */
N
NCY_ISR_PROTO(SPI_0_OLED_FLASH_SPI_UART_ISR);
Xvoid SPI_0_OLED_FLASH_SPI_UART_ISR (void);
N
N#if(SPI_0_OLED_FLASH_UART_RX_WAKEUP_IRQ)
X#if((0u == (1u)))
S    CY_ISR_PROTO(SPI_0_OLED_FLASH_UART_WAKEUP_ISR);
N#endif /* (SPI_0_OLED_FLASH_UART_RX_WAKEUP_IRQ) */
N
N
N/***************************************
N*     Buffer Access Macro Definitions
N***************************************/
N
N#if(SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG)
X#if(((0xFFu) == (2u)))
S    /* RX direction */
S    void   SPI_0_OLED_FLASH_PutWordInRxBuffer  (uint32 idx, uint32 rxDataByte);
S    uint32 SPI_0_OLED_FLASH_GetWordFromRxBuffer(uint32 idx);
S
S    /* TX direction */
S    void   SPI_0_OLED_FLASH_PutWordInTxBuffer  (uint32 idx, uint32 txDataByte);
S    uint32 SPI_0_OLED_FLASH_GetWordFromTxBuffer(uint32 idx);
S
N#else
N    /* RX direction */
N    #if(SPI_0_OLED_FLASH_INTERNAL_RX_SW_BUFFER_CONST)
X    #if(((((16u) > ((0u != ((1u))) ? (2u * (8u)) : ((8u)))))))
S        #define SPI_0_OLED_FLASH_PutWordInRxBuffer(idx, rxDataByte) \
S                do{                                                 \
S                    SPI_0_OLED_FLASH_rxBufferInternal[(idx)] = ((uint8) (rxDataByte)); \
S                }while(0)
X        #define SPI_0_OLED_FLASH_PutWordInRxBuffer(idx, rxDataByte)                 do{                                                                     SPI_0_OLED_FLASH_rxBufferInternal[(idx)] = ((uint8) (rxDataByte));                 }while(0)
S
S        #define SPI_0_OLED_FLASH_GetWordFromRxBuffer(idx) SPI_0_OLED_FLASH_rxBufferInternal[(idx)]
S
N    #endif /* (SPI_0_OLED_FLASH_INTERNAL_RX_SW_BUFFER_CONST) */
N
N    /* TX direction */
N    #if(SPI_0_OLED_FLASH_INTERNAL_TX_SW_BUFFER_CONST)
X    #if(((((16u) > ((0u != ((1u))) ? (2u * (8u)) : ((8u)))))))
S        #define SPI_0_OLED_FLASH_PutWordInTxBuffer(idx, txDataByte) \
S                    do{                                             \
S                        SPI_0_OLED_FLASH_txBufferInternal[(idx)] = ((uint8) (txDataByte)); \
S                    }while(0)
X        #define SPI_0_OLED_FLASH_PutWordInTxBuffer(idx, txDataByte)                     do{                                                                     SPI_0_OLED_FLASH_txBufferInternal[(idx)] = ((uint8) (txDataByte));                     }while(0)
S
S        #define SPI_0_OLED_FLASH_GetWordFromTxBuffer(idx) SPI_0_OLED_FLASH_txBufferInternal[(idx)]
S
N    #endif /* (SPI_0_OLED_FLASH_INTERNAL_TX_SW_BUFFER_CONST) */
N
N#endif /* (SPI_0_OLED_FLASH_TX_SW_BUFFER_ENABLE) */
N
N
N/***************************************
N*         SPI API Constants
N***************************************/
N
N/* SPI sub mode enum */
N#define SPI_0_OLED_FLASH_SPI_MODE_MOTOROLA      (0x00u)
N#define SPI_0_OLED_FLASH_SPI_MODE_TI_COINCIDES  (0x01u)
N#define SPI_0_OLED_FLASH_SPI_MODE_TI_PRECEDES   (0x11u)
N#define SPI_0_OLED_FLASH_SPI_MODE_NATIONAL      (0x02u)
N#define SPI_0_OLED_FLASH_SPI_MODE_MASK          (0x03u)
N#define SPI_0_OLED_FLASH_SPI_MODE_TI_PRECEDES_MASK  (0x10u)
N#define SPI_0_OLED_FLASH_SPI_MODE_NS_MICROWIRE  (SPI_0_OLED_FLASH_SPI_MODE_NATIONAL)
N
N/* SPI phase and polarity mode enum */
N#define SPI_0_OLED_FLASH_SPI_SCLK_CPHA0_CPOL0   (0x00u)
N#define SPI_0_OLED_FLASH_SPI_SCLK_CPHA0_CPOL1   (0x02u)
N#define SPI_0_OLED_FLASH_SPI_SCLK_CPHA1_CPOL0   (0x01u)
N#define SPI_0_OLED_FLASH_SPI_SCLK_CPHA1_CPOL1   (0x03u)
N
N/* SPI bits order enum */
N#define SPI_0_OLED_FLASH_BITS_ORDER_LSB_FIRST   (0u)
N#define SPI_0_OLED_FLASH_BITS_ORDER_MSB_FIRST   (1u)
N
N/* SPI transfer separation enum */
N#define SPI_0_OLED_FLASH_SPI_TRANSFER_SEPARATED     (0u)
N#define SPI_0_OLED_FLASH_SPI_TRANSFER_CONTINUOUS    (1u)
N
N/* SPI slave select constants */
N#define SPI_0_OLED_FLASH_SPI_SLAVE_SELECT0    (SPI_0_OLED_FLASH_SCB__SS0_POSISTION)
N#define SPI_0_OLED_FLASH_SPI_SLAVE_SELECT1    (SPI_0_OLED_FLASH_SCB__SS1_POSISTION)
N#define SPI_0_OLED_FLASH_SPI_SLAVE_SELECT2    (SPI_0_OLED_FLASH_SCB__SS2_POSISTION)
N#define SPI_0_OLED_FLASH_SPI_SLAVE_SELECT3    (SPI_0_OLED_FLASH_SCB__SS3_POSISTION)
N
N/* SPI slave select polarity settings */
N#define SPI_0_OLED_FLASH_SPI_SS_ACTIVE_LOW  (0u)
N#define SPI_0_OLED_FLASH_SPI_SS_ACTIVE_HIGH (1u)
N
N#define SPI_0_OLED_FLASH_INTR_SPIM_TX_RESTORE   (SPI_0_OLED_FLASH_INTR_TX_OVERFLOW)
N
N#define SPI_0_OLED_FLASH_INTR_SPIS_TX_RESTORE     (SPI_0_OLED_FLASH_INTR_TX_OVERFLOW | \
N                                                 SPI_0_OLED_FLASH_INTR_TX_UNDERFLOW)
X#define SPI_0_OLED_FLASH_INTR_SPIS_TX_RESTORE     (SPI_0_OLED_FLASH_INTR_TX_OVERFLOW |                                                  SPI_0_OLED_FLASH_INTR_TX_UNDERFLOW)
N
N/***************************************
N*         UART API Constants
N***************************************/
N
N/* UART sub-modes enum */
N#define SPI_0_OLED_FLASH_UART_MODE_STD          (0u)
N#define SPI_0_OLED_FLASH_UART_MODE_SMARTCARD    (1u)
N#define SPI_0_OLED_FLASH_UART_MODE_IRDA         (2u)
N
N/* UART direction enum */
N#define SPI_0_OLED_FLASH_UART_RX    (1u)
N#define SPI_0_OLED_FLASH_UART_TX    (2u)
N#define SPI_0_OLED_FLASH_UART_TX_RX (3u)
N
N/* UART parity enum */
N#define SPI_0_OLED_FLASH_UART_PARITY_EVEN   (0u)
N#define SPI_0_OLED_FLASH_UART_PARITY_ODD    (1u)
N#define SPI_0_OLED_FLASH_UART_PARITY_NONE   (2u)
N
N/* UART stop bits enum */
N#define SPI_0_OLED_FLASH_UART_STOP_BITS_1   (2u)
N#define SPI_0_OLED_FLASH_UART_STOP_BITS_1_5 (3u)
N#define SPI_0_OLED_FLASH_UART_STOP_BITS_2   (4u)
N
N/* UART IrDA low power OVS enum */
N#define SPI_0_OLED_FLASH_UART_IRDA_LP_OVS16     (16u)
N#define SPI_0_OLED_FLASH_UART_IRDA_LP_OVS32     (32u)
N#define SPI_0_OLED_FLASH_UART_IRDA_LP_OVS48     (48u)
N#define SPI_0_OLED_FLASH_UART_IRDA_LP_OVS96     (96u)
N#define SPI_0_OLED_FLASH_UART_IRDA_LP_OVS192    (192u)
N#define SPI_0_OLED_FLASH_UART_IRDA_LP_OVS768    (768u)
N#define SPI_0_OLED_FLASH_UART_IRDA_LP_OVS1536   (1536u)
N
N/* Uart MP: mark (address) and space (data) bit definitions */
N#define SPI_0_OLED_FLASH_UART_MP_MARK       (0x100u)
N#define SPI_0_OLED_FLASH_UART_MP_SPACE      (0x000u)
N
N/* UART CTS/RTS polarity settings */
N#define SPI_0_OLED_FLASH_UART_CTS_ACTIVE_LOW    (0u)
N#define SPI_0_OLED_FLASH_UART_CTS_ACTIVE_HIGH   (1u)
N#define SPI_0_OLED_FLASH_UART_RTS_ACTIVE_LOW    (0u)
N#define SPI_0_OLED_FLASH_UART_RTS_ACTIVE_HIGH   (1u)
N
N/* Sources of RX errors */
N#define SPI_0_OLED_FLASH_INTR_RX_ERR        (SPI_0_OLED_FLASH_INTR_RX_OVERFLOW    | \
N                                             SPI_0_OLED_FLASH_INTR_RX_UNDERFLOW   | \
N                                             SPI_0_OLED_FLASH_INTR_RX_FRAME_ERROR | \
N                                             SPI_0_OLED_FLASH_INTR_RX_PARITY_ERROR)
X#define SPI_0_OLED_FLASH_INTR_RX_ERR        (SPI_0_OLED_FLASH_INTR_RX_OVERFLOW    |                                              SPI_0_OLED_FLASH_INTR_RX_UNDERFLOW   |                                              SPI_0_OLED_FLASH_INTR_RX_FRAME_ERROR |                                              SPI_0_OLED_FLASH_INTR_RX_PARITY_ERROR)
N
N/* Shifted INTR_RX_ERR defines ONLY for SPI_0_OLED_FLASH_UartGetByte() */
N#define SPI_0_OLED_FLASH_UART_RX_OVERFLOW       (SPI_0_OLED_FLASH_INTR_RX_OVERFLOW << 8u)
N#define SPI_0_OLED_FLASH_UART_RX_UNDERFLOW      (SPI_0_OLED_FLASH_INTR_RX_UNDERFLOW << 8u)
N#define SPI_0_OLED_FLASH_UART_RX_FRAME_ERROR    (SPI_0_OLED_FLASH_INTR_RX_FRAME_ERROR << 8u)
N#define SPI_0_OLED_FLASH_UART_RX_PARITY_ERROR   (SPI_0_OLED_FLASH_INTR_RX_PARITY_ERROR << 8u)
N#define SPI_0_OLED_FLASH_UART_RX_ERROR_MASK     (SPI_0_OLED_FLASH_UART_RX_OVERFLOW    | \
N                                                 SPI_0_OLED_FLASH_UART_RX_UNDERFLOW   | \
N                                                 SPI_0_OLED_FLASH_UART_RX_FRAME_ERROR | \
N                                                 SPI_0_OLED_FLASH_UART_RX_PARITY_ERROR)
X#define SPI_0_OLED_FLASH_UART_RX_ERROR_MASK     (SPI_0_OLED_FLASH_UART_RX_OVERFLOW    |                                                  SPI_0_OLED_FLASH_UART_RX_UNDERFLOW   |                                                  SPI_0_OLED_FLASH_UART_RX_FRAME_ERROR |                                                  SPI_0_OLED_FLASH_UART_RX_PARITY_ERROR)
N
N#define SPI_0_OLED_FLASH_INTR_UART_TX_RESTORE   (SPI_0_OLED_FLASH_INTR_TX_OVERFLOW  | \
N                                                 SPI_0_OLED_FLASH_INTR_TX_UART_NACK | \
N                                                 SPI_0_OLED_FLASH_INTR_TX_UART_DONE | \
N                                                 SPI_0_OLED_FLASH_INTR_TX_UART_ARB_LOST)
X#define SPI_0_OLED_FLASH_INTR_UART_TX_RESTORE   (SPI_0_OLED_FLASH_INTR_TX_OVERFLOW  |                                                  SPI_0_OLED_FLASH_INTR_TX_UART_NACK |                                                  SPI_0_OLED_FLASH_INTR_TX_UART_DONE |                                                  SPI_0_OLED_FLASH_INTR_TX_UART_ARB_LOST)
N
N
N/***************************************
N*     Vars with External Linkage
N***************************************/
N
N#if(SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG)
X#if(((0xFFu) == (2u)))
S    extern const SPI_0_OLED_FLASH_SPI_INIT_STRUCT  SPI_0_OLED_FLASH_configSpi;
S    extern const SPI_0_OLED_FLASH_UART_INIT_STRUCT SPI_0_OLED_FLASH_configUart;
N#endif /* (SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG) */
N
N#if (SPI_0_OLED_FLASH_UART_WAKE_ENABLE_CONST && SPI_0_OLED_FLASH_UART_RX_WAKEUP_IRQ)
X#if ((0u) && (0u == (1u)))
S    extern uint8 SPI_0_OLED_FLASH_skipStart;
N#endif /* (SPI_0_OLED_FLASH_UART_WAKE_ENABLE_CONST && SPI_0_OLED_FLASH_UART_RX_WAKEUP_IRQ) */
N
N
N/***************************************
N*    Specific SPI Macro Definitions
N***************************************/
N
N#define SPI_0_OLED_FLASH_GET_SPI_INTR_SLAVE_MASK(sourceMask)  ((sourceMask) & SPI_0_OLED_FLASH_INTR_SLAVE_SPI_BUS_ERROR)
N#define SPI_0_OLED_FLASH_GET_SPI_INTR_MASTER_MASK(sourceMask) ((sourceMask) & SPI_0_OLED_FLASH_INTR_MASTER_SPI_DONE)
N#define SPI_0_OLED_FLASH_GET_SPI_INTR_RX_MASK(sourceMask) \
N                                             ((sourceMask) & (uint32) ~SPI_0_OLED_FLASH_INTR_SLAVE_SPI_BUS_ERROR)
X#define SPI_0_OLED_FLASH_GET_SPI_INTR_RX_MASK(sourceMask)                                              ((sourceMask) & (uint32) ~SPI_0_OLED_FLASH_INTR_SLAVE_SPI_BUS_ERROR)
N
N#define SPI_0_OLED_FLASH_GET_SPI_INTR_TX_MASK(sourceMask) \
N                                             ((sourceMask) & (uint32) ~SPI_0_OLED_FLASH_INTR_MASTER_SPI_DONE)
X#define SPI_0_OLED_FLASH_GET_SPI_INTR_TX_MASK(sourceMask)                                              ((sourceMask) & (uint32) ~SPI_0_OLED_FLASH_INTR_MASTER_SPI_DONE)
N
N
N/***************************************
N*    Specific UART Macro Definitions
N***************************************/
N
N#define SPI_0_OLED_FLASH_UART_GET_CTRL_OVS_IRDA_LP(oversample) \
N        ((SPI_0_OLED_FLASH_UART_IRDA_LP_OVS16   == (oversample)) ? SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS16 : \
N         ((SPI_0_OLED_FLASH_UART_IRDA_LP_OVS32   == (oversample)) ? SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS32 : \
N          ((SPI_0_OLED_FLASH_UART_IRDA_LP_OVS48   == (oversample)) ? SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS48 : \
N           ((SPI_0_OLED_FLASH_UART_IRDA_LP_OVS96   == (oversample)) ? SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS96 : \
N            ((SPI_0_OLED_FLASH_UART_IRDA_LP_OVS192  == (oversample)) ? SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS192 : \
N             ((SPI_0_OLED_FLASH_UART_IRDA_LP_OVS768  == (oversample)) ? SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS768 : \
N              ((SPI_0_OLED_FLASH_UART_IRDA_LP_OVS1536 == (oversample)) ? SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS1536 : \
N                                                                          SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS16)))))))
X#define SPI_0_OLED_FLASH_UART_GET_CTRL_OVS_IRDA_LP(oversample)         ((SPI_0_OLED_FLASH_UART_IRDA_LP_OVS16   == (oversample)) ? SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS16 :          ((SPI_0_OLED_FLASH_UART_IRDA_LP_OVS32   == (oversample)) ? SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS32 :           ((SPI_0_OLED_FLASH_UART_IRDA_LP_OVS48   == (oversample)) ? SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS48 :            ((SPI_0_OLED_FLASH_UART_IRDA_LP_OVS96   == (oversample)) ? SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS96 :             ((SPI_0_OLED_FLASH_UART_IRDA_LP_OVS192  == (oversample)) ? SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS192 :              ((SPI_0_OLED_FLASH_UART_IRDA_LP_OVS768  == (oversample)) ? SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS768 :               ((SPI_0_OLED_FLASH_UART_IRDA_LP_OVS1536 == (oversample)) ? SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS1536 :                                                                           SPI_0_OLED_FLASH_CTRL_OVS_IRDA_LP_OVS16)))))))
N
N#define SPI_0_OLED_FLASH_GET_UART_RX_CTRL_ENABLED(direction) ((0u != (SPI_0_OLED_FLASH_UART_RX & (direction))) ? \
N                                                                     (SPI_0_OLED_FLASH_RX_CTRL_ENABLED) : (0u))
X#define SPI_0_OLED_FLASH_GET_UART_RX_CTRL_ENABLED(direction) ((0u != (SPI_0_OLED_FLASH_UART_RX & (direction))) ?                                                                      (SPI_0_OLED_FLASH_RX_CTRL_ENABLED) : (0u))
N
N#define SPI_0_OLED_FLASH_GET_UART_TX_CTRL_ENABLED(direction) ((0u != (SPI_0_OLED_FLASH_UART_TX & (direction))) ? \
N                                                                     (SPI_0_OLED_FLASH_TX_CTRL_ENABLED) : (0u))
X#define SPI_0_OLED_FLASH_GET_UART_TX_CTRL_ENABLED(direction) ((0u != (SPI_0_OLED_FLASH_UART_TX & (direction))) ?                                                                      (SPI_0_OLED_FLASH_TX_CTRL_ENABLED) : (0u))
N
N
N/***************************************
N*        SPI Register Settings
N***************************************/
N
N#define SPI_0_OLED_FLASH_CTRL_SPI      (SPI_0_OLED_FLASH_CTRL_MODE_SPI)
N#define SPI_0_OLED_FLASH_SPI_RX_CTRL   (SPI_0_OLED_FLASH_RX_CTRL_ENABLED)
N#define SPI_0_OLED_FLASH_SPI_TX_CTRL   (SPI_0_OLED_FLASH_TX_CTRL_ENABLED)
N
N
N/***************************************
N*       SPI Init Register Settings
N***************************************/
N
N#define SPI_0_OLED_FLASH_SPI_SS_POLARITY \
N             (((uint32) SPI_0_OLED_FLASH_SPI_SS0_POLARITY << SPI_0_OLED_FLASH_SPI_SLAVE_SELECT0) | \
N              ((uint32) SPI_0_OLED_FLASH_SPI_SS1_POLARITY << SPI_0_OLED_FLASH_SPI_SLAVE_SELECT1) | \
N              ((uint32) SPI_0_OLED_FLASH_SPI_SS2_POLARITY << SPI_0_OLED_FLASH_SPI_SLAVE_SELECT2) | \
N              ((uint32) SPI_0_OLED_FLASH_SPI_SS3_POLARITY << SPI_0_OLED_FLASH_SPI_SLAVE_SELECT3))
X#define SPI_0_OLED_FLASH_SPI_SS_POLARITY              (((uint32) SPI_0_OLED_FLASH_SPI_SS0_POLARITY << SPI_0_OLED_FLASH_SPI_SLAVE_SELECT0) |               ((uint32) SPI_0_OLED_FLASH_SPI_SS1_POLARITY << SPI_0_OLED_FLASH_SPI_SLAVE_SELECT1) |               ((uint32) SPI_0_OLED_FLASH_SPI_SS2_POLARITY << SPI_0_OLED_FLASH_SPI_SLAVE_SELECT2) |               ((uint32) SPI_0_OLED_FLASH_SPI_SS3_POLARITY << SPI_0_OLED_FLASH_SPI_SLAVE_SELECT3))
N
N#if(SPI_0_OLED_FLASH_SCB_MODE_SPI_CONST_CFG)
X#if(((0x02u) == (2u)))
N
N    /* SPI Configuration */
N    #define SPI_0_OLED_FLASH_SPI_DEFAULT_CTRL \
N                    (SPI_0_OLED_FLASH_GET_CTRL_OVS(SPI_0_OLED_FLASH_SPI_OVS_FACTOR) | \
N                     SPI_0_OLED_FLASH_GET_CTRL_BYTE_MODE (SPI_0_OLED_FLASH_SPI_BYTE_MODE_ENABLE) | \
N                     SPI_0_OLED_FLASH_GET_CTRL_EC_AM_MODE(SPI_0_OLED_FLASH_SPI_WAKE_ENABLE)      | \
N                     SPI_0_OLED_FLASH_CTRL_SPI)
X    #define SPI_0_OLED_FLASH_SPI_DEFAULT_CTRL                     (SPI_0_OLED_FLASH_GET_CTRL_OVS(SPI_0_OLED_FLASH_SPI_OVS_FACTOR) |                      SPI_0_OLED_FLASH_GET_CTRL_BYTE_MODE (SPI_0_OLED_FLASH_SPI_BYTE_MODE_ENABLE) |                      SPI_0_OLED_FLASH_GET_CTRL_EC_AM_MODE(SPI_0_OLED_FLASH_SPI_WAKE_ENABLE)      |                      SPI_0_OLED_FLASH_CTRL_SPI)
N
N    #define SPI_0_OLED_FLASH_SPI_DEFAULT_SPI_CTRL \
N                    (SPI_0_OLED_FLASH_GET_SPI_CTRL_CONTINUOUS    (SPI_0_OLED_FLASH_SPI_TRANSFER_SEPARATION)       | \
N                     SPI_0_OLED_FLASH_GET_SPI_CTRL_SELECT_PRECEDE(SPI_0_OLED_FLASH_SPI_SUB_MODE &                   \
N                                                                  SPI_0_OLED_FLASH_SPI_MODE_TI_PRECEDES_MASK)     | \
N                     SPI_0_OLED_FLASH_GET_SPI_CTRL_SCLK_MODE     (SPI_0_OLED_FLASH_SPI_CLOCK_MODE)                | \
N                     SPI_0_OLED_FLASH_GET_SPI_CTRL_LATE_MISO_SAMPLE(SPI_0_OLED_FLASH_SPI_LATE_MISO_SAMPLE_ENABLE) | \
N                     SPI_0_OLED_FLASH_GET_SPI_CTRL_SCLK_CONTINUOUS(SPI_0_OLED_FLASH_SPI_FREE_RUN_SCLK_ENABLE)     | \
N                     SPI_0_OLED_FLASH_GET_SPI_CTRL_SSEL_POLARITY (SPI_0_OLED_FLASH_SPI_SS_POLARITY)               | \
N                     SPI_0_OLED_FLASH_GET_SPI_CTRL_SUB_MODE      (SPI_0_OLED_FLASH_SPI_SUB_MODE)                  | \
N                     SPI_0_OLED_FLASH_GET_SPI_CTRL_MASTER_MODE   (SPI_0_OLED_FLASH_SPI_MODE))
X    #define SPI_0_OLED_FLASH_SPI_DEFAULT_SPI_CTRL                     (SPI_0_OLED_FLASH_GET_SPI_CTRL_CONTINUOUS    (SPI_0_OLED_FLASH_SPI_TRANSFER_SEPARATION)       |                      SPI_0_OLED_FLASH_GET_SPI_CTRL_SELECT_PRECEDE(SPI_0_OLED_FLASH_SPI_SUB_MODE &                                                                                     SPI_0_OLED_FLASH_SPI_MODE_TI_PRECEDES_MASK)     |                      SPI_0_OLED_FLASH_GET_SPI_CTRL_SCLK_MODE     (SPI_0_OLED_FLASH_SPI_CLOCK_MODE)                |                      SPI_0_OLED_FLASH_GET_SPI_CTRL_LATE_MISO_SAMPLE(SPI_0_OLED_FLASH_SPI_LATE_MISO_SAMPLE_ENABLE) |                      SPI_0_OLED_FLASH_GET_SPI_CTRL_SCLK_CONTINUOUS(SPI_0_OLED_FLASH_SPI_FREE_RUN_SCLK_ENABLE)     |                      SPI_0_OLED_FLASH_GET_SPI_CTRL_SSEL_POLARITY (SPI_0_OLED_FLASH_SPI_SS_POLARITY)               |                      SPI_0_OLED_FLASH_GET_SPI_CTRL_SUB_MODE      (SPI_0_OLED_FLASH_SPI_SUB_MODE)                  |                      SPI_0_OLED_FLASH_GET_SPI_CTRL_MASTER_MODE   (SPI_0_OLED_FLASH_SPI_MODE))
N
N    /* RX direction */
N    #define SPI_0_OLED_FLASH_SPI_DEFAULT_RX_CTRL \
N                    (SPI_0_OLED_FLASH_GET_RX_CTRL_DATA_WIDTH(SPI_0_OLED_FLASH_SPI_RX_DATA_BITS_NUM)     | \
N                     SPI_0_OLED_FLASH_GET_RX_CTRL_BIT_ORDER (SPI_0_OLED_FLASH_SPI_BITS_ORDER)           | \
N                     SPI_0_OLED_FLASH_GET_RX_CTRL_MEDIAN    (SPI_0_OLED_FLASH_SPI_MEDIAN_FILTER_ENABLE) | \
N                     SPI_0_OLED_FLASH_SPI_RX_CTRL)
X    #define SPI_0_OLED_FLASH_SPI_DEFAULT_RX_CTRL                     (SPI_0_OLED_FLASH_GET_RX_CTRL_DATA_WIDTH(SPI_0_OLED_FLASH_SPI_RX_DATA_BITS_NUM)     |                      SPI_0_OLED_FLASH_GET_RX_CTRL_BIT_ORDER (SPI_0_OLED_FLASH_SPI_BITS_ORDER)           |                      SPI_0_OLED_FLASH_GET_RX_CTRL_MEDIAN    (SPI_0_OLED_FLASH_SPI_MEDIAN_FILTER_ENABLE) |                      SPI_0_OLED_FLASH_SPI_RX_CTRL)
N
N    #define SPI_0_OLED_FLASH_SPI_DEFAULT_RX_FIFO_CTRL \
N                    SPI_0_OLED_FLASH_GET_RX_FIFO_CTRL_TRIGGER_LEVEL(SPI_0_OLED_FLASH_SPI_RX_TRIGGER_LEVEL)
X    #define SPI_0_OLED_FLASH_SPI_DEFAULT_RX_FIFO_CTRL                     SPI_0_OLED_FLASH_GET_RX_FIFO_CTRL_TRIGGER_LEVEL(SPI_0_OLED_FLASH_SPI_RX_TRIGGER_LEVEL)
N
N    /* TX direction */
N    #define SPI_0_OLED_FLASH_SPI_DEFAULT_TX_CTRL \
N                    (SPI_0_OLED_FLASH_GET_TX_CTRL_DATA_WIDTH(SPI_0_OLED_FLASH_SPI_TX_DATA_BITS_NUM) | \
N                     SPI_0_OLED_FLASH_GET_TX_CTRL_BIT_ORDER (SPI_0_OLED_FLASH_SPI_BITS_ORDER)       | \
N                     SPI_0_OLED_FLASH_SPI_TX_CTRL)
X    #define SPI_0_OLED_FLASH_SPI_DEFAULT_TX_CTRL                     (SPI_0_OLED_FLASH_GET_TX_CTRL_DATA_WIDTH(SPI_0_OLED_FLASH_SPI_TX_DATA_BITS_NUM) |                      SPI_0_OLED_FLASH_GET_TX_CTRL_BIT_ORDER (SPI_0_OLED_FLASH_SPI_BITS_ORDER)       |                      SPI_0_OLED_FLASH_SPI_TX_CTRL)
N
N    #define SPI_0_OLED_FLASH_SPI_DEFAULT_TX_FIFO_CTRL \
N                    SPI_0_OLED_FLASH_GET_TX_FIFO_CTRL_TRIGGER_LEVEL(SPI_0_OLED_FLASH_SPI_TX_TRIGGER_LEVEL)
X    #define SPI_0_OLED_FLASH_SPI_DEFAULT_TX_FIFO_CTRL                     SPI_0_OLED_FLASH_GET_TX_FIFO_CTRL_TRIGGER_LEVEL(SPI_0_OLED_FLASH_SPI_TX_TRIGGER_LEVEL)
N
N    /* Interrupt sources */
N    #define SPI_0_OLED_FLASH_SPI_DEFAULT_INTR_SPI_EC_MASK   (SPI_0_OLED_FLASH_NO_INTR_SOURCES)
N
N    #define SPI_0_OLED_FLASH_SPI_DEFAULT_INTR_I2C_EC_MASK   (SPI_0_OLED_FLASH_NO_INTR_SOURCES)
N    #define SPI_0_OLED_FLASH_SPI_DEFAULT_INTR_SLAVE_MASK \
N                    (SPI_0_OLED_FLASH_SPI_INTR_RX_MASK & SPI_0_OLED_FLASH_INTR_SLAVE_SPI_BUS_ERROR)
X    #define SPI_0_OLED_FLASH_SPI_DEFAULT_INTR_SLAVE_MASK                     (SPI_0_OLED_FLASH_SPI_INTR_RX_MASK & SPI_0_OLED_FLASH_INTR_SLAVE_SPI_BUS_ERROR)
N
N    #define SPI_0_OLED_FLASH_SPI_DEFAULT_INTR_MASTER_MASK \
N                    (SPI_0_OLED_FLASH_SPI_INTR_TX_MASK & SPI_0_OLED_FLASH_INTR_MASTER_SPI_DONE)
X    #define SPI_0_OLED_FLASH_SPI_DEFAULT_INTR_MASTER_MASK                     (SPI_0_OLED_FLASH_SPI_INTR_TX_MASK & SPI_0_OLED_FLASH_INTR_MASTER_SPI_DONE)
N
N    #define SPI_0_OLED_FLASH_SPI_DEFAULT_INTR_RX_MASK \
N                    (SPI_0_OLED_FLASH_SPI_INTR_RX_MASK & (uint32) ~SPI_0_OLED_FLASH_INTR_SLAVE_SPI_BUS_ERROR)
X    #define SPI_0_OLED_FLASH_SPI_DEFAULT_INTR_RX_MASK                     (SPI_0_OLED_FLASH_SPI_INTR_RX_MASK & (uint32) ~SPI_0_OLED_FLASH_INTR_SLAVE_SPI_BUS_ERROR)
N
N    #define SPI_0_OLED_FLASH_SPI_DEFAULT_INTR_TX_MASK \
N                    (SPI_0_OLED_FLASH_SPI_INTR_TX_MASK & (uint32) ~SPI_0_OLED_FLASH_INTR_MASTER_SPI_DONE)
X    #define SPI_0_OLED_FLASH_SPI_DEFAULT_INTR_TX_MASK                     (SPI_0_OLED_FLASH_SPI_INTR_TX_MASK & (uint32) ~SPI_0_OLED_FLASH_INTR_MASTER_SPI_DONE)
N
N#endif /* (SPI_0_OLED_FLASH_SCB_MODE_SPI_CONST_CFG) */
N
N
N/***************************************
N*        UART Register Settings
N***************************************/
N
N#define SPI_0_OLED_FLASH_CTRL_UART      (SPI_0_OLED_FLASH_CTRL_MODE_UART)
N#define SPI_0_OLED_FLASH_UART_RX_CTRL   (SPI_0_OLED_FLASH_RX_CTRL_LSB_FIRST) /* LSB for UART goes first */
N#define SPI_0_OLED_FLASH_UART_TX_CTRL   (SPI_0_OLED_FLASH_TX_CTRL_LSB_FIRST) /* LSB for UART goes first */
N
N
N/***************************************
N*      UART Init Register Settings
N***************************************/
N
N#if(SPI_0_OLED_FLASH_SCB_MODE_UART_CONST_CFG)
X#if(((0x04u) == (2u)))
S
S    /* UART configuration */
S    #if(SPI_0_OLED_FLASH_UART_MODE_IRDA == SPI_0_OLED_FLASH_UART_SUB_MODE)
S
S        #define SPI_0_OLED_FLASH_DEFAULT_CTRL_OVS   ((0u != SPI_0_OLED_FLASH_UART_IRDA_LOW_POWER) ?              \
S                                (SPI_0_OLED_FLASH_UART_GET_CTRL_OVS_IRDA_LP(SPI_0_OLED_FLASH_UART_OVS_FACTOR)) : \
S                                (SPI_0_OLED_FLASH_CTRL_OVS_IRDA_OVS16))
X        #define SPI_0_OLED_FLASH_DEFAULT_CTRL_OVS   ((0u != SPI_0_OLED_FLASH_UART_IRDA_LOW_POWER) ?                                              (SPI_0_OLED_FLASH_UART_GET_CTRL_OVS_IRDA_LP(SPI_0_OLED_FLASH_UART_OVS_FACTOR)) :                                 (SPI_0_OLED_FLASH_CTRL_OVS_IRDA_OVS16))
S
S    #else
S
S        #define SPI_0_OLED_FLASH_DEFAULT_CTRL_OVS   SPI_0_OLED_FLASH_GET_CTRL_OVS(SPI_0_OLED_FLASH_UART_OVS_FACTOR)
S
S    #endif /* (SPI_0_OLED_FLASH_UART_MODE_IRDA == SPI_0_OLED_FLASH_UART_SUB_MODE) */
S
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_CTRL \
S                                (SPI_0_OLED_FLASH_GET_CTRL_BYTE_MODE  (SPI_0_OLED_FLASH_UART_BYTE_MODE_ENABLE)  | \
S                                 SPI_0_OLED_FLASH_GET_CTRL_ADDR_ACCEPT(SPI_0_OLED_FLASH_UART_MP_ACCEPT_ADDRESS) | \
S                                 SPI_0_OLED_FLASH_DEFAULT_CTRL_OVS                                              | \
S                                 SPI_0_OLED_FLASH_CTRL_UART)
X    #define SPI_0_OLED_FLASH_UART_DEFAULT_CTRL                                 (SPI_0_OLED_FLASH_GET_CTRL_BYTE_MODE  (SPI_0_OLED_FLASH_UART_BYTE_MODE_ENABLE)  |                                  SPI_0_OLED_FLASH_GET_CTRL_ADDR_ACCEPT(SPI_0_OLED_FLASH_UART_MP_ACCEPT_ADDRESS) |                                  SPI_0_OLED_FLASH_DEFAULT_CTRL_OVS                                              |                                  SPI_0_OLED_FLASH_CTRL_UART)
S
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_UART_CTRL \
S                                    (SPI_0_OLED_FLASH_GET_UART_CTRL_MODE(SPI_0_OLED_FLASH_UART_SUB_MODE))
X    #define SPI_0_OLED_FLASH_UART_DEFAULT_UART_CTRL                                     (SPI_0_OLED_FLASH_GET_UART_CTRL_MODE(SPI_0_OLED_FLASH_UART_SUB_MODE))
S
S    /* RX direction */
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_RX_CTRL_PARITY \
S                                ((SPI_0_OLED_FLASH_UART_PARITY_NONE != SPI_0_OLED_FLASH_UART_PARITY_TYPE) ?      \
S                                  (SPI_0_OLED_FLASH_GET_UART_RX_CTRL_PARITY(SPI_0_OLED_FLASH_UART_PARITY_TYPE) | \
S                                   SPI_0_OLED_FLASH_UART_RX_CTRL_PARITY_ENABLED) : (0u))
X    #define SPI_0_OLED_FLASH_UART_DEFAULT_RX_CTRL_PARITY                                 ((SPI_0_OLED_FLASH_UART_PARITY_NONE != SPI_0_OLED_FLASH_UART_PARITY_TYPE) ?                                        (SPI_0_OLED_FLASH_GET_UART_RX_CTRL_PARITY(SPI_0_OLED_FLASH_UART_PARITY_TYPE) |                                    SPI_0_OLED_FLASH_UART_RX_CTRL_PARITY_ENABLED) : (0u))
S
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_UART_RX_CTRL \
S                    (SPI_0_OLED_FLASH_GET_UART_RX_CTRL_MODE(SPI_0_OLED_FLASH_UART_STOP_BITS_NUM)                    | \
S                     SPI_0_OLED_FLASH_GET_UART_RX_CTRL_POLARITY(SPI_0_OLED_FLASH_UART_IRDA_POLARITY)                | \
S                     SPI_0_OLED_FLASH_GET_UART_RX_CTRL_MP_MODE(SPI_0_OLED_FLASH_UART_MP_MODE_ENABLE)                | \
S                     SPI_0_OLED_FLASH_GET_UART_RX_CTRL_DROP_ON_PARITY_ERR(SPI_0_OLED_FLASH_UART_DROP_ON_PARITY_ERR) | \
S                     SPI_0_OLED_FLASH_GET_UART_RX_CTRL_DROP_ON_FRAME_ERR(SPI_0_OLED_FLASH_UART_DROP_ON_FRAME_ERR)   | \
S                     SPI_0_OLED_FLASH_GET_UART_RX_CTRL_BREAK_WIDTH(SPI_0_OLED_FLASH_UART_RX_BREAK_WIDTH)            | \
S                     SPI_0_OLED_FLASH_UART_DEFAULT_RX_CTRL_PARITY)
X    #define SPI_0_OLED_FLASH_UART_DEFAULT_UART_RX_CTRL                     (SPI_0_OLED_FLASH_GET_UART_RX_CTRL_MODE(SPI_0_OLED_FLASH_UART_STOP_BITS_NUM)                    |                      SPI_0_OLED_FLASH_GET_UART_RX_CTRL_POLARITY(SPI_0_OLED_FLASH_UART_IRDA_POLARITY)                |                      SPI_0_OLED_FLASH_GET_UART_RX_CTRL_MP_MODE(SPI_0_OLED_FLASH_UART_MP_MODE_ENABLE)                |                      SPI_0_OLED_FLASH_GET_UART_RX_CTRL_DROP_ON_PARITY_ERR(SPI_0_OLED_FLASH_UART_DROP_ON_PARITY_ERR) |                      SPI_0_OLED_FLASH_GET_UART_RX_CTRL_DROP_ON_FRAME_ERR(SPI_0_OLED_FLASH_UART_DROP_ON_FRAME_ERR)   |                      SPI_0_OLED_FLASH_GET_UART_RX_CTRL_BREAK_WIDTH(SPI_0_OLED_FLASH_UART_RX_BREAK_WIDTH)            |                      SPI_0_OLED_FLASH_UART_DEFAULT_RX_CTRL_PARITY)
S
S
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_RX_CTRL \
S                                (SPI_0_OLED_FLASH_GET_RX_CTRL_DATA_WIDTH(SPI_0_OLED_FLASH_UART_DATA_BITS_NUM)        | \
S                                 SPI_0_OLED_FLASH_GET_RX_CTRL_MEDIAN    (SPI_0_OLED_FLASH_UART_MEDIAN_FILTER_ENABLE) | \
S                                 SPI_0_OLED_FLASH_GET_UART_RX_CTRL_ENABLED(SPI_0_OLED_FLASH_UART_DIRECTION))
X    #define SPI_0_OLED_FLASH_UART_DEFAULT_RX_CTRL                                 (SPI_0_OLED_FLASH_GET_RX_CTRL_DATA_WIDTH(SPI_0_OLED_FLASH_UART_DATA_BITS_NUM)        |                                  SPI_0_OLED_FLASH_GET_RX_CTRL_MEDIAN    (SPI_0_OLED_FLASH_UART_MEDIAN_FILTER_ENABLE) |                                  SPI_0_OLED_FLASH_GET_UART_RX_CTRL_ENABLED(SPI_0_OLED_FLASH_UART_DIRECTION))
S
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_RX_FIFO_CTRL \
S                                SPI_0_OLED_FLASH_GET_RX_FIFO_CTRL_TRIGGER_LEVEL(SPI_0_OLED_FLASH_UART_RX_TRIGGER_LEVEL)
X    #define SPI_0_OLED_FLASH_UART_DEFAULT_RX_FIFO_CTRL                                 SPI_0_OLED_FLASH_GET_RX_FIFO_CTRL_TRIGGER_LEVEL(SPI_0_OLED_FLASH_UART_RX_TRIGGER_LEVEL)
S
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_RX_MATCH_REG  ((0u != SPI_0_OLED_FLASH_UART_MP_MODE_ENABLE) ?          \
S                                (SPI_0_OLED_FLASH_GET_RX_MATCH_ADDR(SPI_0_OLED_FLASH_UART_MP_RX_ADDRESS) | \
S                                 SPI_0_OLED_FLASH_GET_RX_MATCH_MASK(SPI_0_OLED_FLASH_UART_MP_RX_ADDRESS_MASK)) : (0u))
X    #define SPI_0_OLED_FLASH_UART_DEFAULT_RX_MATCH_REG  ((0u != SPI_0_OLED_FLASH_UART_MP_MODE_ENABLE) ?                                          (SPI_0_OLED_FLASH_GET_RX_MATCH_ADDR(SPI_0_OLED_FLASH_UART_MP_RX_ADDRESS) |                                  SPI_0_OLED_FLASH_GET_RX_MATCH_MASK(SPI_0_OLED_FLASH_UART_MP_RX_ADDRESS_MASK)) : (0u))
S
S    /* TX direction */
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_TX_CTRL_PARITY (SPI_0_OLED_FLASH_UART_DEFAULT_RX_CTRL_PARITY)
S
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_UART_TX_CTRL \
S                                (SPI_0_OLED_FLASH_GET_UART_TX_CTRL_MODE(SPI_0_OLED_FLASH_UART_STOP_BITS_NUM)       | \
S                                 SPI_0_OLED_FLASH_GET_UART_TX_CTRL_RETRY_NACK(SPI_0_OLED_FLASH_UART_RETRY_ON_NACK) | \
S                                 SPI_0_OLED_FLASH_UART_DEFAULT_TX_CTRL_PARITY)
X    #define SPI_0_OLED_FLASH_UART_DEFAULT_UART_TX_CTRL                                 (SPI_0_OLED_FLASH_GET_UART_TX_CTRL_MODE(SPI_0_OLED_FLASH_UART_STOP_BITS_NUM)       |                                  SPI_0_OLED_FLASH_GET_UART_TX_CTRL_RETRY_NACK(SPI_0_OLED_FLASH_UART_RETRY_ON_NACK) |                                  SPI_0_OLED_FLASH_UART_DEFAULT_TX_CTRL_PARITY)
S
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_TX_CTRL \
S                                (SPI_0_OLED_FLASH_GET_TX_CTRL_DATA_WIDTH(SPI_0_OLED_FLASH_UART_DATA_BITS_NUM) | \
S                                 SPI_0_OLED_FLASH_GET_UART_TX_CTRL_ENABLED(SPI_0_OLED_FLASH_UART_DIRECTION))
X    #define SPI_0_OLED_FLASH_UART_DEFAULT_TX_CTRL                                 (SPI_0_OLED_FLASH_GET_TX_CTRL_DATA_WIDTH(SPI_0_OLED_FLASH_UART_DATA_BITS_NUM) |                                  SPI_0_OLED_FLASH_GET_UART_TX_CTRL_ENABLED(SPI_0_OLED_FLASH_UART_DIRECTION))
S
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_TX_FIFO_CTRL \
S                                SPI_0_OLED_FLASH_GET_TX_FIFO_CTRL_TRIGGER_LEVEL(SPI_0_OLED_FLASH_UART_TX_TRIGGER_LEVEL)
X    #define SPI_0_OLED_FLASH_UART_DEFAULT_TX_FIFO_CTRL                                 SPI_0_OLED_FLASH_GET_TX_FIFO_CTRL_TRIGGER_LEVEL(SPI_0_OLED_FLASH_UART_TX_TRIGGER_LEVEL)
S
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_FLOW_CTRL \
S                        (SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_TRIGGER_LEVEL(SPI_0_OLED_FLASH_UART_RTS_FIFO_LEVEL) | \
S                         SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_RTS_POLARITY (SPI_0_OLED_FLASH_UART_RTS_POLARITY)   | \
S                         SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_CTS_POLARITY (SPI_0_OLED_FLASH_UART_CTS_POLARITY)   | \
S                         SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_CTS_ENABLE   (SPI_0_OLED_FLASH_UART_CTS_ENABLE))
X    #define SPI_0_OLED_FLASH_UART_DEFAULT_FLOW_CTRL                         (SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_TRIGGER_LEVEL(SPI_0_OLED_FLASH_UART_RTS_FIFO_LEVEL) |                          SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_RTS_POLARITY (SPI_0_OLED_FLASH_UART_RTS_POLARITY)   |                          SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_CTS_POLARITY (SPI_0_OLED_FLASH_UART_CTS_POLARITY)   |                          SPI_0_OLED_FLASH_GET_UART_FLOW_CTRL_CTS_ENABLE   (SPI_0_OLED_FLASH_UART_CTS_ENABLE))
S
S    /* Interrupt sources */
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_INTR_I2C_EC_MASK  (SPI_0_OLED_FLASH_NO_INTR_SOURCES)
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_INTR_SPI_EC_MASK  (SPI_0_OLED_FLASH_NO_INTR_SOURCES)
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_INTR_SLAVE_MASK   (SPI_0_OLED_FLASH_NO_INTR_SOURCES)
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_INTR_MASTER_MASK  (SPI_0_OLED_FLASH_NO_INTR_SOURCES)
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_INTR_RX_MASK      (SPI_0_OLED_FLASH_UART_INTR_RX_MASK)
S    #define SPI_0_OLED_FLASH_UART_DEFAULT_INTR_TX_MASK      (SPI_0_OLED_FLASH_UART_INTR_TX_MASK)
S
N#endif /* (SPI_0_OLED_FLASH_SCB_MODE_UART_CONST_CFG) */
N
N
N/***************************************
N* The following code is DEPRECATED and
N* must not be used.
N***************************************/
N
N#define SPI_0_OLED_FLASH_SPIM_ACTIVE_SS0    (SPI_0_OLED_FLASH_SPI_SLAVE_SELECT0)
N#define SPI_0_OLED_FLASH_SPIM_ACTIVE_SS1    (SPI_0_OLED_FLASH_SPI_SLAVE_SELECT1)
N#define SPI_0_OLED_FLASH_SPIM_ACTIVE_SS2    (SPI_0_OLED_FLASH_SPI_SLAVE_SELECT2)
N#define SPI_0_OLED_FLASH_SPIM_ACTIVE_SS3    (SPI_0_OLED_FLASH_SPI_SLAVE_SELECT3)
N
N#endif /* CY_SCB_SPI_UART_SPI_0_OLED_FLASH_H */
N
N
N/* [] END OF FILE */
L 24 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_SPI_UART_PVT.h" 2
N
N
N/***************************************
N*     Internal Global Vars
N***************************************/
N
N#if (SPI_0_OLED_FLASH_INTERNAL_RX_SW_BUFFER_CONST)
X#if (((((16u) > ((0u != ((1u))) ? (2u * (8u)) : ((8u)))))))
S    extern volatile uint32  SPI_0_OLED_FLASH_rxBufferHead;
S    extern volatile uint32  SPI_0_OLED_FLASH_rxBufferTail;
S    
S    /**
S    * \addtogroup group_globals
S    * @{
S    */
S    
S    /** Sets when internal software receive buffer overflow
S     *  was occurred.
S    */  
S    extern volatile uint8   SPI_0_OLED_FLASH_rxBufferOverflow;
S    /** @} globals */
N#endif /* (SPI_0_OLED_FLASH_INTERNAL_RX_SW_BUFFER_CONST) */
N
N#if (SPI_0_OLED_FLASH_INTERNAL_TX_SW_BUFFER_CONST)
X#if (((((16u) > ((0u != ((1u))) ? (2u * (8u)) : ((8u)))))))
S    extern volatile uint32  SPI_0_OLED_FLASH_txBufferHead;
S    extern volatile uint32  SPI_0_OLED_FLASH_txBufferTail;
N#endif /* (SPI_0_OLED_FLASH_INTERNAL_TX_SW_BUFFER_CONST) */
N
N#if (SPI_0_OLED_FLASH_INTERNAL_RX_SW_BUFFER)
X#if ((((16u) > ((0u != ((1u))) ? (2u * (8u)) : ((8u))))))
S    extern volatile uint8 SPI_0_OLED_FLASH_rxBufferInternal[SPI_0_OLED_FLASH_INTERNAL_RX_BUFFER_SIZE];
N#endif /* (SPI_0_OLED_FLASH_INTERNAL_RX_SW_BUFFER) */
N
N#if (SPI_0_OLED_FLASH_INTERNAL_TX_SW_BUFFER)
X#if ((((16u) > ((0u != ((1u))) ? (2u * (8u)) : ((8u))))))
S    extern volatile uint8 SPI_0_OLED_FLASH_txBufferInternal[SPI_0_OLED_FLASH_TX_BUFFER_SIZE];
N#endif /* (SPI_0_OLED_FLASH_INTERNAL_TX_SW_BUFFER) */
N
N
N/***************************************
N*     Private Function Prototypes
N***************************************/
N
Nvoid SPI_0_OLED_FLASH_SpiPostEnable(void);
Nvoid SPI_0_OLED_FLASH_SpiStop(void);
N
N#if (SPI_0_OLED_FLASH_SCB_MODE_SPI_CONST_CFG)
X#if (((0x02u) == (2u)))
N    void SPI_0_OLED_FLASH_SpiInit(void);
N#endif /* (SPI_0_OLED_FLASH_SCB_MODE_SPI_CONST_CFG) */
N
N#if (SPI_0_OLED_FLASH_SPI_WAKE_ENABLE_CONST)
X#if ((0u != (0u)))
S    void SPI_0_OLED_FLASH_SpiSaveConfig(void);
S    void SPI_0_OLED_FLASH_SpiRestoreConfig(void);
N#endif /* (SPI_0_OLED_FLASH_SPI_WAKE_ENABLE_CONST) */
N
Nvoid SPI_0_OLED_FLASH_UartPostEnable(void);
Nvoid SPI_0_OLED_FLASH_UartStop(void);
N
N#if (SPI_0_OLED_FLASH_SCB_MODE_UART_CONST_CFG)
X#if (((0x04u) == (2u)))
S    void SPI_0_OLED_FLASH_UartInit(void);
N#endif /* (SPI_0_OLED_FLASH_SCB_MODE_UART_CONST_CFG) */
N
N#if (SPI_0_OLED_FLASH_UART_WAKE_ENABLE_CONST)
X#if ((0u))
S    void SPI_0_OLED_FLASH_UartSaveConfig(void);
S    void SPI_0_OLED_FLASH_UartRestoreConfig(void);
N#endif /* (SPI_0_OLED_FLASH_UART_WAKE_ENABLE_CONST) */
N
N
N/***************************************
N*         UART API Constants
N***************************************/
N
N/* UART RX and TX position to be used in SPI_0_OLED_FLASH_SetPins() */
N#define SPI_0_OLED_FLASH_UART_RX_PIN_ENABLE    (SPI_0_OLED_FLASH_UART_RX)
N#define SPI_0_OLED_FLASH_UART_TX_PIN_ENABLE    (SPI_0_OLED_FLASH_UART_TX)
N
N/* UART RTS and CTS position to be used in  SPI_0_OLED_FLASH_SetPins() */
N#define SPI_0_OLED_FLASH_UART_RTS_PIN_ENABLE    (0x10u)
N#define SPI_0_OLED_FLASH_UART_CTS_PIN_ENABLE    (0x20u)
N
N
N/***************************************
N* The following code is DEPRECATED and
N* must not be used.
N***************************************/
N
N/* Interrupt processing */
N#define SPI_0_OLED_FLASH_SpiUartEnableIntRx(intSourceMask)  SPI_0_OLED_FLASH_SetRxInterruptMode(intSourceMask)
N#define SPI_0_OLED_FLASH_SpiUartEnableIntTx(intSourceMask)  SPI_0_OLED_FLASH_SetTxInterruptMode(intSourceMask)
Nuint32  SPI_0_OLED_FLASH_SpiUartDisableIntRx(void);
Nuint32  SPI_0_OLED_FLASH_SpiUartDisableIntTx(void);
N
N
N#endif /* (CY_SCB_SPI_UART_PVT_SPI_0_OLED_FLASH_H) */
N
N
N/* [] END OF FILE */
L 21 "Generated_Source\PSoC4\SPI_0_OLED_FLASH_SPI.c" 2
N
N#if(SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG)
X#if(((0xFFu) == (2u)))
S
S    /***************************************
S    *  Configuration Structure Initialization
S    ***************************************/
S
S    const SPI_0_OLED_FLASH_SPI_INIT_STRUCT SPI_0_OLED_FLASH_configSpi =
S    {
S        SPI_0_OLED_FLASH_SPI_MODE,
S        SPI_0_OLED_FLASH_SPI_SUB_MODE,
S        SPI_0_OLED_FLASH_SPI_CLOCK_MODE,
S        SPI_0_OLED_FLASH_SPI_OVS_FACTOR,
S        SPI_0_OLED_FLASH_SPI_MEDIAN_FILTER_ENABLE,
S        SPI_0_OLED_FLASH_SPI_LATE_MISO_SAMPLE_ENABLE,
S        SPI_0_OLED_FLASH_SPI_WAKE_ENABLE,
S        SPI_0_OLED_FLASH_SPI_RX_DATA_BITS_NUM,
S        SPI_0_OLED_FLASH_SPI_TX_DATA_BITS_NUM,
S        SPI_0_OLED_FLASH_SPI_BITS_ORDER,
S        SPI_0_OLED_FLASH_SPI_TRANSFER_SEPARATION,
S        0u,
S        NULL,
S        0u,
S        NULL,
S        (uint32) SPI_0_OLED_FLASH_SCB_IRQ_INTERNAL,
S        SPI_0_OLED_FLASH_SPI_INTR_RX_MASK,
S        SPI_0_OLED_FLASH_SPI_RX_TRIGGER_LEVEL,
S        SPI_0_OLED_FLASH_SPI_INTR_TX_MASK,
S        SPI_0_OLED_FLASH_SPI_TX_TRIGGER_LEVEL,
S        (uint8) SPI_0_OLED_FLASH_SPI_BYTE_MODE_ENABLE,
S        (uint8) SPI_0_OLED_FLASH_SPI_FREE_RUN_SCLK_ENABLE,
S        (uint8) SPI_0_OLED_FLASH_SPI_SS_POLARITY
S    };
S
S
S    /*******************************************************************************
S    * Function Name: SPI_0_OLED_FLASH_SpiInit
S    ****************************************************************************//**
S    *
S    *  Configures the SPI_0_OLED_FLASH for SPI operation.
S    *
S    *  This function is intended specifically to be used when the SPI_0_OLED_FLASH 
S    *  configuration is set to “Unconfigured SPI_0_OLED_FLASH” in the customizer. 
S    *  After initializing the SPI_0_OLED_FLASH in SPI mode using this function, 
S    *  the component can be enabled using the SPI_0_OLED_FLASH_Start() or 
S    * SPI_0_OLED_FLASH_Enable() function.
S    *  This function uses a pointer to a structure that provides the configuration 
S    *  settings. This structure contains the same information that would otherwise 
S    *  be provided by the customizer settings.
S    *
S    *  \param config: pointer to a structure that contains the following list of 
S    *   fields. These fields match the selections available in the customizer. 
S    *   Refer to the customizer for further description of the settings.
S    *
S    *******************************************************************************/
S    void SPI_0_OLED_FLASH_SpiInit(const SPI_0_OLED_FLASH_SPI_INIT_STRUCT *config)
S    {
S        if(NULL == config)
S        {
S            CYASSERT(0u != 0u); /* Halt execution due to bad function parameter */
S        }
S        else
S        {
S            /* Configure pins */
S            SPI_0_OLED_FLASH_SetPins(SPI_0_OLED_FLASH_SCB_MODE_SPI, config->mode, SPI_0_OLED_FLASH_DUMMY_PARAM);
S
S            /* Store internal configuration */
S            SPI_0_OLED_FLASH_scbMode       = (uint8) SPI_0_OLED_FLASH_SCB_MODE_SPI;
S            SPI_0_OLED_FLASH_scbEnableWake = (uint8) config->enableWake;
S            SPI_0_OLED_FLASH_scbEnableIntr = (uint8) config->enableInterrupt;
S
S            /* Set RX direction internal variables */
S            SPI_0_OLED_FLASH_rxBuffer      =         config->rxBuffer;
S            SPI_0_OLED_FLASH_rxDataBits    = (uint8) config->rxDataBits;
S            SPI_0_OLED_FLASH_rxBufferSize  =         config->rxBufferSize;
S
S            /* Set TX direction internal variables */
S            SPI_0_OLED_FLASH_txBuffer      =         config->txBuffer;
S            SPI_0_OLED_FLASH_txDataBits    = (uint8) config->txDataBits;
S            SPI_0_OLED_FLASH_txBufferSize  =         config->txBufferSize;
S
S            /* Configure SPI interface */
S            SPI_0_OLED_FLASH_CTRL_REG     = SPI_0_OLED_FLASH_GET_CTRL_OVS(config->oversample)           |
S                                            SPI_0_OLED_FLASH_GET_CTRL_BYTE_MODE(config->enableByteMode) |
S                                            SPI_0_OLED_FLASH_GET_CTRL_EC_AM_MODE(config->enableWake)    |
S                                            SPI_0_OLED_FLASH_CTRL_SPI;
S
S            SPI_0_OLED_FLASH_SPI_CTRL_REG = SPI_0_OLED_FLASH_GET_SPI_CTRL_CONTINUOUS    (config->transferSeperation)  |
S                                            SPI_0_OLED_FLASH_GET_SPI_CTRL_SELECT_PRECEDE(config->submode &
S                                                                          SPI_0_OLED_FLASH_SPI_MODE_TI_PRECEDES_MASK) |
S                                            SPI_0_OLED_FLASH_GET_SPI_CTRL_SCLK_MODE     (config->sclkMode)            |
S                                            SPI_0_OLED_FLASH_GET_SPI_CTRL_LATE_MISO_SAMPLE(config->enableLateSampling)|
S                                            SPI_0_OLED_FLASH_GET_SPI_CTRL_SCLK_CONTINUOUS(config->enableFreeRunSclk)  |
S                                            SPI_0_OLED_FLASH_GET_SPI_CTRL_SSEL_POLARITY (config->polaritySs)          |
S                                            SPI_0_OLED_FLASH_GET_SPI_CTRL_SUB_MODE      (config->submode)             |
S                                            SPI_0_OLED_FLASH_GET_SPI_CTRL_MASTER_MODE   (config->mode);
S
S            /* Configure RX direction */
S            SPI_0_OLED_FLASH_RX_CTRL_REG     =  SPI_0_OLED_FLASH_GET_RX_CTRL_DATA_WIDTH(config->rxDataBits)         |
S                                                SPI_0_OLED_FLASH_GET_RX_CTRL_BIT_ORDER (config->bitOrder)           |
S                                                SPI_0_OLED_FLASH_GET_RX_CTRL_MEDIAN    (config->enableMedianFilter) |
S                                                SPI_0_OLED_FLASH_SPI_RX_CTRL;
S
S            SPI_0_OLED_FLASH_RX_FIFO_CTRL_REG = SPI_0_OLED_FLASH_GET_RX_FIFO_CTRL_TRIGGER_LEVEL(config->rxTriggerLevel);
S
S            /* Configure TX direction */
S            SPI_0_OLED_FLASH_TX_CTRL_REG      = SPI_0_OLED_FLASH_GET_TX_CTRL_DATA_WIDTH(config->txDataBits) |
S                                                SPI_0_OLED_FLASH_GET_TX_CTRL_BIT_ORDER (config->bitOrder)   |
S                                                SPI_0_OLED_FLASH_SPI_TX_CTRL;
S
S            SPI_0_OLED_FLASH_TX_FIFO_CTRL_REG = SPI_0_OLED_FLASH_GET_TX_FIFO_CTRL_TRIGGER_LEVEL(config->txTriggerLevel);
S
S            /* Configure interrupt with SPI handler but do not enable it */
S            CyIntDisable    (SPI_0_OLED_FLASH_ISR_NUMBER);
S            CyIntSetPriority(SPI_0_OLED_FLASH_ISR_NUMBER, SPI_0_OLED_FLASH_ISR_PRIORITY);
S            (void) CyIntSetVector(SPI_0_OLED_FLASH_ISR_NUMBER, &SPI_0_OLED_FLASH_SPI_UART_ISR);
S
S            /* Configure interrupt sources */
S            SPI_0_OLED_FLASH_INTR_I2C_EC_MASK_REG = SPI_0_OLED_FLASH_NO_INTR_SOURCES;
S            SPI_0_OLED_FLASH_INTR_SPI_EC_MASK_REG = SPI_0_OLED_FLASH_NO_INTR_SOURCES;
S            SPI_0_OLED_FLASH_INTR_SLAVE_MASK_REG  = SPI_0_OLED_FLASH_GET_SPI_INTR_SLAVE_MASK(config->rxInterruptMask);
S            SPI_0_OLED_FLASH_INTR_MASTER_MASK_REG = SPI_0_OLED_FLASH_GET_SPI_INTR_MASTER_MASK(config->txInterruptMask);
S            SPI_0_OLED_FLASH_INTR_RX_MASK_REG     = SPI_0_OLED_FLASH_GET_SPI_INTR_RX_MASK(config->rxInterruptMask);
S            SPI_0_OLED_FLASH_INTR_TX_MASK_REG     = SPI_0_OLED_FLASH_GET_SPI_INTR_TX_MASK(config->txInterruptMask);
S            
S            /* Configure TX interrupt sources to restore. */
S            SPI_0_OLED_FLASH_IntrTxMask = LO16(SPI_0_OLED_FLASH_INTR_TX_MASK_REG);
S
S            /* Set active SS0 */
S            SPI_0_OLED_FLASH_SpiSetActiveSlaveSelect(SPI_0_OLED_FLASH_SPI_SLAVE_SELECT0);
S
S            /* Clear RX buffer indexes */
S            SPI_0_OLED_FLASH_rxBufferHead     = 0u;
S            SPI_0_OLED_FLASH_rxBufferTail     = 0u;
S            SPI_0_OLED_FLASH_rxBufferOverflow = 0u;
S
S            /* Clear TX buffer indexes */
S            SPI_0_OLED_FLASH_txBufferHead = 0u;
S            SPI_0_OLED_FLASH_txBufferTail = 0u;
S        }
S    }
S
N#else
N
N    /*******************************************************************************
N    * Function Name: SPI_0_OLED_FLASH_SpiInit
N    ****************************************************************************//**
N    *
N    *  Configures the SCB for the SPI operation.
N    *
N    *******************************************************************************/
N    void SPI_0_OLED_FLASH_SpiInit(void)
N    {
N        /* Configure SPI interface */
N        SPI_0_OLED_FLASH_CTRL_REG     = SPI_0_OLED_FLASH_SPI_DEFAULT_CTRL;
X        (*(reg32 *) 0x40250000u)     = ((((uint32) ((6u)) - 1u) & ((uint32) 0x0Fu)) | ((0u != ((1u))) ? (((uint32) 0x01u << (11u))) : (0u)) | ((0u != ((0u))) ? (((uint32) 0x01u << (8u))) : (0u)) | (((uint32) 0x01u << (24u))));
N        SPI_0_OLED_FLASH_SPI_CTRL_REG = SPI_0_OLED_FLASH_SPI_DEFAULT_SPI_CTRL;
X        (*(reg32 *) 0x40250020u) = (((0u != ((1u))) ? (((uint32) 0x01u)) : (0u)) | ((0u != ((0u) & (0x10u))) ? (((uint32) 0x01u << (1u))) : (0u)) | (((uint32) ((0u)) << (2u)) & ((uint32) 0x03u << (2u))) | ((0u != ((0u))) ? (((uint32) 0x01u << (4u))) : (0u)) | ((0u != ((0u))) ? (((uint32) 0x01u << (5u))) : (0u)) | (((uint32) ((((uint32) (0u) << (0u)) | ((uint32) (0u) << (1u)) | ((uint32) (0u) << (2u)) | ((uint32) (0u) << (3u)))) << (8u)) & ((uint32)0x0Fu << (8u))) | (((uint32) ((0u)) << (24u)) & ((uint32) 0x03u << (24u))) | ((0u != ((1u))) ? (((uint32) 0x01u << (31u))) : (0u)));
N
N        /* Configure TX and RX direction */
N        SPI_0_OLED_FLASH_RX_CTRL_REG      = SPI_0_OLED_FLASH_SPI_DEFAULT_RX_CTRL;
X        (*(reg32 *) 0x40250300u)      = ((((uint32) ((8u)) - 1u) & ((uint32) 0x0Fu)) | ((0u != ((1u))) ? (((uint32) 0x01u << (8u))) : (0u)) | ((0u != ((0u))) ? (((uint32) 0x01u << (9u))) : (0u)) | (((uint32) 0x01u << (31u))));
N        SPI_0_OLED_FLASH_RX_FIFO_CTRL_REG = SPI_0_OLED_FLASH_SPI_DEFAULT_RX_FIFO_CTRL;
X        (*(reg32 *) 0x40250304u) = ((uint32) ((7u)) & ((uint32) (0x0Fu)));
N
N        /* Configure TX and RX direction */
N        SPI_0_OLED_FLASH_TX_CTRL_REG      = SPI_0_OLED_FLASH_SPI_DEFAULT_TX_CTRL;
X        (*(reg32 *) 0x40250200u)      = ((((uint32) ((8u)) - 1u) & ((uint32) 0x0Fu)) | ((0u != ((1u))) ? (((uint32) 0x01u << (8u))) : (0u)) | (((uint32) 0x01u << (31u))));
N        SPI_0_OLED_FLASH_TX_FIFO_CTRL_REG = SPI_0_OLED_FLASH_SPI_DEFAULT_TX_FIFO_CTRL;
X        (*(reg32 *) 0x40250204u) = ((uint32) ((0u)) & ((uint32) (0x0Fu)));
N
N        /* Configure interrupt with SPI handler but do not enable it */
N    #if(SPI_0_OLED_FLASH_SCB_IRQ_INTERNAL)
X    #if((0u == (1u)))
S            CyIntDisable    (SPI_0_OLED_FLASH_ISR_NUMBER);
S            CyIntSetPriority(SPI_0_OLED_FLASH_ISR_NUMBER, SPI_0_OLED_FLASH_ISR_PRIORITY);
S            (void) CyIntSetVector(SPI_0_OLED_FLASH_ISR_NUMBER, &SPI_0_OLED_FLASH_SPI_UART_ISR);
N    #endif /* (SPI_0_OLED_FLASH_SCB_IRQ_INTERNAL) */
N
N        /* Configure interrupt sources */
N        SPI_0_OLED_FLASH_INTR_I2C_EC_MASK_REG = SPI_0_OLED_FLASH_SPI_DEFAULT_INTR_I2C_EC_MASK;
X        (*(reg32 *) 0x40250e88u) = (((uint32) (0u)));
N        SPI_0_OLED_FLASH_INTR_SPI_EC_MASK_REG = SPI_0_OLED_FLASH_SPI_DEFAULT_INTR_SPI_EC_MASK;
X        (*(reg32 *) 0x40250ec8u) = (((uint32) (0u)));
N        SPI_0_OLED_FLASH_INTR_SLAVE_MASK_REG  = SPI_0_OLED_FLASH_SPI_DEFAULT_INTR_SLAVE_MASK;
X        (*(reg32 *) 0x40250f48u)  = ((0x0u) & ((uint32) 0x01u << (11u)));
N        SPI_0_OLED_FLASH_INTR_MASTER_MASK_REG = SPI_0_OLED_FLASH_SPI_DEFAULT_INTR_MASTER_MASK;
X        (*(reg32 *) 0x40250f08u) = ((0x0u) & ((uint32) 0x01u << (9u)));
N        SPI_0_OLED_FLASH_INTR_RX_MASK_REG     = SPI_0_OLED_FLASH_SPI_DEFAULT_INTR_RX_MASK;
X        (*(reg32 *) 0x40250fc8u)     = ((0x0u) & (uint32) ~((uint32) 0x01u << (11u)));
N        SPI_0_OLED_FLASH_INTR_TX_MASK_REG     = SPI_0_OLED_FLASH_SPI_DEFAULT_INTR_TX_MASK;
X        (*(reg32 *) 0x40250f88u)     = ((0x0u) & (uint32) ~((uint32) 0x01u << (9u)));
N
N        /* Configure TX interrupt sources to restore. */
N        SPI_0_OLED_FLASH_IntrTxMask = LO16(SPI_0_OLED_FLASH_INTR_TX_MASK_REG);
X        SPI_0_OLED_FLASH_IntrTxMask = ((uint16) (((*(reg32 *) 0x40250f88u)) & 0xFFFFu));
N            
N        /* Set active SS0 for master */
N    #if (SPI_0_OLED_FLASH_SPI_MASTER_CONST)
X    #if (((1u) == (1u)))
N        SPI_0_OLED_FLASH_SpiSetActiveSlaveSelect(SPI_0_OLED_FLASH_SPI_SLAVE_SELECT0);
X        SPI_0_OLED_FLASH_SpiSetActiveSlaveSelect((0u));
N    #endif /* (SPI_0_OLED_FLASH_SPI_MASTER_CONST) */
N
N    #if(SPI_0_OLED_FLASH_INTERNAL_RX_SW_BUFFER_CONST)
X    #if(((((16u) > ((0u != ((1u))) ? (2u * (8u)) : ((8u)))))))
S        SPI_0_OLED_FLASH_rxBufferHead     = 0u;
S        SPI_0_OLED_FLASH_rxBufferTail     = 0u;
S        SPI_0_OLED_FLASH_rxBufferOverflow = 0u;
N    #endif /* (SPI_0_OLED_FLASH_INTERNAL_RX_SW_BUFFER_CONST) */
N
N    #if(SPI_0_OLED_FLASH_INTERNAL_TX_SW_BUFFER_CONST)
X    #if(((((16u) > ((0u != ((1u))) ? (2u * (8u)) : ((8u)))))))
S        SPI_0_OLED_FLASH_txBufferHead = 0u;
S        SPI_0_OLED_FLASH_txBufferTail = 0u;
N    #endif /* (SPI_0_OLED_FLASH_INTERNAL_TX_SW_BUFFER_CONST) */
N    }
N#endif /* (SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG) */
N
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_SpiPostEnable
N****************************************************************************//**
N*
N*  Restores HSIOM settings for the SPI master output pins (SCLK and/or SS0-SS3) 
N*  to be controlled by the SCB SPI.
N*
N*******************************************************************************/
Nvoid SPI_0_OLED_FLASH_SpiPostEnable(void)
N{
N#if(SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG)
X#if(((0xFFu) == (2u)))
S
S    if (SPI_0_OLED_FLASH_CHECK_SPI_MASTER)
S    {
S    #if (SPI_0_OLED_FLASH_CTS_SCLK_PIN)
S        /* Set SCB SPI to drive output pin */
S        SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_REG, SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_MASK,
S                                       SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_POS, SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_SEL_SPI);
S    #endif /* (SPI_0_OLED_FLASH_CTS_SCLK_PIN) */
S
S    #if (SPI_0_OLED_FLASH_RTS_SS0_PIN)
S        /* Set SCB SPI to drive output pin */
S        SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_RTS_SS0_HSIOM_REG, SPI_0_OLED_FLASH_RTS_SS0_HSIOM_MASK,
S                                       SPI_0_OLED_FLASH_RTS_SS0_HSIOM_POS, SPI_0_OLED_FLASH_RTS_SS0_HSIOM_SEL_SPI);
S    #endif /* (SPI_0_OLED_FLASH_RTS_SS0_PIN) */
S
S    #if (SPI_0_OLED_FLASH_SS1_PIN)
S        /* Set SCB SPI to drive output pin */
S        SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SS1_HSIOM_REG, SPI_0_OLED_FLASH_SS1_HSIOM_MASK,
S                                       SPI_0_OLED_FLASH_SS1_HSIOM_POS, SPI_0_OLED_FLASH_SS1_HSIOM_SEL_SPI);
S    #endif /* (SPI_0_OLED_FLASH_SS1_PIN) */
S
S    #if (SPI_0_OLED_FLASH_SS2_PIN)
S        /* Set SCB SPI to drive output pin */
S        SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SS2_HSIOM_REG, SPI_0_OLED_FLASH_SS2_HSIOM_MASK,
S                                       SPI_0_OLED_FLASH_SS2_HSIOM_POS, SPI_0_OLED_FLASH_SS2_HSIOM_SEL_SPI);
S    #endif /* (SPI_0_OLED_FLASH_SS2_PIN) */
S
S    #if (SPI_0_OLED_FLASH_SS3_PIN)
S        /* Set SCB SPI to drive output pin */
S        SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SS3_HSIOM_REG, SPI_0_OLED_FLASH_SS3_HSIOM_MASK,
S                                       SPI_0_OLED_FLASH_SS3_HSIOM_POS, SPI_0_OLED_FLASH_SS3_HSIOM_SEL_SPI);
S    #endif /* (SPI_0_OLED_FLASH_SS3_PIN) */
S    }
S
N#else
N
N    #if (SPI_0_OLED_FLASH_SPI_MASTER_SCLK_PIN)
X    #if ((0u == (0u)))
N        /* Set SCB SPI to drive output pin */
N        SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SCLK_M_HSIOM_REG, SPI_0_OLED_FLASH_SCLK_M_HSIOM_MASK,
N                                       SPI_0_OLED_FLASH_SCLK_M_HSIOM_POS, SPI_0_OLED_FLASH_SCLK_M_HSIOM_SEL_SPI);
X        do { ((*(reg32 *) 0x40020200u)) = ((((*(reg32 *) 0x40020200u)) & ((uint32) ~(uint32) ((0x00000F00u)))) | ((uint32) ((uint32) ((15u)) << ((8u))))); }while(0);
N    #endif /* (SPI_0_OLED_FLASH_MISO_SDA_TX_PIN_PIN) */
N
N    #if (SPI_0_OLED_FLASH_SPI_MASTER_SS0_PIN)
X    #if ((0u == (0u)))
N        /* Set SCB SPI to drive output pin */
N        SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SS0_M_HSIOM_REG, SPI_0_OLED_FLASH_SS0_M_HSIOM_MASK,
N                                       SPI_0_OLED_FLASH_SS0_M_HSIOM_POS, SPI_0_OLED_FLASH_SS0_M_HSIOM_SEL_SPI);
X        do { ((*(reg32 *) 0x40020200u)) = ((((*(reg32 *) 0x40020200u)) & ((uint32) ~(uint32) ((0x0000F000u)))) | ((uint32) ((uint32) ((15u)) << ((12u))))); }while(0);
N    #endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SS0_PIN) */
N
N    #if (SPI_0_OLED_FLASH_SPI_MASTER_SS1_PIN)
X    #if ((0u == (0u)))
N        /* Set SCB SPI to drive output pin */
N        SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SS1_M_HSIOM_REG, SPI_0_OLED_FLASH_SS1_M_HSIOM_MASK,
N                                       SPI_0_OLED_FLASH_SS1_M_HSIOM_POS, SPI_0_OLED_FLASH_SS1_M_HSIOM_SEL_SPI);
X        do { ((*(reg32 *) 0x40020200u)) = ((((*(reg32 *) 0x40020200u)) & ((uint32) ~(uint32) ((0x000F0000u)))) | ((uint32) ((uint32) ((15u)) << ((16u))))); }while(0);
N    #endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SS1_PIN) */
N
N    #if (SPI_0_OLED_FLASH_SPI_MASTER_SS2_PIN)
X    #if ((0u == (1u)))
S        /* Set SCB SPI to drive output pin */
S        SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SS2_M_HSIOM_REG, SPI_0_OLED_FLASH_SS2_M_HSIOM_MASK,
S                                       SPI_0_OLED_FLASH_SS2_M_HSIOM_POS, SPI_0_OLED_FLASH_SS2_M_HSIOM_SEL_SPI);
N    #endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SS2_PIN) */
N
N    #if (SPI_0_OLED_FLASH_SPI_MASTER_SS3_PIN)
X    #if ((0u == (1u)))
S        /* Set SCB SPI to drive output pin */
S        SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SS3_M_HSIOM_REG, SPI_0_OLED_FLASH_SS3_M_HSIOM_MASK,
S                                       SPI_0_OLED_FLASH_SS3_M_HSIOM_POS, SPI_0_OLED_FLASH_SS3_M_HSIOM_SEL_SPI);
N    #endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SS3_PIN) */
N
N#endif /* (SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG) */
N
N    /* Restore TX interrupt sources. */
N    SPI_0_OLED_FLASH_SetTxInterruptMode(SPI_0_OLED_FLASH_IntrTxMask);
X    do{ (*(reg32 *) 0x40250f88u) = (uint32) (SPI_0_OLED_FLASH_IntrTxMask); }while(0);
N}
N
N
N/*******************************************************************************
N* Function Name: SPI_0_OLED_FLASH_SpiStop
N****************************************************************************//**
N*
N*  Changes the HSIOM settings for the SPI master output pins 
N*  (SCLK and/or SS0-SS3) to keep them inactive after the block is disabled. 
N*  The output pins are controlled by the GPIO data register.
N*
N*******************************************************************************/
Nvoid SPI_0_OLED_FLASH_SpiStop(void)
N{
N#if(SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG)
X#if(((0xFFu) == (2u)))
S
S    if (SPI_0_OLED_FLASH_CHECK_SPI_MASTER)
S    {
S    #if (SPI_0_OLED_FLASH_CTS_SCLK_PIN)
S        /* Set output pin state after block is disabled */
S        SPI_0_OLED_FLASH_uart_cts_spi_sclk_Write(SPI_0_OLED_FLASH_GET_SPI_SCLK_INACTIVE);
S
S        /* Set GPIO to drive output pin */
S        SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_REG, SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_MASK,
S                                       SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_POS, SPI_0_OLED_FLASH_CTS_SCLK_HSIOM_SEL_GPIO);
S    #endif /* (SPI_0_OLED_FLASH_uart_cts_spi_sclk_PIN) */
S
S    #if (SPI_0_OLED_FLASH_RTS_SS0_PIN)
S        /* Set output pin state after block is disabled */
S        SPI_0_OLED_FLASH_uart_rts_spi_ss0_Write(SPI_0_OLED_FLASH_GET_SPI_SS0_INACTIVE);
S
S        /* Set GPIO to drive output pin */
S        SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_RTS_SS0_HSIOM_REG, SPI_0_OLED_FLASH_RTS_SS0_HSIOM_MASK,
S                                       SPI_0_OLED_FLASH_RTS_SS0_HSIOM_POS, SPI_0_OLED_FLASH_RTS_SS0_HSIOM_SEL_GPIO);
S    #endif /* (SPI_0_OLED_FLASH_uart_rts_spi_ss0_PIN) */
S
S    #if (SPI_0_OLED_FLASH_SS1_PIN)
S        /* Set output pin state after block is disabled */
S        SPI_0_OLED_FLASH_spi_ss1_Write(SPI_0_OLED_FLASH_GET_SPI_SS1_INACTIVE);
S
S        /* Set GPIO to drive output pin */
S        SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SS1_HSIOM_REG, SPI_0_OLED_FLASH_SS1_HSIOM_MASK,
S                                       SPI_0_OLED_FLASH_SS1_HSIOM_POS, SPI_0_OLED_FLASH_SS1_HSIOM_SEL_GPIO);
S    #endif /* (SPI_0_OLED_FLASH_SS1_PIN) */
S
S    #if (SPI_0_OLED_FLASH_SS2_PIN)
S        /* Set output pin state after block is disabled */
S        SPI_0_OLED_FLASH_spi_ss2_Write(SPI_0_OLED_FLASH_GET_SPI_SS2_INACTIVE);
S
S        /* Set GPIO to drive output pin */
S        SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SS2_HSIOM_REG, SPI_0_OLED_FLASH_SS2_HSIOM_MASK,
S                                       SPI_0_OLED_FLASH_SS2_HSIOM_POS, SPI_0_OLED_FLASH_SS2_HSIOM_SEL_GPIO);
S    #endif /* (SPI_0_OLED_FLASH_SS2_PIN) */
S
S    #if (SPI_0_OLED_FLASH_SS3_PIN)
S        /* Set output pin state after block is disabled */
S        SPI_0_OLED_FLASH_spi_ss3_Write(SPI_0_OLED_FLASH_GET_SPI_SS3_INACTIVE);
S
S        /* Set GPIO to drive output pin */
S        SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SS3_HSIOM_REG, SPI_0_OLED_FLASH_SS3_HSIOM_MASK,
S                                       SPI_0_OLED_FLASH_SS3_HSIOM_POS, SPI_0_OLED_FLASH_SS3_HSIOM_SEL_GPIO);
S    #endif /* (SPI_0_OLED_FLASH_SS3_PIN) */
S    
S        /* Store TX interrupt sources (exclude level triggered) for master. */
S        SPI_0_OLED_FLASH_IntrTxMask = LO16(SPI_0_OLED_FLASH_GetTxInterruptMode() & SPI_0_OLED_FLASH_INTR_SPIM_TX_RESTORE);
S    }
S    else
S    {
S        /* Store TX interrupt sources (exclude level triggered) for slave. */
S        SPI_0_OLED_FLASH_IntrTxMask = LO16(SPI_0_OLED_FLASH_GetTxInterruptMode() & SPI_0_OLED_FLASH_INTR_SPIS_TX_RESTORE);
S    }
S
N#else
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_SCLK_PIN)
X#if ((0u == (0u)))
N    /* Set output pin state after block is disabled */
N    SPI_0_OLED_FLASH_sclk_m_Write(SPI_0_OLED_FLASH_GET_SPI_SCLK_INACTIVE);
X    SPI_0_OLED_FLASH_sclk_m_Write(((0u == ((*(reg32 *) 0x40250020u) & ((uint32) 0x01u << (3u)))) ? (0u) : (1u)));
N
N    /* Set GPIO to drive output pin */
N    SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SCLK_M_HSIOM_REG, SPI_0_OLED_FLASH_SCLK_M_HSIOM_MASK,
N                                   SPI_0_OLED_FLASH_SCLK_M_HSIOM_POS, SPI_0_OLED_FLASH_SCLK_M_HSIOM_SEL_GPIO);
X    do { ((*(reg32 *) 0x40020200u)) = ((((*(reg32 *) 0x40020200u)) & ((uint32) ~(uint32) ((0x00000F00u)))) | ((uint32) ((uint32) ((0u)) << ((8u))))); }while(0);
N#endif /* (SPI_0_OLED_FLASH_MISO_SDA_TX_PIN_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_SS0_PIN)
X#if ((0u == (0u)))
N    /* Set output pin state after block is disabled */
N    SPI_0_OLED_FLASH_ss0_m_Write(SPI_0_OLED_FLASH_GET_SPI_SS0_INACTIVE);
X    SPI_0_OLED_FLASH_ss0_m_Write(((0u != ((*(reg32 *) 0x40250020u) & ((uint32) 0x01u << (8u)))) ? (0u) : (1u)));
N
N    /* Set GPIO to drive output pin */
N    SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SS0_M_HSIOM_REG, SPI_0_OLED_FLASH_SS0_M_HSIOM_MASK,
N                                   SPI_0_OLED_FLASH_SS0_M_HSIOM_POS, SPI_0_OLED_FLASH_SS0_M_HSIOM_SEL_GPIO);
X    do { ((*(reg32 *) 0x40020200u)) = ((((*(reg32 *) 0x40020200u)) & ((uint32) ~(uint32) ((0x0000F000u)))) | ((uint32) ((uint32) ((0u)) << ((12u))))); }while(0);
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SS0_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_SS1_PIN)
X#if ((0u == (0u)))
N    /* Set output pin state after block is disabled */
N    SPI_0_OLED_FLASH_ss1_m_Write(SPI_0_OLED_FLASH_GET_SPI_SS1_INACTIVE);
X    SPI_0_OLED_FLASH_ss1_m_Write(((0u != ((*(reg32 *) 0x40250020u) & ((uint32) 0x01u << (9u)))) ? (0u) : (1u)));
N
N    /* Set GPIO to drive output pin */
N    SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SS1_M_HSIOM_REG, SPI_0_OLED_FLASH_SS1_M_HSIOM_MASK,
N                                   SPI_0_OLED_FLASH_SS1_M_HSIOM_POS, SPI_0_OLED_FLASH_SS1_M_HSIOM_SEL_GPIO);
X    do { ((*(reg32 *) 0x40020200u)) = ((((*(reg32 *) 0x40020200u)) & ((uint32) ~(uint32) ((0x000F0000u)))) | ((uint32) ((uint32) ((0u)) << ((16u))))); }while(0);
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SS1_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_SS2_PIN)
X#if ((0u == (1u)))
S    /* Set output pin state after block is disabled */
S    SPI_0_OLED_FLASH_ss2_m_Write(SPI_0_OLED_FLASH_GET_SPI_SS2_INACTIVE);
S
S    /* Set GPIO to drive output pin */
S    SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SS2_M_HSIOM_REG, SPI_0_OLED_FLASH_SS2_M_HSIOM_MASK,
S                                   SPI_0_OLED_FLASH_SS2_M_HSIOM_POS, SPI_0_OLED_FLASH_SS2_M_HSIOM_SEL_GPIO);
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SS2_PIN) */
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_SS3_PIN)
X#if ((0u == (1u)))
S    /* Set output pin state after block is disabled */
S    SPI_0_OLED_FLASH_ss3_m_Write(SPI_0_OLED_FLASH_GET_SPI_SS3_INACTIVE);
S
S    /* Set GPIO to drive output pin */
S    SPI_0_OLED_FLASH_SET_HSIOM_SEL(SPI_0_OLED_FLASH_SS3_M_HSIOM_REG, SPI_0_OLED_FLASH_SS3_M_HSIOM_MASK,
S                                   SPI_0_OLED_FLASH_SS3_M_HSIOM_POS, SPI_0_OLED_FLASH_SS3_M_HSIOM_SEL_GPIO);
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_SS3_PIN) */
N
N    #if (SPI_0_OLED_FLASH_SPI_MASTER_CONST)
X    #if (((1u) == (1u)))
N        /* Store TX interrupt sources (exclude level triggered). */
N        SPI_0_OLED_FLASH_IntrTxMask = LO16(SPI_0_OLED_FLASH_GetTxInterruptMode() & SPI_0_OLED_FLASH_INTR_SPIM_TX_RESTORE);
X        SPI_0_OLED_FLASH_IntrTxMask = ((uint16) ((((*(reg32 *) 0x40250f88u)) & (((uint32) 0x01u << (5u)))) & 0xFFFFu));
N    #else
S        /* Store TX interrupt sources (exclude level triggered). */
S        SPI_0_OLED_FLASH_IntrTxMask = LO16(SPI_0_OLED_FLASH_GetTxInterruptMode() & SPI_0_OLED_FLASH_INTR_SPIS_TX_RESTORE);
N    #endif /* (SPI_0_OLED_FLASH_SPI_MASTER_CONST) */
N
N#endif /* (SPI_0_OLED_FLASH_SCB_MODE_UNCONFIG_CONST_CFG) */
N}
N
N
N#if (SPI_0_OLED_FLASH_SPI_MASTER_CONST)
X#if (((1u) == (1u)))
N    /*******************************************************************************
N    * Function Name: SPI_0_OLED_FLASH_SetActiveSlaveSelect
N    ****************************************************************************//**
N    *
N    *  Selects one of the four slave select lines to be active during the transfer.
N    *  After initialization the active slave select line is 0.
N    *  The component should be in one of the following states to change the active
N    *  slave select signal source correctly:
N    *   - The component is disabled.
N    *   - The component has completed transfer (TX FIFO is empty and the
N    *     SCB_INTR_MASTER_SPI_DONE status is set).
N    *
N    *  This function does not check that these conditions are met.
N    *  This function is only applicable to SPI Master mode of operation.
N    *
N    *  \param slaveSelect: slave select line which will be active while the following
N    *   transfer.
N    *   - SPI_0_OLED_FLASH_SPI_SLAVE_SELECT0 - Slave select 0.
N    *   - SPI_0_OLED_FLASH_SPI_SLAVE_SELECT1 - Slave select 1.
N    *   - SPI_0_OLED_FLASH_SPI_SLAVE_SELECT2 - Slave select 2.
N    *   - SPI_0_OLED_FLASH_SPI_SLAVE_SELECT3 - Slave select 3.
N    *
N    *******************************************************************************/
N    void SPI_0_OLED_FLASH_SpiSetActiveSlaveSelect(uint32 slaveSelect)
N    {
N        uint32 spiCtrl;
N
N        spiCtrl = SPI_0_OLED_FLASH_SPI_CTRL_REG;
X        spiCtrl = (*(reg32 *) 0x40250020u);
N
N        spiCtrl &= (uint32) ~SPI_0_OLED_FLASH_SPI_CTRL_SLAVE_SELECT_MASK;
X        spiCtrl &= (uint32) ~((uint32) 0x03u << (26u));
N        spiCtrl |= (uint32)  SPI_0_OLED_FLASH_GET_SPI_CTRL_SS(slaveSelect);
X        spiCtrl |= (uint32)  (((uint32) ((uint32) (slaveSelect) << (26u))) & ((uint32) 0x03u << (26u)));
N
N        SPI_0_OLED_FLASH_SPI_CTRL_REG = spiCtrl;
X        (*(reg32 *) 0x40250020u) = spiCtrl;
N    }
N#endif /* (SPI_0_OLED_FLASH_SPI_MASTER_CONST) */
N
N
N#if !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1)
X#if !((2 == 0u) || (2 == 1u))
N    /*******************************************************************************
N    * Function Name: SPI_0_OLED_FLASH_SpiSetSlaveSelectPolarity
N    ****************************************************************************//**
N    *
N    *  Sets active polarity for slave select line.
N    *  The component should be in one of the following states to change the active
N    *  slave select signal source correctly:
N    *   - The component is disabled.
N    *   - The component has completed transfer.
N    *  
N    *  This function does not check that these conditions are met.
N    *
N    *  \param slaveSelect: slave select line to change active polarity.
N    *   - SPI_0_OLED_FLASH_SPI_SLAVE_SELECT0 - Slave select 0.
N    *   - SPI_0_OLED_FLASH_SPI_SLAVE_SELECT1 - Slave select 1.
N    *   - SPI_0_OLED_FLASH_SPI_SLAVE_SELECT2 - Slave select 2.
N    *   - SPI_0_OLED_FLASH_SPI_SLAVE_SELECT3 - Slave select 3.
N    *
N    *  \param polarity: active polarity of slave select line.
N    *   - SPI_0_OLED_FLASH_SPI_SS_ACTIVE_LOW  - Slave select is active low.
N    *   - SPI_0_OLED_FLASH_SPI_SS_ACTIVE_HIGH - Slave select is active high.
N    *
N    *******************************************************************************/
N    void SPI_0_OLED_FLASH_SpiSetSlaveSelectPolarity(uint32 slaveSelect, uint32 polarity)
N    {
N        uint32 ssPolarity;
N
N        /* Get position of the polarity bit associated with slave select line */
N        ssPolarity = SPI_0_OLED_FLASH_GET_SPI_CTRL_SSEL_POLARITY((uint32) 1u << slaveSelect);
X        ssPolarity = (((uint32) ((uint32) 1u << slaveSelect) << (8u)) & ((uint32)0x0Fu << (8u)));
N
N        if (0u != polarity)
N        {
N            SPI_0_OLED_FLASH_SPI_CTRL_REG |= (uint32)  ssPolarity;
X            (*(reg32 *) 0x40250020u) |= (uint32)  ssPolarity;
N        }
N        else
N        {
N            SPI_0_OLED_FLASH_SPI_CTRL_REG &= (uint32) ~ssPolarity;
X            (*(reg32 *) 0x40250020u) &= (uint32) ~ssPolarity;
N        }
N    }
N#endif /* !(SPI_0_OLED_FLASH_CY_SCBIP_V0 || SPI_0_OLED_FLASH_CY_SCBIP_V1) */
N
N
N#if(SPI_0_OLED_FLASH_SPI_WAKE_ENABLE_CONST)
X#if((0u != (0u)))
S    /*******************************************************************************
S    * Function Name: SPI_0_OLED_FLASH_SpiSaveConfig
S    ****************************************************************************//**
S    *
S    *  Clears INTR_SPI_EC.WAKE_UP and enables it. This interrupt
S    *  source triggers when the master assigns the SS line and wakes up the device.
S    *
S    *******************************************************************************/
S    void SPI_0_OLED_FLASH_SpiSaveConfig(void)
S    {
S        /* Clear and enable SPI wakeup interrupt source */
S        SPI_0_OLED_FLASH_ClearSpiExtClkInterruptSource(SPI_0_OLED_FLASH_INTR_SPI_EC_WAKE_UP);
S        SPI_0_OLED_FLASH_SetSpiExtClkInterruptMode(SPI_0_OLED_FLASH_INTR_SPI_EC_WAKE_UP);
S    }
S
S
S    /*******************************************************************************
S    * Function Name: SPI_0_OLED_FLASH_SpiRestoreConfig
S    ****************************************************************************//**
S    *
S    *  Disables the INTR_SPI_EC.WAKE_UP interrupt source. After wakeup
S    *  slave does not drive the MISO line and the master receives 0xFF.
S    *
S    *******************************************************************************/
S    void SPI_0_OLED_FLASH_SpiRestoreConfig(void)
S    {
S        /* Disable SPI wakeup interrupt source */
S        SPI_0_OLED_FLASH_SetSpiExtClkInterruptMode(SPI_0_OLED_FLASH_NO_INTR_SOURCES);
S    }
N#endif /* (SPI_0_OLED_FLASH_SPI_WAKE_ENABLE_CONST) */
N
N
N/* [] END OF FILE */
